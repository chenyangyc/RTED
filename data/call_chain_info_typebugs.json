{
    "Zappa": {
        "Zappa-1434_cli": {
            "pytest tests/tests.py::TestZappa::test_certify_sanity_checks": [
                [
                    {
                        "function_name": "test_certify_sanity_checks",
                        "function_content": "def test_certify_sanity_checks(self):\n    \"\"\"\n        Make sure 'zappa certify':\n        * Errors out when a deployment hasn't taken place.\n        * Writes errors when certificate settings haven't been specified.\n        * Calls Zappa correctly for creates vs. updates.\n        \"\"\"\n    old_stdout = sys.stderr\n    if sys.version_info[0] < 3:\n        sys.stdout = OldStringIO()\n    try:\n        zappa_cli = ZappaCLI()\n        zappa_cli.domain = 'test.example.com'\n        try:\n            zappa_cli.certify()\n        except AttributeError:\n            pass\n        zappa_mock = mock.create_autospec(Zappa)\n        zappa_mock.function_versions = []\n        zappa_mock.domain_names = {}\n\n        def get_lambda_function_versions(_function_name, *_args, **_kwargs):\n            return zappa_mock.function_versions\n\n        def get_domain_name(domain, *_args, **_kwargs):\n            return zappa_mock.domain_names.get(domain)\n        zappa_mock.get_domain_name.side_effect = get_domain_name\n        zappa_mock.get_lambda_function_versions.side_effect = (\n            get_lambda_function_versions)\n        zappa_cli.zappa = zappa_mock\n        self.assertRaises(ClickException, zappa_cli.certify)\n        zappa_cli.zappa.function_versions = ['$LATEST']\n        zappa_cli.api_stage = 'stage'\n        zappa_cli.zappa_settings = {'stage': {}}\n        zappa_cli.api_stage = 'stage'\n        zappa_cli.domain = 'test.example.com'\n        try:\n            zappa_cli.certify()\n        except ClickException as e:\n            log_output = str(e)\n            self.assertIn(\"Can't certify a domain without\", log_output)\n            self.assertIn('domain', log_output)\n        zappa_cli.zappa_settings['stage']['domain'] = 'test.example.com'\n        try:\n            zappa_cli.certify()\n            self.fail('Expected a ClickException')\n        except ClickException as e:\n            log_output = str(e)\n            self.assertIn(\"Can't certify a domain without\", log_output)\n            self.assertIn('lets_encrypt_key', log_output)\n        zappa_cli.zappa_settings['stage']['certificate'] = 'foo'\n        try:\n            zappa_cli.certify()\n            self.fail('Expected a ClickException')\n        except ClickException as e:\n            log_output = str(e)\n            self.assertIn(\"Can't certify a domain without\", log_output)\n            self.assertIn('certificate_key', log_output)\n            self.assertIn('certificate_chain', log_output)\n        zappa_cli.zappa_settings['stage']['certificate_key'] = 'key'\n        try:\n            zappa_cli.certify()\n            self.fail('Expected a ClickException')\n        except ClickException as e:\n            log_output = str(e)\n            self.assertIn(\"Can't certify a domain without\", log_output)\n            self.assertIn('certificate_key', log_output)\n            self.assertIn('certificate_chain', log_output)\n        zappa_cli.zappa_settings['stage']['certificate_chain'] = 'chain'\n        del zappa_cli.zappa_settings['stage']['certificate_key']\n        try:\n            zappa_cli.certify()\n            self.fail('Expected a ClickException')\n        except ClickException as e:\n            log_output = str(e)\n            self.assertIn(\"Can't certify a domain without\", log_output)\n            self.assertIn('certificate_key', log_output)\n            self.assertIn('certificate_chain', log_output)\n        cert_file = tempfile.NamedTemporaryFile()\n        cert_file.write(b'Hello world')\n        cert_file.flush()\n        zappa_cli.zappa_settings['stage'].update({'certificate': cert_file.\n            name, 'certificate_key': cert_file.name, 'certificate_chain':\n            cert_file.name})\n        sys.stdout.truncate(0)\n        zappa_cli.certify()\n        zappa_cli.zappa.create_domain_name.assert_called_once()\n        zappa_cli.zappa.update_route53_records.assert_called_once()\n        zappa_cli.zappa.update_domain_name.assert_not_called()\n        log_output = sys.stdout.getvalue()\n        self.assertIn('Created a new domain name', log_output)\n        zappa_cli.zappa.reset_mock()\n        zappa_cli.zappa.domain_names['test.example.com'] = '*.example.com'\n        sys.stdout.truncate(0)\n        zappa_cli.certify()\n        zappa_cli.zappa.update_domain_name.assert_called_once()\n        zappa_cli.zappa.update_route53_records.assert_not_called()\n        zappa_cli.zappa.create_domain_name.assert_not_called()\n        log_output = sys.stdout.getvalue()\n        self.assertNotIn('Created a new domain name', log_output)\n        zappa_cli.zappa_settings['stage'].update({'route53_enabled': False})\n        zappa_cli.zappa.reset_mock()\n        zappa_cli.zappa.domain_names['test.example.com'] = ''\n        sys.stdout.truncate(0)\n        zappa_cli.certify()\n        zappa_cli.zappa.create_domain_name.assert_called_once()\n        zappa_cli.zappa.update_route53_records.assert_not_called()\n        zappa_cli.zappa.update_domain_name.assert_not_called()\n        log_output = sys.stdout.getvalue()\n        self.assertIn('Created a new domain name', log_output)\n    finally:\n        sys.stdout = old_stdout\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class TestZappa(unittest.TestCase):\n\n    def setUp(self):\n        self.sleep_patch = mock.patch('time.sleep', return_value=None)\n        self.users_current_region_name = os.environ.get('AWS_DEFAULT_REGION',\n            None)\n        os.environ['AWS_DEFAULT_REGION'] = 'us-east-1'\n        if not os.environ.get('PLACEBO_MODE') == 'record':\n            self.sleep_patch.start()\n\n    def tearDown(self):\n        if not os.environ.get('PLACEBO_MODE') == 'record':\n            self.sleep_patch.stop()\n        del os.environ['AWS_DEFAULT_REGION']\n        if self.users_current_region_name is not None:\n            os.environ['AWS_DEFAULT_REGION'] = self.users_current_region_name\n\n    def test_test(self):\n        self.assertTrue(True)\n\n    def test_zappa(self):\n        self.assertTrue(True)\n        Zappa()\n\n    def test_disable_click_colors(self):\n        disable_click_colors()\n        assert resolve_color_default() is False\n\n    def test_create_lambda_package(self):\n        mock_installed_packages = {'psycopg2': '2.6.1'}\n        with mock.patch('zappa.core.Zappa.get_installed_packages',\n            return_value=mock_installed_packages):\n            z = Zappa(runtime='python2.7')\n            path = z.create_lambda_zip(handler_file=os.path.realpath(__file__))\n            self.assertTrue(os.path.isfile(path))\n            os.remove(path)\n\n    def test_get_manylinux_python27(self):\n        z = Zappa(runtime='python2.7')\n        self.assertIsNotNone(z.get_cached_manylinux_wheel('cffi', '1.10.0'))\n        self.assertIsNone(z.get_cached_manylinux_wheel('derpderpderpderp',\n            '0.0'))\n        mock_installed_packages = {'cffi': '1.10.0'}\n        with mock.patch('zappa.core.Zappa.get_installed_packages',\n            return_value=mock_installed_packages):\n            z = Zappa(runtime='python2.7')\n            path = z.create_lambda_zip(handler_file=os.path.realpath(__file__))\n            self.assertTrue(os.path.isfile(path))\n            os.remove(path)\n\n    def test_get_manylinux_python36(self):\n        z = Zappa(runtime='python3.6')\n        self.assertIsNotNone(z.get_cached_manylinux_wheel('psycopg2', '2.7.1'))\n        self.assertIsNone(z.get_cached_manylinux_wheel('derpderpderpderp',\n            '0.0'))\n        mock_installed_packages = {'psycopg2': '2.7.1'}\n        with mock.patch('zappa.core.Zappa.get_installed_packages',\n            return_value=mock_installed_packages):\n            z = Zappa(runtime='python3.6')\n            path = z.create_lambda_zip(handler_file=os.path.realpath(__file__))\n            self.assertTrue(os.path.isfile(path))\n            os.remove(path)\n\n    def test_should_use_lambda_packages(self):\n        z = Zappa(runtime='python2.7')\n        self.assertTrue(z.have_correct_lambda_package_version('psycopg2',\n            '2.6.1'))\n        self.assertFalse(z.have_correct_lambda_package_version('psycopg2',\n            '2.7.1'))\n        self.assertTrue(z.have_correct_lambda_package_version(\n            'mysql-python', '1.2.5'))\n        self.assertFalse(z.have_correct_lambda_package_version(\n            'mysql-python', '6.6.6'))\n        self.assertTrue(z.have_any_lambda_package_version('psycopg2'))\n        self.assertTrue(z.have_any_lambda_package_version('mysql-python'))\n        self.assertFalse(z.have_any_lambda_package_version('no_package'))\n\n    def test_getting_installed_packages(self, *args):\n        z = Zappa(runtime='python2.7')\n        mock_package = collections.namedtuple('mock_package', [\n            'project_name', 'version', 'location'])\n        mock_pip_installed_packages = [mock_package('super_package', '0.1',\n            '/venv/site-packages')]\n        with mock.patch('os.path.isdir', return_value=True):\n            with mock.patch('os.listdir', return_value=['super_package']):\n                import pip\n                with mock.patch('pip.get_installed_distributions',\n                    return_value=mock_pip_installed_packages):\n                    self.assertDictEqual(z.get_installed_packages('', ''),\n                        {'super_package': '0.1'})\n\n    def test_getting_installed_packages_mixed_case(self, *args):\n        z = Zappa(runtime='python2.7')\n        mock_package = collections.namedtuple('mock_package', [\n            'project_name', 'version', 'location'])\n        mock_pip_installed_packages = [mock_package('SuperPackage', '0.1',\n            '/venv/site-packages')]\n        with mock.patch('os.path.isdir', return_value=True):\n            with mock.patch('os.listdir', return_value=['superpackage']):\n                import pip\n                with mock.patch('pip.get_installed_distributions',\n                    return_value=mock_pip_installed_packages):\n                    self.assertDictEqual(z.get_installed_packages('', ''),\n                        {'superpackage': '0.1'})\n\n    def test_load_credentials(self):\n        z = Zappa()\n        z.aws_region = 'us-east-1'\n        z.load_credentials()\n        self.assertEqual(z.boto_session.region_name, 'us-east-1')\n        self.assertEqual(z.aws_region, 'us-east-1')\n        z.aws_region = 'eu-west-1'\n        z.profile_name = 'default'\n        z.load_credentials()\n        self.assertEqual(z.boto_session.region_name, 'eu-west-1')\n        self.assertEqual(z.aws_region, 'eu-west-1')\n        creds = {'AWS_ACCESS_KEY_ID': 'AK123', 'AWS_SECRET_ACCESS_KEY':\n            'JKL456', 'AWS_DEFAULT_REGION': 'us-west-1'}\n        with mock.patch.dict('os.environ', creds):\n            z.aws_region = None\n            z.load_credentials()\n            loaded_creds = z.boto_session._session.get_credentials()\n        self.assertEqual(loaded_creds.access_key, 'AK123')\n        self.assertEqual(loaded_creds.secret_key, 'JKL456')\n        self.assertEqual(z.boto_session.region_name, 'us-west-1')\n\n    def test_create_api_gateway_routes_with_different_auth_methods(self):\n        z = Zappa()\n        z.parameter_depth = 1\n        z.integration_response_codes = [200]\n        z.method_response_codes = [200]\n        z.http_methods = ['GET']\n        z.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n        lambda_arn = 'arn:aws:lambda:us-east-1:12345:function:helloworld'\n        z.create_stack_template(lambda_arn, 'helloworld', False, False, None)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('NONE', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('NONE', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual(False, parsable_template['Resources']['GET0'][\n            'Properties']['ApiKeyRequired'])\n        self.assertEqual(False, parsable_template['Resources']['GET1'][\n            'Properties']['ApiKeyRequired'])\n        z.create_stack_template(lambda_arn, 'helloworld', False, True, None)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual(False, parsable_template['Resources']['GET0'][\n            'Properties']['ApiKeyRequired'])\n        self.assertEqual(False, parsable_template['Resources']['GET1'][\n            'Properties']['ApiKeyRequired'])\n        z.create_stack_template(lambda_arn, 'helloworld', False, True, None,\n            True)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('NONE', parsable_template['Resources']['OPTIONS0']\n            ['Properties']['AuthorizationType'])\n        self.assertEqual('NONE', parsable_template['Resources']['OPTIONS1']\n            ['Properties']['AuthorizationType'])\n        self.assertEqual('MOCK', parsable_template['Resources']['OPTIONS0']\n            ['Properties']['Integration']['Type'])\n        self.assertEqual('MOCK', parsable_template['Resources']['OPTIONS1']\n            ['Properties']['Integration']['Type'])\n        self.assertEqual(\n            \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n            , parsable_template['Resources']['OPTIONS0']['Properties'][\n            'Integration']['IntegrationResponses'][0]['ResponseParameters']\n            ['method.response.header.Access-Control-Allow-Headers'])\n        self.assertEqual(\n            \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n            , parsable_template['Resources']['OPTIONS1']['Properties'][\n            'Integration']['IntegrationResponses'][0]['ResponseParameters']\n            ['method.response.header.Access-Control-Allow-Headers'])\n        self.assertTrue(parsable_template['Resources']['OPTIONS0'][\n            'Properties']['MethodResponses'][0]['ResponseParameters'][\n            'method.response.header.Access-Control-Allow-Headers'])\n        self.assertTrue(parsable_template['Resources']['OPTIONS1'][\n            'Properties']['MethodResponses'][0]['ResponseParameters'][\n            'method.response.header.Access-Control-Allow-Headers'])\n        self.assertEqual(False, parsable_template['Resources']['GET0'][\n            'Properties']['ApiKeyRequired'])\n        self.assertEqual(False, parsable_template['Resources']['GET1'][\n            'Properties']['ApiKeyRequired'])\n        z.create_stack_template(lambda_arn, 'helloworld', True, True, None)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual(True, parsable_template['Resources']['GET0'][\n            'Properties']['ApiKeyRequired'])\n        self.assertEqual(True, parsable_template['Resources']['GET1'][\n            'Properties']['ApiKeyRequired'])\n        authorizer = {'function':\n            'runapi.authorization.gateway_authorizer.evaluate_token',\n            'result_ttl': 300, 'token_header': 'Authorization',\n            'validation_expression': 'xxx'}\n        z.create_stack_template(lambda_arn, 'helloworld', False, True,\n            authorizer)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        with self.assertRaises(KeyError):\n            parsable_template['Resources']['Authorizer']\n        invocations_uri = (\n            'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/' +\n            lambda_arn + '/invocations')\n        z.create_stack_template(lambda_arn, 'helloworld', False, False,\n            authorizer)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('CUSTOM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('CUSTOM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('TOKEN', parsable_template['Resources'][\n            'Authorizer']['Properties']['Type'])\n        self.assertEqual('ZappaAuthorizer', parsable_template['Resources'][\n            'Authorizer']['Properties']['Name'])\n        self.assertEqual(300, parsable_template['Resources']['Authorizer'][\n            'Properties']['AuthorizerResultTtlInSeconds'])\n        self.assertEqual(invocations_uri, parsable_template['Resources'][\n            'Authorizer']['Properties']['AuthorizerUri'])\n        self.assertEqual(z.credentials_arn, parsable_template['Resources'][\n            'Authorizer']['Properties']['AuthorizerCredentials'])\n        self.assertEqual('xxx', parsable_template['Resources']['Authorizer'\n            ]['Properties']['IdentityValidationExpression'])\n        authorizer.pop('validation_expression', None)\n        z.create_stack_template(lambda_arn, 'helloworld', False, False,\n            authorizer)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('CUSTOM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('CUSTOM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('TOKEN', parsable_template['Resources'][\n            'Authorizer']['Properties']['Type'])\n        with self.assertRaises(KeyError):\n            parsable_template['Resources']['Authorizer']['Properties'][\n                'IdentityValidationExpression']\n        authorizer = {'arn':\n            'arn:aws:lambda:us-east-1:123456789012:function:my-function'}\n        z.create_stack_template(lambda_arn, 'helloworld', False, False,\n            authorizer)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual(\n            'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:123456789012:function:my-function/invocations'\n            , parsable_template['Resources']['Authorizer']['Properties'][\n            'AuthorizerUri'])\n\n    def test_policy_json(self):\n        json.loads(ASSUME_POLICY)\n        json.loads(ATTACH_POLICY)\n\n    def test_schedule_events(self):\n        z = Zappa()\n        path = os.getcwd()\n\n    def test_update_aws_env_vars(self):\n        z = Zappa()\n        z.credentials_arn = object()\n        with mock.patch.object(z, 'lambda_client') as mock_client:\n            mock_client.get_function_configuration.return_value = {\n                'Environment': {'Variables': {'REMOTE_ONLY': 'AAA',\n                'CHANGED_REMOTE': 'BBB'}}}\n            z.update_lambda_configuration('test', 'test', 'test',\n                aws_environment_variables={'CHANGED_REMOTE': 'ZZ',\n                'LOCAL_ONLY': 'YY'})\n            end_result_should_be = {'REMOTE_ONLY': 'AAA', 'CHANGED_REMOTE':\n                'ZZ', 'LOCAL_ONLY': 'YY'}\n            self.assertEqual(mock_client.update_function_configuration.\n                call_args[1]['Environment'], {'Variables':\n                end_result_should_be})\n        with mock.patch.object(z, 'lambda_client') as mock_client:\n            mock_client.get_function_configuration.return_value = {\n                'Environment': {'Variables': {'REMOTE_ONLY_1': 'AAA',\n                'REMOTE_ONLY_2': 'BBB'}}}\n            z.update_lambda_configuration('test', 'test', 'test')\n            end_result_should_be = {'REMOTE_ONLY_1': 'AAA', 'REMOTE_ONLY_2':\n                'BBB'}\n            self.assertEqual(mock_client.update_function_configuration.\n                call_args[1]['Environment'], {'Variables':\n                end_result_should_be})\n\n    def test_update_empty_aws_env_hash(self):\n        z = Zappa()\n        z.credentials_arn = object()\n        with mock.patch.object(z, 'lambda_client') as mock_client:\n            mock_client.get_function_configuration.return_value = {}\n            z.update_lambda_configuration('test', 'test', 'test',\n                aws_environment_variables={'LOCAL_ONLY': 'LZ',\n                'SHOW_AND_TELL': 'SHA'})\n            end_result_should_be = {'LOCAL_ONLY': 'LZ', 'SHOW_AND_TELL': 'SHA'}\n            self.assertEqual(mock_client.update_function_configuration.\n                call_args[1]['Environment'], {'Variables':\n                end_result_should_be})\n\n    def test_logging(self):\n        \"\"\"\n        TODO\n        \"\"\"\n        Zappa()\n\n    def test_wsgi_event(self):\n        event = {u'body': None, u'resource': u'/', u'requestContext': {\n            u'resourceId': u'6cqjw9qu0b', u'apiId': u'9itr2lba55',\n            u'resourcePath': u'/', u'httpMethod': u'GET', u'requestId':\n            u'c17cb1bf-867c-11e6-b938-ed697406e3b5', u'accountId':\n            u'724336686645', u'identity': {u'apiKey': None, u'userArn':\n            None, u'cognitoAuthenticationType': None, u'caller': None,\n            u'userAgent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0'\n            , u'user': None, u'cognitoIdentityPoolId': None,\n            u'cognitoIdentityId': None, u'cognitoAuthenticationProvider':\n            None, u'sourceIp': u'50.191.225.98', u'accountId': None},\n            u'stage': u'devorr'}, u'queryStringParameters': None,\n            u'httpMethod': u'GET', u'pathParameters': None, u'headers': {\n            u'Via':\n            u'1.1 6801928d54163af944bf854db8d5520e.cloudfront.net (CloudFront)'\n            , u'Accept-Language': u'en-US,en;q=0.5', u'Accept-Encoding':\n            u'gzip, deflate, br', u'CloudFront-Is-SmartTV-Viewer': u'false',\n            u'CloudFront-Forwarded-Proto': u'https', u'X-Forwarded-For':\n            u'50.191.225.98, 204.246.168.101', u'CloudFront-Viewer-Country':\n            u'US', u'Accept':\n            u'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            u'Upgrade-Insecure-Requests': u'1', u'Host':\n            u'9itr2lba55.execute-api.us-east-1.amazonaws.com',\n            u'X-Forwarded-Proto': u'https', u'X-Amz-Cf-Id':\n            u'qgNdqKT0_3RMttu5KjUdnvHI3OKm1BWF8mGD2lX8_rVrJQhhp-MLDw==',\n            u'CloudFront-Is-Tablet-Viewer': u'false', u'X-Forwarded-Port':\n            u'443', u'User-Agent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0'\n            , u'CloudFront-Is-Mobile-Viewer': u'false',\n            u'CloudFront-Is-Desktop-Viewer': u'true'}, u'stageVariables':\n            None, u'path': u'/'}\n        request = create_wsgi_request(event)\n\n    def test_wsgi_path_info_unquoted(self):\n        event = {'body': {}, 'headers': {}, 'pathParameters': {}, 'path':\n            '/path%3A1', 'httpMethod': 'GET', 'queryStringParameters': {},\n            'requestContext': {}}\n        request = create_wsgi_request(event, trailing_slash=True)\n        self.assertEqual('/path:1', request['PATH_INFO'])\n\n    def test_wsgi_latin1(self):\n        event = {'body': {}, 'headers': {}, 'pathParameters': {}, 'path':\n            '/path/%E4%BB%8A%E6%97%A5%E3%81%AF', 'httpMethod': 'GET',\n            'queryStringParameters': {'a': '%E4%BB%8A%E6%97%A5%E3%81%AF'},\n            'requestContext': {}}\n        request = create_wsgi_request(event, script_name=\n            '%E4%BB%8A%E6%97%A5%E3%81%AF')\n        request['PATH_INFO'].encode('iso-8859-1')\n        request['QUERY_STRING'].encode('iso-8859-1')\n        request['SCRIPT_NAME'].encode('iso-8859-1')\n\n    def test_wsgi_logging(self):\n        event = {u'body': None, u'resource': u'/{proxy+}',\n            u'requestContext': {u'resourceId': u'dg451y', u'apiId':\n            u'79gqbxq31c', u'resourcePath': u'/{proxy+}', u'httpMethod':\n            u'GET', u'requestId': u'766df67f-8991-11e6-b2c4-d120fedb94e5',\n            u'accountId': u'724336686645', u'identity': {u'apiKey': None,\n            u'userArn': None, u'cognitoAuthenticationType': None, u'caller':\n            None, u'userAgent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:49.0) Gecko/20100101 Firefox/49.0'\n            , u'user': None, u'cognitoIdentityPoolId': None,\n            u'cognitoIdentityId': None, u'cognitoAuthenticationProvider':\n            None, u'sourceIp': u'96.90.37.59', u'accountId': None},\n            u'stage': u'devorr'}, u'queryStringParameters': None,\n            u'httpMethod': u'GET', u'pathParameters': {u'proxy':\n            u'asdf1/asdf2'}, u'headers': {u'Via':\n            u'1.1 b2aeb492548a8a2d4036401355f928dd.cloudfront.net (CloudFront)'\n            , u'Accept-Language': u'en-US,en;q=0.5', u'Accept-Encoding':\n            u'gzip, deflate, br', u'X-Forwarded-Port': u'443',\n            u'X-Forwarded-For': u'96.90.37.59, 54.240.144.50',\n            u'CloudFront-Viewer-Country': u'US', u'Accept':\n            u'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            u'Upgrade-Insecure-Requests': u'1', u'Host':\n            u'79gqbxq31c.execute-api.us-east-1.amazonaws.com',\n            u'X-Forwarded-Proto': u'https', u'X-Amz-Cf-Id':\n            u'BBFP-RhGDrQGOzoCqjnfB2I_YzWt_dac9S5vBcSAEaoM4NfYhAQy7Q==',\n            u'User-Agent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:49.0) Gecko/20100101 Firefox/49.0'\n            , u'CloudFront-Forwarded-Proto': u'https'}, u'stageVariables':\n            None, u'path': u'/asdf1/asdf2'}\n        environ = create_wsgi_request(event, trailing_slash=False)\n        response_tuple = collections.namedtuple('Response', ['status_code',\n            'content'])\n        response = response_tuple(200, 'hello')\n        le = common_log(environ, response, response_time=True)\n        le = common_log(environ, response, response_time=False)\n\n    def test_wsgi_multipart(self):\n        event = {u'body':\n            u'LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS03Njk1MjI4NDg0Njc4MTc2NTgwNjMwOTYxDQpDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9Im15c3RyaW5nIg0KDQpkZGQNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tNzY5NTIyODQ4NDY3ODE3NjU4MDYzMDk2MS0tDQo='\n            , u'resource': u'/', u'requestContext': {u'resourceId':\n            u'6cqjw9qu0b', u'apiId': u'9itr2lba55', u'resourcePath': u'/',\n            u'httpMethod': u'POST', u'requestId':\n            u'c17cb1bf-867c-11e6-b938-ed697406e3b5', u'accountId':\n            u'724336686645', u'identity': {u'apiKey': None, u'userArn':\n            None, u'cognitoAuthenticationType': None, u'caller': None,\n            u'userAgent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0'\n            , u'user': None, u'cognitoIdentityPoolId': None,\n            u'cognitoIdentityId': None, u'cognitoAuthenticationProvider':\n            None, u'sourceIp': u'50.191.225.98', u'accountId': None},\n            u'stage': u'devorr'}, u'queryStringParameters': None,\n            u'httpMethod': u'POST', u'pathParameters': None, u'headers': {\n            u'Content-Type':\n            u'multipart/form-data; boundary=---------------------------7695228484678176580630961'\n            , u'Via':\n            u'1.1 38205a04d96d60185e88658d3185ccee.cloudfront.net (CloudFront)'\n            , u'Accept-Language': u'en-US,en;q=0.5', u'Accept-Encoding':\n            u'gzip, deflate, br', u'CloudFront-Is-SmartTV-Viewer': u'false',\n            u'CloudFront-Forwarded-Proto': u'https', u'X-Forwarded-For':\n            u'71.231.27.57, 104.246.180.51', u'CloudFront-Viewer-Country':\n            u'US', u'Accept':\n            u'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            u'User-Agent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:45.0) Gecko/20100101 Firefox/45.0'\n            , u'Host': u'xo2z7zafjh.execute-api.us-east-1.amazonaws.com',\n            u'X-Forwarded-Proto': u'https', u'Cookie': u'zappa=AQ4',\n            u'CloudFront-Is-Tablet-Viewer': u'false', u'X-Forwarded-Port':\n            u'443', u'Referer':\n            u'https://xo8z7zafjh.execute-api.us-east-1.amazonaws.com/former/post'\n            , u'CloudFront-Is-Mobile-Viewer': u'false', u'X-Amz-Cf-Id':\n            u'31zxcUcVyUxBOMk320yh5NOhihn5knqrlYQYpGGyOngKKwJb0J0BAQ==',\n            u'CloudFront-Is-Desktop-Viewer': u'true'}, u'stageVariables':\n            None, u'path': u'/'}\n        environ = create_wsgi_request(event, trailing_slash=False)\n        response_tuple = collections.namedtuple('Response', ['status_code',\n            'content'])\n        response = response_tuple(200, 'hello')\n\n    def test_wsgi_without_body(self):\n        event = {u'body': None, u'resource': u'/', u'requestContext': {\n            u'resourceId': u'6cqjw9qu0b', u'apiId': u'9itr2lba55',\n            u'resourcePath': u'/', u'httpMethod': u'POST', u'requestId':\n            u'c17cb1bf-867c-11e6-b938-ed697406e3b5', u'accountId':\n            u'724336686645', u'identity': {u'apiKey': None, u'userArn':\n            None, u'cognitoAuthenticationType': None, u'caller': None,\n            u'userAgent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0'\n            , u'user': None, u'cognitoIdentityPoolId': None,\n            u'cognitoIdentityId': None, u'cognitoAuthenticationProvider':\n            None, u'sourceIp': u'50.191.225.98', u'accountId': None},\n            u'stage': u'devorr'}, u'queryStringParameters': None,\n            u'httpMethod': u'POST', u'pathParameters': None, u'headers': {\n            u'Via':\n            u'1.1 38205a04d96d60185e88658d3185ccee.cloudfront.net (CloudFront)'\n            , u'Accept-Language': u'en-US,en;q=0.5', u'Accept-Encoding':\n            u'gzip, deflate, br', u'CloudFront-Is-SmartTV-Viewer': u'false',\n            u'CloudFront-Forwarded-Proto': u'https', u'X-Forwarded-For':\n            u'71.231.27.57, 104.246.180.51', u'CloudFront-Viewer-Country':\n            u'US', u'Accept':\n            u'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            u'User-Agent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:45.0) Gecko/20100101 Firefox/45.0'\n            , u'Host': u'xo2z7zafjh.execute-api.us-east-1.amazonaws.com',\n            u'X-Forwarded-Proto': u'https', u'Cookie': u'zappa=AQ4',\n            u'CloudFront-Is-Tablet-Viewer': u'false', u'X-Forwarded-Port':\n            u'443', u'Referer':\n            u'https://xo8z7zafjh.execute-api.us-east-1.amazonaws.com/former/post'\n            , u'CloudFront-Is-Mobile-Viewer': u'false', u'X-Amz-Cf-Id':\n            u'31zxcUcVyUxBOMk320yh5NOhihn5knqrlYQYpGGyOngKKwJb0J0BAQ==',\n            u'CloudFront-Is-Desktop-Viewer': u'true'}, u'stageVariables':\n            None, u'path': u'/', u'isBase64Encoded': True}\n        environ = create_wsgi_request(event, trailing_slash=False)\n        response_tuple = collections.namedtuple('Response', ['status_code',\n            'content'])\n        response = response_tuple(200, 'hello')\n\n    def test_wsgi_from_apigateway_testbutton(self):\n        \"\"\"\n        API Gateway resources have a \"test bolt\" button on methods.\n        This button sends some empty dicts as 'null' instead of '{}'.\n        \"\"\"\n        event = {'resource': '/', 'path': '/', 'httpMethod': 'GET',\n            'headers': None, 'queryStringParameters': None,\n            'pathParameters': None, 'stageVariables': None,\n            'requestContext': {'accountId': '0123456', 'resourceId':\n            'qwertyasdf', 'stage': 'test-invoke-stage', 'requestId':\n            'test-invoke-request', 'identity': {'cognitoIdentityPoolId':\n            None, 'accountId': '0123456', 'cognitoIdentityId': None,\n            'caller': 'MYCALLERID', 'apiKey': 'test-invoke-api-key',\n            'sourceIp': 'test-invoke-source-ip', 'accessKey': 'MYACCESSKEY',\n            'cognitoAuthenticationType': None,\n            'cognitoAuthenticationProvider': None, 'userArn':\n            'arn:aws:iam::fooo:user/my.username', 'userAgent':\n            'Apache-HttpClient/4.5.x (Java/1.8.0_112)', 'user':\n            'MYCALLERID'}, 'resourcePath': '/', 'httpMethod': 'GET',\n            'apiId': 'myappid'}, 'body': None, 'isBase64Encoded': False}\n        environ = create_wsgi_request(event, trailing_slash=False)\n        response_tuple = collections.namedtuple('Response', ['status_code',\n            'content'])\n        response = response_tuple(200, 'hello')\n\n    def test_cli_sanity(self):\n        zappa_cli = ZappaCLI()\n        return\n\n    def test_load_settings(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('test_settings.json')\n        self.assertEqual(False, zappa_cli.stage_config['touch'])\n\n    def test_load_extended_settings(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'extendo'\n        zappa_cli.load_settings('test_settings.json')\n        self.assertEqual('lmbda', zappa_cli.stage_config['s3_bucket'])\n        self.assertEqual(True, zappa_cli.stage_config['touch'])\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'extendofail'\n        with self.assertRaises(ClickException):\n            zappa_cli.load_settings('test_settings.json')\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        with self.assertRaises(RuntimeError):\n            zappa_cli.load_settings(\n                'tests/test_bad_circular_extends_settings.json')\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'extendo2'\n        zappa_cli.load_settings('test_settings.json')\n        self.assertEqual('lmbda2', zappa_cli.stage_config['s3_bucket'])\n        self.assertTrue(zappa_cli.stage_config['touch'])\n        self.assertTrue(zappa_cli.stage_config['delete_local_zip'])\n\n    def test_load_settings_yml(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('tests/test_settings.yml')\n        self.assertEqual(False, zappa_cli.stage_config['touch'])\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'extendo'\n        zappa_cli.load_settings('tests/test_settings.yml')\n        self.assertEqual('lmbda', zappa_cli.stage_config['s3_bucket'])\n        self.assertEqual(True, zappa_cli.stage_config['touch'])\n\n    def test_load_settings_yaml(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('tests/test_settings.yaml')\n        self.assertEqual(False, zappa_cli.stage_config['touch'])\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'extendo'\n        zappa_cli.load_settings('tests/test_settings.yaml')\n        self.assertEqual('lmbda', zappa_cli.stage_config['s3_bucket'])\n        self.assertEqual(True, zappa_cli.stage_config['touch'])\n\n    def test_load_settings_toml(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('tests/test_settings.toml')\n        self.assertEqual(False, zappa_cli.stage_config['touch'])\n\n    def test_settings_extension(self):\n        \"\"\"\n        Make sure Zappa uses settings in the proper order: JSON, TOML, YAML.\n        \"\"\"\n        tempdir = tempfile.mkdtemp(prefix='zappa-test-settings')\n        shutil.copy('tests/test_one_env.json', tempdir + '/zappa_settings.json'\n            )\n        shutil.copy('tests/test_settings.yml', tempdir + '/zappa_settings.yml')\n        shutil.copy('tests/test_settings.yml', tempdir + '/zappa_settings.yaml'\n            )\n        shutil.copy('tests/test_settings.toml', tempdir +\n            '/zappa_settings.toml')\n        orig_cwd = os.getcwd()\n        os.chdir(tempdir)\n        try:\n            zappa_cli = ZappaCLI()\n            self.assertEqual(zappa_cli.get_json_or_yaml_settings(),\n                'zappa_settings.json')\n            zappa_cli.load_settings_file()\n            self.assertIn('lonely', zappa_cli.zappa_settings)\n            os.unlink('zappa_settings.json')\n            self.assertEqual(zappa_cli.get_json_or_yaml_settings(),\n                'zappa_settings.toml')\n            zappa_cli.load_settings_file()\n            self.assertIn('ttt888', zappa_cli.zappa_settings)\n            self.assertNotIn('devor', zappa_cli.zappa_settings)\n            os.unlink('zappa_settings.toml')\n            self.assertEqual(zappa_cli.get_json_or_yaml_settings(),\n                'zappa_settings.yml')\n            zappa_cli.load_settings_file()\n            self.assertIn('ttt888', zappa_cli.zappa_settings)\n            self.assertIn('devor', zappa_cli.zappa_settings)\n            os.unlink('zappa_settings.yml')\n            self.assertEqual(zappa_cli.get_json_or_yaml_settings(),\n                'zappa_settings.yaml')\n            zappa_cli.load_settings_file()\n            self.assertIn('ttt888', zappa_cli.zappa_settings)\n            self.assertIn('devor', zappa_cli.zappa_settings)\n            os.unlink('zappa_settings.yaml')\n            self.assertRaises(ClickException, zappa_cli.\n                get_json_or_yaml_settings)\n        finally:\n            os.chdir(orig_cwd)\n            shutil.rmtree(tempdir)\n\n    def test_cli_utility(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('test_settings.json')\n        zappa_cli.create_package()\n        zappa_cli.remove_local_zip()\n        logs = [{'timestamp': '12345', 'message': '[START RequestId] test'},\n            {'timestamp': '12345', 'message': '[REPORT RequestId] test'}, {\n            'timestamp': '12345', 'message': '[END RequestId] test'}, {\n            'timestamp': '12345', 'message': 'test'}, {'timestamp':\n            '1480001341214', 'message':\n            '[INFO] 2016-11-24T15:29:13.326Z c0cb52d1-b25a-11e6-9b73-f940ce24319a 59.111.125.48 - -  [24/Nov/2016:15:29:13 +0000] \"GET / HTTP/1.1\" 200 2590 \"\" \"python-requests/2.11.0\" 0/4.672'\n            }, {'timestamp': '1480001341214', 'message':\n            '[INFO] 2016-11-24T15:29:13.326Z c0cb52d1-b25a-11e6-9b73-f940ce24319a 59.111.125.48 - -  [24/Nov/2016:15:29:13 +0000] \"GET / HTTP/1.1\" 400 2590 \"\" \"python-requests/2.11.0\" 0/4.672'\n            }, {'timestamp': '1480001341215', 'message':\n            '[1480001341258] [DEBUG] 2016-11-24T15:29:01.258Z b890d8f6-b25a-11e6-b6bc-718f7ec807df Zappa Event: {}'\n            }]\n        zappa_cli.print_logs(logs)\n        zappa_cli.print_logs(logs, colorize=False)\n        zappa_cli.print_logs(logs, colorize=False, http=True)\n        zappa_cli.print_logs(logs, colorize=True, http=True)\n        zappa_cli.print_logs(logs, colorize=True, http=False)\n        zappa_cli.print_logs(logs, colorize=True, non_http=True)\n        zappa_cli.print_logs(logs, colorize=True, non_http=False)\n        zappa_cli.print_logs(logs, colorize=True, non_http=True, http=True)\n        zappa_cli.print_logs(logs, colorize=True, non_http=False, http=False)\n        zappa_cli.print_logs(logs, colorize=False, force_colorize=False)\n        zappa_cli.print_logs(logs, colorize=False, force_colorize=True)\n        zappa_cli.print_logs(logs, colorize=True, force_colorize=False)\n        zappa_cli.print_logs(logs, colorize=True, non_http=False, http=\n            False, force_colorize=True)\n        zappa_cli.check_for_update()\n\n    def test_cli_format_invoke_command(self):\n        zappa_cli = ZappaCLI()\n        plain_string = \"\"\"START RequestId: def8808e-5223-11e7-b3b7-4919f6e7dd4f Version: $LATEST\n[DEBUG]\t2017-06-15T23:39:27.638Z\tdef8808e-5223-11e7-b3b7-4919f6e7dd4f\tZappa Event: {'raw_command': 'import datetime; print(datetime.datetime.now())'}\n2017-06-15 23:39:27.638296\nEND RequestId: def8808e-5223-11e7-b3b7-4919f6e7dd4f\nREPORT RequestId: def8808e-5223-11e7-b3b7-4919f6e7dd4f\tDuration: 0.59 ms\tBilled Duration: 100 ms \tMemory Size: 512 MB\tMax Memory Used: 53 MB\t\n\"\"\"\n        final_string = \"\"\"START RequestId: def8808e-5223-11e7-b3b7-4919f6e7dd4f Version: $LATEST\n[DEBUG] 2017-06-15T23:39:27.638Z def8808e-5223-11e7-b3b7-4919f6e7dd4f Zappa Event: {'raw_command': 'import datetime; print(datetime.datetime.now())'}\n2017-06-15 23:39:27.638296\nEND RequestId: def8808e-5223-11e7-b3b7-4919f6e7dd4f\nREPORT RequestId: def8808e-5223-11e7-b3b7-4919f6e7dd4f\nDuration: 0.59 ms\nBilled Duration: 100 ms \nMemory Size: 512 MB\nMax Memory Used: 53 MB\n\"\"\"\n        formated_string = zappa_cli.format_invoke_command(plain_string)\n        self.assertEqual(final_string, formated_string)\n\n    def test_cli_colorize_invoke_command(self):\n        zappa_cli = ZappaCLI()\n        plain_string = \"\"\"START RequestId: dd81d3de-5225-11e7-a24f-59014f430ab3 Version: $LATEST\n[DEBUG] 2017-06-15T23:53:44.194Z dd81d3de-5225-11e7-a24f-59014f430ab3 Zappa Event: {'raw_command': 'import datetime; print(datetime.datetime.now())'}\n2017-06-15 23:53:44.195012\nEND RequestId: dd81d3de-5225-11e7-a24f-59014f430ab3\nREPORT RequestId: dd81d3de-5225-11e7-a24f-59014f430ab3\nDuration: 0.63 ms\nBilled Duration: 100 ms \nMemory Size: 512 MB\nMax Memory Used: 53 MB\n\"\"\"\n        final_string = \"\"\"\u001b[36m\u001b[1m[START]\u001b[0m \u001b[32m\u001b[1mRequestId:\u001b[0m \u001b[35m\u001b[35mdd81d3de-5225-11e7-a24f-59014f430ab3\u001b[0m\u001b[0m \u001b[32m\u001b[1mVersion:\u001b[0m $LATEST\n\u001b[36m\u001b[1m[DEBUG]\u001b[0m 2017-06-15T23:53:44.194Z \u001b[35m\u001b[35mdd81d3de-5225-11e7-a24f-59014f430ab3\u001b[0m\u001b[0m \u001b[32m\u001b[1mZappa Event:\u001b[0m {'raw_command': 'import datetime; print(datetime.datetime.now())'}\n2017-06-15 23:53:44.195012\n\u001b[36m\u001b[1m[END]\u001b[0m \u001b[32m\u001b[1mRequestId:\u001b[0m \u001b[35m\u001b[35mdd81d3de-5225-11e7-a24f-59014f430ab3\u001b[0m\u001b[0m\n\u001b[36m\u001b[1m[REPORT]\u001b[0m \u001b[32m\u001b[1mRequestId:\u001b[0m \u001b[35m\u001b[35mdd81d3de-5225-11e7-a24f-59014f430ab3\u001b[0m\u001b[0m\n\u001b[32m\u001b[1mDuration:\u001b[0m 0.63 ms\n\u001b[32m\u001b[1mBilled\u001b[0m \u001b[32m\u001b[1mDuration:\u001b[0m 100 ms \n\u001b[32m\u001b[1mMemory Size:\u001b[0m 512 MB\n\u001b[32m\u001b[1mMax Memory Used:\u001b[0m 53 MB\n\"\"\"\n        colorized_string = zappa_cli.colorize_invoke_command(plain_string)\n        self.assertEqual(final_string, colorized_string)\n\n    def test_cli_colorize_whole_words_only(self):\n        zappa_cli = ZappaCLI()\n        plain_string = (\n            'START RESTART END RENDER report [DEBUG] TEXT[DEBUG]TEXT')\n        final_string = (\n            '\\x1b[36m\\x1b[1m[START]\\x1b[0m RESTART \\x1b[36m\\x1b[1m[END]\\x1b[0m RENDER report \\x1b[36m\\x1b[1m[DEBUG]\\x1b[0m TEXT\\x1b[36m\\x1b[1m[DEBUG]\\x1b[0mTEXT'\n            )\n        colorized_string = zappa_cli.colorize_invoke_command(plain_string)\n        self.assertEqual(final_string, colorized_string)\n\n    def test_cli_colorize_invoke_command_bad_string(self):\n        zappa_cli = ZappaCLI()\n        plain_string = \"Hey, I'm a plain string, won't be colorized\"\n        final_string = \"Hey, I'm a plain string, won't be colorized\"\n        colorized_string = zappa_cli.colorize_invoke_command(plain_string)\n        self.assertEqual(final_string, colorized_string)\n\n    def test_bad_json_catch(self):\n        zappa_cli = ZappaCLI()\n        self.assertRaises(ValueError, zappa_cli.load_settings_file,\n            'tests/test_bad_settings.json')\n\n    def test_bad_stage_name_catch(self):\n        zappa_cli = ZappaCLI()\n        self.assertRaises(ValueError, zappa_cli.load_settings,\n            'tests/test_bad_stage_name_settings.json')\n\n    def test_bad_environment_vars_catch(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        self.assertRaises(ValueError, zappa_cli.load_settings,\n            'tests/test_bad_environment_vars.json')\n\n    def test_domain_name_match(self):\n        zone = Zappa.get_best_match_zone(all_zones={'HostedZones': [{'Name':\n            'example.com.au.', 'Id': 'zone-correct', 'Config': {\n            'PrivateZone': False}}]}, domain='www.example.com.au')\n        assert zone == 'zone-correct'\n        zone = Zappa.get_best_match_zone(all_zones={'HostedZones': [{'Name':\n            'example.com.au.', 'Id': 'zone-incorrect', 'Config': {\n            'PrivateZone': False}}]}, domain='something-else.com.au')\n        assert zone is None\n        zone = Zappa.get_best_match_zone(all_zones={'HostedZones': [{'Name':\n            'example.com.au.', 'Id': 'zone-incorrect', 'Config': {\n            'PrivateZone': False}}, {'Name': 'subdomain.example.com.au.',\n            'Id': 'zone-correct', 'Config': {'PrivateZone': False}}]},\n            domain='www.subdomain.example.com.au')\n        assert zone == 'zone-correct'\n        zone = Zappa.get_best_match_zone(all_zones={'HostedZones': [{'Name':\n            'example.com.au.', 'Id': 'zone-private', 'Config': {\n            'PrivateZone': True}}]}, domain='www.example.com.au')\n        assert zone is None\n        zone = Zappa.get_best_match_zone(all_zones={'HostedZones': [{'Name':\n            'subdomain.example.com.au.', 'Id': 'zone-private', 'Config': {\n            'PrivateZone': True}}, {'Name': 'subdomain.example.com.au.',\n            'Id': 'zone-public', 'Config': {'PrivateZone': False}}]},\n            domain='www.subdomain.example.com.au')\n        assert zone == 'zone-public'\n\n    def test_lets_encrypt_sanity(self):\n        import subprocess\n        devnull = open(os.devnull, 'wb')\n        out = subprocess.check_output(['openssl', 'genrsa', '2048'], stderr\n            =devnull)\n        with open(os.path.join(gettempdir(), 'account.key'), 'wb') as f:\n            f.write(out)\n        cmd = ['openssl', 'req', '-x509', '-newkey', 'rsa:2048', '-subj',\n            '/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com',\n            '-passout', 'pass:foo', '-keyout', os.path.join(gettempdir(),\n            'key.key'), '-out', os.path.join(gettempdir(), 'signed.crt'),\n            '-days', '1']\n        devnull = open(os.devnull, 'wb')\n        subprocess.check_call(cmd, stdout=devnull, stderr=devnull)\n        DEFAULT_CA = 'https://acme-staging.api.letsencrypt.org'\n        CA = 'https://acme-staging.api.letsencrypt.org'\n        try:\n            result = register_account()\n        except ValueError as e:\n            pass\n        create_domain_key()\n        create_domain_csr('herp.derp.wtf')\n        parse_account_key()\n        parse_csr()\n        create_chained_certificate()\n        try:\n            result = sign_certificate()\n        except ValueError as e:\n            pass\n        result = verify_challenge('http://echo.jsontest.com/status/valid')\n        try:\n            result = verify_challenge('http://echo.jsontest.com/status/fail')\n        except ValueError as e:\n            pass\n        try:\n            result = verify_challenge('http://bing.com')\n        except ValueError as e:\n            pass\n        encode_certificate(b'123')\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('test_settings.json')\n        get_cert_and_update_domain(zappa_cli, 'kerplah', 'zzzz', domain=None)\n\n    def test_certify_sanity_checks(self):\n        \"\"\"\n        Make sure 'zappa certify':\n        * Errors out when a deployment hasn't taken place.\n        * Writes errors when certificate settings haven't been specified.\n        * Calls Zappa correctly for creates vs. updates.\n        \"\"\"\n        old_stdout = sys.stderr\n        if sys.version_info[0] < 3:\n            sys.stdout = OldStringIO()\n        try:\n            zappa_cli = ZappaCLI()\n            zappa_cli.domain = 'test.example.com'\n            try:\n                zappa_cli.certify()\n            except AttributeError:\n                pass\n            zappa_mock = mock.create_autospec(Zappa)\n            zappa_mock.function_versions = []\n            zappa_mock.domain_names = {}\n\n            def get_lambda_function_versions(_function_name, *_args, **_kwargs\n                ):\n                return zappa_mock.function_versions\n\n            def get_domain_name(domain, *_args, **_kwargs):\n                return zappa_mock.domain_names.get(domain)\n            zappa_mock.get_domain_name.side_effect = get_domain_name\n            zappa_mock.get_lambda_function_versions.side_effect = (\n                get_lambda_function_versions)\n            zappa_cli.zappa = zappa_mock\n            self.assertRaises(ClickException, zappa_cli.certify)\n            zappa_cli.zappa.function_versions = ['$LATEST']\n            zappa_cli.api_stage = 'stage'\n            zappa_cli.zappa_settings = {'stage': {}}\n            zappa_cli.api_stage = 'stage'\n            zappa_cli.domain = 'test.example.com'\n            try:\n                zappa_cli.certify()\n            except ClickException as e:\n                log_output = str(e)\n                self.assertIn(\"Can't certify a domain without\", log_output)\n                self.assertIn('domain', log_output)\n            zappa_cli.zappa_settings['stage']['domain'] = 'test.example.com'\n            try:\n                zappa_cli.certify()\n                self.fail('Expected a ClickException')\n            except ClickException as e:\n                log_output = str(e)\n                self.assertIn(\"Can't certify a domain without\", log_output)\n                self.assertIn('lets_encrypt_key', log_output)\n            zappa_cli.zappa_settings['stage']['certificate'] = 'foo'\n            try:\n                zappa_cli.certify()\n                self.fail('Expected a ClickException')\n            except ClickException as e:\n                log_output = str(e)\n                self.assertIn(\"Can't certify a domain without\", log_output)\n                self.assertIn('certificate_key', log_output)\n                self.assertIn('certificate_chain', log_output)\n            zappa_cli.zappa_settings['stage']['certificate_key'] = 'key'\n            try:\n                zappa_cli.certify()\n                self.fail('Expected a ClickException')\n            except ClickException as e:\n                log_output = str(e)\n                self.assertIn(\"Can't certify a domain without\", log_output)\n                self.assertIn('certificate_key', log_output)\n                self.assertIn('certificate_chain', log_output)\n            zappa_cli.zappa_settings['stage']['certificate_chain'] = 'chain'\n            del zappa_cli.zappa_settings['stage']['certificate_key']\n            try:\n                zappa_cli.certify()\n                self.fail('Expected a ClickException')\n            except ClickException as e:\n                log_output = str(e)\n                self.assertIn(\"Can't certify a domain without\", log_output)\n                self.assertIn('certificate_key', log_output)\n                self.assertIn('certificate_chain', log_output)\n            cert_file = tempfile.NamedTemporaryFile()\n            cert_file.write(b'Hello world')\n            cert_file.flush()\n            zappa_cli.zappa_settings['stage'].update({'certificate':\n                cert_file.name, 'certificate_key': cert_file.name,\n                'certificate_chain': cert_file.name})\n            sys.stdout.truncate(0)\n            zappa_cli.certify()\n            zappa_cli.zappa.create_domain_name.assert_called_once()\n            zappa_cli.zappa.update_route53_records.assert_called_once()\n            zappa_cli.zappa.update_domain_name.assert_not_called()\n            log_output = sys.stdout.getvalue()\n            self.assertIn('Created a new domain name', log_output)\n            zappa_cli.zappa.reset_mock()\n            zappa_cli.zappa.domain_names['test.example.com'] = '*.example.com'\n            sys.stdout.truncate(0)\n            zappa_cli.certify()\n            zappa_cli.zappa.update_domain_name.assert_called_once()\n            zappa_cli.zappa.update_route53_records.assert_not_called()\n            zappa_cli.zappa.create_domain_name.assert_not_called()\n            log_output = sys.stdout.getvalue()\n            self.assertNotIn('Created a new domain name', log_output)\n            zappa_cli.zappa_settings['stage'].update({'route53_enabled': False}\n                )\n            zappa_cli.zappa.reset_mock()\n            zappa_cli.zappa.domain_names['test.example.com'] = ''\n            sys.stdout.truncate(0)\n            zappa_cli.certify()\n            zappa_cli.zappa.create_domain_name.assert_called_once()\n            zappa_cli.zappa.update_route53_records.assert_not_called()\n            zappa_cli.zappa.update_domain_name.assert_not_called()\n            log_output = sys.stdout.getvalue()\n            self.assertIn('Created a new domain name', log_output)\n        finally:\n            sys.stdout = old_stdout\n\n    @mock.patch('troposphere.Template')\n    @mock.patch('botocore.client')\n    def test_get_domain_respects_route53_setting(self, client, template):\n        zappa_core = Zappa(boto_session=mock.Mock(), profile_name='test',\n            aws_region='test', load_credentials=False)\n        zappa_core.apigateway_client = mock.Mock()\n        zappa_core.route53 = mock.Mock()\n        record = zappa_core.get_domain_name('test_domain', route53=False)\n        self.assertIsNotNone(record)\n        zappa_core.apigateway_client.get_domain_name.assert_called_once()\n        zappa_core.route53.list_hosted_zones.assert_not_called()\n        zappa_core.apigateway_client.reset_mock()\n        zappa_core.route53.reset_mock()\n        zappa_core.route53.list_hosted_zones.return_value = {'HostedZones':\n            [{'Id': 'somezone'}]}\n        zappa_core.route53.list_resource_record_sets.return_value = {\n            'ResourceRecordSets': [{'Type': 'CNAME', 'Name': 'test_domain1'}]}\n        record = zappa_core.get_domain_name('test_domain')\n        self.assertIsNotNone(record)\n        zappa_core.apigateway_client.get_domain_name.assert_called_once()\n        zappa_core.route53.list_hosted_zones.assert_called_once()\n        zappa_core.route53.list_resource_record_sets.assert_called_once_with(\n            HostedZoneId='somezone')\n\n    def test_detect_dj(self):\n        settings_modules = detect_django_settings()\n\n    def test_dj_wsgi(self):\n        settings_modules = detect_django_settings()\n        settings = \"\"\"\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nimport os\nBASE_DIR = os.path.dirname(os.path.dirname(__file__))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/1.7/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'alskdfjalsdkf=0*%do-ayvy*m2k=vss*$7)j8q!@u0+d^na7mi2(^!l!d'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nTEMPLATE_DEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n)\n\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n)\n\nROOT_URLCONF = 'blah.urls'\nWSGI_APPLICATION = 'hackathon_starter.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/1.7/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Internationalization\n# https://docs.djangoproject.com/en/1.7/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n        \"\"\"\n        djts = open('dj_test_settings.py', 'w')\n        djts.write(settings)\n        djts.close()\n        app = get_django_wsgi('dj_test_settings')\n        try:\n            os.remove('dj_test_settings.py')\n            os.remove('dj_test_settings.pyc')\n        except Exception as e:\n            pass\n\n    def test_human_units(self):\n        human_size(1)\n        human_size(9999999999999)\n\n    def test_string_to_timestamp(self):\n        boo = string_to_timestamp('asdf')\n        self.assertTrue(boo == 0)\n        yay = string_to_timestamp('1h')\n        self.assertTrue(type(yay) == int)\n        self.assertTrue(yay > 0)\n        yay = string_to_timestamp('4m')\n        self.assertTrue(type(yay) == int)\n        self.assertTrue(yay > 0)\n        yay = string_to_timestamp('1mm')\n        self.assertTrue(type(yay) == int)\n        self.assertTrue(yay > 0)\n        yay = string_to_timestamp('1mm1w1d1h1m1s1ms1us')\n        self.assertTrue(type(yay) == int)\n        self.assertTrue(yay > 0)\n\n    def test_event_name(self):\n        zappa = Zappa()\n        truncated = zappa.get_event_name(\n            'basldfkjalsdkfjalsdkfjaslkdfjalsdkfjadlsfkjasdlfkjasdlfkjasdflkjasdf-asdfasdfasdfasdfasdf'\n            , 'this.is.my.dang.function.wassup.yeah.its.long')\n        self.assertTrue(len(truncated) <= 64)\n        self.assertTrue(truncated.endswith(\n            'this.is.my.dang.function.wassup.yeah.its.long'))\n        truncated = zappa.get_event_name(\n            'basldfkjalsdkfjalsdkfjaslkdfjalsdkfjadlsfkjasdlfkjasdlfkjasdflkjasdf-asdfasdfasdfasdfasdf'\n            ,\n            'thisidoasdfaljksdfalskdjfalsdkfjasldkfjalsdkfjalsdkfjalsdfkjalasdfasdfasdfasdklfjasldkfjalsdkjfaslkdfjasldkfjasdflkjdasfskdj'\n            )\n        self.assertTrue(len(truncated) <= 64)\n        truncated = zappa.get_event_name('a', 'b')\n        self.assertTrue(len(truncated) <= 64)\n        self.assertEqual(truncated, 'a-b')\n\n    def test_hashed_rule_name(self):\n        zappa = Zappa()\n        truncated = zappa.get_event_name(\n            'basldfkjalsdkfjalsdkfjaslkdfjalsdkfjadlsfkjasdlfkjasdlfkjasdflkjasdf-asdfasdfasdfasdfasdf'\n            , 'this.is.my.dang.function.wassup.yeah.its.long')\n        self.assertTrue(len(truncated) == 64)\n        rule_name = zappa.get_hashed_rule_name(event=dict(name=\n            'some-event-name'), function=\n            'this.is.my.dang.function.wassup.yeah.its.long', lambda_name=\n            'basldfkjalsdkfjalsdkfjaslkdfjalsdkfjadlsfkjasdlfkjasdlfkjasdflkjasdf-asdfasdfasdfasdfasdf'\n            )\n        self.assertTrue(len(rule_name) <= 64)\n        self.assertTrue(rule_name.endswith(\n            '-this.is.my.dang.function.wassup.yeah.its.long'))\n\n    def test_detect_dj(self):\n        settings_modules = detect_django_settings()\n\n    def test_detect_flask(self):\n        settings_modules = detect_flask_apps()\n\n    def test_shameless(self):\n        shamelessly_promote()\n\n    def test_s3_url_parser(self):\n        remote_bucket, remote_file = parse_s3_url(\n            's3://my-project-config-files/filename.json')\n        self.assertEqual(remote_bucket, 'my-project-config-files')\n        self.assertEqual(remote_file, 'filename.json')\n        remote_bucket, remote_file = parse_s3_url(\n            's3://your-bucket/account.key')\n        self.assertEqual(remote_bucket, 'your-bucket')\n        self.assertEqual(remote_file, 'account.key')\n        remote_bucket, remote_file = parse_s3_url(\n            's3://my-config-bucket/super-secret-config.json')\n        self.assertEqual(remote_bucket, 'my-config-bucket')\n        self.assertEqual(remote_file, 'super-secret-config.json')\n        remote_bucket, remote_file = parse_s3_url(\n            's3://your-secure-bucket/account.key')\n        self.assertEqual(remote_bucket, 'your-secure-bucket')\n        self.assertEqual(remote_file, 'account.key')\n        remote_bucket, remote_file = parse_s3_url(\n            's3://your-bucket/subfolder/account.key')\n        self.assertEqual(remote_bucket, 'your-bucket')\n        self.assertEqual(remote_file, 'subfolder/account.key')\n        remote_bucket, remote_file = parse_s3_url('/dev/null')\n        self.assertEqual(remote_bucket, '')\n\n    def test_remote_env_package(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'deprecated_remote_env'\n        zappa_cli.load_settings('test_settings.json')\n        self.assertEqual('lmbda-env', zappa_cli.stage_config[\n            'remote_env_bucket'])\n        self.assertEqual('dev/env.json', zappa_cli.stage_config[\n            'remote_env_file'])\n        zappa_cli.create_package()\n        with zipfile.ZipFile(zappa_cli.zip_path, 'r') as lambda_zip:\n            content = lambda_zip.read('zappa_settings.py')\n        zappa_cli.remove_local_zip()\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'remote_env'\n        zappa_cli.load_settings('test_settings.json')\n        self.assertEqual('s3://lmbda-env/prod/env.json', zappa_cli.\n            stage_config['remote_env'])\n        zappa_cli.create_package()\n        with zipfile.ZipFile(zappa_cli.zip_path, 'r') as lambda_zip:\n            content = lambda_zip.read('zappa_settings.py')\n        zappa_cli.remove_local_zip()\n\n    def test_package_only(self):\n        for delete_local_zip in [True, False]:\n            zappa_cli = ZappaCLI()\n            if delete_local_zip:\n                zappa_cli.api_stage = (\n                    'build_package_only_delete_local_zip_true')\n            else:\n                zappa_cli.api_stage = (\n                    'build_package_only_delete_local_zip_false')\n            zappa_cli.load_settings('test_settings.json')\n            zappa_cli.package()\n            zappa_cli.on_exit()\n            self.assertEqual(os.path.isfile(zappa_cli.zip_path), True)\n            os.remove(zappa_cli.zip_path)\n\n    def test_package_output(self):\n        for delete_local_zip in [True]:\n            zappa_cli = ZappaCLI()\n            if delete_local_zip:\n                zappa_cli.api_stage = (\n                    'build_package_only_delete_local_zip_true')\n            zappa_cli.load_settings('test_settings.json')\n            zappa_cli.package(output='oh-boy.zip')\n            zappa_cli.on_exit()\n            self.assertEqual(os.path.isfile(zappa_cli.zip_path), True)\n            os.remove(zappa_cli.zip_path)\n\n    def test_package_does_not_load_credentials(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        with mock.patch('zappa.core.Zappa.load_credentials'\n            ) as LoadCredentialsMock:\n            zappa_cli.load_credentials = False\n            zappa_cli.load_settings('test_settings.json')\n            zappa_cli.package()\n            zappa_cli.on_exit()\n            self.assertFalse(zappa_cli.load_credentials)\n            self.assertFalse(LoadCredentialsMock.called)\n        os.remove(zappa_cli.zip_path)\n\n    def test_flask_logging_bug(self):\n        \"\"\"\n        This checks whether Flask can write errors sanely.\n        https://github.com/Miserlou/Zappa/issues/283\n        \"\"\"\n        event = {'body': {}, 'headers': {}, 'pathParameters': {}, 'path':\n            '/', 'httpMethod': 'GET', 'queryStringParameters': {},\n            'requestContext': {}}\n        old_stderr = sys.stderr\n        sys.stderr = BytesIO()\n        try:\n            environ = create_wsgi_request(event)\n            app = flask.Flask(__name__)\n            with app.request_context(environ):\n                app.logger.error(u'This is a test')\n                log_output = sys.stderr.getvalue()\n                if sys.version_info[0] < 3:\n                    self.assertNotIn(\"'str' object has no attribute 'write'\",\n                        log_output)\n                    self.assertNotIn('Logged from file tests.py', log_output)\n        finally:\n            sys.stderr = old_stderr\n\n    def test_slim_handler(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'slim_handler'\n        zappa_cli.load_settings('test_settings.json')\n        zappa_cli.create_package()\n        self.assertTrue(os.path.isfile(zappa_cli.handler_path))\n        self.assertTrue(os.path.isfile(zappa_cli.zip_path))\n        zappa_cli.remove_local_zip()\n\n    def test_validate_name(self):\n        fname = 'tests/name_scenarios.json'\n        with open(fname, 'r') as f:\n            scenarios = json.load(f)\n        for scenario in scenarios:\n            value = scenario['value']\n            is_valid = scenario['is_valid']\n            if is_valid:\n                assert validate_name(value)\n            else:\n                with self.assertRaises(InvalidAwsLambdaName) as exc:\n                    validate_name(value)\n\n    def test_contains_python_files_or_subdirs(self):\n        self.assertTrue(contains_python_files_or_subdirs('tests/data'))\n        self.assertTrue(contains_python_files_or_subdirs('tests/data/test2'))\n        self.assertFalse(contains_python_files_or_subdirs('tests/data/test1'))\n\n    def test_conflicts_with_a_neighbouring_module(self):\n        self.assertTrue(conflicts_with_a_neighbouring_module(\n            'tests/data/test1'))\n        self.assertFalse(conflicts_with_a_neighbouring_module(\n            'tests/data/test2'))\n\n    def test_settings_py_generation(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('test_settings.json')\n        zappa_cli.create_package()\n        with zipfile.ZipFile(zappa_cli.zip_path, 'r') as lambda_zip:\n            content = lambda_zip.read('zappa_settings.py').decode('utf-8')\n            settings = {}\n            exec(content, globals(), settings)\n            self.assertIn('ENVIRONMENT_VARIABLES', settings)\n            self.assertEqual(settings['ENVIRONMENT_VARIABLES'][\n                'TEST_ENV_VAR'], 'test_value')\n            self.assertIn('CONTEXT_HEADER_MAPPINGS', settings)\n            self.assertEqual(settings['CONTEXT_HEADER_MAPPINGS'][\n                'CognitoIdentityId'], 'identity.cognitoIdentityId')\n            self.assertEqual(settings['CONTEXT_HEADER_MAPPINGS']['APIStage'\n                ], 'stage')\n        zappa_cli.remove_local_zip()\n\n    def test_only_ascii_env_var_allowed(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('tests/test_non_ascii_environment_var_key.json'\n            )\n        with self.assertRaises(ValueError) as context:\n            zappa_cli.create_package()\n        self.assertEqual('Environment variable keys must be ascii.', str(\n            context.exception))\n",
                        "belong_class_name": "TestZappa",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "certify",
                        "function_content": "def certify(self, no_confirm=True, manual=False):\n    \"\"\"\n        Register or update a domain certificate for this env.\n        \"\"\"\n    if not self.domain:\n        raise ClickException(\"Can't certify a domain without \" + click.\n            style('domain', fg='red', bold=True) + ' configured!')\n    if not no_confirm:\n        confirm = input('Are you sure you want to certify? [y/n] ')\n        if confirm != 'y':\n            return\n    deployed_versions = self.zappa.get_lambda_function_versions(self.\n        lambda_name)\n    if len(deployed_versions) == 0:\n        raise ClickException('This application ' + click.style(\n            \"isn't deployed yet\", fg='red') + ' - did you mean to call ' +\n            click.style('deploy', bold=True) + '?')\n    account_key_location = self.stage_config.get('lets_encrypt_key', None)\n    cert_location = self.stage_config.get('certificate', None)\n    cert_key_location = self.stage_config.get('certificate_key', None)\n    cert_chain_location = self.stage_config.get('certificate_chain', None)\n    cert_arn = self.stage_config.get('certificate_arn', None)\n    certificate_body = None\n    certificate_private_key = None\n    certificate_chain = None\n    if not cert_location and not cert_arn:\n        if not account_key_location:\n            raise ClickException(\"Can't certify a domain without \" + click.\n                style('lets_encrypt_key', fg='red', bold=True) + ' or ' +\n                click.style('certificate', fg='red', bold=True) + ' or ' +\n                click.style('certificate_arn', fg='red', bold=True) +\n                ' configured!')\n        from .letsencrypt import gettempdir\n        if account_key_location.startswith('s3://'):\n            bucket, key_name = parse_s3_url(account_key_location)\n            self.zappa.s3_client.download_file(bucket, key_name, os.path.\n                join(gettempdir(), 'account.key'))\n        else:\n            from shutil import copyfile\n            copyfile(account_key_location, os.path.join(gettempdir(),\n                'account.key'))\n    elif not account_key_location and not cert_arn:\n        if (not cert_location or not cert_key_location or not\n            cert_chain_location):\n            raise ClickException(\"Can't certify a domain without \" + click.\n                style('certificate, certificate_key and certificate_chain',\n                fg='red', bold=True) + ' configured!')\n        with open(cert_location) as f:\n            certificate_body = f.read()\n        with open(cert_key_location) as f:\n            certificate_private_key = f.read()\n        with open(cert_chain_location) as f:\n            certificate_chain = f.read()\n    click.echo('Certifying domain ' + click.style(self.domain, fg='green',\n        bold=True) + '..')\n    if not cert_location and not cert_arn:\n        from .letsencrypt import get_cert_and_update_domain\n        cert_success = get_cert_and_update_domain(self.zappa, self.\n            lambda_name, self.api_stage, self.domain, manual)\n    else:\n        route53 = self.stage_config.get('route53_enabled', True)\n        if not self.zappa.get_domain_name(self.domain):\n            dns_name = self.zappa.create_domain_name(domain_name=self.\n                domain, certificate_name=self.domain + '-Zappa-Cert',\n                certificate_body=certificate_body, certificate_private_key=\n                certificate_private_key, certificate_chain=\n                certificate_chain, certificate_arn=cert_arn, lambda_name=\n                self.lambda_name, stage=self.api_stage, route53=route53)\n            if route53:\n                self.zappa.update_route53_records(self.domain, dns_name)\n            print(\n                'Created a new domain name with supplied certificate. Please note that it can take up to 40 minutes for this domain to be created and propagated through AWS, but it requires no further work on your part.'\n                )\n        else:\n            self.zappa.update_domain_name(domain_name=self.domain,\n                certificate_name=self.domain + '-Zappa-Cert',\n                certificate_body=certificate_body, certificate_private_key=\n                certificate_private_key, certificate_chain=\n                certificate_chain, certificate_arn=cert_arn, lambda_name=\n                self.lambda_name, stage=self.api_stage, route53=route53)\n        cert_success = True\n    if cert_success:\n        click.echo('Certificate ' + click.style('updated', fg='green', bold\n            =True) + '!')\n    else:\n        click.echo(click.style('Failed', fg='red', bold=True) +\n            ' to generate or install certificate! :(')\n        click.echo('\\n==============\\n')\n        shamelessly_promote()\n",
                        "function_parameter": "(self, no_confirm=True, manual=False)",
                        "belong_class_content": "class ZappaCLI(object):\n    \"\"\"\n    ZappaCLI object is responsible for loading the settings,\n    handling the input arguments and executing the calls to the core library.\n\n    \"\"\"\n    vargs = None\n    command = None\n    stage_env = None\n    zappa = None\n    zappa_settings = None\n    load_credentials = True\n    disable_progress = False\n    api_stage = None\n    app_function = None\n    aws_region = None\n    debug = None\n    prebuild_script = None\n    project_name = None\n    profile_name = None\n    lambda_arn = None\n    lambda_name = None\n    lambda_description = None\n    s3_bucket_name = None\n    settings_file = None\n    zip_path = None\n    handler_path = None\n    vpc_config = None\n    memory_size = None\n    use_apigateway = None\n    lambda_handler = None\n    django_settings = None\n    manage_roles = True\n    exception_handler = None\n    environment_variables = None\n    authorizer = None\n    xray_tracing = False\n    aws_kms_key_arn = ''\n    context_header_mappings = None\n    tags = []\n    stage_name_env_pattern = re.compile('^[a-zA-Z0-9_]+$')\n\n    def __init__(self):\n        self._stage_config_overrides = {}\n\n    @property\n    def stage_config(self):\n        \"\"\"\n        A shortcut property for settings of a stage.\n        \"\"\"\n\n        def get_stage_setting(stage, extended_stages=None):\n            if extended_stages is None:\n                extended_stages = []\n            if stage in extended_stages:\n                raise RuntimeError(stage +\n                    ' has already been extended to these settings. There is a circular extends within the settings file.'\n                    )\n            extended_stages.append(stage)\n            try:\n                stage_settings = dict(self.zappa_settings[stage].copy())\n            except KeyError:\n                raise ClickException(\n                    \"Cannot extend settings for undefined stage '\" + stage +\n                    \"'.\")\n            extends_stage = self.zappa_settings[stage].get('extends', None)\n            if not extends_stage:\n                return stage_settings\n            extended_settings = get_stage_setting(stage=extends_stage,\n                extended_stages=extended_stages)\n            extended_settings.update(stage_settings)\n            return extended_settings\n        settings = get_stage_setting(stage=self.api_stage)\n        if u'delete_zip' in settings:\n            settings[u'delete_local_zip'] = settings.get(u'delete_zip')\n        settings.update(self.stage_config_overrides)\n        return settings\n\n    @property\n    def stage_config_overrides(self):\n        \"\"\"\n        Returns zappa_settings we forcefully override for the current stage\n        set by `self.override_stage_config_setting(key, value)`\n        \"\"\"\n        return getattr(self, '_stage_config_overrides', {}).get(self.\n            api_stage, {})\n\n    def override_stage_config_setting(self, key, val):\n        \"\"\"\n        Forcefully override a setting set by zappa_settings (for the current stage only)\n        :param key: settings key\n        :param val: value\n        \"\"\"\n        self._stage_config_overrides = getattr(self,\n            '_stage_config_overrides', {})\n        self._stage_config_overrides.setdefault(self.api_stage, {})[key] = val\n\n    def handle(self, argv=None):\n        \"\"\"\n        Main function.\n\n        Parses command, load settings and dispatches accordingly.\n\n        \"\"\"\n        desc = (\n            'Zappa - Deploy Python applications to AWS Lambda and API Gateway.\\n'\n            )\n        parser = argparse.ArgumentParser(description=desc)\n        parser.add_argument('-v', '--version', action='version', version=\n            pkg_resources.get_distribution('zappa').version, help=\n            'Print the zappa version')\n        parser.add_argument('--color', default='auto', choices=['auto',\n            'never', 'always'])\n        env_parser = argparse.ArgumentParser(add_help=False)\n        me_group = env_parser.add_mutually_exclusive_group()\n        all_help = 'Execute this command for all of our defined Zappa stages.'\n        me_group.add_argument('--all', action='store_true', help=all_help)\n        me_group.add_argument('stage_env', nargs='?')\n        group = env_parser.add_argument_group()\n        group.add_argument('-a', '--app_function', help=\n            'The WSGI application function.')\n        group.add_argument('-s', '--settings_file', help=\n            'The path to a Zappa settings file.')\n        group.add_argument('-q', '--quiet', action='store_true', help=\n            'Silence all output.')\n        group.add_argument('-j', '--json', action='store_true', help=\n            'Make the output of this command be machine readable.')\n        group.add_argument('--disable_progress', action='store_true', help=\n            'Disable progress bars.')\n        subparsers = parser.add_subparsers(title='subcommands', dest='command')\n        cert_parser = subparsers.add_parser('certify', parents=[env_parser],\n            help='Create and install SSL certificate')\n        cert_parser.add_argument('--manual', action='store_true', help=\n            \"Gets new Let's Encrypt certificates, but prints them to console.Does not update API Gateway domains.\"\n            )\n        cert_parser.add_argument('-y', '--yes', action='store_true', help=\n            'Auto confirm yes.')\n        deploy_parser = subparsers.add_parser('deploy', parents=[env_parser\n            ], help='Deploy application.')\n        deploy_parser.add_argument('-z', '--zip', help=\n            'Deploy Lambda with specific local or S3 hosted zip package')\n        init_parser = subparsers.add_parser('init', help=\n            'Initialize Zappa app.')\n        package_parser = subparsers.add_parser('package', parents=[\n            env_parser], help='Build the application zip package locally.')\n        package_parser.add_argument('-o', '--output', help=\n            'Name of file to output the package to.')\n        template_parser = subparsers.add_parser('template', parents=[\n            env_parser], help=\n            'Create a CloudFormation template for this API Gateway.')\n        template_parser.add_argument('-l', '--lambda-arn', required=True,\n            help='ARN of the Lambda function to template to.')\n        template_parser.add_argument('-r', '--role-arn', required=True,\n            help='ARN of the Role to template with.')\n        template_parser.add_argument('-o', '--output', help=\n            'Name of file to output the template to.')\n        invoke_parser = subparsers.add_parser('invoke', parents=[env_parser\n            ], help='Invoke remote function.')\n        invoke_parser.add_argument('--raw', action='store_true', help=\n            'When invoking remotely, invoke this python as a string, not as a modular path.'\n            )\n        invoke_parser.add_argument('--no-color', action='store_true', help=\n            \"Don't color the output\")\n        invoke_parser.add_argument('command_rest')\n        manage_parser = subparsers.add_parser('manage', help=\n            'Invoke remote Django manage.py commands.')\n        rest_help = (\n            'Command in the form of <env> <command>. <env> is not required if --all is specified'\n            )\n        manage_parser.add_argument('--all', action='store_true', help=all_help)\n        manage_parser.add_argument('command_rest', nargs='+', help=rest_help)\n        manage_parser.add_argument('--no-color', action='store_true', help=\n            \"Don't color the output\")\n        manage_parser.add_argument('-s', '--settings_file', help=\n            'The path to a Zappa settings file.')\n\n        def positive_int(s):\n            \"\"\" Ensure an arg is positive \"\"\"\n            i = int(s)\n            if i < 0:\n                msg = 'This argument must be positive (got {})'.format(s)\n                raise argparse.ArgumentTypeError(msg)\n            return i\n        rollback_parser = subparsers.add_parser('rollback', parents=[\n            env_parser], help='Rollback deployed code to a previous version.')\n        rollback_parser.add_argument('-n', '--num-rollback', type=\n            positive_int, default=1, help='The number of versions to rollback.'\n            )\n        subparsers.add_parser('schedule', parents=[env_parser], help=\n            'Schedule functions to occur at regular intervals.')\n        status_parser = subparsers.add_parser('status', parents=[env_parser\n            ], help='Show deployment status and event schedules.')\n        tail_parser = subparsers.add_parser('tail', parents=[env_parser],\n            help='Tail deployment logs.')\n        tail_parser.add_argument('--no-color', action='store_true', help=\n            \"Don't color log tail output.\")\n        tail_parser.add_argument('--http', action='store_true', help=\n            'Only show HTTP requests in tail output.')\n        tail_parser.add_argument('--non-http', action='store_true', help=\n            'Only show non-HTTP requests in tail output.')\n        tail_parser.add_argument('--since', type=str, default='100000s',\n            help='Only show lines since a certain timeframe.')\n        tail_parser.add_argument('--filter', type=str, default='', help=\n            'Apply a filter pattern to the logs.')\n        tail_parser.add_argument('--force-color', action='store_true', help\n            =\n            'Force coloring log tail output even if coloring support is not auto-detected. (example: piping)'\n            )\n        undeploy_parser = subparsers.add_parser('undeploy', parents=[\n            env_parser], help='Undeploy application.')\n        undeploy_parser.add_argument('--remove-logs', action='store_true',\n            help=\n            'Removes log groups of api gateway and lambda task during the undeployment.'\n            )\n        undeploy_parser.add_argument('-y', '--yes', action='store_true',\n            help='Auto confirm yes.')\n        subparsers.add_parser('unschedule', parents=[env_parser], help=\n            'Unschedule functions.')\n        update_parser = subparsers.add_parser('update', parents=[env_parser\n            ], help='Update deployed application.')\n        update_parser.add_argument('-z', '--zip', help=\n            'Update Lambda with specific local or S3 hosted zip package')\n        update_parser.add_argument('-n', '--no-upload', help=\n            \"Update configuration where appropriate, but don't upload new code\"\n            )\n        subparsers.add_parser('shell', parents=[env_parser], help=\n            'A debug shell with a loaded Zappa object.')\n        argcomplete.autocomplete(parser)\n        args = parser.parse_args(argv)\n        self.vargs = vars(args)\n        if args.color == 'never':\n            disable_click_colors()\n        elif args.color == 'always':\n            pass\n        elif args.color == 'auto':\n            pass\n        if not args.command:\n            parser.print_help()\n            return\n        if args.command == 'manage' and not self.vargs.get('all'):\n            self.stage_env = self.vargs['command_rest'].pop(0)\n        else:\n            self.stage_env = self.vargs.get('stage_env')\n        if args.command == 'package':\n            self.load_credentials = False\n        self.command = args.command\n        self.disable_progress = self.vargs.get('disable_progress')\n        if self.vargs.get('quiet'):\n            self.silence()\n        if self.command == 'init':\n            self.init()\n            return\n        if not self.vargs.get('json'):\n            self.check_for_update()\n        self.load_settings_file(self.vargs.get('settings_file'))\n        all_stages = self.vargs.get('all')\n        stages = []\n        if all_stages:\n            stages = self.zappa_settings.keys()\n        elif not self.stage_env:\n            if len(self.zappa_settings.keys()) == 1:\n                stages.append(list(self.zappa_settings.keys())[0])\n            else:\n                parser.error('Please supply a stage to interact with.')\n        else:\n            stages.append(self.stage_env)\n        for stage in stages:\n            try:\n                self.dispatch_command(self.command, stage)\n            except ClickException as e:\n                e.show()\n                sys.exit(e.exit_code)\n\n    def dispatch_command(self, command, stage):\n        \"\"\"\n        Given a command to execute and stage,\n        execute that command.\n        \"\"\"\n        self.api_stage = stage\n        if command not in ['status', 'manage']:\n            if not self.vargs.get('json', None):\n                click.echo('Calling ' + click.style(command, fg='green',\n                    bold=True) + ' for stage ' + click.style(self.api_stage,\n                    bold=True) + '..')\n        if self.vargs.get('app_function', None):\n            self.app_function = self.vargs['app_function']\n        try:\n            self.load_settings(self.vargs.get('settings_file'))\n        except ValueError as e:\n            if hasattr(e, 'message'):\n                print('Error: {}'.format(e.message))\n            else:\n                print(str(e))\n            sys.exit(-1)\n        self.callback('settings')\n        if command == 'deploy':\n            self.deploy(self.vargs['zip'])\n        if command == 'package':\n            self.package(self.vargs['output'])\n        if command == 'template':\n            self.template(self.vargs['lambda_arn'], self.vargs['role_arn'],\n                output=self.vargs['output'], json=self.vargs['json'])\n        elif command == 'update':\n            self.update(self.vargs['zip'], self.vargs['no_upload'])\n        elif command == 'rollback':\n            self.rollback(self.vargs['num_rollback'])\n        elif command == 'invoke':\n            if not self.vargs.get('command_rest'):\n                print('Please enter the function to invoke.')\n                return\n            self.invoke(self.vargs['command_rest'], raw_python=self.vargs[\n                'raw'], no_color=self.vargs['no_color'])\n        elif command == 'manage':\n            if not self.vargs.get('command_rest'):\n                print('Please enter the management command to invoke.')\n                return\n            if not self.django_settings:\n                print('This command is for Django projects only!')\n                print(\n                    'If this is a Django project, please define django_settings in your zappa_settings.'\n                    )\n                return\n            command_tail = self.vargs.get('command_rest')\n            if len(command_tail) > 1:\n                command = ' '.join(command_tail)\n            else:\n                command = command_tail[0]\n            self.invoke(command, command='manage', no_color=self.vargs[\n                'no_color'])\n        elif command == 'tail':\n            self.tail(colorize=not self.vargs['no_color'], http=self.vargs[\n                'http'], non_http=self.vargs['non_http'], since=self.vargs[\n                'since'], filter_pattern=self.vargs['filter'],\n                force_colorize=self.vargs['force_color'] or None)\n        elif command == 'undeploy':\n            self.undeploy(no_confirm=self.vargs['yes'], remove_logs=self.\n                vargs['remove_logs'])\n        elif command == 'schedule':\n            self.schedule()\n        elif command == 'unschedule':\n            self.unschedule()\n        elif command == 'status':\n            self.status(return_json=self.vargs['json'])\n        elif command == 'certify':\n            self.certify(no_confirm=self.vargs['yes'], manual=self.vargs[\n                'manual'])\n        elif command == 'shell':\n            self.shell()\n\n    def package(self, output=None):\n        \"\"\"\n        Only build the package\n        \"\"\"\n        self.check_venv()\n        self.override_stage_config_setting('delete_local_zip', False)\n        if self.prebuild_script:\n            self.execute_prebuild_script()\n        self.create_package(output)\n        self.callback('zip')\n        size = human_size(os.path.getsize(self.zip_path))\n        click.echo(click.style('Package created', fg='green', bold=True) +\n            ': ' + click.style(self.zip_path, bold=True) + ' (' + size + ')')\n\n    def template(self, lambda_arn, role_arn, output=None, json=False):\n        \"\"\"\n        Only build the template file.\n        \"\"\"\n        if not lambda_arn:\n            raise ClickException('Lambda ARN is required to template.')\n        if not role_arn:\n            raise ClickException('Role ARN is required to template.')\n        self.zappa.credentials_arn = role_arn\n        template = self.zappa.create_stack_template(lambda_arn=lambda_arn,\n            lambda_name=self.lambda_name, api_key_required=self.\n            api_key_required, iam_authorization=self.iam_authorization,\n            authorizer=self.authorizer, cors_options=self.cors, description\n            =self.apigateway_description)\n        if not output:\n            template_file = self.lambda_name + '-template-' + str(int(time.\n                time())) + '.json'\n        else:\n            template_file = output\n        with open(template_file, 'wb') as out:\n            out.write(bytes(template.to_json(indent=None, separators=(',',\n                ':')), 'utf-8'))\n        if not json:\n            click.echo(click.style('Template created', fg='green', bold=\n                True) + ': ' + click.style(template_file, bold=True))\n        else:\n            with open(template_file, 'r') as out:\n                print(out.read())\n\n    def deploy(self, source_zip=None):\n        \"\"\"\n        Package your project, upload it to S3, register the Lambda function\n        and create the API Gateway routes.\n\n        \"\"\"\n        if not source_zip:\n            self.check_venv()\n            if self.prebuild_script:\n                self.execute_prebuild_script()\n            deployed_versions = self.zappa.get_lambda_function_versions(self\n                .lambda_name)\n            if len(deployed_versions) > 0:\n                raise ClickException('This application is ' + click.style(\n                    'already deployed', fg='red') +\n                    ' - did you mean to call ' + click.style('update', bold\n                    =True) + '?')\n            if self.manage_roles:\n                try:\n                    self.zappa.create_iam_roles()\n                except botocore.client.ClientError:\n                    raise ClickException(click.style('Failed', fg='red') +\n                        ' to ' + click.style('manage IAM roles', bold=True) +\n                        '!\\n' + 'You may ' + click.style(\n                        'lack the necessary AWS permissions', bold=True) +\n                        \"\"\" to automatically manage a Zappa execution role.\n\"\"\"\n                         + 'To fix this, see here: ' + click.style(\n                        'https://github.com/Miserlou/Zappa#using-custom-aws-iam-roles-and-policies'\n                        , bold=True) + '\\n')\n            self.create_package()\n            self.callback('zip')\n            success = self.zappa.upload_to_s3(self.zip_path, self.\n                s3_bucket_name, disable_progress=self.disable_progress)\n            if not success:\n                raise ClickException('Unable to upload to S3. Quitting.')\n            if self.stage_config.get('slim_handler', False):\n                success = self.zappa.upload_to_s3(self.handler_path, self.\n                    s3_bucket_name, disable_progress=self.disable_progress)\n                if not success:\n                    raise ClickException(\n                        'Unable to upload handler to S3. Quitting.')\n                current_project_name = ('{0!s}_{1!s}_current_project.tar.gz'\n                    .format(self.api_stage, self.project_name))\n                success = self.zappa.copy_on_s3(src_file_name=self.zip_path,\n                    dst_file_name=current_project_name, bucket_name=self.\n                    s3_bucket_name)\n                if not success:\n                    raise ClickException(\n                        'Unable to copy the zip to be the current project. Quitting.'\n                        )\n                handler_file = self.handler_path\n            else:\n                handler_file = self.zip_path\n        try:\n            self.lambda_arn = self.zappa.get_lambda_function(function_name=\n                self.lambda_name)\n        except botocore.client.ClientError:\n            kwargs = dict(handler=self.lambda_handler, description=self.\n                lambda_description, vpc_config=self.vpc_config,\n                dead_letter_config=self.dead_letter_config, timeout=self.\n                timeout_seconds, memory_size=self.memory_size, runtime=self\n                .runtime, aws_environment_variables=self.\n                aws_environment_variables, aws_kms_key_arn=self.aws_kms_key_arn\n                )\n            if source_zip and source_zip.startswith('s3://'):\n                bucket, key_name = parse_s3_url(source_zip)\n                kwargs['function_name'] = self.lambda_name\n                kwargs['bucket'] = bucket\n                kwargs['s3_key'] = key_name\n            elif source_zip and not source_zip.startswith('s3://'):\n                with open(source_zip, mode='rb') as fh:\n                    byte_stream = fh.read()\n                kwargs['function_name'] = self.lambda_name\n                kwargs['local_zip'] = byte_stream\n            else:\n                kwargs['function_name'] = self.lambda_name\n                kwargs['bucket'] = self.s3_bucket_name\n                kwargs['s3_key'] = handler_file\n            self.lambda_arn = self.zappa.create_lambda_function(**kwargs)\n        self.schedule()\n        endpoint_url = ''\n        deployment_string = click.style('Deployment complete', fg='green',\n            bold=True) + '!'\n        if self.use_apigateway:\n            template = self.zappa.create_stack_template(lambda_arn=self.\n                lambda_arn, lambda_name=self.lambda_name, api_key_required=\n                self.api_key_required, iam_authorization=self.\n                iam_authorization, authorizer=self.authorizer, cors_options\n                =self.cors, description=self.apigateway_description)\n            self.zappa.update_stack(self.lambda_name, self.s3_bucket_name,\n                wait=True, disable_progress=self.disable_progress)\n            api_id = self.zappa.get_api_id(self.lambda_name)\n            if self.binary_support:\n                self.zappa.add_binary_support(api_id=api_id, cors=self.cors)\n            if self.stage_config.get('payload_compression', True):\n                self.zappa.add_api_compression(api_id=api_id,\n                    min_compression_size=self.stage_config.get(\n                    'payload_minimum_compression_size', 0))\n            endpoint_url = self.deploy_api_gateway(api_id)\n            deployment_string = deployment_string + ': {}'.format(endpoint_url)\n            if self.api_key_required:\n                if self.api_key is None:\n                    self.zappa.create_api_key(api_id=api_id, stage_name=\n                        self.api_stage)\n                else:\n                    self.zappa.add_api_stage_to_api_key(api_key=self.\n                        api_key, api_id=api_id, stage_name=self.api_stage)\n            if self.stage_config.get('touch', True):\n                self.touch_endpoint(endpoint_url)\n        if not source_zip:\n            if self.stage_config.get('delete_local_zip', True):\n                self.remove_local_zip()\n        if not source_zip:\n            self.remove_uploaded_zip()\n        self.callback('post')\n        click.echo(deployment_string)\n\n    def update(self, source_zip=None, no_upload=False):\n        \"\"\"\n        Repackage and update the function code.\n        \"\"\"\n        if not source_zip:\n            self.check_venv()\n            if self.prebuild_script:\n                self.execute_prebuild_script()\n            try:\n                updated_time = 1472581018\n                function_response = self.zappa.lambda_client.get_function(\n                    FunctionName=self.lambda_name)\n                conf = function_response['Configuration']\n                last_updated = parser.parse(conf['LastModified'])\n                last_updated_unix = time.mktime(last_updated.timetuple())\n            except botocore.exceptions.BotoCoreError as e:\n                click.echo(click.style(type(e).__name__, fg='red') + ': ' +\n                    e.args[0])\n                sys.exit(-1)\n            except Exception as e:\n                click.echo(click.style('Warning!', fg='red') +\n                    \" Couldn't get function \" + self.lambda_name + ' in ' +\n                    self.zappa.aws_region + ' - have you deployed yet?')\n                sys.exit(-1)\n            if last_updated_unix <= updated_time:\n                click.echo(click.style('Warning!', fg='red') +\n                    ' You may have upgraded Zappa since deploying this application. You will need to '\n                     + click.style('redeploy', bold=True) +\n                    ' for this deployment to work properly!')\n            if self.manage_roles:\n                try:\n                    self.zappa.create_iam_roles()\n                except botocore.client.ClientError:\n                    click.echo(click.style('Failed', fg='red') + ' to ' +\n                        click.style('manage IAM roles', bold=True) + '!')\n                    click.echo('You may ' + click.style(\n                        'lack the necessary AWS permissions', bold=True) +\n                        ' to automatically manage a Zappa execution role.')\n                    click.echo('To fix this, see here: ' + click.style(\n                        'https://github.com/Miserlou/Zappa#using-custom-aws-iam-roles-and-policies'\n                        , bold=True))\n                    sys.exit(-1)\n            if not no_upload:\n                self.create_package()\n                self.callback('zip')\n            if not no_upload:\n                success = self.zappa.upload_to_s3(self.zip_path, self.\n                    s3_bucket_name, disable_progress=self.disable_progress)\n                if not success:\n                    raise ClickException(\n                        'Unable to upload project to S3. Quitting.')\n                if self.stage_config.get('slim_handler', False):\n                    success = self.zappa.upload_to_s3(self.handler_path,\n                        self.s3_bucket_name, disable_progress=self.\n                        disable_progress)\n                    if not success:\n                        raise ClickException(\n                            'Unable to upload handler to S3. Quitting.')\n                    current_project_name = (\n                        '{0!s}_{1!s}_current_project.tar.gz'.format(self.\n                        api_stage, self.project_name))\n                    success = self.zappa.copy_on_s3(src_file_name=self.\n                        zip_path, dst_file_name=current_project_name,\n                        bucket_name=self.s3_bucket_name)\n                    if not success:\n                        raise ClickException(\n                            'Unable to copy the zip to be the current project. Quitting.'\n                            )\n                    handler_file = self.handler_path\n                else:\n                    handler_file = self.zip_path\n        if source_zip and source_zip.startswith('s3://'):\n            bucket, key_name = parse_s3_url(source_zip)\n            self.lambda_arn = self.zappa.update_lambda_function(bucket,\n                self.lambda_name, key_name)\n        elif source_zip and not source_zip.startswith('s3://'):\n            with open(source_zip, mode='rb') as fh:\n                byte_stream = fh.read()\n            self.lambda_arn = self.zappa.update_lambda_function(self.\n                s3_bucket_name, self.lambda_name, local_zip=byte_stream)\n        elif not no_upload:\n            self.lambda_arn = self.zappa.update_lambda_function(self.\n                s3_bucket_name, self.lambda_name, handler_file)\n        if not source_zip and not no_upload:\n            self.remove_uploaded_zip()\n        self.lambda_arn = self.zappa.update_lambda_configuration(lambda_arn\n            =self.lambda_arn, function_name=self.lambda_name, handler=self.\n            lambda_handler, description=self.lambda_description, vpc_config\n            =self.vpc_config, timeout=self.timeout_seconds, memory_size=\n            self.memory_size, runtime=self.runtime,\n            aws_environment_variables=self.aws_environment_variables,\n            aws_kms_key_arn=self.aws_kms_key_arn)\n        if not source_zip and not no_upload:\n            if self.stage_config.get('delete_local_zip', True):\n                self.remove_local_zip()\n        if self.use_apigateway:\n            self.zappa.create_stack_template(lambda_arn=self.lambda_arn,\n                lambda_name=self.lambda_name, api_key_required=self.\n                api_key_required, iam_authorization=self.iam_authorization,\n                authorizer=self.authorizer, cors_options=self.cors,\n                description=self.apigateway_description)\n            self.zappa.update_stack(self.lambda_name, self.s3_bucket_name,\n                wait=True, update_only=True, disable_progress=self.\n                disable_progress)\n            api_id = self.zappa.get_api_id(self.lambda_name)\n            if self.binary_support:\n                self.zappa.add_binary_support(api_id=api_id, cors=self.cors)\n            else:\n                self.zappa.remove_binary_support(api_id=api_id, cors=self.cors)\n            if self.stage_config.get('payload_compression', True):\n                self.zappa.add_api_compression(api_id=api_id,\n                    min_compression_size=self.stage_config.get(\n                    'payload_minimum_compression_size', 0))\n            else:\n                self.zappa.remove_api_compression(api_id=api_id)\n            endpoint_url = self.deploy_api_gateway(api_id)\n            if self.stage_config.get('domain', None):\n                endpoint_url = self.stage_config.get('domain')\n        else:\n            endpoint_url = None\n        self.schedule()\n        self.update_cognito_triggers()\n        self.callback('post')\n        if endpoint_url and 'https://' not in endpoint_url:\n            endpoint_url = 'https://' + endpoint_url\n        deployed_string = 'Your updated Zappa deployment is ' + click.style(\n            'live', fg='green', bold=True) + '!'\n        if self.use_apigateway:\n            deployed_string = deployed_string + ': ' + click.style('{}'.\n                format(endpoint_url), bold=True)\n            api_url = None\n            if endpoint_url and 'amazonaws.com' not in endpoint_url:\n                api_url = self.zappa.get_api_url(self.lambda_name, self.\n                    api_stage)\n                if endpoint_url != api_url:\n                    deployed_string = deployed_string + ' (' + api_url + ')'\n            if self.stage_config.get('touch', True):\n                if api_url:\n                    self.touch_endpoint(api_url)\n                elif endpoint_url:\n                    self.touch_endpoint(endpoint_url)\n        click.echo(deployed_string)\n\n    def rollback(self, revision):\n        \"\"\"\n        Rollsback the currently deploy lambda code to a previous revision.\n        \"\"\"\n        print('Rolling back..')\n        self.zappa.rollback_lambda_function_version(self.lambda_name,\n            versions_back=revision)\n        print('Done!')\n\n    def tail(self, since, filter_pattern, limit=10000, keep_open=True,\n        colorize=True, http=False, non_http=False, force_colorize=False):\n        \"\"\"\n        Tail this function's logs.\n\n        if keep_open, do so repeatedly, printing any new logs\n        \"\"\"\n        try:\n            since_stamp = string_to_timestamp(since)\n            last_since = since_stamp\n            while True:\n                new_logs = self.zappa.fetch_logs(self.lambda_name,\n                    start_time=since_stamp, limit=limit, filter_pattern=\n                    filter_pattern)\n                new_logs = [e for e in new_logs if e['timestamp'] > last_since]\n                self.print_logs(new_logs, colorize, http, non_http,\n                    force_colorize)\n                if not keep_open:\n                    break\n                if new_logs:\n                    last_since = new_logs[-1]['timestamp']\n                time.sleep(1)\n        except KeyboardInterrupt:\n            try:\n                sys.exit(0)\n            except SystemExit:\n                os._exit(130)\n\n    def undeploy(self, no_confirm=False, remove_logs=False):\n        \"\"\"\n        Tear down an existing deployment.\n        \"\"\"\n        if not no_confirm:\n            confirm = input('Are you sure you want to undeploy? [y/n] ')\n            if confirm != 'y':\n                return\n        if self.use_apigateway:\n            if remove_logs:\n                self.zappa.remove_api_gateway_logs(self.lambda_name)\n            domain_name = self.stage_config.get('domain', None)\n            if self.api_key_required and self.api_key is None:\n                api_id = self.zappa.get_api_id(self.lambda_name)\n                self.zappa.remove_api_key(api_id, self.api_stage)\n            gateway_id = self.zappa.undeploy_api_gateway(self.lambda_name,\n                domain_name=domain_name)\n        self.unschedule()\n        self.zappa.delete_lambda_function(self.lambda_name)\n        if remove_logs:\n            self.zappa.remove_lambda_function_logs(self.lambda_name)\n        click.echo(click.style('Done', fg='green', bold=True) + '!')\n\n    def update_cognito_triggers(self):\n        \"\"\"\n        Update any cognito triggers\n        \"\"\"\n        if self.cognito:\n            user_pool = self.cognito.get('user_pool')\n            triggers = self.cognito.get('triggers', [])\n            lambda_configs = set()\n            for trigger in triggers:\n                lambda_configs.add(trigger['source'].split('_')[0])\n            self.zappa.update_cognito(self.lambda_name, user_pool,\n                lambda_configs, self.lambda_arn)\n\n    def schedule(self):\n        \"\"\"\n        Given a a list of functions and a schedule to execute them,\n        setup up regular execution.\n\n        \"\"\"\n        events = self.stage_config.get('events', [])\n        if events:\n            if not isinstance(events, list):\n                print('Events must be supplied as a list.')\n                return\n        for event in events:\n            self.collision_warning(event.get('function'))\n        if self.stage_config.get('keep_warm', True):\n            if not events:\n                events = []\n            keep_warm_rate = self.stage_config.get('keep_warm_expression',\n                'rate(4 minutes)')\n            events.append({'name': 'zappa-keep-warm', 'function':\n                'handler.keep_warm_callback', 'expression': keep_warm_rate,\n                'description': 'Zappa Keep Warm - {}'.format(self.lambda_name)}\n                )\n        if events:\n            try:\n                function_response = self.zappa.lambda_client.get_function(\n                    FunctionName=self.lambda_name)\n            except botocore.exceptions.ClientError as e:\n                click.echo(click.style('Function does not exist', fg=\n                    'yellow') + ', please ' + click.style('deploy', bold=\n                    True) + 'first. Ex:' + click.style('zappa deploy {}.'.\n                    format(self.api_stage), bold=True))\n                sys.exit(-1)\n            print('Scheduling..')\n            self.zappa.schedule_events(lambda_arn=function_response[\n                'Configuration']['FunctionArn'], lambda_name=self.\n                lambda_name, events=events)\n        if self.stage_config.get('async_source', None\n            ) == 'sns' and self.stage_config.get('async_resources', True):\n            self.lambda_arn = self.zappa.get_lambda_function(function_name=\n                self.lambda_name)\n            topic_arn = self.zappa.create_async_sns_topic(lambda_name=self.\n                lambda_name, lambda_arn=self.lambda_arn)\n            click.echo('SNS Topic created: %s' % topic_arn)\n        table_name = self.stage_config.get('async_response_table', False)\n        read_capacity = self.stage_config.get(\n            'async_response_table_read_capacity', 1)\n        write_capacity = self.stage_config.get(\n            'async_response_table_write_capacity', 1)\n        if table_name and self.stage_config.get('async_resources', True):\n            created, response_table = self.zappa.create_async_dynamodb_table(\n                table_name, read_capacity, write_capacity)\n            if created:\n                click.echo('DynamoDB table created: %s' % table_name)\n            else:\n                click.echo('DynamoDB table exists: %s' % table_name)\n                provisioned_throughput = response_table['Table'][\n                    'ProvisionedThroughput']\n                if provisioned_throughput['ReadCapacityUnits'\n                    ] != read_capacity or provisioned_throughput[\n                    'WriteCapacityUnits'] != write_capacity:\n                    click.echo(click.style(\n                        \"\"\"\nWarning! Existing DynamoDB table ({}) does not match configured capacity.\n\"\"\"\n                        .format(table_name), fg='red'))\n\n    def unschedule(self):\n        \"\"\"\n        Given a a list of scheduled functions,\n        tear down their regular execution.\n\n        \"\"\"\n        events = self.stage_config.get('events', [])\n        if not isinstance(events, list):\n            print('Events must be supplied as a list.')\n            return\n        function_arn = None\n        try:\n            function_response = self.zappa.lambda_client.get_function(\n                FunctionName=self.lambda_name)\n            function_arn = function_response['Configuration']['FunctionArn']\n        except botocore.exceptions.ClientError as e:\n            raise ClickException(\n                'Function does not exist, you should deploy first. Ex: zappa deploy {}. Proceeding to unschedule CloudWatch based events.'\n                .format(self.api_stage))\n        print('Unscheduling..')\n        self.zappa.unschedule_events(lambda_name=self.lambda_name,\n            lambda_arn=function_arn, events=events)\n        if self.stage_config.get('async_source', None\n            ) == 'sns' and self.stage_config.get('async_resources', True):\n            removed_arns = self.zappa.remove_async_sns_topic(self.lambda_name)\n            click.echo('SNS Topic removed: %s' % ', '.join(removed_arns))\n\n    def invoke(self, function_name, raw_python=False, command=None,\n        no_color=False):\n        \"\"\"\n        Invoke a remote function.\n        \"\"\"\n        key = command if command is not None else 'command'\n        if raw_python:\n            command = {'raw_command': function_name}\n        else:\n            command = {key: function_name}\n        import json as json\n        response = self.zappa.invoke_lambda_function(self.lambda_name, json\n            .dumps(command), invocation_type='RequestResponse')\n        if 'LogResult' in response:\n            if no_color:\n                print(base64.b64decode(response['LogResult']))\n            else:\n                decoded = base64.b64decode(response['LogResult']).decode()\n                formatted = self.format_invoke_command(decoded)\n                colorized = self.colorize_invoke_command(formatted)\n                print(colorized)\n        else:\n            print(response)\n        if 'FunctionError' in response:\n            raise ClickException('{} error occured while invoking command.'\n                .format(response['FunctionError']))\n\n    def format_invoke_command(self, string):\n        \"\"\"\n        Formats correctly the string ouput from the invoke() method,\n        replacing line breaks and tabs when necessary.\n        \"\"\"\n        string = string.replace('\\\\n', '\\n')\n        formated_response = ''\n        for line in string.splitlines():\n            if line.startswith('REPORT'):\n                line = line.replace('\\t', '\\n')\n            if line.startswith('[DEBUG]'):\n                line = line.replace('\\t', ' ')\n            formated_response += line + '\\n'\n        formated_response = formated_response.replace('\\n\\n', '\\n')\n        return formated_response\n\n    def colorize_invoke_command(self, string):\n        \"\"\"\n        Apply various heuristics to return a colorized version the invoke\n        comman string. If these fail, simply return the string in plaintext.\n\n        Inspired by colorize_log_entry().\n        \"\"\"\n        final_string = string\n        try:\n            try:\n                for token in ['START', 'END', 'REPORT', '[DEBUG]']:\n                    if token in final_string:\n                        format_string = '[{}]'\n                        pattern = '\\\\b{}\\\\b'\n                        if token == '[DEBUG]':\n                            format_string = '{}'\n                            pattern = re.escape(token)\n                        repl = click.style(format_string.format(token),\n                            bold=True, fg='cyan')\n                        final_string = re.sub(pattern.format(token), repl,\n                            final_string)\n            except Exception:\n                pass\n            try:\n                for token in ['Zappa Event:', 'RequestId:', 'Version:',\n                    'Duration:', 'Billed', 'Memory Size:', 'Max Memory Used:']:\n                    if token in final_string:\n                        final_string = final_string.replace(token, click.\n                            style(token, bold=True, fg='green'))\n            except Exception:\n                pass\n            for token in final_string.replace('\\t', ' ').split(' '):\n                try:\n                    if token.count('-') is 4 and token.replace('-', ''\n                        ).isalnum():\n                        final_string = final_string.replace(token, click.\n                            style(token, fg='magenta'))\n                except Exception:\n                    pass\n            return final_string\n        except Exception:\n            return string\n\n    def status(self, return_json=False):\n        \"\"\"\n        Describe the status of the current deployment.\n        \"\"\"\n\n        def tabular_print(title, value):\n            \"\"\"\n            Convience function for priting formatted table items.\n            \"\"\"\n            click.echo('%-*s%s' % (32, click.style('\\t' + title, fg='green'\n                ) + ':', str(value)))\n            return\n        lambda_versions = self.zappa.get_lambda_function_versions(self.\n            lambda_name)\n        if not lambda_versions:\n            raise ClickException(click.style(\n                'No Lambda %s detected in %s - have you deployed yet?' % (\n                self.lambda_name, self.zappa.aws_region), fg='red'))\n        status_dict = collections.OrderedDict()\n        status_dict['Lambda Versions'] = len(lambda_versions)\n        function_response = self.zappa.lambda_client.get_function(FunctionName\n            =self.lambda_name)\n        conf = function_response['Configuration']\n        self.lambda_arn = conf['FunctionArn']\n        status_dict['Lambda Name'] = self.lambda_name\n        status_dict['Lambda ARN'] = self.lambda_arn\n        status_dict['Lambda Role ARN'] = conf['Role']\n        status_dict['Lambda Handler'] = conf['Handler']\n        status_dict['Lambda Code Size'] = conf['CodeSize']\n        status_dict['Lambda Version'] = conf['Version']\n        status_dict['Lambda Last Modified'] = conf['LastModified']\n        status_dict['Lambda Memory Size'] = conf['MemorySize']\n        status_dict['Lambda Timeout'] = conf['Timeout']\n        status_dict['Lambda Runtime'] = conf['Runtime']\n        if 'VpcConfig' in conf.keys():\n            status_dict['Lambda VPC ID'] = conf.get('VpcConfig', {}).get(\n                'VpcId', 'Not assigned')\n        else:\n            status_dict['Lambda VPC ID'] = None\n        try:\n            function_invocations = self.zappa.cloudwatch.get_metric_statistics(\n                Namespace='AWS/Lambda', MetricName='Invocations', StartTime\n                =datetime.utcnow() - timedelta(days=1), EndTime=datetime.\n                utcnow(), Period=1440, Statistics=['Sum'], Dimensions=[{\n                'Name': 'FunctionName', 'Value': '{}'.format(self.\n                lambda_name)}])['Datapoints'][0]['Sum']\n        except Exception as e:\n            function_invocations = 0\n        try:\n            function_errors = self.zappa.cloudwatch.get_metric_statistics(\n                Namespace='AWS/Lambda', MetricName='Errors', StartTime=\n                datetime.utcnow() - timedelta(days=1), EndTime=datetime.\n                utcnow(), Period=1440, Statistics=['Sum'], Dimensions=[{\n                'Name': 'FunctionName', 'Value': '{}'.format(self.\n                lambda_name)}])['Datapoints'][0]['Sum']\n        except Exception as e:\n            function_errors = 0\n        try:\n            error_rate = '{0:.2f}%'.format(function_errors /\n                function_invocations * 100)\n        except:\n            error_rate = 'Error calculating'\n        status_dict['Invocations (24h)'] = int(function_invocations)\n        status_dict['Errors (24h)'] = int(function_errors)\n        status_dict['Error Rate (24h)'] = error_rate\n        if self.use_apigateway:\n            api_url = self.zappa.get_api_url(self.lambda_name, self.api_stage)\n            status_dict['API Gateway URL'] = api_url\n            api_id = self.zappa.get_api_id(self.lambda_name)\n            for api_key in self.zappa.get_api_keys(api_id, self.api_stage):\n                status_dict['API Gateway x-api-key'] = api_key\n            domain_url = self.stage_config.get('domain', None)\n            if domain_url:\n                status_dict['Domain URL'] = 'https://' + domain_url\n            else:\n                status_dict['Domain URL'] = 'None Supplied'\n        event_rules = self.zappa.get_event_rules_for_lambda(lambda_arn=self\n            .lambda_arn)\n        status_dict['Num. Event Rules'] = len(event_rules)\n        if len(event_rules) > 0:\n            status_dict['Events'] = []\n        for rule in event_rules:\n            event_dict = {}\n            rule_name = rule['Name']\n            event_dict['Event Rule Name'] = rule_name\n            event_dict['Event Rule Schedule'] = rule.get(u'ScheduleExpression',\n                None)\n            event_dict['Event Rule State'] = rule.get(u'State', None).title()\n            event_dict['Event Rule ARN'] = rule.get(u'Arn', None)\n            status_dict['Events'].append(event_dict)\n        if return_json:\n            print(json.dumpsJSON(status_dict))\n        else:\n            click.echo('Status for ' + click.style(self.lambda_name, bold=\n                True) + ': ')\n            for k, v in status_dict.items():\n                if k == 'Events':\n                    for event in v:\n                        for item_k, item_v in event.items():\n                            tabular_print(item_k, item_v)\n                else:\n                    tabular_print(k, v)\n        return True\n\n    def check_stage_name(self, stage_name):\n        \"\"\"\n        Make sure the stage name matches the AWS-allowed pattern\n\n        (calls to apigateway_client.create_deployment, will fail with error\n        message \"ClientError: An error occurred (BadRequestException) when\n        calling the CreateDeployment operation: Stage name only allows\n        a-zA-Z0-9_\" if the pattern does not match)\n        \"\"\"\n        if self.stage_name_env_pattern.match(stage_name):\n            return True\n        raise ValueError('AWS requires stage name to match a-zA-Z0-9_')\n\n    def check_environment(self, environment):\n        \"\"\"\n        Make sure the environment contains only strings\n\n        (since putenv needs a string)\n        \"\"\"\n        non_strings = []\n        for k, v in environment.items():\n            if not isinstance(v, basestring):\n                non_strings.append(k)\n        if non_strings:\n            raise ValueError(\n                'The following environment variables are not strings: {}'.\n                format(', '.join(non_strings)))\n        else:\n            return True\n\n    def init(self, settings_file='zappa_settings.json'):\n        \"\"\"\n        Initialize a new Zappa project by creating a new zappa_settings.json in a guided process.\n\n        This should probably be broken up into few separate componants once it's stable.\n        Testing these inputs requires monkeypatching with mock, which isn't pretty.\n\n        \"\"\"\n        self.check_venv()\n        if os.path.isfile(settings_file):\n            raise ClickException('This project already has a ' + click.\n                style('{0!s} file'.format(settings_file), fg='red', bold=\n                True) + '!')\n        click.echo(click.style(\n            u\"\"\"\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557\n\u255a\u2550\u2550\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n  \u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\n \u2588\u2588\u2588\u2554\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\n\"\"\"\n            , fg='green', bold=True))\n        click.echo(click.style('Welcome to ', bold=True) + click.style(\n            'Zappa', fg='green', bold=True) + click.style('!\\n', bold=True))\n        click.echo(click.style('Zappa', bold=True) +\n            ' is a system for running server-less Python web applications on AWS Lambda and AWS API Gateway.'\n            )\n        click.echo(\n            'This `init` command will help you create and configure your new Zappa deployment.'\n            )\n        click.echo(\"Let's get started!\\n\")\n        while True:\n            click.echo(\n                \"Your Zappa configuration can support multiple production stages, like '\"\n                 + click.style('dev', bold=True) + \"', '\" + click.style(\n                'staging', bold=True) + \"', and '\" + click.style(\n                'production', bold=True) + \"'.\")\n            env = input(\n                \"What do you want to call this environment (default 'dev'): \"\n                ) or 'dev'\n            try:\n                self.check_stage_name(env)\n                break\n            except ValueError:\n                click.echo(click.style('Stage names must match a-zA-Z0-9_',\n                    fg='red'))\n        session = botocore.session.Session()\n        config = session.full_config\n        profiles = config.get('profiles', {})\n        profile_names = list(profiles.keys())\n        click.echo(\n            \"\"\"\nAWS Lambda and API Gateway are only available in certain regions. Let's check to make sure you have a profile set up in one that will work.\"\"\"\n            )\n        if not profile_names:\n            profile_name, profile = None, None\n            click.echo(\n                \"We couldn't find an AWS profile to use. Before using Zappa, you'll need to set one up. See here for more info: {}\"\n                .format(click.style(BOTO3_CONFIG_DOCS_URL, fg='blue',\n                underline=True)))\n        elif len(profile_names) == 1:\n            profile_name = profile_names[0]\n            profile = profiles[profile_name]\n            click.echo('Okay, using profile {}!'.format(click.style(\n                profile_name, bold=True)))\n        else:\n            if 'default' in profile_names:\n                default_profile = [p for p in profile_names if p == 'default'][\n                    0]\n            else:\n                default_profile = profile_names[0]\n            while True:\n                profile_name = input(\n                    \"We found the following profiles: {}, and {}. Which would you like us to use? (default '{}'): \"\n                    .format(', '.join(profile_names[:-1]), profile_names[-1\n                    ], default_profile)) or default_profile\n                if profile_name in profiles:\n                    profile = profiles[profile_name]\n                    break\n                else:\n                    click.echo(\n                        'Please enter a valid name for your AWS profile.')\n        profile_region = profile.get('region') if profile else None\n        click.echo(\n            '\\nYour Zappa deployments will need to be uploaded to a ' +\n            click.style('private S3 bucket', bold=True) + '.')\n        click.echo(\n            \"If you don't have a bucket yet, we'll create one for you too.\")\n        default_bucket = 'zappa-' + ''.join(random.choice(string.\n            ascii_lowercase + string.digits) for _ in range(9))\n        bucket = input(\n            \"What do you want call your bucket? (default '%s'): \" %\n            default_bucket) or default_bucket\n        try:\n            import django\n            has_django = True\n        except ImportError as e:\n            has_django = False\n        try:\n            import flask\n            has_flask = True\n        except ImportError as e:\n            has_flask = False\n        print('')\n        if has_django:\n            click.echo('It looks like this is a ' + click.style('Django',\n                bold=True) + ' application!')\n            click.echo('What is the ' + click.style('module path', bold=\n                True) + \" to your projects's Django settings?\")\n            django_settings = None\n            matches = detect_django_settings()\n            while django_settings in [None, '']:\n                if matches:\n                    click.echo('We discovered: ' + click.style(', '.join(\n                        '{}'.format(i) for v, i in enumerate(matches)),\n                        bold=True))\n                    django_settings = input(\n                        \"Where are your project's settings? (default '%s'): \" %\n                        matches[0]) or matches[0]\n                else:\n                    click.echo(\n                        \"(This will likely be something like 'your_project.settings')\"\n                        )\n                    django_settings = input(\n                        \"Where are your project's settings?: \")\n            django_settings = django_settings.replace(\"'\", '')\n            django_settings = django_settings.replace('\"', '')\n        else:\n            matches = None\n            if has_flask:\n                click.echo('It looks like this is a ' + click.style('Flask',\n                    bold=True) + ' application.')\n                matches = detect_flask_apps()\n            click.echo(\"What's the \" + click.style('modular path', bold=\n                True) + \" to your app's function?\")\n            click.echo(\"This will likely be something like 'your_module.app'.\")\n            app_function = None\n            while app_function in [None, '']:\n                if matches:\n                    click.echo('We discovered: ' + click.style(', '.join(\n                        '{}'.format(i) for v, i in enumerate(matches)),\n                        bold=True))\n                    app_function = input(\n                        \"Where is your app's function? (default '%s'): \" %\n                        matches[0]) or matches[0]\n                else:\n                    app_function = input(\"Where is your app's function?: \")\n            app_function = app_function.replace(\"'\", '')\n            app_function = app_function.replace('\"', '')\n        click.echo('\\nYou can optionally deploy to ' + click.style(\n            'all available regions', bold=True) +\n            ' in order to provide fast global service.')\n        click.echo(\n            \"If you are using Zappa for the first time, you probably don't want to do this!\"\n            )\n        global_deployment = False\n        while True:\n            global_type = input(\n                'Would you like to deploy this application ' + click.style(\n                'globally', bold=True) + \"? (default 'n') [y/n/(p)rimary]: \")\n            if not global_type:\n                break\n            if global_type.lower() in ['y', 'yes', 'p', 'primary']:\n                global_deployment = True\n                break\n            if global_type.lower() in ['n', 'no']:\n                global_deployment = False\n                break\n        zappa_settings = {env: {'profile_name': profile_name, 's3_bucket':\n            bucket, 'runtime': 'python3.6' if sys.version_info[0] == 3 else\n            'python2.7', 'project_name': self.get_project_name()}}\n        if profile_region:\n            zappa_settings[env]['aws_region'] = profile_region\n        if has_django:\n            zappa_settings[env]['django_settings'] = django_settings\n        else:\n            zappa_settings[env]['app_function'] = app_function\n        if global_deployment:\n            additional_regions = [r for r in API_GATEWAY_REGIONS if r !=\n                profile_region]\n            if global_type.lower() in ['p', 'primary']:\n                additional_regions = [r for r in additional_regions if '-1' in\n                    r]\n            for region in additional_regions:\n                env_name = env + '_' + region.replace('-', '_')\n                g_env = {env_name: {'extends': env, 'aws_region': region}}\n                zappa_settings.update(g_env)\n        import json as json\n        zappa_settings_json = json.dumps(zappa_settings, sort_keys=True,\n            indent=4)\n        click.echo(\"\\nOkay, here's your \" + click.style(\n            'zappa_settings.json', bold=True) + ':\\n')\n        click.echo(click.style(zappa_settings_json, fg='yellow', bold=False))\n        confirm = input('\\nDoes this look ' + click.style('okay', bold=True,\n            fg='green') + \"? (default 'y') [y/n]: \") or 'yes'\n        if confirm[0] not in ['y', 'Y', 'yes', 'YES']:\n            click.echo('' + click.style('Sorry', bold=True, fg='red') +\n                ' to hear that! Please init again.')\n            return\n        with open('zappa_settings.json', 'w') as zappa_settings_file:\n            zappa_settings_file.write(zappa_settings_json)\n        if global_deployment:\n            click.echo('\\n' + click.style('Done', bold=True) +\n                '! You can also ' + click.style('deploy all', bold=True) +\n                ' by executing:\\n')\n            click.echo(click.style('\\t$ zappa deploy --all', bold=True))\n            click.echo('\\nAfter that, you can ' + click.style('update',\n                bold=True) + \"\"\" your application code with:\n\"\"\")\n            click.echo(click.style('\\t$ zappa update --all', bold=True))\n        else:\n            click.echo('\\n' + click.style('Done', bold=True) +\n                '! Now you can ' + click.style('deploy', bold=True) +\n                \"\"\" your Zappa application by executing:\n\"\"\")\n            click.echo(click.style('\\t$ zappa deploy %s' % env, bold=True))\n            click.echo('\\nAfter that, you can ' + click.style('update',\n                bold=True) + \"\"\" your application code with:\n\"\"\")\n            click.echo(click.style('\\t$ zappa update %s' % env, bold=True))\n        click.echo('\\nTo learn more, check out our project page on ' +\n            click.style('GitHub', bold=True) + ' here: ' + click.style(\n            'https://github.com/Miserlou/Zappa', fg='cyan', bold=True))\n        click.echo('and stop by our ' + click.style('Slack', bold=True) +\n            ' channel here: ' + click.style('https://slack.zappa.io', fg=\n            'cyan', bold=True))\n        click.echo('\\nEnjoy!,')\n        click.echo(' ~ Team ' + click.style('Zappa', bold=True) + '!')\n        return\n\n    def certify(self, no_confirm=True, manual=False):\n        \"\"\"\n        Register or update a domain certificate for this env.\n        \"\"\"\n        if not self.domain:\n            raise ClickException(\"Can't certify a domain without \" + click.\n                style('domain', fg='red', bold=True) + ' configured!')\n        if not no_confirm:\n            confirm = input('Are you sure you want to certify? [y/n] ')\n            if confirm != 'y':\n                return\n        deployed_versions = self.zappa.get_lambda_function_versions(self.\n            lambda_name)\n        if len(deployed_versions) == 0:\n            raise ClickException('This application ' + click.style(\n                \"isn't deployed yet\", fg='red') +\n                ' - did you mean to call ' + click.style('deploy', bold=\n                True) + '?')\n        account_key_location = self.stage_config.get('lets_encrypt_key', None)\n        cert_location = self.stage_config.get('certificate', None)\n        cert_key_location = self.stage_config.get('certificate_key', None)\n        cert_chain_location = self.stage_config.get('certificate_chain', None)\n        cert_arn = self.stage_config.get('certificate_arn', None)\n        certificate_body = None\n        certificate_private_key = None\n        certificate_chain = None\n        if not cert_location and not cert_arn:\n            if not account_key_location:\n                raise ClickException(\"Can't certify a domain without \" +\n                    click.style('lets_encrypt_key', fg='red', bold=True) +\n                    ' or ' + click.style('certificate', fg='red', bold=True\n                    ) + ' or ' + click.style('certificate_arn', fg='red',\n                    bold=True) + ' configured!')\n            from .letsencrypt import gettempdir\n            if account_key_location.startswith('s3://'):\n                bucket, key_name = parse_s3_url(account_key_location)\n                self.zappa.s3_client.download_file(bucket, key_name, os.\n                    path.join(gettempdir(), 'account.key'))\n            else:\n                from shutil import copyfile\n                copyfile(account_key_location, os.path.join(gettempdir(),\n                    'account.key'))\n        elif not account_key_location and not cert_arn:\n            if (not cert_location or not cert_key_location or not\n                cert_chain_location):\n                raise ClickException(\"Can't certify a domain without \" +\n                    click.style(\n                    'certificate, certificate_key and certificate_chain',\n                    fg='red', bold=True) + ' configured!')\n            with open(cert_location) as f:\n                certificate_body = f.read()\n            with open(cert_key_location) as f:\n                certificate_private_key = f.read()\n            with open(cert_chain_location) as f:\n                certificate_chain = f.read()\n        click.echo('Certifying domain ' + click.style(self.domain, fg=\n            'green', bold=True) + '..')\n        if not cert_location and not cert_arn:\n            from .letsencrypt import get_cert_and_update_domain\n            cert_success = get_cert_and_update_domain(self.zappa, self.\n                lambda_name, self.api_stage, self.domain, manual)\n        else:\n            route53 = self.stage_config.get('route53_enabled', True)\n            if not self.zappa.get_domain_name(self.domain):\n                dns_name = self.zappa.create_domain_name(domain_name=self.\n                    domain, certificate_name=self.domain + '-Zappa-Cert',\n                    certificate_body=certificate_body,\n                    certificate_private_key=certificate_private_key,\n                    certificate_chain=certificate_chain, certificate_arn=\n                    cert_arn, lambda_name=self.lambda_name, stage=self.\n                    api_stage, route53=route53)\n                if route53:\n                    self.zappa.update_route53_records(self.domain, dns_name)\n                print(\n                    'Created a new domain name with supplied certificate. Please note that it can take up to 40 minutes for this domain to be created and propagated through AWS, but it requires no further work on your part.'\n                    )\n            else:\n                self.zappa.update_domain_name(domain_name=self.domain,\n                    certificate_name=self.domain + '-Zappa-Cert',\n                    certificate_body=certificate_body,\n                    certificate_private_key=certificate_private_key,\n                    certificate_chain=certificate_chain, certificate_arn=\n                    cert_arn, lambda_name=self.lambda_name, stage=self.\n                    api_stage, route53=route53)\n            cert_success = True\n        if cert_success:\n            click.echo('Certificate ' + click.style('updated', fg='green',\n                bold=True) + '!')\n        else:\n            click.echo(click.style('Failed', fg='red', bold=True) +\n                ' to generate or install certificate! :(')\n            click.echo('\\n==============\\n')\n            shamelessly_promote()\n\n    def shell(self):\n        \"\"\"\n        Spawn a debug shell.\n        \"\"\"\n        click.echo(click.style('NOTICE!', fg='yellow', bold=True) +\n            ' This is a ' + click.style('local', fg='green', bold=True) +\n            ' shell, inside a ' + click.style('Zappa', bold=True) + ' object!')\n        self.zappa.shell()\n        return\n\n    def callback(self, position):\n        \"\"\"\n        Allows the execution of custom code between creation of the zip file and deployment to AWS.\n\n        :return: None\n        \"\"\"\n        callbacks = self.stage_config.get('callbacks', {})\n        callback = callbacks.get(position)\n        if callback:\n            mod_path, cb_func_name = callback.rsplit('.', 1)\n            try:\n                if mod_path.count('.') >= 1:\n                    mod_folder_path, mod_name = mod_path.rsplit('.', 1)\n                    mod_folder_path_fragments = mod_folder_path.split('.')\n                    working_dir = os.path.join(os.getcwd(), *\n                        mod_folder_path_fragments)\n                else:\n                    mod_name = mod_path\n                    working_dir = os.getcwd()\n                working_dir_importer = pkgutil.get_importer(working_dir)\n                module_ = working_dir_importer.find_module(mod_name\n                    ).load_module(mod_name)\n            except (ImportError, AttributeError):\n                try:\n                    module_ = importlib.import_module(mod_path)\n                except ImportError:\n                    raise ClickException(click.style('Failed ', fg='red') +\n                        'to ' + click.style('import {position} callback '.\n                        format(position=position), bold=True) +\n                        'module: \"{mod_path}\"'.format(mod_path=click.style(\n                        mod_path, bold=True)))\n            if not hasattr(module_, cb_func_name):\n                raise ClickException(click.style('Failed ', fg='red') +\n                    'to ' + click.style('find {position} callback '.format(\n                    position=position), bold=True) +\n                    'function: \"{cb_func_name}\" '.format(cb_func_name=click\n                    .style(cb_func_name, bold=True)) +\n                    'in module \"{mod_path}\"'.format(mod_path=mod_path))\n            cb_func = getattr(module_, cb_func_name)\n            cb_func(self)\n\n    def check_for_update(self):\n        \"\"\"\n        Print a warning if there's a new Zappa version available.\n        \"\"\"\n        try:\n            version = pkg_resources.require('zappa')[0].version\n            updateable = check_new_version_available(version)\n            if updateable:\n                click.echo(click.style('Important!', fg='yellow', bold=True\n                    ) + ' A new version of ' + click.style('Zappa', bold=\n                    True) + ' is available!')\n                click.echo('Upgrade with: ' + click.style(\n                    'pip install zappa --upgrade', bold=True))\n                click.echo(\n                    'Visit the project page on GitHub to see the latest changes: '\n                     + click.style('https://github.com/Miserlou/Zappa',\n                    bold=True))\n        except Exception as e:\n            print(e)\n            return\n\n    def load_settings(self, settings_file=None, session=None):\n        \"\"\"\n        Load the local zappa_settings file.\n\n        An existing boto session can be supplied, though this is likely for testing purposes.\n\n        Returns the loaded Zappa object.\n        \"\"\"\n        if not settings_file:\n            settings_file = self.get_json_or_yaml_settings()\n        if not os.path.isfile(settings_file):\n            raise ClickException('Please configure your zappa_settings file.')\n        self.load_settings_file(settings_file)\n        for stage_name in self.zappa_settings.keys():\n            try:\n                self.check_stage_name(stage_name)\n            except ValueError:\n                raise ValueError(\n                    \"API stage names must match a-zA-Z0-9_ ; '{0!s}' does not.\"\n                    .format(stage_name))\n        if self.api_stage not in self.zappa_settings.keys():\n            raise ClickException(\n                \"Please define stage '{0!s}' in your Zappa settings.\".\n                format(self.api_stage))\n        if 'project_name' in self.stage_config:\n            self.project_name = validate_name(self.stage_config['project_name']\n                )\n        else:\n            self.project_name = self.get_project_name()\n        self.lambda_name = slugify.slugify(self.project_name + '-' + self.\n            api_stage)\n        self.s3_bucket_name = self.stage_config.get('s3_bucket', 'zappa-' +\n            ''.join(random.choice(string.ascii_lowercase + string.digits) for\n            _ in range(9)))\n        self.vpc_config = self.stage_config.get('vpc_config', {})\n        self.memory_size = self.stage_config.get('memory_size', 512)\n        self.app_function = self.stage_config.get('app_function', None)\n        self.exception_handler = self.stage_config.get('exception_handler',\n            None)\n        self.aws_region = self.stage_config.get('aws_region', None)\n        self.debug = self.stage_config.get('debug', True)\n        self.prebuild_script = self.stage_config.get('prebuild_script', None)\n        self.profile_name = self.stage_config.get('profile_name', None)\n        self.log_level = self.stage_config.get('log_level', 'DEBUG')\n        self.domain = self.stage_config.get('domain', None)\n        self.timeout_seconds = self.stage_config.get('timeout_seconds', 30)\n        dead_letter_arn = self.stage_config.get('dead_letter_arn', '')\n        self.dead_letter_config = {'TargetArn': dead_letter_arn\n            } if dead_letter_arn else {}\n        self.cognito = self.stage_config.get('cognito', None)\n        self.use_apigateway = self.stage_config.get('use_apigateway', True)\n        if self.use_apigateway:\n            self.use_apigateway = self.stage_config.get('apigateway_enabled',\n                True)\n        self.apigateway_description = self.stage_config.get(\n            'apigateway_description', None)\n        self.lambda_handler = self.stage_config.get('lambda_handler',\n            'handler.lambda_handler')\n        self.remote_env_bucket = self.stage_config.get('remote_env_bucket',\n            None)\n        self.remote_env_file = self.stage_config.get('remote_env_file', None)\n        self.remote_env = self.stage_config.get('remote_env', None)\n        self.settings_file = self.stage_config.get('settings_file', None)\n        self.django_settings = self.stage_config.get('django_settings', None)\n        self.manage_roles = self.stage_config.get('manage_roles', True)\n        self.binary_support = self.stage_config.get('binary_support', True)\n        self.api_key_required = self.stage_config.get('api_key_required', False\n            )\n        self.api_key = self.stage_config.get('api_key')\n        self.iam_authorization = self.stage_config.get('iam_authorization',\n            False)\n        self.cors = self.stage_config.get('cors', False)\n        self.lambda_description = self.stage_config.get('lambda_description',\n            'Zappa Deployment')\n        self.environment_variables = self.stage_config.get(\n            'environment_variables', {})\n        self.aws_environment_variables = self.stage_config.get(\n            'aws_environment_variables', {})\n        self.check_environment(self.environment_variables)\n        self.authorizer = self.stage_config.get('authorizer', {})\n        self.runtime = self.stage_config.get('runtime',\n            get_runtime_from_python_version())\n        self.aws_kms_key_arn = self.stage_config.get('aws_kms_key_arn', '')\n        self.context_header_mappings = self.stage_config.get(\n            'context_header_mappings', {})\n        self.xray_tracing = self.stage_config.get('xray_tracing', False)\n        self.desired_role_arn = self.stage_config.get('role_arn')\n        self.tags = self.stage_config.get('tags', {})\n        desired_role_name = self.lambda_name + '-ZappaLambdaExecutionRole'\n        self.zappa = Zappa(boto_session=session, profile_name=self.\n            profile_name, aws_region=self.aws_region, load_credentials=self\n            .load_credentials, desired_role_name=desired_role_name,\n            desired_role_arn=self.desired_role_arn, runtime=self.runtime,\n            tags=self.tags, endpoint_urls=self.stage_config.get(\n            'aws_endpoint_urls', {}), xray_tracing=self.xray_tracing)\n        for setting in CUSTOM_SETTINGS:\n            if setting in self.stage_config:\n                setting_val = self.stage_config[setting]\n                if setting.endswith('policy'):\n                    with open(setting_val, 'r') as f:\n                        setting_val = f.read()\n                setattr(self.zappa, setting, setting_val)\n        if self.app_function:\n            self.collision_warning(self.app_function)\n            if self.app_function[-3:] == '.py':\n                click.echo(click.style('Warning!', fg='red', bold=True) +\n                    ' Your app_function is pointing to a ' + click.style(\n                    'file and not a function', bold=True) +\n                    \"! It should probably be something like 'my_file.app', not 'my_file.py'!\"\n                    )\n        return self.zappa\n\n    def get_json_or_yaml_settings(self, settings_name='zappa_settings'):\n        \"\"\"\n        Return zappa_settings path as JSON or YAML (or TOML), as appropriate.\n        \"\"\"\n        zs_json = settings_name + '.json'\n        zs_yml = settings_name + '.yml'\n        zs_yaml = settings_name + '.yaml'\n        zs_toml = settings_name + '.toml'\n        if not os.path.isfile(zs_json) and not os.path.isfile(zs_yml\n            ) and not os.path.isfile(zs_yaml) and not os.path.isfile(zs_toml):\n            raise ClickException(\n                'Please configure a zappa_settings file or call `zappa init`.')\n        if os.path.isfile(zs_json):\n            settings_file = zs_json\n        elif os.path.isfile(zs_toml):\n            settings_file = zs_toml\n        elif os.path.isfile(zs_yml):\n            settings_file = zs_yml\n        else:\n            settings_file = zs_yaml\n        return settings_file\n\n    def load_settings_file(self, settings_file=None):\n        \"\"\"\n        Load our settings file.\n        \"\"\"\n        if not settings_file:\n            settings_file = self.get_json_or_yaml_settings()\n        if not os.path.isfile(settings_file):\n            raise ClickException(\n                'Please configure your zappa_settings file or call `zappa init`.'\n                )\n        path, ext = os.path.splitext(settings_file)\n        if ext == '.yml' or ext == '.yaml':\n            with open(settings_file) as yaml_file:\n                try:\n                    self.zappa_settings = yaml.load(yaml_file)\n                except ValueError:\n                    raise ValueError(\n                        'Unable to load the Zappa settings YAML. It may be malformed.'\n                        )\n        elif ext == '.toml':\n            with open(settings_file) as toml_file:\n                try:\n                    self.zappa_settings = toml.load(toml_file)\n                except ValueError:\n                    raise ValueError(\n                        'Unable to load the Zappa settings TOML. It may be malformed.'\n                        )\n        else:\n            with open(settings_file) as json_file:\n                try:\n                    self.zappa_settings = json.load(json_file)\n                except ValueError:\n                    raise ValueError(\n                        'Unable to load the Zappa settings JSON. It may be malformed.'\n                        )\n\n    def create_package(self, output=None):\n        \"\"\"\n        Ensure that the package can be properly configured,\n        and then create it.\n\n        \"\"\"\n        current_file = os.path.dirname(os.path.abspath(inspect.getfile(\n            inspect.currentframe())))\n        handler_file = os.sep.join(current_file.split(os.sep)[0:]\n            ) + os.sep + 'handler.py'\n        if self.stage_config.get('slim_handler', False):\n            self.zip_path = self.zappa.create_lambda_zip(prefix=self.\n                lambda_name, use_precompiled_packages=self.stage_config.get\n                ('use_precompiled_packages', True), exclude=self.\n                stage_config.get('exclude', []), disable_progress=self.\n                disable_progress, archive_format='tarball')\n            exclude = self.stage_config.get('exclude', [])\n            cur_venv = self.zappa.get_current_venv()\n            exclude.append(cur_venv.split('/')[-1])\n            self.handler_path = self.zappa.create_lambda_zip(prefix=\n                'handler_{0!s}'.format(self.lambda_name), venv=self.zappa.\n                create_handler_venv(), handler_file=handler_file,\n                slim_handler=True, exclude=exclude, output=output,\n                disable_progress=self.disable_progress)\n        else:\n            if sys.version_info[0] < 3:\n                exclude = self.stage_config.get('exclude', ['boto3',\n                    'dateutil', 'botocore', 's3transfer', 'six.py',\n                    'jmespath', 'concurrent'])\n            else:\n                exclude = self.stage_config.get('exclude', ['boto3',\n                    'dateutil', 'botocore', 's3transfer', 'concurrent'])\n            self.zip_path = self.zappa.create_lambda_zip(prefix=self.\n                lambda_name, handler_file=handler_file,\n                use_precompiled_packages=self.stage_config.get(\n                'use_precompiled_packages', True), exclude=exclude, output=\n                output, disable_progress=self.disable_progress)\n            file_stats = os.stat(self.zip_path)\n            if file_stats.st_size > 52428800:\n                print(\n                    \"\"\"\n\nWarning: Application zip package is likely to be too large for AWS Lambda. Try setting \"slim_handler\" to true in your Zappa settings file.\n\n\"\"\"\n                    )\n        if self.stage_config.get('slim_handler', False):\n            handler_zip = self.handler_path\n        else:\n            handler_zip = self.zip_path\n        with zipfile.ZipFile(handler_zip, 'a') as lambda_zip:\n            settings_s = '# Generated by Zappa\\n'\n            if self.app_function:\n                if '.' not in self.app_function:\n                    raise ClickException('Your ' + click.style(\n                        'app_function', fg='red', bold=True) +\n                        ' value is not a modular path.' +\n                        ' It needs to be in the format `' + click.style(\n                        'your_module.your_app_object', bold=True) + '`.')\n                app_module, app_function = self.app_function.rsplit('.', 1)\n                settings_s = (settings_s +\n                    \"APP_MODULE='{0!s}'\\nAPP_FUNCTION='{1!s}'\\n\".format(\n                    app_module, app_function))\n            if self.exception_handler:\n                settings_s += \"EXCEPTION_HANDLER='{0!s}'\\n\".format(self.\n                    exception_handler)\n            else:\n                settings_s += 'EXCEPTION_HANDLER=None\\n'\n            if self.debug:\n                settings_s = settings_s + 'DEBUG=True\\n'\n            else:\n                settings_s = settings_s + 'DEBUG=False\\n'\n            settings_s = settings_s + \"LOG_LEVEL='{0!s}'\\n\".format(self.\n                log_level)\n            if self.binary_support:\n                settings_s = settings_s + 'BINARY_SUPPORT=True\\n'\n            else:\n                settings_s = settings_s + 'BINARY_SUPPORT=False\\n'\n            head_map_dict = {}\n            head_map_dict.update(dict(self.context_header_mappings))\n            settings_s = settings_s + 'CONTEXT_HEADER_MAPPINGS={0}\\n'.format(\n                head_map_dict)\n            if self.domain:\n                settings_s = settings_s + \"DOMAIN='{0!s}'\\n\".format(self.domain\n                    )\n            else:\n                settings_s = settings_s + 'DOMAIN=None\\n'\n            if self.remote_env:\n                settings_s = settings_s + \"REMOTE_ENV='{0!s}'\\n\".format(self\n                    .remote_env)\n            elif self.remote_env_bucket and self.remote_env_file:\n                settings_s = (settings_s +\n                    \"REMOTE_ENV='s3://{0!s}/{1!s}'\\n\".format(self.\n                    remote_env_bucket, self.remote_env_file))\n            env_dict = {}\n            if self.aws_region:\n                env_dict['AWS_REGION'] = self.aws_region\n            env_dict.update(dict(self.environment_variables))\n            try:\n                env_dict = dict((k.encode('ascii').decode('ascii'), v) for \n                    k, v in env_dict.items())\n            except Exception:\n                raise ValueError('Environment variable keys must be ascii.')\n            settings_s = settings_s + 'ENVIRONMENT_VARIABLES={0}\\n'.format(\n                env_dict)\n            settings_s = settings_s + \"API_STAGE='{0!s}'\\n\".format(self.\n                api_stage)\n            settings_s = settings_s + \"PROJECT_NAME='{0!s}'\\n\".format(self.\n                project_name)\n            if self.settings_file:\n                settings_s = settings_s + \"SETTINGS_FILE='{0!s}'\\n\".format(self\n                    .settings_file)\n            else:\n                settings_s = settings_s + 'SETTINGS_FILE=None\\n'\n            if self.django_settings:\n                settings_s = settings_s + \"DJANGO_SETTINGS='{0!s}'\\n\".format(\n                    self.django_settings)\n            else:\n                settings_s = settings_s + 'DJANGO_SETTINGS=None\\n'\n            if self.stage_config.get('slim_handler', False):\n                settings_s += (\n                    \"ARCHIVE_PATH='s3://{0!s}/{1!s}_{2!s}_current_project.tar.gz'\\n\"\n                    .format(self.s3_bucket_name, self.api_stage, self.\n                    project_name))\n                settings_s += 'SLIM_HANDLER=True\\n'\n                include = self.stage_config.get('include', [])\n                if len(include) >= 1:\n                    settings_s += 'INCLUDE=' + str(include) + '\\n'\n            event_mapping = {}\n            events = self.stage_config.get('events', [])\n            for event in events:\n                arn = event.get('event_source', {}).get('arn')\n                function = event.get('function')\n                if arn and function:\n                    event_mapping[arn] = function\n            settings_s = settings_s + 'AWS_EVENT_MAPPING={0!s}\\n'.format(\n                event_mapping)\n            bot_events = self.stage_config.get('bot_events', [])\n            bot_events_mapping = {}\n            for bot_event in bot_events:\n                event_source = bot_event.get('event_source', {})\n                intent = event_source.get('intent')\n                invocation_source = event_source.get('invocation_source')\n                function = bot_event.get('function')\n                if intent and invocation_source and function:\n                    bot_events_mapping[str(intent) + ':' + str(\n                        invocation_source)] = function\n            settings_s = settings_s + 'AWS_BOT_EVENT_MAPPING={0!s}\\n'.format(\n                bot_events_mapping)\n            cognito_trigger_mapping = {}\n            cognito_config = self.stage_config.get('cognito', {})\n            triggers = cognito_config.get('triggers', [])\n            for trigger in triggers:\n                source = trigger.get('source')\n                function = trigger.get('function')\n                if source and function:\n                    cognito_trigger_mapping[source] = function\n            settings_s = settings_s + 'COGNITO_TRIGGER_MAPPING={0!s}\\n'.format(\n                cognito_trigger_mapping)\n            authorizer_function = self.authorizer.get('function', None)\n            if authorizer_function:\n                settings_s += \"AUTHORIZER_FUNCTION='{0!s}'\\n\".format(\n                    authorizer_function)\n            if self.django_settings:\n                base = __file__.rsplit(os.sep, 1)[0]\n                django_py = ''.join(os.path.join(base, 'ext',\n                    'django_zappa.py'))\n                lambda_zip.write(django_py, 'django_zappa_app.py')\n            async_response_table = self.stage_config.get('async_response_table'\n                , '')\n            settings_s += \"ASYNC_RESPONSE_TABLE='{0!s}'\\n\".format(\n                async_response_table)\n            temp_settings = tempfile.NamedTemporaryFile(delete=False)\n            os.chmod(temp_settings.name, 420)\n            temp_settings.write(bytes(settings_s, 'utf-8'))\n            temp_settings.close()\n            lambda_zip.write(temp_settings.name, 'zappa_settings.py')\n            os.unlink(temp_settings.name)\n\n    def remove_local_zip(self):\n        \"\"\"\n        Remove our local zip file.\n        \"\"\"\n        if self.stage_config.get('delete_local_zip', True):\n            try:\n                if os.path.isfile(self.zip_path):\n                    os.remove(self.zip_path)\n                if self.handler_path and os.path.isfile(self.handler_path):\n                    os.remove(self.handler_path)\n            except Exception as e:\n                sys.exit(-1)\n\n    def remove_uploaded_zip(self):\n        \"\"\"\n        Remove the local and S3 zip file after uploading and updating.\n        \"\"\"\n        if self.stage_config.get('delete_s3_zip', True):\n            self.zappa.remove_from_s3(self.zip_path, self.s3_bucket_name)\n            if self.stage_config.get('slim_handler', False):\n                self.zappa.remove_from_s3(self.handler_path, self.\n                    s3_bucket_name)\n\n    def on_exit(self):\n        \"\"\"\n        Cleanup after the command finishes.\n        Always called: SystemExit, KeyboardInterrupt and any other Exception that occurs.\n        \"\"\"\n        if self.zip_path:\n            if self.load_credentials:\n                self.remove_uploaded_zip()\n            self.remove_local_zip()\n\n    def print_logs(self, logs, colorize=True, http=False, non_http=False,\n        force_colorize=None):\n        \"\"\"\n        Parse, filter and print logs to the console.\n\n        \"\"\"\n        for log in logs:\n            timestamp = log['timestamp']\n            message = log['message']\n            if 'START RequestId' in message:\n                continue\n            if 'REPORT RequestId' in message:\n                continue\n            if 'END RequestId' in message:\n                continue\n            if not colorize and not force_colorize:\n                if http:\n                    if self.is_http_log_entry(message.strip()):\n                        print('[' + str(timestamp) + '] ' + message.strip())\n                elif non_http:\n                    if not self.is_http_log_entry(message.strip()):\n                        print('[' + str(timestamp) + '] ' + message.strip())\n                else:\n                    print('[' + str(timestamp) + '] ' + message.strip())\n            elif http:\n                if self.is_http_log_entry(message.strip()):\n                    click.echo(click.style('[', fg='cyan') + click.style(\n                        str(timestamp), bold=True) + click.style(']', fg=\n                        'cyan') + self.colorize_log_entry(message.strip()),\n                        color=force_colorize)\n            elif non_http:\n                if not self.is_http_log_entry(message.strip()):\n                    click.echo(click.style('[', fg='cyan') + click.style(\n                        str(timestamp), bold=True) + click.style(']', fg=\n                        'cyan') + self.colorize_log_entry(message.strip()),\n                        color=force_colorize)\n            else:\n                click.echo(click.style('[', fg='cyan') + click.style(str(\n                    timestamp), bold=True) + click.style(']', fg='cyan') +\n                    self.colorize_log_entry(message.strip()), color=\n                    force_colorize)\n\n    def is_http_log_entry(self, string):\n        \"\"\"\n        Determines if a log entry is an HTTP-formatted log string or not.\n        \"\"\"\n        if 'Zappa Event' in string:\n            return False\n        for token in string.replace('\\t', ' ').split(' '):\n            try:\n                if token.count('.') is 3 and token.replace('.', '').isnumeric(\n                    ):\n                    return True\n            except Exception:\n                pass\n        return False\n\n    def get_project_name(self):\n        return slugify.slugify(os.getcwd().split(os.sep)[-1])[:15]\n\n    def colorize_log_entry(self, string):\n        \"\"\"\n        Apply various heuristics to return a colorized version of a string.\n        If these fail, simply return the string in plaintext.\n        \"\"\"\n        final_string = string\n        try:\n            inside_squares = re.findall('\\\\[([^]]*)\\\\]', string)\n            for token in inside_squares:\n                if token in ['CRITICAL', 'ERROR', 'WARNING', 'DEBUG',\n                    'INFO', 'NOTSET']:\n                    final_string = final_string.replace('[' + token + ']', \n                        click.style('[', fg='cyan') + click.style(token, fg\n                        ='cyan', bold=True) + click.style(']', fg='cyan'))\n                else:\n                    final_string = final_string.replace('[' + token + ']', \n                        click.style('[', fg='cyan') + click.style(token,\n                        bold=True) + click.style(']', fg='cyan'))\n            quotes = re.findall('\"[^\"]*\"', string)\n            for token in quotes:\n                final_string = final_string.replace(token, click.style(\n                    token, fg='yellow'))\n            for token in final_string.replace('\\t', ' ').split(' '):\n                try:\n                    if token.count('-') is 4 and token.replace('-', ''\n                        ).isalnum():\n                        final_string = final_string.replace(token, click.\n                            style(token, fg='magenta'))\n                except Exception:\n                    pass\n                try:\n                    if token.count('.') is 3 and token.replace('.', ''\n                        ).isnumeric():\n                        final_string = final_string.replace(token, click.\n                            style(token, fg='red'))\n                except Exception:\n                    pass\n                try:\n                    if token in ['200']:\n                        final_string = final_string.replace(token, click.\n                            style(token, fg='green'))\n                    if token in ['400', '401', '403', '404', '405', '500']:\n                        final_string = final_string.replace(token, click.\n                            style(token, fg='red'))\n                except Exception:\n                    pass\n            try:\n                if 'Zappa Event:' in final_string:\n                    final_string = final_string.replace('Zappa Event:',\n                        click.style('Zappa Event:', bold=True, fg='green'))\n            except Exception:\n                pass\n            for token in final_string.split('\\t'):\n                try:\n                    is_date = parser.parse(token)\n                    final_string = final_string.replace(token, click.style(\n                        token, fg='green'))\n                except Exception:\n                    pass\n            final_string = final_string.replace('\\t', ' ').replace('   ', ' ')\n            if final_string[0] != ' ':\n                final_string = ' ' + final_string\n            return final_string\n        except Exception as e:\n            return string\n\n    def execute_prebuild_script(self):\n        \"\"\"\n        Parse and execute the prebuild_script from the zappa_settings.\n\n        \"\"\"\n        pb_mod_path, pb_func = self.prebuild_script.rsplit('.', 1)\n        try:\n            if pb_mod_path.count('.') >= 1:\n                mod_folder_path, mod_name = pb_mod_path.rsplit('.', 1)\n                mod_folder_path_fragments = mod_folder_path.split('.')\n                working_dir = os.path.join(os.getcwd(), *\n                    mod_folder_path_fragments)\n            else:\n                mod_name = pb_mod_path\n                working_dir = os.getcwd()\n            working_dir_importer = pkgutil.get_importer(working_dir)\n            module_ = working_dir_importer.find_module(mod_name).load_module(\n                mod_name)\n        except (ImportError, AttributeError):\n            try:\n                module_ = importlib.import_module(pb_mod_path)\n            except ImportError:\n                raise ClickException(click.style('Failed ', fg='red') +\n                    'to ' + click.style('import prebuild script ', bold=\n                    True) + 'module: \"{pb_mod_path}\"'.format(pb_mod_path=\n                    click.style(pb_mod_path, bold=True)))\n        if not hasattr(module_, pb_func):\n            raise ClickException(click.style('Failed ', fg='red') + 'to ' +\n                click.style('find prebuild script ', bold=True) +\n                'function: \"{pb_func}\" '.format(pb_func=click.style(pb_func,\n                bold=True)) + 'in module \"{pb_mod_path}\"'.format(\n                pb_mod_path=pb_mod_path))\n        prebuild_function = getattr(module_, pb_func)\n        prebuild_function()\n\n    def collision_warning(self, item):\n        \"\"\"\n        Given a string, print a warning if this could\n        collide with a Zappa core package module.\n\n        Use for app functions and events.\n        \"\"\"\n        namespace_collisions = ['zappa.', 'wsgi.', 'middleware.',\n            'handler.', 'util.', 'letsencrypt.', 'cli.']\n        for namespace_collision in namespace_collisions:\n            if item.startswith(namespace_collision):\n                click.echo(click.style('Warning!', fg='red', bold=True) +\n                    ' You may have a namespace collision between ' + click.\n                    style(item, bold=True) + ' and ' + click.style(\n                    namespace_collision, bold=True) +\n                    '! You may want to rename that file.')\n\n    def deploy_api_gateway(self, api_id):\n        cache_cluster_enabled = self.stage_config.get('cache_cluster_enabled',\n            False)\n        cache_cluster_size = str(self.stage_config.get('cache_cluster_size',\n            0.5))\n        endpoint_url = self.zappa.deploy_api_gateway(api_id=api_id,\n            stage_name=self.api_stage, cache_cluster_enabled=\n            cache_cluster_enabled, cache_cluster_size=cache_cluster_size,\n            cloudwatch_log_level=self.stage_config.get(\n            'cloudwatch_log_level', 'OFF'), cloudwatch_data_trace=self.\n            stage_config.get('cloudwatch_data_trace', False),\n            cloudwatch_metrics_enabled=self.stage_config.get(\n            'cloudwatch_metrics_enabled', False), cache_cluster_ttl=self.\n            stage_config.get('cache_cluster_ttl', 300),\n            cache_cluster_encrypted=self.stage_config.get(\n            'cache_cluster_encrypted', False))\n        return endpoint_url\n\n    def check_venv(self):\n        \"\"\" Ensure we're inside a virtualenv. \"\"\"\n        if self.zappa:\n            venv = self.zappa.get_current_venv()\n        else:\n            venv = Zappa.get_current_venv()\n        if not venv:\n            raise ClickException(click.style('Zappa', bold=True) +\n                ' requires an ' + click.style('active virtual environment',\n                bold=True, fg='red') + '!\\n' +\n                'Learn more about virtual environments here: ' + click.\n                style(\n                'http://docs.python-guide.org/en/latest/dev/virtualenvs/',\n                bold=False, fg='cyan'))\n\n    def silence(self):\n        \"\"\"\n        Route all stdout to null.\n        \"\"\"\n        sys.stdout = open(os.devnull, 'w')\n        sys.stderr = open(os.devnull, 'w')\n\n    def touch_endpoint(self, endpoint_url):\n        \"\"\"\n        Test the deployed endpoint with a GET request\n        \"\"\"\n        touch_path = self.stage_config.get('touch_path', '/')\n        req = requests.get(endpoint_url + touch_path)\n        if req.status_code >= 500:\n            raise ClickException(click.style('Warning!', fg='red', bold=\n                True) + ' Status check on the deployed lambda failed.' +\n                \" A GET request to '\" + touch_path + \"' yielded a \" + click\n                .style(str(req.status_code), fg='red', bold=True) +\n                ' response code.')\n",
                        "belong_class_name": "ZappaCLI",
                        "belong_class_init": "def __init__(self):\n    self._stage_config_overrides = {}\n"
                    }
                ]
            ]
        },
        "Zappa-1434_cli-1838": {
            "pytest tests/tests.py::TestZappa::test_certify_sanity_checks": [
                [
                    {
                        "function_name": "test_certify_sanity_checks",
                        "function_content": "def test_certify_sanity_checks(self):\n    \"\"\"\n        Make sure 'zappa certify':\n        * Errors out when a deployment hasn't taken place.\n        * Writes errors when certificate settings haven't been specified.\n        * Calls Zappa correctly for creates vs. updates.\n        \"\"\"\n    old_stdout = sys.stderr\n    if sys.version_info[0] < 3:\n        sys.stdout = OldStringIO()\n    try:\n        zappa_cli = ZappaCLI()\n        zappa_cli.domain = 'test.example.com'\n        try:\n            zappa_cli.certify()\n        except AttributeError:\n            pass\n        zappa_mock = mock.create_autospec(Zappa)\n        zappa_mock.function_versions = []\n        zappa_mock.domain_names = {}\n\n        def get_lambda_function_versions(_function_name, *_args, **_kwargs):\n            return zappa_mock.function_versions\n\n        def get_domain_name(domain, *_args, **_kwargs):\n            return zappa_mock.domain_names.get(domain)\n        zappa_mock.get_domain_name.side_effect = get_domain_name\n        zappa_mock.get_lambda_function_versions.side_effect = (\n            get_lambda_function_versions)\n        zappa_cli.zappa = zappa_mock\n        self.assertRaises(ClickException, zappa_cli.certify)\n        zappa_cli.zappa.function_versions = ['$LATEST']\n        zappa_cli.api_stage = 'stage'\n        zappa_cli.zappa_settings = {'stage': {}}\n        zappa_cli.api_stage = 'stage'\n        zappa_cli.domain = 'test.example.com'\n        try:\n            zappa_cli.certify()\n        except ClickException as e:\n            log_output = str(e)\n            self.assertIn(\"Can't certify a domain without\", log_output)\n            self.assertIn('domain', log_output)\n        zappa_cli.zappa_settings['stage']['domain'] = 'test.example.com'\n        try:\n            zappa_cli.certify()\n            self.fail('Expected a ClickException')\n        except ClickException as e:\n            log_output = str(e)\n            self.assertIn(\"Can't certify a domain without\", log_output)\n            self.assertIn('lets_encrypt_key', log_output)\n        zappa_cli.zappa_settings['stage']['certificate'] = 'foo'\n        try:\n            zappa_cli.certify()\n            self.fail('Expected a ClickException')\n        except ClickException as e:\n            log_output = str(e)\n            self.assertIn(\"Can't certify a domain without\", log_output)\n            self.assertIn('certificate_key', log_output)\n            self.assertIn('certificate_chain', log_output)\n        zappa_cli.zappa_settings['stage']['certificate_key'] = 'key'\n        try:\n            zappa_cli.certify()\n            self.fail('Expected a ClickException')\n        except ClickException as e:\n            log_output = str(e)\n            self.assertIn(\"Can't certify a domain without\", log_output)\n            self.assertIn('certificate_key', log_output)\n            self.assertIn('certificate_chain', log_output)\n        zappa_cli.zappa_settings['stage']['certificate_chain'] = 'chain'\n        del zappa_cli.zappa_settings['stage']['certificate_key']\n        try:\n            zappa_cli.certify()\n            self.fail('Expected a ClickException')\n        except ClickException as e:\n            log_output = str(e)\n            self.assertIn(\"Can't certify a domain without\", log_output)\n            self.assertIn('certificate_key', log_output)\n            self.assertIn('certificate_chain', log_output)\n        cert_file = tempfile.NamedTemporaryFile()\n        cert_file.write(b'Hello world')\n        cert_file.flush()\n        zappa_cli.zappa_settings['stage'].update({'certificate': cert_file.\n            name, 'certificate_key': cert_file.name, 'certificate_chain':\n            cert_file.name})\n        sys.stdout.truncate(0)\n        zappa_cli.certify()\n        zappa_cli.zappa.create_domain_name.assert_called_once()\n        zappa_cli.zappa.update_route53_records.assert_called_once()\n        zappa_cli.zappa.update_domain_name.assert_not_called()\n        log_output = sys.stdout.getvalue()\n        self.assertIn('Created a new domain name', log_output)\n        zappa_cli.zappa.reset_mock()\n        zappa_cli.zappa.domain_names['test.example.com'] = '*.example.com'\n        sys.stdout.truncate(0)\n        zappa_cli.certify()\n        zappa_cli.zappa.update_domain_name.assert_called_once()\n        zappa_cli.zappa.update_route53_records.assert_not_called()\n        zappa_cli.zappa.create_domain_name.assert_not_called()\n        log_output = sys.stdout.getvalue()\n        self.assertNotIn('Created a new domain name', log_output)\n        zappa_cli.zappa_settings['stage'].update({'route53_enabled': False})\n        zappa_cli.zappa.reset_mock()\n        zappa_cli.zappa.domain_names['test.example.com'] = ''\n        sys.stdout.truncate(0)\n        zappa_cli.certify()\n        zappa_cli.zappa.create_domain_name.assert_called_once()\n        zappa_cli.zappa.update_route53_records.assert_not_called()\n        zappa_cli.zappa.update_domain_name.assert_not_called()\n        log_output = sys.stdout.getvalue()\n        self.assertIn('Created a new domain name', log_output)\n    finally:\n        sys.stdout = old_stdout\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class TestZappa(unittest.TestCase):\n\n    def setUp(self):\n        self.sleep_patch = mock.patch('time.sleep', return_value=None)\n        self.users_current_region_name = os.environ.get('AWS_DEFAULT_REGION',\n            None)\n        os.environ['AWS_DEFAULT_REGION'] = 'us-east-1'\n        if not os.environ.get('PLACEBO_MODE') == 'record':\n            self.sleep_patch.start()\n\n    def tearDown(self):\n        if not os.environ.get('PLACEBO_MODE') == 'record':\n            self.sleep_patch.stop()\n        del os.environ['AWS_DEFAULT_REGION']\n        if self.users_current_region_name is not None:\n            os.environ['AWS_DEFAULT_REGION'] = self.users_current_region_name\n\n    def test_test(self):\n        self.assertTrue(True)\n\n    def test_zappa(self):\n        self.assertTrue(True)\n        Zappa()\n\n    def test_disable_click_colors(self):\n        disable_click_colors()\n        assert resolve_color_default() is False\n\n    def test_create_lambda_package(self):\n        mock_installed_packages = {'psycopg2': '2.6.1'}\n        with mock.patch('zappa.core.Zappa.get_installed_packages',\n            return_value=mock_installed_packages):\n            z = Zappa(runtime='python2.7')\n            path = z.create_lambda_zip(handler_file=os.path.realpath(__file__))\n            self.assertTrue(os.path.isfile(path))\n            os.remove(path)\n\n    def test_get_manylinux_python27(self):\n        z = Zappa(runtime='python2.7')\n        self.assertIsNotNone(z.get_cached_manylinux_wheel('cffi', '1.10.0'))\n        self.assertIsNone(z.get_cached_manylinux_wheel('derpderpderpderp',\n            '0.0'))\n        mock_installed_packages = {'cffi': '1.10.0'}\n        with mock.patch('zappa.core.Zappa.get_installed_packages',\n            return_value=mock_installed_packages):\n            z = Zappa(runtime='python2.7')\n            path = z.create_lambda_zip(handler_file=os.path.realpath(__file__))\n            self.assertTrue(os.path.isfile(path))\n            os.remove(path)\n\n    def test_get_manylinux_python36(self):\n        z = Zappa(runtime='python3.6')\n        self.assertIsNotNone(z.get_cached_manylinux_wheel('psycopg2', '2.7.1'))\n        self.assertIsNone(z.get_cached_manylinux_wheel('derpderpderpderp',\n            '0.0'))\n        mock_installed_packages = {'psycopg2': '2.7.1'}\n        with mock.patch('zappa.core.Zappa.get_installed_packages',\n            return_value=mock_installed_packages):\n            z = Zappa(runtime='python3.6')\n            path = z.create_lambda_zip(handler_file=os.path.realpath(__file__))\n            self.assertTrue(os.path.isfile(path))\n            os.remove(path)\n\n    def test_should_use_lambda_packages(self):\n        z = Zappa(runtime='python2.7')\n        self.assertTrue(z.have_correct_lambda_package_version('psycopg2',\n            '2.6.1'))\n        self.assertFalse(z.have_correct_lambda_package_version('psycopg2',\n            '2.7.1'))\n        self.assertTrue(z.have_correct_lambda_package_version(\n            'mysql-python', '1.2.5'))\n        self.assertFalse(z.have_correct_lambda_package_version(\n            'mysql-python', '6.6.6'))\n        self.assertTrue(z.have_any_lambda_package_version('psycopg2'))\n        self.assertTrue(z.have_any_lambda_package_version('mysql-python'))\n        self.assertFalse(z.have_any_lambda_package_version('no_package'))\n\n    def test_getting_installed_packages(self, *args):\n        z = Zappa(runtime='python2.7')\n        mock_package = collections.namedtuple('mock_package', [\n            'project_name', 'version', 'location'])\n        mock_pip_installed_packages = [mock_package('super_package', '0.1',\n            '/venv/site-packages')]\n        with mock.patch('os.path.isdir', return_value=True):\n            with mock.patch('os.listdir', return_value=['super_package']):\n                import pip\n                with mock.patch('pip.get_installed_distributions',\n                    return_value=mock_pip_installed_packages):\n                    self.assertDictEqual(z.get_installed_packages('', ''),\n                        {'super_package': '0.1'})\n\n    def test_getting_installed_packages_mixed_case(self, *args):\n        z = Zappa(runtime='python2.7')\n        mock_package = collections.namedtuple('mock_package', [\n            'project_name', 'version', 'location'])\n        mock_pip_installed_packages = [mock_package('SuperPackage', '0.1',\n            '/venv/site-packages')]\n        with mock.patch('os.path.isdir', return_value=True):\n            with mock.patch('os.listdir', return_value=['superpackage']):\n                import pip\n                with mock.patch('pip.get_installed_distributions',\n                    return_value=mock_pip_installed_packages):\n                    self.assertDictEqual(z.get_installed_packages('', ''),\n                        {'superpackage': '0.1'})\n\n    def test_load_credentials(self):\n        z = Zappa()\n        z.aws_region = 'us-east-1'\n        z.load_credentials()\n        self.assertEqual(z.boto_session.region_name, 'us-east-1')\n        self.assertEqual(z.aws_region, 'us-east-1')\n        z.aws_region = 'eu-west-1'\n        z.profile_name = 'default'\n        z.load_credentials()\n        self.assertEqual(z.boto_session.region_name, 'eu-west-1')\n        self.assertEqual(z.aws_region, 'eu-west-1')\n        creds = {'AWS_ACCESS_KEY_ID': 'AK123', 'AWS_SECRET_ACCESS_KEY':\n            'JKL456', 'AWS_DEFAULT_REGION': 'us-west-1'}\n        with mock.patch.dict('os.environ', creds):\n            z.aws_region = None\n            z.load_credentials()\n            loaded_creds = z.boto_session._session.get_credentials()\n        self.assertEqual(loaded_creds.access_key, 'AK123')\n        self.assertEqual(loaded_creds.secret_key, 'JKL456')\n        self.assertEqual(z.boto_session.region_name, 'us-west-1')\n\n    def test_create_api_gateway_routes_with_different_auth_methods(self):\n        z = Zappa()\n        z.parameter_depth = 1\n        z.integration_response_codes = [200]\n        z.method_response_codes = [200]\n        z.http_methods = ['GET']\n        z.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n        lambda_arn = 'arn:aws:lambda:us-east-1:12345:function:helloworld'\n        z.create_stack_template(lambda_arn, 'helloworld', False, False, None)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('NONE', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('NONE', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual(False, parsable_template['Resources']['GET0'][\n            'Properties']['ApiKeyRequired'])\n        self.assertEqual(False, parsable_template['Resources']['GET1'][\n            'Properties']['ApiKeyRequired'])\n        z.create_stack_template(lambda_arn, 'helloworld', False, True, None)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual(False, parsable_template['Resources']['GET0'][\n            'Properties']['ApiKeyRequired'])\n        self.assertEqual(False, parsable_template['Resources']['GET1'][\n            'Properties']['ApiKeyRequired'])\n        z.create_stack_template(lambda_arn, 'helloworld', False, True, None,\n            True)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('NONE', parsable_template['Resources']['OPTIONS0']\n            ['Properties']['AuthorizationType'])\n        self.assertEqual('NONE', parsable_template['Resources']['OPTIONS1']\n            ['Properties']['AuthorizationType'])\n        self.assertEqual('MOCK', parsable_template['Resources']['OPTIONS0']\n            ['Properties']['Integration']['Type'])\n        self.assertEqual('MOCK', parsable_template['Resources']['OPTIONS1']\n            ['Properties']['Integration']['Type'])\n        self.assertEqual(\n            \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n            , parsable_template['Resources']['OPTIONS0']['Properties'][\n            'Integration']['IntegrationResponses'][0]['ResponseParameters']\n            ['method.response.header.Access-Control-Allow-Headers'])\n        self.assertEqual(\n            \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n            , parsable_template['Resources']['OPTIONS1']['Properties'][\n            'Integration']['IntegrationResponses'][0]['ResponseParameters']\n            ['method.response.header.Access-Control-Allow-Headers'])\n        self.assertTrue(parsable_template['Resources']['OPTIONS0'][\n            'Properties']['MethodResponses'][0]['ResponseParameters'][\n            'method.response.header.Access-Control-Allow-Headers'])\n        self.assertTrue(parsable_template['Resources']['OPTIONS1'][\n            'Properties']['MethodResponses'][0]['ResponseParameters'][\n            'method.response.header.Access-Control-Allow-Headers'])\n        self.assertEqual(False, parsable_template['Resources']['GET0'][\n            'Properties']['ApiKeyRequired'])\n        self.assertEqual(False, parsable_template['Resources']['GET1'][\n            'Properties']['ApiKeyRequired'])\n        z.create_stack_template(lambda_arn, 'helloworld', True, True, None)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual(True, parsable_template['Resources']['GET0'][\n            'Properties']['ApiKeyRequired'])\n        self.assertEqual(True, parsable_template['Resources']['GET1'][\n            'Properties']['ApiKeyRequired'])\n        authorizer = {'function':\n            'runapi.authorization.gateway_authorizer.evaluate_token',\n            'result_ttl': 300, 'token_header': 'Authorization',\n            'validation_expression': 'xxx'}\n        z.create_stack_template(lambda_arn, 'helloworld', False, True,\n            authorizer)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        with self.assertRaises(KeyError):\n            parsable_template['Resources']['Authorizer']\n        invocations_uri = (\n            'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/' +\n            lambda_arn + '/invocations')\n        z.create_stack_template(lambda_arn, 'helloworld', False, False,\n            authorizer)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('CUSTOM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('CUSTOM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('TOKEN', parsable_template['Resources'][\n            'Authorizer']['Properties']['Type'])\n        self.assertEqual('ZappaAuthorizer', parsable_template['Resources'][\n            'Authorizer']['Properties']['Name'])\n        self.assertEqual(300, parsable_template['Resources']['Authorizer'][\n            'Properties']['AuthorizerResultTtlInSeconds'])\n        self.assertEqual(invocations_uri, parsable_template['Resources'][\n            'Authorizer']['Properties']['AuthorizerUri'])\n        self.assertEqual(z.credentials_arn, parsable_template['Resources'][\n            'Authorizer']['Properties']['AuthorizerCredentials'])\n        self.assertEqual('xxx', parsable_template['Resources']['Authorizer'\n            ]['Properties']['IdentityValidationExpression'])\n        authorizer.pop('validation_expression', None)\n        z.create_stack_template(lambda_arn, 'helloworld', False, False,\n            authorizer)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('CUSTOM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('CUSTOM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('TOKEN', parsable_template['Resources'][\n            'Authorizer']['Properties']['Type'])\n        with self.assertRaises(KeyError):\n            parsable_template['Resources']['Authorizer']['Properties'][\n                'IdentityValidationExpression']\n        authorizer = {'arn':\n            'arn:aws:lambda:us-east-1:123456789012:function:my-function'}\n        z.create_stack_template(lambda_arn, 'helloworld', False, False,\n            authorizer)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual(\n            'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:123456789012:function:my-function/invocations'\n            , parsable_template['Resources']['Authorizer']['Properties'][\n            'AuthorizerUri'])\n\n    def test_policy_json(self):\n        json.loads(ASSUME_POLICY)\n        json.loads(ATTACH_POLICY)\n\n    def test_schedule_events(self):\n        z = Zappa()\n        path = os.getcwd()\n\n    def test_update_aws_env_vars(self):\n        z = Zappa()\n        z.credentials_arn = object()\n        with mock.patch.object(z, 'lambda_client') as mock_client:\n            mock_client.get_function_configuration.return_value = {\n                'Environment': {'Variables': {'REMOTE_ONLY': 'AAA',\n                'CHANGED_REMOTE': 'BBB'}}}\n            z.update_lambda_configuration('test', 'test', 'test',\n                aws_environment_variables={'CHANGED_REMOTE': 'ZZ',\n                'LOCAL_ONLY': 'YY'})\n            end_result_should_be = {'REMOTE_ONLY': 'AAA', 'CHANGED_REMOTE':\n                'ZZ', 'LOCAL_ONLY': 'YY'}\n            self.assertEqual(mock_client.update_function_configuration.\n                call_args[1]['Environment'], {'Variables':\n                end_result_should_be})\n        with mock.patch.object(z, 'lambda_client') as mock_client:\n            mock_client.get_function_configuration.return_value = {\n                'Environment': {'Variables': {'REMOTE_ONLY_1': 'AAA',\n                'REMOTE_ONLY_2': 'BBB'}}}\n            z.update_lambda_configuration('test', 'test', 'test')\n            end_result_should_be = {'REMOTE_ONLY_1': 'AAA', 'REMOTE_ONLY_2':\n                'BBB'}\n            self.assertEqual(mock_client.update_function_configuration.\n                call_args[1]['Environment'], {'Variables':\n                end_result_should_be})\n\n    def test_update_empty_aws_env_hash(self):\n        z = Zappa()\n        z.credentials_arn = object()\n        with mock.patch.object(z, 'lambda_client') as mock_client:\n            mock_client.get_function_configuration.return_value = {}\n            z.update_lambda_configuration('test', 'test', 'test',\n                aws_environment_variables={'LOCAL_ONLY': 'LZ',\n                'SHOW_AND_TELL': 'SHA'})\n            end_result_should_be = {'LOCAL_ONLY': 'LZ', 'SHOW_AND_TELL': 'SHA'}\n            self.assertEqual(mock_client.update_function_configuration.\n                call_args[1]['Environment'], {'Variables':\n                end_result_should_be})\n\n    def test_logging(self):\n        \"\"\"\n        TODO\n        \"\"\"\n        Zappa()\n\n    def test_wsgi_event(self):\n        event = {u'body': None, u'resource': u'/', u'requestContext': {\n            u'resourceId': u'6cqjw9qu0b', u'apiId': u'9itr2lba55',\n            u'resourcePath': u'/', u'httpMethod': u'GET', u'requestId':\n            u'c17cb1bf-867c-11e6-b938-ed697406e3b5', u'accountId':\n            u'724336686645', u'identity': {u'apiKey': None, u'userArn':\n            None, u'cognitoAuthenticationType': None, u'caller': None,\n            u'userAgent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0'\n            , u'user': None, u'cognitoIdentityPoolId': None,\n            u'cognitoIdentityId': None, u'cognitoAuthenticationProvider':\n            None, u'sourceIp': u'50.191.225.98', u'accountId': None},\n            u'stage': u'devorr'}, u'queryStringParameters': None,\n            u'httpMethod': u'GET', u'pathParameters': None, u'headers': {\n            u'Via':\n            u'1.1 6801928d54163af944bf854db8d5520e.cloudfront.net (CloudFront)'\n            , u'Accept-Language': u'en-US,en;q=0.5', u'Accept-Encoding':\n            u'gzip, deflate, br', u'CloudFront-Is-SmartTV-Viewer': u'false',\n            u'CloudFront-Forwarded-Proto': u'https', u'X-Forwarded-For':\n            u'50.191.225.98, 204.246.168.101', u'CloudFront-Viewer-Country':\n            u'US', u'Accept':\n            u'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            u'Upgrade-Insecure-Requests': u'1', u'Host':\n            u'9itr2lba55.execute-api.us-east-1.amazonaws.com',\n            u'X-Forwarded-Proto': u'https', u'X-Amz-Cf-Id':\n            u'qgNdqKT0_3RMttu5KjUdnvHI3OKm1BWF8mGD2lX8_rVrJQhhp-MLDw==',\n            u'CloudFront-Is-Tablet-Viewer': u'false', u'X-Forwarded-Port':\n            u'443', u'User-Agent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0'\n            , u'CloudFront-Is-Mobile-Viewer': u'false',\n            u'CloudFront-Is-Desktop-Viewer': u'true'}, u'stageVariables':\n            None, u'path': u'/'}\n        request = create_wsgi_request(event)\n\n    def test_wsgi_path_info_unquoted(self):\n        event = {'body': {}, 'headers': {}, 'pathParameters': {}, 'path':\n            '/path%3A1', 'httpMethod': 'GET', 'queryStringParameters': {},\n            'requestContext': {}}\n        request = create_wsgi_request(event, trailing_slash=True)\n        self.assertEqual('/path:1', request['PATH_INFO'])\n\n    def test_wsgi_latin1(self):\n        event = {'body': {}, 'headers': {}, 'pathParameters': {}, 'path':\n            '/path/%E4%BB%8A%E6%97%A5%E3%81%AF', 'httpMethod': 'GET',\n            'queryStringParameters': {'a': '%E4%BB%8A%E6%97%A5%E3%81%AF'},\n            'requestContext': {}}\n        request = create_wsgi_request(event, script_name=\n            '%E4%BB%8A%E6%97%A5%E3%81%AF')\n        request['PATH_INFO'].encode('iso-8859-1')\n        request['QUERY_STRING'].encode('iso-8859-1')\n        request['SCRIPT_NAME'].encode('iso-8859-1')\n\n    def test_wsgi_logging(self):\n        event = {u'body': None, u'resource': u'/{proxy+}',\n            u'requestContext': {u'resourceId': u'dg451y', u'apiId':\n            u'79gqbxq31c', u'resourcePath': u'/{proxy+}', u'httpMethod':\n            u'GET', u'requestId': u'766df67f-8991-11e6-b2c4-d120fedb94e5',\n            u'accountId': u'724336686645', u'identity': {u'apiKey': None,\n            u'userArn': None, u'cognitoAuthenticationType': None, u'caller':\n            None, u'userAgent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:49.0) Gecko/20100101 Firefox/49.0'\n            , u'user': None, u'cognitoIdentityPoolId': None,\n            u'cognitoIdentityId': None, u'cognitoAuthenticationProvider':\n            None, u'sourceIp': u'96.90.37.59', u'accountId': None},\n            u'stage': u'devorr'}, u'queryStringParameters': None,\n            u'httpMethod': u'GET', u'pathParameters': {u'proxy':\n            u'asdf1/asdf2'}, u'headers': {u'Via':\n            u'1.1 b2aeb492548a8a2d4036401355f928dd.cloudfront.net (CloudFront)'\n            , u'Accept-Language': u'en-US,en;q=0.5', u'Accept-Encoding':\n            u'gzip, deflate, br', u'X-Forwarded-Port': u'443',\n            u'X-Forwarded-For': u'96.90.37.59, 54.240.144.50',\n            u'CloudFront-Viewer-Country': u'US', u'Accept':\n            u'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            u'Upgrade-Insecure-Requests': u'1', u'Host':\n            u'79gqbxq31c.execute-api.us-east-1.amazonaws.com',\n            u'X-Forwarded-Proto': u'https', u'X-Amz-Cf-Id':\n            u'BBFP-RhGDrQGOzoCqjnfB2I_YzWt_dac9S5vBcSAEaoM4NfYhAQy7Q==',\n            u'User-Agent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:49.0) Gecko/20100101 Firefox/49.0'\n            , u'CloudFront-Forwarded-Proto': u'https'}, u'stageVariables':\n            None, u'path': u'/asdf1/asdf2'}\n        environ = create_wsgi_request(event, trailing_slash=False)\n        response_tuple = collections.namedtuple('Response', ['status_code',\n            'content'])\n        response = response_tuple(200, 'hello')\n        le = common_log(environ, response, response_time=True)\n        le = common_log(environ, response, response_time=False)\n\n    def test_wsgi_multipart(self):\n        event = {u'body':\n            u'LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS03Njk1MjI4NDg0Njc4MTc2NTgwNjMwOTYxDQpDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9Im15c3RyaW5nIg0KDQpkZGQNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tNzY5NTIyODQ4NDY3ODE3NjU4MDYzMDk2MS0tDQo='\n            , u'resource': u'/', u'requestContext': {u'resourceId':\n            u'6cqjw9qu0b', u'apiId': u'9itr2lba55', u'resourcePath': u'/',\n            u'httpMethod': u'POST', u'requestId':\n            u'c17cb1bf-867c-11e6-b938-ed697406e3b5', u'accountId':\n            u'724336686645', u'identity': {u'apiKey': None, u'userArn':\n            None, u'cognitoAuthenticationType': None, u'caller': None,\n            u'userAgent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0'\n            , u'user': None, u'cognitoIdentityPoolId': None,\n            u'cognitoIdentityId': None, u'cognitoAuthenticationProvider':\n            None, u'sourceIp': u'50.191.225.98', u'accountId': None},\n            u'stage': u'devorr'}, u'queryStringParameters': None,\n            u'httpMethod': u'POST', u'pathParameters': None, u'headers': {\n            u'Content-Type':\n            u'multipart/form-data; boundary=---------------------------7695228484678176580630961'\n            , u'Via':\n            u'1.1 38205a04d96d60185e88658d3185ccee.cloudfront.net (CloudFront)'\n            , u'Accept-Language': u'en-US,en;q=0.5', u'Accept-Encoding':\n            u'gzip, deflate, br', u'CloudFront-Is-SmartTV-Viewer': u'false',\n            u'CloudFront-Forwarded-Proto': u'https', u'X-Forwarded-For':\n            u'71.231.27.57, 104.246.180.51', u'CloudFront-Viewer-Country':\n            u'US', u'Accept':\n            u'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            u'User-Agent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:45.0) Gecko/20100101 Firefox/45.0'\n            , u'Host': u'xo2z7zafjh.execute-api.us-east-1.amazonaws.com',\n            u'X-Forwarded-Proto': u'https', u'Cookie': u'zappa=AQ4',\n            u'CloudFront-Is-Tablet-Viewer': u'false', u'X-Forwarded-Port':\n            u'443', u'Referer':\n            u'https://xo8z7zafjh.execute-api.us-east-1.amazonaws.com/former/post'\n            , u'CloudFront-Is-Mobile-Viewer': u'false', u'X-Amz-Cf-Id':\n            u'31zxcUcVyUxBOMk320yh5NOhihn5knqrlYQYpGGyOngKKwJb0J0BAQ==',\n            u'CloudFront-Is-Desktop-Viewer': u'true'}, u'stageVariables':\n            None, u'path': u'/'}\n        environ = create_wsgi_request(event, trailing_slash=False)\n        response_tuple = collections.namedtuple('Response', ['status_code',\n            'content'])\n        response = response_tuple(200, 'hello')\n\n    def test_wsgi_without_body(self):\n        event = {u'body': None, u'resource': u'/', u'requestContext': {\n            u'resourceId': u'6cqjw9qu0b', u'apiId': u'9itr2lba55',\n            u'resourcePath': u'/', u'httpMethod': u'POST', u'requestId':\n            u'c17cb1bf-867c-11e6-b938-ed697406e3b5', u'accountId':\n            u'724336686645', u'identity': {u'apiKey': None, u'userArn':\n            None, u'cognitoAuthenticationType': None, u'caller': None,\n            u'userAgent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0'\n            , u'user': None, u'cognitoIdentityPoolId': None,\n            u'cognitoIdentityId': None, u'cognitoAuthenticationProvider':\n            None, u'sourceIp': u'50.191.225.98', u'accountId': None},\n            u'stage': u'devorr'}, u'queryStringParameters': None,\n            u'httpMethod': u'POST', u'pathParameters': None, u'headers': {\n            u'Via':\n            u'1.1 38205a04d96d60185e88658d3185ccee.cloudfront.net (CloudFront)'\n            , u'Accept-Language': u'en-US,en;q=0.5', u'Accept-Encoding':\n            u'gzip, deflate, br', u'CloudFront-Is-SmartTV-Viewer': u'false',\n            u'CloudFront-Forwarded-Proto': u'https', u'X-Forwarded-For':\n            u'71.231.27.57, 104.246.180.51', u'CloudFront-Viewer-Country':\n            u'US', u'Accept':\n            u'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            u'User-Agent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:45.0) Gecko/20100101 Firefox/45.0'\n            , u'Host': u'xo2z7zafjh.execute-api.us-east-1.amazonaws.com',\n            u'X-Forwarded-Proto': u'https', u'Cookie': u'zappa=AQ4',\n            u'CloudFront-Is-Tablet-Viewer': u'false', u'X-Forwarded-Port':\n            u'443', u'Referer':\n            u'https://xo8z7zafjh.execute-api.us-east-1.amazonaws.com/former/post'\n            , u'CloudFront-Is-Mobile-Viewer': u'false', u'X-Amz-Cf-Id':\n            u'31zxcUcVyUxBOMk320yh5NOhihn5knqrlYQYpGGyOngKKwJb0J0BAQ==',\n            u'CloudFront-Is-Desktop-Viewer': u'true'}, u'stageVariables':\n            None, u'path': u'/', u'isBase64Encoded': True}\n        environ = create_wsgi_request(event, trailing_slash=False)\n        response_tuple = collections.namedtuple('Response', ['status_code',\n            'content'])\n        response = response_tuple(200, 'hello')\n\n    def test_wsgi_from_apigateway_testbutton(self):\n        \"\"\"\n        API Gateway resources have a \"test bolt\" button on methods.\n        This button sends some empty dicts as 'null' instead of '{}'.\n        \"\"\"\n        event = {'resource': '/', 'path': '/', 'httpMethod': 'GET',\n            'headers': None, 'queryStringParameters': None,\n            'pathParameters': None, 'stageVariables': None,\n            'requestContext': {'accountId': '0123456', 'resourceId':\n            'qwertyasdf', 'stage': 'test-invoke-stage', 'requestId':\n            'test-invoke-request', 'identity': {'cognitoIdentityPoolId':\n            None, 'accountId': '0123456', 'cognitoIdentityId': None,\n            'caller': 'MYCALLERID', 'apiKey': 'test-invoke-api-key',\n            'sourceIp': 'test-invoke-source-ip', 'accessKey': 'MYACCESSKEY',\n            'cognitoAuthenticationType': None,\n            'cognitoAuthenticationProvider': None, 'userArn':\n            'arn:aws:iam::fooo:user/my.username', 'userAgent':\n            'Apache-HttpClient/4.5.x (Java/1.8.0_112)', 'user':\n            'MYCALLERID'}, 'resourcePath': '/', 'httpMethod': 'GET',\n            'apiId': 'myappid'}, 'body': None, 'isBase64Encoded': False}\n        environ = create_wsgi_request(event, trailing_slash=False)\n        response_tuple = collections.namedtuple('Response', ['status_code',\n            'content'])\n        response = response_tuple(200, 'hello')\n\n    def test_cli_sanity(self):\n        zappa_cli = ZappaCLI()\n        return\n\n    def test_load_settings(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('test_settings.json')\n        self.assertEqual(False, zappa_cli.stage_config['touch'])\n\n    def test_load_extended_settings(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'extendo'\n        zappa_cli.load_settings('test_settings.json')\n        self.assertEqual('lmbda', zappa_cli.stage_config['s3_bucket'])\n        self.assertEqual(True, zappa_cli.stage_config['touch'])\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'extendofail'\n        with self.assertRaises(ClickException):\n            zappa_cli.load_settings('test_settings.json')\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        with self.assertRaises(RuntimeError):\n            zappa_cli.load_settings(\n                'tests/test_bad_circular_extends_settings.json')\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'extendo2'\n        zappa_cli.load_settings('test_settings.json')\n        self.assertEqual('lmbda2', zappa_cli.stage_config['s3_bucket'])\n        self.assertTrue(zappa_cli.stage_config['touch'])\n        self.assertTrue(zappa_cli.stage_config['delete_local_zip'])\n\n    def test_load_settings_yml(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('tests/test_settings.yml')\n        self.assertEqual(False, zappa_cli.stage_config['touch'])\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'extendo'\n        zappa_cli.load_settings('tests/test_settings.yml')\n        self.assertEqual('lmbda', zappa_cli.stage_config['s3_bucket'])\n        self.assertEqual(True, zappa_cli.stage_config['touch'])\n\n    def test_load_settings_yaml(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('tests/test_settings.yaml')\n        self.assertEqual(False, zappa_cli.stage_config['touch'])\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'extendo'\n        zappa_cli.load_settings('tests/test_settings.yaml')\n        self.assertEqual('lmbda', zappa_cli.stage_config['s3_bucket'])\n        self.assertEqual(True, zappa_cli.stage_config['touch'])\n\n    def test_load_settings_toml(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('tests/test_settings.toml')\n        self.assertEqual(False, zappa_cli.stage_config['touch'])\n\n    def test_settings_extension(self):\n        \"\"\"\n        Make sure Zappa uses settings in the proper order: JSON, TOML, YAML.\n        \"\"\"\n        tempdir = tempfile.mkdtemp(prefix='zappa-test-settings')\n        shutil.copy('tests/test_one_env.json', tempdir + '/zappa_settings.json'\n            )\n        shutil.copy('tests/test_settings.yml', tempdir + '/zappa_settings.yml')\n        shutil.copy('tests/test_settings.yml', tempdir + '/zappa_settings.yaml'\n            )\n        shutil.copy('tests/test_settings.toml', tempdir +\n            '/zappa_settings.toml')\n        orig_cwd = os.getcwd()\n        os.chdir(tempdir)\n        try:\n            zappa_cli = ZappaCLI()\n            self.assertEqual(zappa_cli.get_json_or_yaml_settings(),\n                'zappa_settings.json')\n            zappa_cli.load_settings_file()\n            self.assertIn('lonely', zappa_cli.zappa_settings)\n            os.unlink('zappa_settings.json')\n            self.assertEqual(zappa_cli.get_json_or_yaml_settings(),\n                'zappa_settings.toml')\n            zappa_cli.load_settings_file()\n            self.assertIn('ttt888', zappa_cli.zappa_settings)\n            self.assertNotIn('devor', zappa_cli.zappa_settings)\n            os.unlink('zappa_settings.toml')\n            self.assertEqual(zappa_cli.get_json_or_yaml_settings(),\n                'zappa_settings.yml')\n            zappa_cli.load_settings_file()\n            self.assertIn('ttt888', zappa_cli.zappa_settings)\n            self.assertIn('devor', zappa_cli.zappa_settings)\n            os.unlink('zappa_settings.yml')\n            self.assertEqual(zappa_cli.get_json_or_yaml_settings(),\n                'zappa_settings.yaml')\n            zappa_cli.load_settings_file()\n            self.assertIn('ttt888', zappa_cli.zappa_settings)\n            self.assertIn('devor', zappa_cli.zappa_settings)\n            os.unlink('zappa_settings.yaml')\n            self.assertRaises(ClickException, zappa_cli.\n                get_json_or_yaml_settings)\n        finally:\n            os.chdir(orig_cwd)\n            shutil.rmtree(tempdir)\n\n    def test_cli_utility(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('test_settings.json')\n        zappa_cli.create_package()\n        zappa_cli.remove_local_zip()\n        logs = [{'timestamp': '12345', 'message': '[START RequestId] test'},\n            {'timestamp': '12345', 'message': '[REPORT RequestId] test'}, {\n            'timestamp': '12345', 'message': '[END RequestId] test'}, {\n            'timestamp': '12345', 'message': 'test'}, {'timestamp':\n            '1480001341214', 'message':\n            '[INFO] 2016-11-24T15:29:13.326Z c0cb52d1-b25a-11e6-9b73-f940ce24319a 59.111.125.48 - -  [24/Nov/2016:15:29:13 +0000] \"GET / HTTP/1.1\" 200 2590 \"\" \"python-requests/2.11.0\" 0/4.672'\n            }, {'timestamp': '1480001341214', 'message':\n            '[INFO] 2016-11-24T15:29:13.326Z c0cb52d1-b25a-11e6-9b73-f940ce24319a 59.111.125.48 - -  [24/Nov/2016:15:29:13 +0000] \"GET / HTTP/1.1\" 400 2590 \"\" \"python-requests/2.11.0\" 0/4.672'\n            }, {'timestamp': '1480001341215', 'message':\n            '[1480001341258] [DEBUG] 2016-11-24T15:29:01.258Z b890d8f6-b25a-11e6-b6bc-718f7ec807df Zappa Event: {}'\n            }]\n        zappa_cli.print_logs(logs)\n        zappa_cli.print_logs(logs, colorize=False)\n        zappa_cli.print_logs(logs, colorize=False, http=True)\n        zappa_cli.print_logs(logs, colorize=True, http=True)\n        zappa_cli.print_logs(logs, colorize=True, http=False)\n        zappa_cli.print_logs(logs, colorize=True, non_http=True)\n        zappa_cli.print_logs(logs, colorize=True, non_http=False)\n        zappa_cli.print_logs(logs, colorize=True, non_http=True, http=True)\n        zappa_cli.print_logs(logs, colorize=True, non_http=False, http=False)\n        zappa_cli.print_logs(logs, colorize=False, force_colorize=False)\n        zappa_cli.print_logs(logs, colorize=False, force_colorize=True)\n        zappa_cli.print_logs(logs, colorize=True, force_colorize=False)\n        zappa_cli.print_logs(logs, colorize=True, non_http=False, http=\n            False, force_colorize=True)\n        zappa_cli.check_for_update()\n\n    def test_cli_format_invoke_command(self):\n        zappa_cli = ZappaCLI()\n        plain_string = \"\"\"START RequestId: def8808e-5223-11e7-b3b7-4919f6e7dd4f Version: $LATEST\n[DEBUG]\t2017-06-15T23:39:27.638Z\tdef8808e-5223-11e7-b3b7-4919f6e7dd4f\tZappa Event: {'raw_command': 'import datetime; print(datetime.datetime.now())'}\n2017-06-15 23:39:27.638296\nEND RequestId: def8808e-5223-11e7-b3b7-4919f6e7dd4f\nREPORT RequestId: def8808e-5223-11e7-b3b7-4919f6e7dd4f\tDuration: 0.59 ms\tBilled Duration: 100 ms \tMemory Size: 512 MB\tMax Memory Used: 53 MB\t\n\"\"\"\n        final_string = \"\"\"START RequestId: def8808e-5223-11e7-b3b7-4919f6e7dd4f Version: $LATEST\n[DEBUG] 2017-06-15T23:39:27.638Z def8808e-5223-11e7-b3b7-4919f6e7dd4f Zappa Event: {'raw_command': 'import datetime; print(datetime.datetime.now())'}\n2017-06-15 23:39:27.638296\nEND RequestId: def8808e-5223-11e7-b3b7-4919f6e7dd4f\nREPORT RequestId: def8808e-5223-11e7-b3b7-4919f6e7dd4f\nDuration: 0.59 ms\nBilled Duration: 100 ms \nMemory Size: 512 MB\nMax Memory Used: 53 MB\n\"\"\"\n        formated_string = zappa_cli.format_invoke_command(plain_string)\n        self.assertEqual(final_string, formated_string)\n\n    def test_cli_colorize_invoke_command(self):\n        zappa_cli = ZappaCLI()\n        plain_string = \"\"\"START RequestId: dd81d3de-5225-11e7-a24f-59014f430ab3 Version: $LATEST\n[DEBUG] 2017-06-15T23:53:44.194Z dd81d3de-5225-11e7-a24f-59014f430ab3 Zappa Event: {'raw_command': 'import datetime; print(datetime.datetime.now())'}\n2017-06-15 23:53:44.195012\nEND RequestId: dd81d3de-5225-11e7-a24f-59014f430ab3\nREPORT RequestId: dd81d3de-5225-11e7-a24f-59014f430ab3\nDuration: 0.63 ms\nBilled Duration: 100 ms \nMemory Size: 512 MB\nMax Memory Used: 53 MB\n\"\"\"\n        final_string = \"\"\"\u001b[36m\u001b[1m[START]\u001b[0m \u001b[32m\u001b[1mRequestId:\u001b[0m \u001b[35m\u001b[35mdd81d3de-5225-11e7-a24f-59014f430ab3\u001b[0m\u001b[0m \u001b[32m\u001b[1mVersion:\u001b[0m $LATEST\n\u001b[36m\u001b[1m[DEBUG]\u001b[0m 2017-06-15T23:53:44.194Z \u001b[35m\u001b[35mdd81d3de-5225-11e7-a24f-59014f430ab3\u001b[0m\u001b[0m \u001b[32m\u001b[1mZappa Event:\u001b[0m {'raw_command': 'import datetime; print(datetime.datetime.now())'}\n2017-06-15 23:53:44.195012\n\u001b[36m\u001b[1m[END]\u001b[0m \u001b[32m\u001b[1mRequestId:\u001b[0m \u001b[35m\u001b[35mdd81d3de-5225-11e7-a24f-59014f430ab3\u001b[0m\u001b[0m\n\u001b[36m\u001b[1m[REPORT]\u001b[0m \u001b[32m\u001b[1mRequestId:\u001b[0m \u001b[35m\u001b[35mdd81d3de-5225-11e7-a24f-59014f430ab3\u001b[0m\u001b[0m\n\u001b[32m\u001b[1mDuration:\u001b[0m 0.63 ms\n\u001b[32m\u001b[1mBilled\u001b[0m \u001b[32m\u001b[1mDuration:\u001b[0m 100 ms \n\u001b[32m\u001b[1mMemory Size:\u001b[0m 512 MB\n\u001b[32m\u001b[1mMax Memory Used:\u001b[0m 53 MB\n\"\"\"\n        colorized_string = zappa_cli.colorize_invoke_command(plain_string)\n        self.assertEqual(final_string, colorized_string)\n\n    def test_cli_colorize_whole_words_only(self):\n        zappa_cli = ZappaCLI()\n        plain_string = (\n            'START RESTART END RENDER report [DEBUG] TEXT[DEBUG]TEXT')\n        final_string = (\n            '\\x1b[36m\\x1b[1m[START]\\x1b[0m RESTART \\x1b[36m\\x1b[1m[END]\\x1b[0m RENDER report \\x1b[36m\\x1b[1m[DEBUG]\\x1b[0m TEXT\\x1b[36m\\x1b[1m[DEBUG]\\x1b[0mTEXT'\n            )\n        colorized_string = zappa_cli.colorize_invoke_command(plain_string)\n        self.assertEqual(final_string, colorized_string)\n\n    def test_cli_colorize_invoke_command_bad_string(self):\n        zappa_cli = ZappaCLI()\n        plain_string = \"Hey, I'm a plain string, won't be colorized\"\n        final_string = \"Hey, I'm a plain string, won't be colorized\"\n        colorized_string = zappa_cli.colorize_invoke_command(plain_string)\n        self.assertEqual(final_string, colorized_string)\n\n    def test_bad_json_catch(self):\n        zappa_cli = ZappaCLI()\n        self.assertRaises(ValueError, zappa_cli.load_settings_file,\n            'tests/test_bad_settings.json')\n\n    def test_bad_stage_name_catch(self):\n        zappa_cli = ZappaCLI()\n        self.assertRaises(ValueError, zappa_cli.load_settings,\n            'tests/test_bad_stage_name_settings.json')\n\n    def test_bad_environment_vars_catch(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        self.assertRaises(ValueError, zappa_cli.load_settings,\n            'tests/test_bad_environment_vars.json')\n\n    def test_domain_name_match(self):\n        zone = Zappa.get_best_match_zone(all_zones={'HostedZones': [{'Name':\n            'example.com.au.', 'Id': 'zone-correct', 'Config': {\n            'PrivateZone': False}}]}, domain='www.example.com.au')\n        assert zone == 'zone-correct'\n        zone = Zappa.get_best_match_zone(all_zones={'HostedZones': [{'Name':\n            'example.com.au.', 'Id': 'zone-incorrect', 'Config': {\n            'PrivateZone': False}}]}, domain='something-else.com.au')\n        assert zone is None\n        zone = Zappa.get_best_match_zone(all_zones={'HostedZones': [{'Name':\n            'example.com.au.', 'Id': 'zone-incorrect', 'Config': {\n            'PrivateZone': False}}, {'Name': 'subdomain.example.com.au.',\n            'Id': 'zone-correct', 'Config': {'PrivateZone': False}}]},\n            domain='www.subdomain.example.com.au')\n        assert zone == 'zone-correct'\n        zone = Zappa.get_best_match_zone(all_zones={'HostedZones': [{'Name':\n            'example.com.au.', 'Id': 'zone-private', 'Config': {\n            'PrivateZone': True}}]}, domain='www.example.com.au')\n        assert zone is None\n        zone = Zappa.get_best_match_zone(all_zones={'HostedZones': [{'Name':\n            'subdomain.example.com.au.', 'Id': 'zone-private', 'Config': {\n            'PrivateZone': True}}, {'Name': 'subdomain.example.com.au.',\n            'Id': 'zone-public', 'Config': {'PrivateZone': False}}]},\n            domain='www.subdomain.example.com.au')\n        assert zone == 'zone-public'\n\n    def test_lets_encrypt_sanity(self):\n        import subprocess\n        devnull = open(os.devnull, 'wb')\n        out = subprocess.check_output(['openssl', 'genrsa', '2048'], stderr\n            =devnull)\n        with open(os.path.join(gettempdir(), 'account.key'), 'wb') as f:\n            f.write(out)\n        cmd = ['openssl', 'req', '-x509', '-newkey', 'rsa:2048', '-subj',\n            '/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com',\n            '-passout', 'pass:foo', '-keyout', os.path.join(gettempdir(),\n            'key.key'), '-out', os.path.join(gettempdir(), 'signed.crt'),\n            '-days', '1']\n        devnull = open(os.devnull, 'wb')\n        subprocess.check_call(cmd, stdout=devnull, stderr=devnull)\n        DEFAULT_CA = 'https://acme-staging.api.letsencrypt.org'\n        CA = 'https://acme-staging.api.letsencrypt.org'\n        try:\n            result = register_account()\n        except ValueError as e:\n            pass\n        create_domain_key()\n        create_domain_csr('herp.derp.wtf')\n        parse_account_key()\n        parse_csr()\n        create_chained_certificate()\n        try:\n            result = sign_certificate()\n        except ValueError as e:\n            pass\n        result = verify_challenge('http://echo.jsontest.com/status/valid')\n        try:\n            result = verify_challenge('http://echo.jsontest.com/status/fail')\n        except ValueError as e:\n            pass\n        try:\n            result = verify_challenge('http://bing.com')\n        except ValueError as e:\n            pass\n        encode_certificate(b'123')\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('test_settings.json')\n        get_cert_and_update_domain(zappa_cli, 'kerplah', 'zzzz', domain=None)\n\n    def test_certify_sanity_checks(self):\n        \"\"\"\n        Make sure 'zappa certify':\n        * Errors out when a deployment hasn't taken place.\n        * Writes errors when certificate settings haven't been specified.\n        * Calls Zappa correctly for creates vs. updates.\n        \"\"\"\n        old_stdout = sys.stderr\n        if sys.version_info[0] < 3:\n            sys.stdout = OldStringIO()\n        try:\n            zappa_cli = ZappaCLI()\n            zappa_cli.domain = 'test.example.com'\n            try:\n                zappa_cli.certify()\n            except AttributeError:\n                pass\n            zappa_mock = mock.create_autospec(Zappa)\n            zappa_mock.function_versions = []\n            zappa_mock.domain_names = {}\n\n            def get_lambda_function_versions(_function_name, *_args, **_kwargs\n                ):\n                return zappa_mock.function_versions\n\n            def get_domain_name(domain, *_args, **_kwargs):\n                return zappa_mock.domain_names.get(domain)\n            zappa_mock.get_domain_name.side_effect = get_domain_name\n            zappa_mock.get_lambda_function_versions.side_effect = (\n                get_lambda_function_versions)\n            zappa_cli.zappa = zappa_mock\n            self.assertRaises(ClickException, zappa_cli.certify)\n            zappa_cli.zappa.function_versions = ['$LATEST']\n            zappa_cli.api_stage = 'stage'\n            zappa_cli.zappa_settings = {'stage': {}}\n            zappa_cli.api_stage = 'stage'\n            zappa_cli.domain = 'test.example.com'\n            try:\n                zappa_cli.certify()\n            except ClickException as e:\n                log_output = str(e)\n                self.assertIn(\"Can't certify a domain without\", log_output)\n                self.assertIn('domain', log_output)\n            zappa_cli.zappa_settings['stage']['domain'] = 'test.example.com'\n            try:\n                zappa_cli.certify()\n                self.fail('Expected a ClickException')\n            except ClickException as e:\n                log_output = str(e)\n                self.assertIn(\"Can't certify a domain without\", log_output)\n                self.assertIn('lets_encrypt_key', log_output)\n            zappa_cli.zappa_settings['stage']['certificate'] = 'foo'\n            try:\n                zappa_cli.certify()\n                self.fail('Expected a ClickException')\n            except ClickException as e:\n                log_output = str(e)\n                self.assertIn(\"Can't certify a domain without\", log_output)\n                self.assertIn('certificate_key', log_output)\n                self.assertIn('certificate_chain', log_output)\n            zappa_cli.zappa_settings['stage']['certificate_key'] = 'key'\n            try:\n                zappa_cli.certify()\n                self.fail('Expected a ClickException')\n            except ClickException as e:\n                log_output = str(e)\n                self.assertIn(\"Can't certify a domain without\", log_output)\n                self.assertIn('certificate_key', log_output)\n                self.assertIn('certificate_chain', log_output)\n            zappa_cli.zappa_settings['stage']['certificate_chain'] = 'chain'\n            del zappa_cli.zappa_settings['stage']['certificate_key']\n            try:\n                zappa_cli.certify()\n                self.fail('Expected a ClickException')\n            except ClickException as e:\n                log_output = str(e)\n                self.assertIn(\"Can't certify a domain without\", log_output)\n                self.assertIn('certificate_key', log_output)\n                self.assertIn('certificate_chain', log_output)\n            cert_file = tempfile.NamedTemporaryFile()\n            cert_file.write(b'Hello world')\n            cert_file.flush()\n            zappa_cli.zappa_settings['stage'].update({'certificate':\n                cert_file.name, 'certificate_key': cert_file.name,\n                'certificate_chain': cert_file.name})\n            sys.stdout.truncate(0)\n            zappa_cli.certify()\n            zappa_cli.zappa.create_domain_name.assert_called_once()\n            zappa_cli.zappa.update_route53_records.assert_called_once()\n            zappa_cli.zappa.update_domain_name.assert_not_called()\n            log_output = sys.stdout.getvalue()\n            self.assertIn('Created a new domain name', log_output)\n            zappa_cli.zappa.reset_mock()\n            zappa_cli.zappa.domain_names['test.example.com'] = '*.example.com'\n            sys.stdout.truncate(0)\n            zappa_cli.certify()\n            zappa_cli.zappa.update_domain_name.assert_called_once()\n            zappa_cli.zappa.update_route53_records.assert_not_called()\n            zappa_cli.zappa.create_domain_name.assert_not_called()\n            log_output = sys.stdout.getvalue()\n            self.assertNotIn('Created a new domain name', log_output)\n            zappa_cli.zappa_settings['stage'].update({'route53_enabled': False}\n                )\n            zappa_cli.zappa.reset_mock()\n            zappa_cli.zappa.domain_names['test.example.com'] = ''\n            sys.stdout.truncate(0)\n            zappa_cli.certify()\n            zappa_cli.zappa.create_domain_name.assert_called_once()\n            zappa_cli.zappa.update_route53_records.assert_not_called()\n            zappa_cli.zappa.update_domain_name.assert_not_called()\n            log_output = sys.stdout.getvalue()\n            self.assertIn('Created a new domain name', log_output)\n        finally:\n            sys.stdout = old_stdout\n\n    @mock.patch('troposphere.Template')\n    @mock.patch('botocore.client')\n    def test_get_domain_respects_route53_setting(self, client, template):\n        zappa_core = Zappa(boto_session=mock.Mock(), profile_name='test',\n            aws_region='test', load_credentials=False)\n        zappa_core.apigateway_client = mock.Mock()\n        zappa_core.route53 = mock.Mock()\n        record = zappa_core.get_domain_name('test_domain', route53=False)\n        self.assertIsNotNone(record)\n        zappa_core.apigateway_client.get_domain_name.assert_called_once()\n        zappa_core.route53.list_hosted_zones.assert_not_called()\n        zappa_core.apigateway_client.reset_mock()\n        zappa_core.route53.reset_mock()\n        zappa_core.route53.list_hosted_zones.return_value = {'HostedZones':\n            [{'Id': 'somezone'}]}\n        zappa_core.route53.list_resource_record_sets.return_value = {\n            'ResourceRecordSets': [{'Type': 'CNAME', 'Name': 'test_domain1'}]}\n        record = zappa_core.get_domain_name('test_domain')\n        self.assertIsNotNone(record)\n        zappa_core.apigateway_client.get_domain_name.assert_called_once()\n        zappa_core.route53.list_hosted_zones.assert_called_once()\n        zappa_core.route53.list_resource_record_sets.assert_called_once_with(\n            HostedZoneId='somezone')\n\n    def test_detect_dj(self):\n        settings_modules = detect_django_settings()\n\n    def test_dj_wsgi(self):\n        settings_modules = detect_django_settings()\n        settings = \"\"\"\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nimport os\nBASE_DIR = os.path.dirname(os.path.dirname(__file__))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/1.7/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'alskdfjalsdkf=0*%do-ayvy*m2k=vss*$7)j8q!@u0+d^na7mi2(^!l!d'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nTEMPLATE_DEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n)\n\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n)\n\nROOT_URLCONF = 'blah.urls'\nWSGI_APPLICATION = 'hackathon_starter.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/1.7/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Internationalization\n# https://docs.djangoproject.com/en/1.7/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n        \"\"\"\n        djts = open('dj_test_settings.py', 'w')\n        djts.write(settings)\n        djts.close()\n        app = get_django_wsgi('dj_test_settings')\n        try:\n            os.remove('dj_test_settings.py')\n            os.remove('dj_test_settings.pyc')\n        except Exception as e:\n            pass\n\n    def test_human_units(self):\n        human_size(1)\n        human_size(9999999999999)\n\n    def test_string_to_timestamp(self):\n        boo = string_to_timestamp('asdf')\n        self.assertTrue(boo == 0)\n        yay = string_to_timestamp('1h')\n        self.assertTrue(type(yay) == int)\n        self.assertTrue(yay > 0)\n        yay = string_to_timestamp('4m')\n        self.assertTrue(type(yay) == int)\n        self.assertTrue(yay > 0)\n        yay = string_to_timestamp('1mm')\n        self.assertTrue(type(yay) == int)\n        self.assertTrue(yay > 0)\n        yay = string_to_timestamp('1mm1w1d1h1m1s1ms1us')\n        self.assertTrue(type(yay) == int)\n        self.assertTrue(yay > 0)\n\n    def test_event_name(self):\n        zappa = Zappa()\n        truncated = zappa.get_event_name(\n            'basldfkjalsdkfjalsdkfjaslkdfjalsdkfjadlsfkjasdlfkjasdlfkjasdflkjasdf-asdfasdfasdfasdfasdf'\n            , 'this.is.my.dang.function.wassup.yeah.its.long')\n        self.assertTrue(len(truncated) <= 64)\n        self.assertTrue(truncated.endswith(\n            'this.is.my.dang.function.wassup.yeah.its.long'))\n        truncated = zappa.get_event_name(\n            'basldfkjalsdkfjalsdkfjaslkdfjalsdkfjadlsfkjasdlfkjasdlfkjasdflkjasdf-asdfasdfasdfasdfasdf'\n            ,\n            'thisidoasdfaljksdfalskdjfalsdkfjasldkfjalsdkfjalsdkfjalsdfkjalasdfasdfasdfasdklfjasldkfjalsdkjfaslkdfjasldkfjasdflkjdasfskdj'\n            )\n        self.assertTrue(len(truncated) <= 64)\n        truncated = zappa.get_event_name('a', 'b')\n        self.assertTrue(len(truncated) <= 64)\n        self.assertEqual(truncated, 'a-b')\n\n    def test_hashed_rule_name(self):\n        zappa = Zappa()\n        truncated = zappa.get_event_name(\n            'basldfkjalsdkfjalsdkfjaslkdfjalsdkfjadlsfkjasdlfkjasdlfkjasdflkjasdf-asdfasdfasdfasdfasdf'\n            , 'this.is.my.dang.function.wassup.yeah.its.long')\n        self.assertTrue(len(truncated) == 64)\n        rule_name = zappa.get_hashed_rule_name(event=dict(name=\n            'some-event-name'), function=\n            'this.is.my.dang.function.wassup.yeah.its.long', lambda_name=\n            'basldfkjalsdkfjalsdkfjaslkdfjalsdkfjadlsfkjasdlfkjasdlfkjasdflkjasdf-asdfasdfasdfasdfasdf'\n            )\n        self.assertTrue(len(rule_name) <= 64)\n        self.assertTrue(rule_name.endswith(\n            '-this.is.my.dang.function.wassup.yeah.its.long'))\n\n    def test_detect_dj(self):\n        settings_modules = detect_django_settings()\n\n    def test_detect_flask(self):\n        settings_modules = detect_flask_apps()\n\n    def test_shameless(self):\n        shamelessly_promote()\n\n    def test_s3_url_parser(self):\n        remote_bucket, remote_file = parse_s3_url(\n            's3://my-project-config-files/filename.json')\n        self.assertEqual(remote_bucket, 'my-project-config-files')\n        self.assertEqual(remote_file, 'filename.json')\n        remote_bucket, remote_file = parse_s3_url(\n            's3://your-bucket/account.key')\n        self.assertEqual(remote_bucket, 'your-bucket')\n        self.assertEqual(remote_file, 'account.key')\n        remote_bucket, remote_file = parse_s3_url(\n            's3://my-config-bucket/super-secret-config.json')\n        self.assertEqual(remote_bucket, 'my-config-bucket')\n        self.assertEqual(remote_file, 'super-secret-config.json')\n        remote_bucket, remote_file = parse_s3_url(\n            's3://your-secure-bucket/account.key')\n        self.assertEqual(remote_bucket, 'your-secure-bucket')\n        self.assertEqual(remote_file, 'account.key')\n        remote_bucket, remote_file = parse_s3_url(\n            's3://your-bucket/subfolder/account.key')\n        self.assertEqual(remote_bucket, 'your-bucket')\n        self.assertEqual(remote_file, 'subfolder/account.key')\n        remote_bucket, remote_file = parse_s3_url('/dev/null')\n        self.assertEqual(remote_bucket, '')\n\n    def test_remote_env_package(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'deprecated_remote_env'\n        zappa_cli.load_settings('test_settings.json')\n        self.assertEqual('lmbda-env', zappa_cli.stage_config[\n            'remote_env_bucket'])\n        self.assertEqual('dev/env.json', zappa_cli.stage_config[\n            'remote_env_file'])\n        zappa_cli.create_package()\n        with zipfile.ZipFile(zappa_cli.zip_path, 'r') as lambda_zip:\n            content = lambda_zip.read('zappa_settings.py')\n        zappa_cli.remove_local_zip()\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'remote_env'\n        zappa_cli.load_settings('test_settings.json')\n        self.assertEqual('s3://lmbda-env/prod/env.json', zappa_cli.\n            stage_config['remote_env'])\n        zappa_cli.create_package()\n        with zipfile.ZipFile(zappa_cli.zip_path, 'r') as lambda_zip:\n            content = lambda_zip.read('zappa_settings.py')\n        zappa_cli.remove_local_zip()\n\n    def test_package_only(self):\n        for delete_local_zip in [True, False]:\n            zappa_cli = ZappaCLI()\n            if delete_local_zip:\n                zappa_cli.api_stage = (\n                    'build_package_only_delete_local_zip_true')\n            else:\n                zappa_cli.api_stage = (\n                    'build_package_only_delete_local_zip_false')\n            zappa_cli.load_settings('test_settings.json')\n            zappa_cli.package()\n            zappa_cli.on_exit()\n            self.assertEqual(os.path.isfile(zappa_cli.zip_path), True)\n            os.remove(zappa_cli.zip_path)\n\n    def test_package_output(self):\n        for delete_local_zip in [True]:\n            zappa_cli = ZappaCLI()\n            if delete_local_zip:\n                zappa_cli.api_stage = (\n                    'build_package_only_delete_local_zip_true')\n            zappa_cli.load_settings('test_settings.json')\n            zappa_cli.package(output='oh-boy.zip')\n            zappa_cli.on_exit()\n            self.assertEqual(os.path.isfile(zappa_cli.zip_path), True)\n            os.remove(zappa_cli.zip_path)\n\n    def test_package_does_not_load_credentials(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        with mock.patch('zappa.core.Zappa.load_credentials'\n            ) as LoadCredentialsMock:\n            zappa_cli.load_credentials = False\n            zappa_cli.load_settings('test_settings.json')\n            zappa_cli.package()\n            zappa_cli.on_exit()\n            self.assertFalse(zappa_cli.load_credentials)\n            self.assertFalse(LoadCredentialsMock.called)\n        os.remove(zappa_cli.zip_path)\n\n    def test_flask_logging_bug(self):\n        \"\"\"\n        This checks whether Flask can write errors sanely.\n        https://github.com/Miserlou/Zappa/issues/283\n        \"\"\"\n        event = {'body': {}, 'headers': {}, 'pathParameters': {}, 'path':\n            '/', 'httpMethod': 'GET', 'queryStringParameters': {},\n            'requestContext': {}}\n        old_stderr = sys.stderr\n        sys.stderr = BytesIO()\n        try:\n            environ = create_wsgi_request(event)\n            app = flask.Flask(__name__)\n            with app.request_context(environ):\n                app.logger.error(u'This is a test')\n                log_output = sys.stderr.getvalue()\n                if sys.version_info[0] < 3:\n                    self.assertNotIn(\"'str' object has no attribute 'write'\",\n                        log_output)\n                    self.assertNotIn('Logged from file tests.py', log_output)\n        finally:\n            sys.stderr = old_stderr\n\n    def test_slim_handler(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'slim_handler'\n        zappa_cli.load_settings('test_settings.json')\n        zappa_cli.create_package()\n        self.assertTrue(os.path.isfile(zappa_cli.handler_path))\n        self.assertTrue(os.path.isfile(zappa_cli.zip_path))\n        zappa_cli.remove_local_zip()\n\n    def test_validate_name(self):\n        fname = 'tests/name_scenarios.json'\n        with open(fname, 'r') as f:\n            scenarios = json.load(f)\n        for scenario in scenarios:\n            value = scenario['value']\n            is_valid = scenario['is_valid']\n            if is_valid:\n                assert validate_name(value)\n            else:\n                with self.assertRaises(InvalidAwsLambdaName) as exc:\n                    validate_name(value)\n\n    def test_contains_python_files_or_subdirs(self):\n        self.assertTrue(contains_python_files_or_subdirs('tests/data'))\n        self.assertTrue(contains_python_files_or_subdirs('tests/data/test2'))\n        self.assertFalse(contains_python_files_or_subdirs('tests/data/test1'))\n\n    def test_conflicts_with_a_neighbouring_module(self):\n        self.assertTrue(conflicts_with_a_neighbouring_module(\n            'tests/data/test1'))\n        self.assertFalse(conflicts_with_a_neighbouring_module(\n            'tests/data/test2'))\n\n    def test_settings_py_generation(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('test_settings.json')\n        zappa_cli.create_package()\n        with zipfile.ZipFile(zappa_cli.zip_path, 'r') as lambda_zip:\n            content = lambda_zip.read('zappa_settings.py').decode('utf-8')\n            settings = {}\n            exec(content, globals(), settings)\n            self.assertIn('ENVIRONMENT_VARIABLES', settings)\n            self.assertEqual(settings['ENVIRONMENT_VARIABLES'][\n                'TEST_ENV_VAR'], 'test_value')\n            self.assertIn('CONTEXT_HEADER_MAPPINGS', settings)\n            self.assertEqual(settings['CONTEXT_HEADER_MAPPINGS'][\n                'CognitoIdentityId'], 'identity.cognitoIdentityId')\n            self.assertEqual(settings['CONTEXT_HEADER_MAPPINGS']['APIStage'\n                ], 'stage')\n        zappa_cli.remove_local_zip()\n\n    def test_only_ascii_env_var_allowed(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('tests/test_non_ascii_environment_var_key.json'\n            )\n        with self.assertRaises(ValueError) as context:\n            zappa_cli.create_package()\n        self.assertEqual('Environment variable keys must be ascii.', str(\n            context.exception))\n",
                        "belong_class_name": "TestZappa",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "certify",
                        "function_content": "def certify(self, no_confirm=True, manual=False):\n    \"\"\"\n        Register or update a domain certificate for this env.\n        \"\"\"\n    if not self.domain:\n        raise ClickException(\"Can't certify a domain without \" + click.\n            style('domain', fg='red', bold=True) + ' configured!')\n    if not no_confirm:\n        confirm = input('Are you sure you want to certify? [y/n] ')\n        if confirm != 'y':\n            return\n    deployed_versions = self.zappa.get_lambda_function_versions(self.\n        lambda_name)\n    if len(deployed_versions) == 0:\n        raise ClickException('This application ' + click.style(\n            \"isn't deployed yet\", fg='red') + ' - did you mean to call ' +\n            click.style('deploy', bold=True) + '?')\n    account_key_location = self.stage_config.get('lets_encrypt_key', None)\n    cert_location = self.stage_config.get('certificate', None)\n    cert_key_location = self.stage_config.get('certificate_key', None)\n    cert_chain_location = self.stage_config.get('certificate_chain', None)\n    cert_arn = self.stage_config.get('certificate_arn', None)\n    certificate_body = None\n    certificate_private_key = None\n    certificate_chain = None\n    if not cert_location and not cert_arn:\n        if not account_key_location:\n            raise ClickException(\"Can't certify a domain without \" + click.\n                style('lets_encrypt_key', fg='red', bold=True) + ' or ' +\n                click.style('certificate', fg='red', bold=True) + ' or ' +\n                click.style('certificate_arn', fg='red', bold=True) +\n                ' configured!')\n        from .letsencrypt import gettempdir\n        if account_key_location.startswith('s3://'):\n            bucket, key_name = parse_s3_url(account_key_location)\n            self.zappa.s3_client.download_file(bucket, key_name, os.path.\n                join(gettempdir(), 'account.key'))\n        else:\n            from shutil import copyfile\n            copyfile(account_key_location, os.path.join(gettempdir(),\n                'account.key'))\n    elif not account_key_location and not cert_arn:\n        if (not cert_location or not cert_key_location or not\n            cert_chain_location):\n            raise ClickException(\"Can't certify a domain without \" + click.\n                style('certificate, certificate_key and certificate_chain',\n                fg='red', bold=True) + ' configured!')\n        with open(cert_location) as f:\n            certificate_body = f.read()\n        with open(cert_key_location) as f:\n            certificate_private_key = f.read()\n        with open(cert_chain_location) as f:\n            certificate_chain = f.read()\n    click.echo('Certifying domain ' + click.style(self.domain, fg='green',\n        bold=True) + '..')\n    if not cert_location and not cert_arn:\n        from .letsencrypt import get_cert_and_update_domain\n        cert_success = get_cert_and_update_domain(self.zappa, self.\n            lambda_name, self.api_stage, self.domain, manual)\n    else:\n        route53 = self.stage_config.get('route53_enabled', True)\n        if not self.zappa.get_domain_name(self.domain, route53=route53):\n            dns_name = self.zappa.create_domain_name(domain_name=self.\n                domain, certificate_name=self.domain + '-Zappa-Cert',\n                certificate_body=certificate_body, certificate_private_key=\n                certificate_private_key, certificate_chain=\n                certificate_chain, certificate_arn=cert_arn, lambda_name=\n                self.lambda_name, stage=self.api_stage, route53=route53)\n            if route53:\n                self.zappa.update_route53_records(self.domain, dns_name)\n            print(\n                'Created a new domain name with supplied certificate. Please note that it can take up to 40 minutes for this domain to be created and propagated through AWS, but it requires no further work on your part.'\n                )\n        else:\n            self.zappa.update_domain_name(domain_name=self.domain,\n                certificate_name=self.domain + '-Zappa-Cert',\n                certificate_body=certificate_body, certificate_private_key=\n                certificate_private_key, certificate_chain=\n                certificate_chain, certificate_arn=cert_arn, lambda_name=\n                self.lambda_name, stage=self.api_stage, route53=route53)\n        cert_success = True\n    if cert_success:\n        click.echo('Certificate ' + click.style('updated', fg='green', bold\n            =True) + '!')\n    else:\n        click.echo(click.style('Failed', fg='red', bold=True) +\n            ' to generate or install certificate! :(')\n        click.echo('\\n==============\\n')\n        shamelessly_promote()\n",
                        "function_parameter": "(self, no_confirm=True, manual=False)",
                        "belong_class_content": "class ZappaCLI(object):\n    \"\"\"\n    ZappaCLI object is responsible for loading the settings,\n    handling the input arguments and executing the calls to the core library.\n\n    \"\"\"\n    vargs = None\n    command = None\n    stage_env = None\n    zappa = None\n    zappa_settings = None\n    load_credentials = True\n    disable_progress = False\n    api_stage = None\n    app_function = None\n    aws_region = None\n    debug = None\n    prebuild_script = None\n    project_name = None\n    profile_name = None\n    lambda_arn = None\n    lambda_name = None\n    lambda_description = None\n    s3_bucket_name = None\n    settings_file = None\n    zip_path = None\n    handler_path = None\n    vpc_config = None\n    memory_size = None\n    use_apigateway = None\n    lambda_handler = None\n    django_settings = None\n    manage_roles = True\n    exception_handler = None\n    environment_variables = None\n    authorizer = None\n    xray_tracing = False\n    aws_kms_key_arn = ''\n    context_header_mappings = None\n    tags = []\n    stage_name_env_pattern = re.compile('^[a-zA-Z0-9_]+$')\n\n    def __init__(self):\n        self._stage_config_overrides = {}\n\n    @property\n    def stage_config(self):\n        \"\"\"\n        A shortcut property for settings of a stage.\n        \"\"\"\n\n        def get_stage_setting(stage, extended_stages=None):\n            if extended_stages is None:\n                extended_stages = []\n            if stage in extended_stages:\n                raise RuntimeError(stage +\n                    ' has already been extended to these settings. There is a circular extends within the settings file.'\n                    )\n            extended_stages.append(stage)\n            try:\n                stage_settings = dict(self.zappa_settings[stage].copy())\n            except KeyError:\n                raise ClickException(\n                    \"Cannot extend settings for undefined stage '\" + stage +\n                    \"'.\")\n            extends_stage = self.zappa_settings[stage].get('extends', None)\n            if not extends_stage:\n                return stage_settings\n            extended_settings = get_stage_setting(stage=extends_stage,\n                extended_stages=extended_stages)\n            extended_settings.update(stage_settings)\n            return extended_settings\n        settings = get_stage_setting(stage=self.api_stage)\n        if u'delete_zip' in settings:\n            settings[u'delete_local_zip'] = settings.get(u'delete_zip')\n        settings.update(self.stage_config_overrides)\n        return settings\n\n    @property\n    def stage_config_overrides(self):\n        \"\"\"\n        Returns zappa_settings we forcefully override for the current stage\n        set by `self.override_stage_config_setting(key, value)`\n        \"\"\"\n        return getattr(self, '_stage_config_overrides', {}).get(self.\n            api_stage, {})\n\n    def override_stage_config_setting(self, key, val):\n        \"\"\"\n        Forcefully override a setting set by zappa_settings (for the current stage only)\n        :param key: settings key\n        :param val: value\n        \"\"\"\n        self._stage_config_overrides = getattr(self,\n            '_stage_config_overrides', {})\n        self._stage_config_overrides.setdefault(self.api_stage, {})[key] = val\n\n    def handle(self, argv=None):\n        \"\"\"\n        Main function.\n\n        Parses command, load settings and dispatches accordingly.\n\n        \"\"\"\n        desc = (\n            'Zappa - Deploy Python applications to AWS Lambda and API Gateway.\\n'\n            )\n        parser = argparse.ArgumentParser(description=desc)\n        parser.add_argument('-v', '--version', action='version', version=\n            pkg_resources.get_distribution('zappa').version, help=\n            'Print the zappa version')\n        parser.add_argument('--color', default='auto', choices=['auto',\n            'never', 'always'])\n        env_parser = argparse.ArgumentParser(add_help=False)\n        me_group = env_parser.add_mutually_exclusive_group()\n        all_help = 'Execute this command for all of our defined Zappa stages.'\n        me_group.add_argument('--all', action='store_true', help=all_help)\n        me_group.add_argument('stage_env', nargs='?')\n        group = env_parser.add_argument_group()\n        group.add_argument('-a', '--app_function', help=\n            'The WSGI application function.')\n        group.add_argument('-s', '--settings_file', help=\n            'The path to a Zappa settings file.')\n        group.add_argument('-q', '--quiet', action='store_true', help=\n            'Silence all output.')\n        group.add_argument('-j', '--json', action='store_true', help=\n            'Make the output of this command be machine readable.')\n        group.add_argument('--disable_progress', action='store_true', help=\n            'Disable progress bars.')\n        subparsers = parser.add_subparsers(title='subcommands', dest='command')\n        cert_parser = subparsers.add_parser('certify', parents=[env_parser],\n            help='Create and install SSL certificate')\n        cert_parser.add_argument('--manual', action='store_true', help=\n            \"Gets new Let's Encrypt certificates, but prints them to console.Does not update API Gateway domains.\"\n            )\n        cert_parser.add_argument('-y', '--yes', action='store_true', help=\n            'Auto confirm yes.')\n        deploy_parser = subparsers.add_parser('deploy', parents=[env_parser\n            ], help='Deploy application.')\n        deploy_parser.add_argument('-z', '--zip', help=\n            'Deploy Lambda with specific local or S3 hosted zip package')\n        init_parser = subparsers.add_parser('init', help=\n            'Initialize Zappa app.')\n        package_parser = subparsers.add_parser('package', parents=[\n            env_parser], help='Build the application zip package locally.')\n        package_parser.add_argument('-o', '--output', help=\n            'Name of file to output the package to.')\n        template_parser = subparsers.add_parser('template', parents=[\n            env_parser], help=\n            'Create a CloudFormation template for this API Gateway.')\n        template_parser.add_argument('-l', '--lambda-arn', required=True,\n            help='ARN of the Lambda function to template to.')\n        template_parser.add_argument('-r', '--role-arn', required=True,\n            help='ARN of the Role to template with.')\n        template_parser.add_argument('-o', '--output', help=\n            'Name of file to output the template to.')\n        invoke_parser = subparsers.add_parser('invoke', parents=[env_parser\n            ], help='Invoke remote function.')\n        invoke_parser.add_argument('--raw', action='store_true', help=\n            'When invoking remotely, invoke this python as a string, not as a modular path.'\n            )\n        invoke_parser.add_argument('--no-color', action='store_true', help=\n            \"Don't color the output\")\n        invoke_parser.add_argument('command_rest')\n        manage_parser = subparsers.add_parser('manage', help=\n            'Invoke remote Django manage.py commands.')\n        rest_help = (\n            'Command in the form of <env> <command>. <env> is not required if --all is specified'\n            )\n        manage_parser.add_argument('--all', action='store_true', help=all_help)\n        manage_parser.add_argument('command_rest', nargs='+', help=rest_help)\n        manage_parser.add_argument('--no-color', action='store_true', help=\n            \"Don't color the output\")\n        manage_parser.add_argument('-s', '--settings_file', help=\n            'The path to a Zappa settings file.')\n\n        def positive_int(s):\n            \"\"\" Ensure an arg is positive \"\"\"\n            i = int(s)\n            if i < 0:\n                msg = 'This argument must be positive (got {})'.format(s)\n                raise argparse.ArgumentTypeError(msg)\n            return i\n        rollback_parser = subparsers.add_parser('rollback', parents=[\n            env_parser], help='Rollback deployed code to a previous version.')\n        rollback_parser.add_argument('-n', '--num-rollback', type=\n            positive_int, default=1, help='The number of versions to rollback.'\n            )\n        subparsers.add_parser('schedule', parents=[env_parser], help=\n            'Schedule functions to occur at regular intervals.')\n        status_parser = subparsers.add_parser('status', parents=[env_parser\n            ], help='Show deployment status and event schedules.')\n        tail_parser = subparsers.add_parser('tail', parents=[env_parser],\n            help='Tail deployment logs.')\n        tail_parser.add_argument('--no-color', action='store_true', help=\n            \"Don't color log tail output.\")\n        tail_parser.add_argument('--http', action='store_true', help=\n            'Only show HTTP requests in tail output.')\n        tail_parser.add_argument('--non-http', action='store_true', help=\n            'Only show non-HTTP requests in tail output.')\n        tail_parser.add_argument('--since', type=str, default='100000s',\n            help='Only show lines since a certain timeframe.')\n        tail_parser.add_argument('--filter', type=str, default='', help=\n            'Apply a filter pattern to the logs.')\n        tail_parser.add_argument('--force-color', action='store_true', help\n            =\n            'Force coloring log tail output even if coloring support is not auto-detected. (example: piping)'\n            )\n        undeploy_parser = subparsers.add_parser('undeploy', parents=[\n            env_parser], help='Undeploy application.')\n        undeploy_parser.add_argument('--remove-logs', action='store_true',\n            help=\n            'Removes log groups of api gateway and lambda task during the undeployment.'\n            )\n        undeploy_parser.add_argument('-y', '--yes', action='store_true',\n            help='Auto confirm yes.')\n        subparsers.add_parser('unschedule', parents=[env_parser], help=\n            'Unschedule functions.')\n        update_parser = subparsers.add_parser('update', parents=[env_parser\n            ], help='Update deployed application.')\n        update_parser.add_argument('-z', '--zip', help=\n            'Update Lambda with specific local or S3 hosted zip package')\n        update_parser.add_argument('-n', '--no-upload', help=\n            \"Update configuration where appropriate, but don't upload new code\"\n            )\n        subparsers.add_parser('shell', parents=[env_parser], help=\n            'A debug shell with a loaded Zappa object.')\n        argcomplete.autocomplete(parser)\n        args = parser.parse_args(argv)\n        self.vargs = vars(args)\n        if args.color == 'never':\n            disable_click_colors()\n        elif args.color == 'always':\n            pass\n        elif args.color == 'auto':\n            pass\n        if not args.command:\n            parser.print_help()\n            return\n        if args.command == 'manage' and not self.vargs.get('all'):\n            self.stage_env = self.vargs['command_rest'].pop(0)\n        else:\n            self.stage_env = self.vargs.get('stage_env')\n        if args.command == 'package':\n            self.load_credentials = False\n        self.command = args.command\n        self.disable_progress = self.vargs.get('disable_progress')\n        if self.vargs.get('quiet'):\n            self.silence()\n        if self.command == 'init':\n            self.init()\n            return\n        if not self.vargs.get('json'):\n            self.check_for_update()\n        self.load_settings_file(self.vargs.get('settings_file'))\n        all_stages = self.vargs.get('all')\n        stages = []\n        if all_stages:\n            stages = self.zappa_settings.keys()\n        elif not self.stage_env:\n            if len(self.zappa_settings.keys()) == 1:\n                stages.append(list(self.zappa_settings.keys())[0])\n            else:\n                parser.error('Please supply a stage to interact with.')\n        else:\n            stages.append(self.stage_env)\n        for stage in stages:\n            try:\n                self.dispatch_command(self.command, stage)\n            except ClickException as e:\n                e.show()\n                sys.exit(e.exit_code)\n\n    def dispatch_command(self, command, stage):\n        \"\"\"\n        Given a command to execute and stage,\n        execute that command.\n        \"\"\"\n        self.api_stage = stage\n        if command not in ['status', 'manage']:\n            if not self.vargs.get('json', None):\n                click.echo('Calling ' + click.style(command, fg='green',\n                    bold=True) + ' for stage ' + click.style(self.api_stage,\n                    bold=True) + '..')\n        if self.vargs.get('app_function', None):\n            self.app_function = self.vargs['app_function']\n        try:\n            self.load_settings(self.vargs.get('settings_file'))\n        except ValueError as e:\n            if hasattr(e, 'message'):\n                print('Error: {}'.format(e.message))\n            else:\n                print(str(e))\n            sys.exit(-1)\n        self.callback('settings')\n        if command == 'deploy':\n            self.deploy(self.vargs['zip'])\n        if command == 'package':\n            self.package(self.vargs['output'])\n        if command == 'template':\n            self.template(self.vargs['lambda_arn'], self.vargs['role_arn'],\n                output=self.vargs['output'], json=self.vargs['json'])\n        elif command == 'update':\n            self.update(self.vargs['zip'], self.vargs['no_upload'])\n        elif command == 'rollback':\n            self.rollback(self.vargs['num_rollback'])\n        elif command == 'invoke':\n            if not self.vargs.get('command_rest'):\n                print('Please enter the function to invoke.')\n                return\n            self.invoke(self.vargs['command_rest'], raw_python=self.vargs[\n                'raw'], no_color=self.vargs['no_color'])\n        elif command == 'manage':\n            if not self.vargs.get('command_rest'):\n                print('Please enter the management command to invoke.')\n                return\n            if not self.django_settings:\n                print('This command is for Django projects only!')\n                print(\n                    'If this is a Django project, please define django_settings in your zappa_settings.'\n                    )\n                return\n            command_tail = self.vargs.get('command_rest')\n            if len(command_tail) > 1:\n                command = ' '.join(command_tail)\n            else:\n                command = command_tail[0]\n            self.invoke(command, command='manage', no_color=self.vargs[\n                'no_color'])\n        elif command == 'tail':\n            self.tail(colorize=not self.vargs['no_color'], http=self.vargs[\n                'http'], non_http=self.vargs['non_http'], since=self.vargs[\n                'since'], filter_pattern=self.vargs['filter'],\n                force_colorize=self.vargs['force_color'] or None)\n        elif command == 'undeploy':\n            self.undeploy(no_confirm=self.vargs['yes'], remove_logs=self.\n                vargs['remove_logs'])\n        elif command == 'schedule':\n            self.schedule()\n        elif command == 'unschedule':\n            self.unschedule()\n        elif command == 'status':\n            self.status(return_json=self.vargs['json'])\n        elif command == 'certify':\n            self.certify(no_confirm=self.vargs['yes'], manual=self.vargs[\n                'manual'])\n        elif command == 'shell':\n            self.shell()\n\n    def package(self, output=None):\n        \"\"\"\n        Only build the package\n        \"\"\"\n        self.check_venv()\n        self.override_stage_config_setting('delete_local_zip', False)\n        if self.prebuild_script:\n            self.execute_prebuild_script()\n        self.create_package(output)\n        self.callback('zip')\n        size = human_size(os.path.getsize(self.zip_path))\n        click.echo(click.style('Package created', fg='green', bold=True) +\n            ': ' + click.style(self.zip_path, bold=True) + ' (' + size + ')')\n\n    def template(self, lambda_arn, role_arn, output=None, json=False):\n        \"\"\"\n        Only build the template file.\n        \"\"\"\n        if not lambda_arn:\n            raise ClickException('Lambda ARN is required to template.')\n        if not role_arn:\n            raise ClickException('Role ARN is required to template.')\n        self.zappa.credentials_arn = role_arn\n        template = self.zappa.create_stack_template(lambda_arn=lambda_arn,\n            lambda_name=self.lambda_name, api_key_required=self.\n            api_key_required, iam_authorization=self.iam_authorization,\n            authorizer=self.authorizer, cors_options=self.cors, description\n            =self.apigateway_description)\n        if not output:\n            template_file = self.lambda_name + '-template-' + str(int(time.\n                time())) + '.json'\n        else:\n            template_file = output\n        with open(template_file, 'wb') as out:\n            out.write(bytes(template.to_json(indent=None, separators=(',',\n                ':')), 'utf-8'))\n        if not json:\n            click.echo(click.style('Template created', fg='green', bold=\n                True) + ': ' + click.style(template_file, bold=True))\n        else:\n            with open(template_file, 'r') as out:\n                print(out.read())\n\n    def deploy(self, source_zip=None):\n        \"\"\"\n        Package your project, upload it to S3, register the Lambda function\n        and create the API Gateway routes.\n\n        \"\"\"\n        if not source_zip:\n            self.check_venv()\n            if self.prebuild_script:\n                self.execute_prebuild_script()\n            deployed_versions = self.zappa.get_lambda_function_versions(self\n                .lambda_name)\n            if len(deployed_versions) > 0:\n                raise ClickException('This application is ' + click.style(\n                    'already deployed', fg='red') +\n                    ' - did you mean to call ' + click.style('update', bold\n                    =True) + '?')\n            if self.manage_roles:\n                try:\n                    self.zappa.create_iam_roles()\n                except botocore.client.ClientError:\n                    raise ClickException(click.style('Failed', fg='red') +\n                        ' to ' + click.style('manage IAM roles', bold=True) +\n                        '!\\n' + 'You may ' + click.style(\n                        'lack the necessary AWS permissions', bold=True) +\n                        \"\"\" to automatically manage a Zappa execution role.\n\"\"\"\n                         + 'To fix this, see here: ' + click.style(\n                        'https://github.com/Miserlou/Zappa#using-custom-aws-iam-roles-and-policies'\n                        , bold=True) + '\\n')\n            self.create_package()\n            self.callback('zip')\n            success = self.zappa.upload_to_s3(self.zip_path, self.\n                s3_bucket_name, disable_progress=self.disable_progress)\n            if not success:\n                raise ClickException('Unable to upload to S3. Quitting.')\n            if self.stage_config.get('slim_handler', False):\n                success = self.zappa.upload_to_s3(self.handler_path, self.\n                    s3_bucket_name, disable_progress=self.disable_progress)\n                if not success:\n                    raise ClickException(\n                        'Unable to upload handler to S3. Quitting.')\n                current_project_name = ('{0!s}_{1!s}_current_project.tar.gz'\n                    .format(self.api_stage, self.project_name))\n                success = self.zappa.copy_on_s3(src_file_name=self.zip_path,\n                    dst_file_name=current_project_name, bucket_name=self.\n                    s3_bucket_name)\n                if not success:\n                    raise ClickException(\n                        'Unable to copy the zip to be the current project. Quitting.'\n                        )\n                handler_file = self.handler_path\n            else:\n                handler_file = self.zip_path\n        try:\n            self.lambda_arn = self.zappa.get_lambda_function(function_name=\n                self.lambda_name)\n        except botocore.client.ClientError:\n            kwargs = dict(handler=self.lambda_handler, description=self.\n                lambda_description, vpc_config=self.vpc_config,\n                dead_letter_config=self.dead_letter_config, timeout=self.\n                timeout_seconds, memory_size=self.memory_size, runtime=self\n                .runtime, aws_environment_variables=self.\n                aws_environment_variables, aws_kms_key_arn=self.aws_kms_key_arn\n                )\n            if source_zip and source_zip.startswith('s3://'):\n                bucket, key_name = parse_s3_url(source_zip)\n                kwargs['function_name'] = self.lambda_name\n                kwargs['bucket'] = bucket\n                kwargs['s3_key'] = key_name\n            elif source_zip and not source_zip.startswith('s3://'):\n                with open(source_zip, mode='rb') as fh:\n                    byte_stream = fh.read()\n                kwargs['function_name'] = self.lambda_name\n                kwargs['local_zip'] = byte_stream\n            else:\n                kwargs['function_name'] = self.lambda_name\n                kwargs['bucket'] = self.s3_bucket_name\n                kwargs['s3_key'] = handler_file\n            self.lambda_arn = self.zappa.create_lambda_function(**kwargs)\n        self.schedule()\n        endpoint_url = ''\n        deployment_string = click.style('Deployment complete', fg='green',\n            bold=True) + '!'\n        if self.use_apigateway:\n            template = self.zappa.create_stack_template(lambda_arn=self.\n                lambda_arn, lambda_name=self.lambda_name, api_key_required=\n                self.api_key_required, iam_authorization=self.\n                iam_authorization, authorizer=self.authorizer, cors_options\n                =self.cors, description=self.apigateway_description)\n            self.zappa.update_stack(self.lambda_name, self.s3_bucket_name,\n                wait=True, disable_progress=self.disable_progress)\n            api_id = self.zappa.get_api_id(self.lambda_name)\n            if self.binary_support:\n                self.zappa.add_binary_support(api_id=api_id, cors=self.cors)\n            if self.stage_config.get('payload_compression', True):\n                self.zappa.add_api_compression(api_id=api_id,\n                    min_compression_size=self.stage_config.get(\n                    'payload_minimum_compression_size', 0))\n            endpoint_url = self.deploy_api_gateway(api_id)\n            deployment_string = deployment_string + ': {}'.format(endpoint_url)\n            if self.api_key_required:\n                if self.api_key is None:\n                    self.zappa.create_api_key(api_id=api_id, stage_name=\n                        self.api_stage)\n                else:\n                    self.zappa.add_api_stage_to_api_key(api_key=self.\n                        api_key, api_id=api_id, stage_name=self.api_stage)\n            if self.stage_config.get('touch', True):\n                self.touch_endpoint(endpoint_url)\n        if not source_zip:\n            if self.stage_config.get('delete_local_zip', True):\n                self.remove_local_zip()\n        if not source_zip:\n            self.remove_uploaded_zip()\n        self.callback('post')\n        click.echo(deployment_string)\n\n    def update(self, source_zip=None, no_upload=False):\n        \"\"\"\n        Repackage and update the function code.\n        \"\"\"\n        if not source_zip:\n            self.check_venv()\n            if self.prebuild_script:\n                self.execute_prebuild_script()\n            try:\n                updated_time = 1472581018\n                function_response = self.zappa.lambda_client.get_function(\n                    FunctionName=self.lambda_name)\n                conf = function_response['Configuration']\n                last_updated = parser.parse(conf['LastModified'])\n                last_updated_unix = time.mktime(last_updated.timetuple())\n            except botocore.exceptions.BotoCoreError as e:\n                click.echo(click.style(type(e).__name__, fg='red') + ': ' +\n                    e.args[0])\n                sys.exit(-1)\n            except Exception as e:\n                click.echo(click.style('Warning!', fg='red') +\n                    \" Couldn't get function \" + self.lambda_name + ' in ' +\n                    self.zappa.aws_region + ' - have you deployed yet?')\n                sys.exit(-1)\n            if last_updated_unix <= updated_time:\n                click.echo(click.style('Warning!', fg='red') +\n                    ' You may have upgraded Zappa since deploying this application. You will need to '\n                     + click.style('redeploy', bold=True) +\n                    ' for this deployment to work properly!')\n            if self.manage_roles:\n                try:\n                    self.zappa.create_iam_roles()\n                except botocore.client.ClientError:\n                    click.echo(click.style('Failed', fg='red') + ' to ' +\n                        click.style('manage IAM roles', bold=True) + '!')\n                    click.echo('You may ' + click.style(\n                        'lack the necessary AWS permissions', bold=True) +\n                        ' to automatically manage a Zappa execution role.')\n                    click.echo('To fix this, see here: ' + click.style(\n                        'https://github.com/Miserlou/Zappa#using-custom-aws-iam-roles-and-policies'\n                        , bold=True))\n                    sys.exit(-1)\n            if not no_upload:\n                self.create_package()\n                self.callback('zip')\n            if not no_upload:\n                success = self.zappa.upload_to_s3(self.zip_path, self.\n                    s3_bucket_name, disable_progress=self.disable_progress)\n                if not success:\n                    raise ClickException(\n                        'Unable to upload project to S3. Quitting.')\n                if self.stage_config.get('slim_handler', False):\n                    success = self.zappa.upload_to_s3(self.handler_path,\n                        self.s3_bucket_name, disable_progress=self.\n                        disable_progress)\n                    if not success:\n                        raise ClickException(\n                            'Unable to upload handler to S3. Quitting.')\n                    current_project_name = (\n                        '{0!s}_{1!s}_current_project.tar.gz'.format(self.\n                        api_stage, self.project_name))\n                    success = self.zappa.copy_on_s3(src_file_name=self.\n                        zip_path, dst_file_name=current_project_name,\n                        bucket_name=self.s3_bucket_name)\n                    if not success:\n                        raise ClickException(\n                            'Unable to copy the zip to be the current project. Quitting.'\n                            )\n                    handler_file = self.handler_path\n                else:\n                    handler_file = self.zip_path\n        if source_zip and source_zip.startswith('s3://'):\n            bucket, key_name = parse_s3_url(source_zip)\n            self.lambda_arn = self.zappa.update_lambda_function(bucket,\n                self.lambda_name, key_name)\n        elif source_zip and not source_zip.startswith('s3://'):\n            with open(source_zip, mode='rb') as fh:\n                byte_stream = fh.read()\n            self.lambda_arn = self.zappa.update_lambda_function(self.\n                s3_bucket_name, self.lambda_name, local_zip=byte_stream)\n        elif not no_upload:\n            self.lambda_arn = self.zappa.update_lambda_function(self.\n                s3_bucket_name, self.lambda_name, handler_file)\n        if not source_zip and not no_upload:\n            self.remove_uploaded_zip()\n        self.lambda_arn = self.zappa.update_lambda_configuration(lambda_arn\n            =self.lambda_arn, function_name=self.lambda_name, handler=self.\n            lambda_handler, description=self.lambda_description, vpc_config\n            =self.vpc_config, timeout=self.timeout_seconds, memory_size=\n            self.memory_size, runtime=self.runtime,\n            aws_environment_variables=self.aws_environment_variables,\n            aws_kms_key_arn=self.aws_kms_key_arn)\n        if not source_zip and not no_upload:\n            if self.stage_config.get('delete_local_zip', True):\n                self.remove_local_zip()\n        if self.use_apigateway:\n            self.zappa.create_stack_template(lambda_arn=self.lambda_arn,\n                lambda_name=self.lambda_name, api_key_required=self.\n                api_key_required, iam_authorization=self.iam_authorization,\n                authorizer=self.authorizer, cors_options=self.cors,\n                description=self.apigateway_description)\n            self.zappa.update_stack(self.lambda_name, self.s3_bucket_name,\n                wait=True, update_only=True, disable_progress=self.\n                disable_progress)\n            api_id = self.zappa.get_api_id(self.lambda_name)\n            if self.binary_support:\n                self.zappa.add_binary_support(api_id=api_id, cors=self.cors)\n            else:\n                self.zappa.remove_binary_support(api_id=api_id, cors=self.cors)\n            if self.stage_config.get('payload_compression', True):\n                self.zappa.add_api_compression(api_id=api_id,\n                    min_compression_size=self.stage_config.get(\n                    'payload_minimum_compression_size', 0))\n            else:\n                self.zappa.remove_api_compression(api_id=api_id)\n            endpoint_url = self.deploy_api_gateway(api_id)\n            if self.stage_config.get('domain', None):\n                endpoint_url = self.stage_config.get('domain')\n        else:\n            endpoint_url = None\n        self.schedule()\n        self.update_cognito_triggers()\n        self.callback('post')\n        if endpoint_url and 'https://' not in endpoint_url:\n            endpoint_url = 'https://' + endpoint_url\n        deployed_string = 'Your updated Zappa deployment is ' + click.style(\n            'live', fg='green', bold=True) + '!'\n        if self.use_apigateway:\n            deployed_string = deployed_string + ': ' + click.style('{}'.\n                format(endpoint_url), bold=True)\n            api_url = None\n            if endpoint_url and 'amazonaws.com' not in endpoint_url:\n                api_url = self.zappa.get_api_url(self.lambda_name, self.\n                    api_stage)\n                if endpoint_url != api_url:\n                    deployed_string = deployed_string + ' (' + api_url + ')'\n            if self.stage_config.get('touch', True):\n                if api_url:\n                    self.touch_endpoint(api_url)\n                elif endpoint_url:\n                    self.touch_endpoint(endpoint_url)\n        click.echo(deployed_string)\n\n    def rollback(self, revision):\n        \"\"\"\n        Rollsback the currently deploy lambda code to a previous revision.\n        \"\"\"\n        print('Rolling back..')\n        self.zappa.rollback_lambda_function_version(self.lambda_name,\n            versions_back=revision)\n        print('Done!')\n\n    def tail(self, since, filter_pattern, limit=10000, keep_open=True,\n        colorize=True, http=False, non_http=False, force_colorize=False):\n        \"\"\"\n        Tail this function's logs.\n\n        if keep_open, do so repeatedly, printing any new logs\n        \"\"\"\n        try:\n            since_stamp = string_to_timestamp(since)\n            last_since = since_stamp\n            while True:\n                new_logs = self.zappa.fetch_logs(self.lambda_name,\n                    start_time=since_stamp, limit=limit, filter_pattern=\n                    filter_pattern)\n                new_logs = [e for e in new_logs if e['timestamp'] > last_since]\n                self.print_logs(new_logs, colorize, http, non_http,\n                    force_colorize)\n                if not keep_open:\n                    break\n                if new_logs:\n                    last_since = new_logs[-1]['timestamp']\n                time.sleep(1)\n        except KeyboardInterrupt:\n            try:\n                sys.exit(0)\n            except SystemExit:\n                os._exit(130)\n\n    def undeploy(self, no_confirm=False, remove_logs=False):\n        \"\"\"\n        Tear down an existing deployment.\n        \"\"\"\n        if not no_confirm:\n            confirm = input('Are you sure you want to undeploy? [y/n] ')\n            if confirm != 'y':\n                return\n        if self.use_apigateway:\n            if remove_logs:\n                self.zappa.remove_api_gateway_logs(self.lambda_name)\n            domain_name = self.stage_config.get('domain', None)\n            if self.api_key_required and self.api_key is None:\n                api_id = self.zappa.get_api_id(self.lambda_name)\n                self.zappa.remove_api_key(api_id, self.api_stage)\n            gateway_id = self.zappa.undeploy_api_gateway(self.lambda_name,\n                domain_name=domain_name)\n        self.unschedule()\n        self.zappa.delete_lambda_function(self.lambda_name)\n        if remove_logs:\n            self.zappa.remove_lambda_function_logs(self.lambda_name)\n        click.echo(click.style('Done', fg='green', bold=True) + '!')\n\n    def update_cognito_triggers(self):\n        \"\"\"\n        Update any cognito triggers\n        \"\"\"\n        if self.cognito:\n            user_pool = self.cognito.get('user_pool')\n            triggers = self.cognito.get('triggers', [])\n            lambda_configs = set()\n            for trigger in triggers:\n                lambda_configs.add(trigger['source'].split('_')[0])\n            self.zappa.update_cognito(self.lambda_name, user_pool,\n                lambda_configs, self.lambda_arn)\n\n    def schedule(self):\n        \"\"\"\n        Given a a list of functions and a schedule to execute them,\n        setup up regular execution.\n\n        \"\"\"\n        events = self.stage_config.get('events', [])\n        if events:\n            if not isinstance(events, list):\n                print('Events must be supplied as a list.')\n                return\n        for event in events:\n            self.collision_warning(event.get('function'))\n        if self.stage_config.get('keep_warm', True):\n            if not events:\n                events = []\n            keep_warm_rate = self.stage_config.get('keep_warm_expression',\n                'rate(4 minutes)')\n            events.append({'name': 'zappa-keep-warm', 'function':\n                'handler.keep_warm_callback', 'expression': keep_warm_rate,\n                'description': 'Zappa Keep Warm - {}'.format(self.lambda_name)}\n                )\n        if events:\n            try:\n                function_response = self.zappa.lambda_client.get_function(\n                    FunctionName=self.lambda_name)\n            except botocore.exceptions.ClientError as e:\n                click.echo(click.style('Function does not exist', fg=\n                    'yellow') + ', please ' + click.style('deploy', bold=\n                    True) + 'first. Ex:' + click.style('zappa deploy {}.'.\n                    format(self.api_stage), bold=True))\n                sys.exit(-1)\n            print('Scheduling..')\n            self.zappa.schedule_events(lambda_arn=function_response[\n                'Configuration']['FunctionArn'], lambda_name=self.\n                lambda_name, events=events)\n        if self.stage_config.get('async_source', None\n            ) == 'sns' and self.stage_config.get('async_resources', True):\n            self.lambda_arn = self.zappa.get_lambda_function(function_name=\n                self.lambda_name)\n            topic_arn = self.zappa.create_async_sns_topic(lambda_name=self.\n                lambda_name, lambda_arn=self.lambda_arn)\n            click.echo('SNS Topic created: %s' % topic_arn)\n        table_name = self.stage_config.get('async_response_table', False)\n        read_capacity = self.stage_config.get(\n            'async_response_table_read_capacity', 1)\n        write_capacity = self.stage_config.get(\n            'async_response_table_write_capacity', 1)\n        if table_name and self.stage_config.get('async_resources', True):\n            created, response_table = self.zappa.create_async_dynamodb_table(\n                table_name, read_capacity, write_capacity)\n            if created:\n                click.echo('DynamoDB table created: %s' % table_name)\n            else:\n                click.echo('DynamoDB table exists: %s' % table_name)\n                provisioned_throughput = response_table['Table'][\n                    'ProvisionedThroughput']\n                if provisioned_throughput['ReadCapacityUnits'\n                    ] != read_capacity or provisioned_throughput[\n                    'WriteCapacityUnits'] != write_capacity:\n                    click.echo(click.style(\n                        \"\"\"\nWarning! Existing DynamoDB table ({}) does not match configured capacity.\n\"\"\"\n                        .format(table_name), fg='red'))\n\n    def unschedule(self):\n        \"\"\"\n        Given a a list of scheduled functions,\n        tear down their regular execution.\n\n        \"\"\"\n        events = self.stage_config.get('events', [])\n        if not isinstance(events, list):\n            print('Events must be supplied as a list.')\n            return\n        function_arn = None\n        try:\n            function_response = self.zappa.lambda_client.get_function(\n                FunctionName=self.lambda_name)\n            function_arn = function_response['Configuration']['FunctionArn']\n        except botocore.exceptions.ClientError as e:\n            raise ClickException(\n                'Function does not exist, you should deploy first. Ex: zappa deploy {}. Proceeding to unschedule CloudWatch based events.'\n                .format(self.api_stage))\n        print('Unscheduling..')\n        self.zappa.unschedule_events(lambda_name=self.lambda_name,\n            lambda_arn=function_arn, events=events)\n        if self.stage_config.get('async_source', None\n            ) == 'sns' and self.stage_config.get('async_resources', True):\n            removed_arns = self.zappa.remove_async_sns_topic(self.lambda_name)\n            click.echo('SNS Topic removed: %s' % ', '.join(removed_arns))\n\n    def invoke(self, function_name, raw_python=False, command=None,\n        no_color=False):\n        \"\"\"\n        Invoke a remote function.\n        \"\"\"\n        key = command if command is not None else 'command'\n        if raw_python:\n            command = {'raw_command': function_name}\n        else:\n            command = {key: function_name}\n        import json as json\n        response = self.zappa.invoke_lambda_function(self.lambda_name, json\n            .dumps(command), invocation_type='RequestResponse')\n        if 'LogResult' in response:\n            if no_color:\n                print(base64.b64decode(response['LogResult']))\n            else:\n                decoded = base64.b64decode(response['LogResult']).decode()\n                formatted = self.format_invoke_command(decoded)\n                colorized = self.colorize_invoke_command(formatted)\n                print(colorized)\n        else:\n            print(response)\n        if 'FunctionError' in response:\n            raise ClickException('{} error occured while invoking command.'\n                .format(response['FunctionError']))\n\n    def format_invoke_command(self, string):\n        \"\"\"\n        Formats correctly the string ouput from the invoke() method,\n        replacing line breaks and tabs when necessary.\n        \"\"\"\n        string = string.replace('\\\\n', '\\n')\n        formated_response = ''\n        for line in string.splitlines():\n            if line.startswith('REPORT'):\n                line = line.replace('\\t', '\\n')\n            if line.startswith('[DEBUG]'):\n                line = line.replace('\\t', ' ')\n            formated_response += line + '\\n'\n        formated_response = formated_response.replace('\\n\\n', '\\n')\n        return formated_response\n\n    def colorize_invoke_command(self, string):\n        \"\"\"\n        Apply various heuristics to return a colorized version the invoke\n        comman string. If these fail, simply return the string in plaintext.\n\n        Inspired by colorize_log_entry().\n        \"\"\"\n        final_string = string\n        try:\n            try:\n                for token in ['START', 'END', 'REPORT', '[DEBUG]']:\n                    if token in final_string:\n                        format_string = '[{}]'\n                        pattern = '\\\\b{}\\\\b'\n                        if token == '[DEBUG]':\n                            format_string = '{}'\n                            pattern = re.escape(token)\n                        repl = click.style(format_string.format(token),\n                            bold=True, fg='cyan')\n                        final_string = re.sub(pattern.format(token), repl,\n                            final_string)\n            except Exception:\n                pass\n            try:\n                for token in ['Zappa Event:', 'RequestId:', 'Version:',\n                    'Duration:', 'Billed', 'Memory Size:', 'Max Memory Used:']:\n                    if token in final_string:\n                        final_string = final_string.replace(token, click.\n                            style(token, bold=True, fg='green'))\n            except Exception:\n                pass\n            for token in final_string.replace('\\t', ' ').split(' '):\n                try:\n                    if token.count('-') is 4 and token.replace('-', ''\n                        ).isalnum():\n                        final_string = final_string.replace(token, click.\n                            style(token, fg='magenta'))\n                except Exception:\n                    pass\n            return final_string\n        except Exception:\n            return string\n\n    def status(self, return_json=False):\n        \"\"\"\n        Describe the status of the current deployment.\n        \"\"\"\n\n        def tabular_print(title, value):\n            \"\"\"\n            Convience function for priting formatted table items.\n            \"\"\"\n            click.echo('%-*s%s' % (32, click.style('\\t' + title, fg='green'\n                ) + ':', str(value)))\n            return\n        lambda_versions = self.zappa.get_lambda_function_versions(self.\n            lambda_name)\n        if not lambda_versions:\n            raise ClickException(click.style(\n                'No Lambda %s detected in %s - have you deployed yet?' % (\n                self.lambda_name, self.zappa.aws_region), fg='red'))\n        status_dict = collections.OrderedDict()\n        status_dict['Lambda Versions'] = len(lambda_versions)\n        function_response = self.zappa.lambda_client.get_function(FunctionName\n            =self.lambda_name)\n        conf = function_response['Configuration']\n        self.lambda_arn = conf['FunctionArn']\n        status_dict['Lambda Name'] = self.lambda_name\n        status_dict['Lambda ARN'] = self.lambda_arn\n        status_dict['Lambda Role ARN'] = conf['Role']\n        status_dict['Lambda Handler'] = conf['Handler']\n        status_dict['Lambda Code Size'] = conf['CodeSize']\n        status_dict['Lambda Version'] = conf['Version']\n        status_dict['Lambda Last Modified'] = conf['LastModified']\n        status_dict['Lambda Memory Size'] = conf['MemorySize']\n        status_dict['Lambda Timeout'] = conf['Timeout']\n        status_dict['Lambda Runtime'] = conf['Runtime']\n        if 'VpcConfig' in conf.keys():\n            status_dict['Lambda VPC ID'] = conf.get('VpcConfig', {}).get(\n                'VpcId', 'Not assigned')\n        else:\n            status_dict['Lambda VPC ID'] = None\n        try:\n            function_invocations = self.zappa.cloudwatch.get_metric_statistics(\n                Namespace='AWS/Lambda', MetricName='Invocations', StartTime\n                =datetime.utcnow() - timedelta(days=1), EndTime=datetime.\n                utcnow(), Period=1440, Statistics=['Sum'], Dimensions=[{\n                'Name': 'FunctionName', 'Value': '{}'.format(self.\n                lambda_name)}])['Datapoints'][0]['Sum']\n        except Exception as e:\n            function_invocations = 0\n        try:\n            function_errors = self.zappa.cloudwatch.get_metric_statistics(\n                Namespace='AWS/Lambda', MetricName='Errors', StartTime=\n                datetime.utcnow() - timedelta(days=1), EndTime=datetime.\n                utcnow(), Period=1440, Statistics=['Sum'], Dimensions=[{\n                'Name': 'FunctionName', 'Value': '{}'.format(self.\n                lambda_name)}])['Datapoints'][0]['Sum']\n        except Exception as e:\n            function_errors = 0\n        try:\n            error_rate = '{0:.2f}%'.format(function_errors /\n                function_invocations * 100)\n        except:\n            error_rate = 'Error calculating'\n        status_dict['Invocations (24h)'] = int(function_invocations)\n        status_dict['Errors (24h)'] = int(function_errors)\n        status_dict['Error Rate (24h)'] = error_rate\n        if self.use_apigateway:\n            api_url = self.zappa.get_api_url(self.lambda_name, self.api_stage)\n            status_dict['API Gateway URL'] = api_url\n            api_id = self.zappa.get_api_id(self.lambda_name)\n            for api_key in self.zappa.get_api_keys(api_id, self.api_stage):\n                status_dict['API Gateway x-api-key'] = api_key\n            domain_url = self.stage_config.get('domain', None)\n            if domain_url:\n                status_dict['Domain URL'] = 'https://' + domain_url\n            else:\n                status_dict['Domain URL'] = 'None Supplied'\n        event_rules = self.zappa.get_event_rules_for_lambda(lambda_arn=self\n            .lambda_arn)\n        status_dict['Num. Event Rules'] = len(event_rules)\n        if len(event_rules) > 0:\n            status_dict['Events'] = []\n        for rule in event_rules:\n            event_dict = {}\n            rule_name = rule['Name']\n            event_dict['Event Rule Name'] = rule_name\n            event_dict['Event Rule Schedule'] = rule.get(u'ScheduleExpression',\n                None)\n            event_dict['Event Rule State'] = rule.get(u'State', None).title()\n            event_dict['Event Rule ARN'] = rule.get(u'Arn', None)\n            status_dict['Events'].append(event_dict)\n        if return_json:\n            print(json.dumpsJSON(status_dict))\n        else:\n            click.echo('Status for ' + click.style(self.lambda_name, bold=\n                True) + ': ')\n            for k, v in status_dict.items():\n                if k == 'Events':\n                    for event in v:\n                        for item_k, item_v in event.items():\n                            tabular_print(item_k, item_v)\n                else:\n                    tabular_print(k, v)\n        return True\n\n    def check_stage_name(self, stage_name):\n        \"\"\"\n        Make sure the stage name matches the AWS-allowed pattern\n\n        (calls to apigateway_client.create_deployment, will fail with error\n        message \"ClientError: An error occurred (BadRequestException) when\n        calling the CreateDeployment operation: Stage name only allows\n        a-zA-Z0-9_\" if the pattern does not match)\n        \"\"\"\n        if self.stage_name_env_pattern.match(stage_name):\n            return True\n        raise ValueError('AWS requires stage name to match a-zA-Z0-9_')\n\n    def check_environment(self, environment):\n        \"\"\"\n        Make sure the environment contains only strings\n\n        (since putenv needs a string)\n        \"\"\"\n        non_strings = []\n        for k, v in environment.items():\n            if not isinstance(v, basestring):\n                non_strings.append(k)\n        if non_strings:\n            raise ValueError(\n                'The following environment variables are not strings: {}'.\n                format(', '.join(non_strings)))\n        else:\n            return True\n\n    def init(self, settings_file='zappa_settings.json'):\n        \"\"\"\n        Initialize a new Zappa project by creating a new zappa_settings.json in a guided process.\n\n        This should probably be broken up into few separate componants once it's stable.\n        Testing these inputs requires monkeypatching with mock, which isn't pretty.\n\n        \"\"\"\n        self.check_venv()\n        if os.path.isfile(settings_file):\n            raise ClickException('This project already has a ' + click.\n                style('{0!s} file'.format(settings_file), fg='red', bold=\n                True) + '!')\n        click.echo(click.style(\n            u\"\"\"\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557\n\u255a\u2550\u2550\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n  \u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\n \u2588\u2588\u2588\u2554\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\n\"\"\"\n            , fg='green', bold=True))\n        click.echo(click.style('Welcome to ', bold=True) + click.style(\n            'Zappa', fg='green', bold=True) + click.style('!\\n', bold=True))\n        click.echo(click.style('Zappa', bold=True) +\n            ' is a system for running server-less Python web applications on AWS Lambda and AWS API Gateway.'\n            )\n        click.echo(\n            'This `init` command will help you create and configure your new Zappa deployment.'\n            )\n        click.echo(\"Let's get started!\\n\")\n        while True:\n            click.echo(\n                \"Your Zappa configuration can support multiple production stages, like '\"\n                 + click.style('dev', bold=True) + \"', '\" + click.style(\n                'staging', bold=True) + \"', and '\" + click.style(\n                'production', bold=True) + \"'.\")\n            env = input(\n                \"What do you want to call this environment (default 'dev'): \"\n                ) or 'dev'\n            try:\n                self.check_stage_name(env)\n                break\n            except ValueError:\n                click.echo(click.style('Stage names must match a-zA-Z0-9_',\n                    fg='red'))\n        session = botocore.session.Session()\n        config = session.full_config\n        profiles = config.get('profiles', {})\n        profile_names = list(profiles.keys())\n        click.echo(\n            \"\"\"\nAWS Lambda and API Gateway are only available in certain regions. Let's check to make sure you have a profile set up in one that will work.\"\"\"\n            )\n        if not profile_names:\n            profile_name, profile = None, None\n            click.echo(\n                \"We couldn't find an AWS profile to use. Before using Zappa, you'll need to set one up. See here for more info: {}\"\n                .format(click.style(BOTO3_CONFIG_DOCS_URL, fg='blue',\n                underline=True)))\n        elif len(profile_names) == 1:\n            profile_name = profile_names[0]\n            profile = profiles[profile_name]\n            click.echo('Okay, using profile {}!'.format(click.style(\n                profile_name, bold=True)))\n        else:\n            if 'default' in profile_names:\n                default_profile = [p for p in profile_names if p == 'default'][\n                    0]\n            else:\n                default_profile = profile_names[0]\n            while True:\n                profile_name = input(\n                    \"We found the following profiles: {}, and {}. Which would you like us to use? (default '{}'): \"\n                    .format(', '.join(profile_names[:-1]), profile_names[-1\n                    ], default_profile)) or default_profile\n                if profile_name in profiles:\n                    profile = profiles[profile_name]\n                    break\n                else:\n                    click.echo(\n                        'Please enter a valid name for your AWS profile.')\n        profile_region = profile.get('region') if profile else None\n        click.echo(\n            '\\nYour Zappa deployments will need to be uploaded to a ' +\n            click.style('private S3 bucket', bold=True) + '.')\n        click.echo(\n            \"If you don't have a bucket yet, we'll create one for you too.\")\n        default_bucket = 'zappa-' + ''.join(random.choice(string.\n            ascii_lowercase + string.digits) for _ in range(9))\n        bucket = input(\n            \"What do you want call your bucket? (default '%s'): \" %\n            default_bucket) or default_bucket\n        try:\n            import django\n            has_django = True\n        except ImportError as e:\n            has_django = False\n        try:\n            import flask\n            has_flask = True\n        except ImportError as e:\n            has_flask = False\n        print('')\n        if has_django:\n            click.echo('It looks like this is a ' + click.style('Django',\n                bold=True) + ' application!')\n            click.echo('What is the ' + click.style('module path', bold=\n                True) + \" to your projects's Django settings?\")\n            django_settings = None\n            matches = detect_django_settings()\n            while django_settings in [None, '']:\n                if matches:\n                    click.echo('We discovered: ' + click.style(', '.join(\n                        '{}'.format(i) for v, i in enumerate(matches)),\n                        bold=True))\n                    django_settings = input(\n                        \"Where are your project's settings? (default '%s'): \" %\n                        matches[0]) or matches[0]\n                else:\n                    click.echo(\n                        \"(This will likely be something like 'your_project.settings')\"\n                        )\n                    django_settings = input(\n                        \"Where are your project's settings?: \")\n            django_settings = django_settings.replace(\"'\", '')\n            django_settings = django_settings.replace('\"', '')\n        else:\n            matches = None\n            if has_flask:\n                click.echo('It looks like this is a ' + click.style('Flask',\n                    bold=True) + ' application.')\n                matches = detect_flask_apps()\n            click.echo(\"What's the \" + click.style('modular path', bold=\n                True) + \" to your app's function?\")\n            click.echo(\"This will likely be something like 'your_module.app'.\")\n            app_function = None\n            while app_function in [None, '']:\n                if matches:\n                    click.echo('We discovered: ' + click.style(', '.join(\n                        '{}'.format(i) for v, i in enumerate(matches)),\n                        bold=True))\n                    app_function = input(\n                        \"Where is your app's function? (default '%s'): \" %\n                        matches[0]) or matches[0]\n                else:\n                    app_function = input(\"Where is your app's function?: \")\n            app_function = app_function.replace(\"'\", '')\n            app_function = app_function.replace('\"', '')\n        click.echo('\\nYou can optionally deploy to ' + click.style(\n            'all available regions', bold=True) +\n            ' in order to provide fast global service.')\n        click.echo(\n            \"If you are using Zappa for the first time, you probably don't want to do this!\"\n            )\n        global_deployment = False\n        while True:\n            global_type = input(\n                'Would you like to deploy this application ' + click.style(\n                'globally', bold=True) + \"? (default 'n') [y/n/(p)rimary]: \")\n            if not global_type:\n                break\n            if global_type.lower() in ['y', 'yes', 'p', 'primary']:\n                global_deployment = True\n                break\n            if global_type.lower() in ['n', 'no']:\n                global_deployment = False\n                break\n        zappa_settings = {env: {'profile_name': profile_name, 's3_bucket':\n            bucket, 'runtime': 'python3.6' if sys.version_info[0] == 3 else\n            'python2.7', 'project_name': self.get_project_name()}}\n        if profile_region:\n            zappa_settings[env]['aws_region'] = profile_region\n        if has_django:\n            zappa_settings[env]['django_settings'] = django_settings\n        else:\n            zappa_settings[env]['app_function'] = app_function\n        if global_deployment:\n            additional_regions = [r for r in API_GATEWAY_REGIONS if r !=\n                profile_region]\n            if global_type.lower() in ['p', 'primary']:\n                additional_regions = [r for r in additional_regions if '-1' in\n                    r]\n            for region in additional_regions:\n                env_name = env + '_' + region.replace('-', '_')\n                g_env = {env_name: {'extends': env, 'aws_region': region}}\n                zappa_settings.update(g_env)\n        import json as json\n        zappa_settings_json = json.dumps(zappa_settings, sort_keys=True,\n            indent=4)\n        click.echo(\"\\nOkay, here's your \" + click.style(\n            'zappa_settings.json', bold=True) + ':\\n')\n        click.echo(click.style(zappa_settings_json, fg='yellow', bold=False))\n        confirm = input('\\nDoes this look ' + click.style('okay', bold=True,\n            fg='green') + \"? (default 'y') [y/n]: \") or 'yes'\n        if confirm[0] not in ['y', 'Y', 'yes', 'YES']:\n            click.echo('' + click.style('Sorry', bold=True, fg='red') +\n                ' to hear that! Please init again.')\n            return\n        with open('zappa_settings.json', 'w') as zappa_settings_file:\n            zappa_settings_file.write(zappa_settings_json)\n        if global_deployment:\n            click.echo('\\n' + click.style('Done', bold=True) +\n                '! You can also ' + click.style('deploy all', bold=True) +\n                ' by executing:\\n')\n            click.echo(click.style('\\t$ zappa deploy --all', bold=True))\n            click.echo('\\nAfter that, you can ' + click.style('update',\n                bold=True) + \"\"\" your application code with:\n\"\"\")\n            click.echo(click.style('\\t$ zappa update --all', bold=True))\n        else:\n            click.echo('\\n' + click.style('Done', bold=True) +\n                '! Now you can ' + click.style('deploy', bold=True) +\n                \"\"\" your Zappa application by executing:\n\"\"\")\n            click.echo(click.style('\\t$ zappa deploy %s' % env, bold=True))\n            click.echo('\\nAfter that, you can ' + click.style('update',\n                bold=True) + \"\"\" your application code with:\n\"\"\")\n            click.echo(click.style('\\t$ zappa update %s' % env, bold=True))\n        click.echo('\\nTo learn more, check out our project page on ' +\n            click.style('GitHub', bold=True) + ' here: ' + click.style(\n            'https://github.com/Miserlou/Zappa', fg='cyan', bold=True))\n        click.echo('and stop by our ' + click.style('Slack', bold=True) +\n            ' channel here: ' + click.style('https://slack.zappa.io', fg=\n            'cyan', bold=True))\n        click.echo('\\nEnjoy!,')\n        click.echo(' ~ Team ' + click.style('Zappa', bold=True) + '!')\n        return\n\n    def certify(self, no_confirm=True, manual=False):\n        \"\"\"\n        Register or update a domain certificate for this env.\n        \"\"\"\n        if not self.domain:\n            raise ClickException(\"Can't certify a domain without \" + click.\n                style('domain', fg='red', bold=True) + ' configured!')\n        if not no_confirm:\n            confirm = input('Are you sure you want to certify? [y/n] ')\n            if confirm != 'y':\n                return\n        deployed_versions = self.zappa.get_lambda_function_versions(self.\n            lambda_name)\n        if len(deployed_versions) == 0:\n            raise ClickException('This application ' + click.style(\n                \"isn't deployed yet\", fg='red') +\n                ' - did you mean to call ' + click.style('deploy', bold=\n                True) + '?')\n        account_key_location = self.stage_config.get('lets_encrypt_key', None)\n        cert_location = self.stage_config.get('certificate', None)\n        cert_key_location = self.stage_config.get('certificate_key', None)\n        cert_chain_location = self.stage_config.get('certificate_chain', None)\n        cert_arn = self.stage_config.get('certificate_arn', None)\n        certificate_body = None\n        certificate_private_key = None\n        certificate_chain = None\n        if not cert_location and not cert_arn:\n            if not account_key_location:\n                raise ClickException(\"Can't certify a domain without \" +\n                    click.style('lets_encrypt_key', fg='red', bold=True) +\n                    ' or ' + click.style('certificate', fg='red', bold=True\n                    ) + ' or ' + click.style('certificate_arn', fg='red',\n                    bold=True) + ' configured!')\n            from .letsencrypt import gettempdir\n            if account_key_location.startswith('s3://'):\n                bucket, key_name = parse_s3_url(account_key_location)\n                self.zappa.s3_client.download_file(bucket, key_name, os.\n                    path.join(gettempdir(), 'account.key'))\n            else:\n                from shutil import copyfile\n                copyfile(account_key_location, os.path.join(gettempdir(),\n                    'account.key'))\n        elif not account_key_location and not cert_arn:\n            if (not cert_location or not cert_key_location or not\n                cert_chain_location):\n                raise ClickException(\"Can't certify a domain without \" +\n                    click.style(\n                    'certificate, certificate_key and certificate_chain',\n                    fg='red', bold=True) + ' configured!')\n            with open(cert_location) as f:\n                certificate_body = f.read()\n            with open(cert_key_location) as f:\n                certificate_private_key = f.read()\n            with open(cert_chain_location) as f:\n                certificate_chain = f.read()\n        click.echo('Certifying domain ' + click.style(self.domain, fg=\n            'green', bold=True) + '..')\n        if not cert_location and not cert_arn:\n            from .letsencrypt import get_cert_and_update_domain\n            cert_success = get_cert_and_update_domain(self.zappa, self.\n                lambda_name, self.api_stage, self.domain, manual)\n        else:\n            route53 = self.stage_config.get('route53_enabled', True)\n            if not self.zappa.get_domain_name(self.domain, route53=route53):\n                dns_name = self.zappa.create_domain_name(domain_name=self.\n                    domain, certificate_name=self.domain + '-Zappa-Cert',\n                    certificate_body=certificate_body,\n                    certificate_private_key=certificate_private_key,\n                    certificate_chain=certificate_chain, certificate_arn=\n                    cert_arn, lambda_name=self.lambda_name, stage=self.\n                    api_stage, route53=route53)\n                if route53:\n                    self.zappa.update_route53_records(self.domain, dns_name)\n                print(\n                    'Created a new domain name with supplied certificate. Please note that it can take up to 40 minutes for this domain to be created and propagated through AWS, but it requires no further work on your part.'\n                    )\n            else:\n                self.zappa.update_domain_name(domain_name=self.domain,\n                    certificate_name=self.domain + '-Zappa-Cert',\n                    certificate_body=certificate_body,\n                    certificate_private_key=certificate_private_key,\n                    certificate_chain=certificate_chain, certificate_arn=\n                    cert_arn, lambda_name=self.lambda_name, stage=self.\n                    api_stage, route53=route53)\n            cert_success = True\n        if cert_success:\n            click.echo('Certificate ' + click.style('updated', fg='green',\n                bold=True) + '!')\n        else:\n            click.echo(click.style('Failed', fg='red', bold=True) +\n                ' to generate or install certificate! :(')\n            click.echo('\\n==============\\n')\n            shamelessly_promote()\n\n    def shell(self):\n        \"\"\"\n        Spawn a debug shell.\n        \"\"\"\n        click.echo(click.style('NOTICE!', fg='yellow', bold=True) +\n            ' This is a ' + click.style('local', fg='green', bold=True) +\n            ' shell, inside a ' + click.style('Zappa', bold=True) + ' object!')\n        self.zappa.shell()\n        return\n\n    def callback(self, position):\n        \"\"\"\n        Allows the execution of custom code between creation of the zip file and deployment to AWS.\n\n        :return: None\n        \"\"\"\n        callbacks = self.stage_config.get('callbacks', {})\n        callback = callbacks.get(position)\n        if callback:\n            mod_path, cb_func_name = callback.rsplit('.', 1)\n            try:\n                if mod_path.count('.') >= 1:\n                    mod_folder_path, mod_name = mod_path.rsplit('.', 1)\n                    mod_folder_path_fragments = mod_folder_path.split('.')\n                    working_dir = os.path.join(os.getcwd(), *\n                        mod_folder_path_fragments)\n                else:\n                    mod_name = mod_path\n                    working_dir = os.getcwd()\n                working_dir_importer = pkgutil.get_importer(working_dir)\n                module_ = working_dir_importer.find_module(mod_name\n                    ).load_module(mod_name)\n            except (ImportError, AttributeError):\n                try:\n                    module_ = importlib.import_module(mod_path)\n                except ImportError:\n                    raise ClickException(click.style('Failed ', fg='red') +\n                        'to ' + click.style('import {position} callback '.\n                        format(position=position), bold=True) +\n                        'module: \"{mod_path}\"'.format(mod_path=click.style(\n                        mod_path, bold=True)))\n            if not hasattr(module_, cb_func_name):\n                raise ClickException(click.style('Failed ', fg='red') +\n                    'to ' + click.style('find {position} callback '.format(\n                    position=position), bold=True) +\n                    'function: \"{cb_func_name}\" '.format(cb_func_name=click\n                    .style(cb_func_name, bold=True)) +\n                    'in module \"{mod_path}\"'.format(mod_path=mod_path))\n            cb_func = getattr(module_, cb_func_name)\n            cb_func(self)\n\n    def check_for_update(self):\n        \"\"\"\n        Print a warning if there's a new Zappa version available.\n        \"\"\"\n        try:\n            version = pkg_resources.require('zappa')[0].version\n            updateable = check_new_version_available(version)\n            if updateable:\n                click.echo(click.style('Important!', fg='yellow', bold=True\n                    ) + ' A new version of ' + click.style('Zappa', bold=\n                    True) + ' is available!')\n                click.echo('Upgrade with: ' + click.style(\n                    'pip install zappa --upgrade', bold=True))\n                click.echo(\n                    'Visit the project page on GitHub to see the latest changes: '\n                     + click.style('https://github.com/Miserlou/Zappa',\n                    bold=True))\n        except Exception as e:\n            print(e)\n            return\n\n    def load_settings(self, settings_file=None, session=None):\n        \"\"\"\n        Load the local zappa_settings file.\n\n        An existing boto session can be supplied, though this is likely for testing purposes.\n\n        Returns the loaded Zappa object.\n        \"\"\"\n        if not settings_file:\n            settings_file = self.get_json_or_yaml_settings()\n        if not os.path.isfile(settings_file):\n            raise ClickException('Please configure your zappa_settings file.')\n        self.load_settings_file(settings_file)\n        for stage_name in self.zappa_settings.keys():\n            try:\n                self.check_stage_name(stage_name)\n            except ValueError:\n                raise ValueError(\n                    \"API stage names must match a-zA-Z0-9_ ; '{0!s}' does not.\"\n                    .format(stage_name))\n        if self.api_stage not in self.zappa_settings.keys():\n            raise ClickException(\n                \"Please define stage '{0!s}' in your Zappa settings.\".\n                format(self.api_stage))\n        if 'project_name' in self.stage_config:\n            self.project_name = validate_name(self.stage_config['project_name']\n                )\n        else:\n            self.project_name = self.get_project_name()\n        self.lambda_name = slugify.slugify(self.project_name + '-' + self.\n            api_stage)\n        self.s3_bucket_name = self.stage_config.get('s3_bucket', 'zappa-' +\n            ''.join(random.choice(string.ascii_lowercase + string.digits) for\n            _ in range(9)))\n        self.vpc_config = self.stage_config.get('vpc_config', {})\n        self.memory_size = self.stage_config.get('memory_size', 512)\n        self.app_function = self.stage_config.get('app_function', None)\n        self.exception_handler = self.stage_config.get('exception_handler',\n            None)\n        self.aws_region = self.stage_config.get('aws_region', None)\n        self.debug = self.stage_config.get('debug', True)\n        self.prebuild_script = self.stage_config.get('prebuild_script', None)\n        self.profile_name = self.stage_config.get('profile_name', None)\n        self.log_level = self.stage_config.get('log_level', 'DEBUG')\n        self.domain = self.stage_config.get('domain', None)\n        self.timeout_seconds = self.stage_config.get('timeout_seconds', 30)\n        dead_letter_arn = self.stage_config.get('dead_letter_arn', '')\n        self.dead_letter_config = {'TargetArn': dead_letter_arn\n            } if dead_letter_arn else {}\n        self.cognito = self.stage_config.get('cognito', None)\n        self.use_apigateway = self.stage_config.get('use_apigateway', True)\n        if self.use_apigateway:\n            self.use_apigateway = self.stage_config.get('apigateway_enabled',\n                True)\n        self.apigateway_description = self.stage_config.get(\n            'apigateway_description', None)\n        self.lambda_handler = self.stage_config.get('lambda_handler',\n            'handler.lambda_handler')\n        self.remote_env_bucket = self.stage_config.get('remote_env_bucket',\n            None)\n        self.remote_env_file = self.stage_config.get('remote_env_file', None)\n        self.remote_env = self.stage_config.get('remote_env', None)\n        self.settings_file = self.stage_config.get('settings_file', None)\n        self.django_settings = self.stage_config.get('django_settings', None)\n        self.manage_roles = self.stage_config.get('manage_roles', True)\n        self.binary_support = self.stage_config.get('binary_support', True)\n        self.api_key_required = self.stage_config.get('api_key_required', False\n            )\n        self.api_key = self.stage_config.get('api_key')\n        self.iam_authorization = self.stage_config.get('iam_authorization',\n            False)\n        self.cors = self.stage_config.get('cors', False)\n        self.lambda_description = self.stage_config.get('lambda_description',\n            'Zappa Deployment')\n        self.environment_variables = self.stage_config.get(\n            'environment_variables', {})\n        self.aws_environment_variables = self.stage_config.get(\n            'aws_environment_variables', {})\n        self.check_environment(self.environment_variables)\n        self.authorizer = self.stage_config.get('authorizer', {})\n        self.runtime = self.stage_config.get('runtime',\n            get_runtime_from_python_version())\n        self.aws_kms_key_arn = self.stage_config.get('aws_kms_key_arn', '')\n        self.context_header_mappings = self.stage_config.get(\n            'context_header_mappings', {})\n        self.xray_tracing = self.stage_config.get('xray_tracing', False)\n        self.desired_role_arn = self.stage_config.get('role_arn')\n        self.tags = self.stage_config.get('tags', {})\n        desired_role_name = self.lambda_name + '-ZappaLambdaExecutionRole'\n        self.zappa = Zappa(boto_session=session, profile_name=self.\n            profile_name, aws_region=self.aws_region, load_credentials=self\n            .load_credentials, desired_role_name=desired_role_name,\n            desired_role_arn=self.desired_role_arn, runtime=self.runtime,\n            tags=self.tags, endpoint_urls=self.stage_config.get(\n            'aws_endpoint_urls', {}), xray_tracing=self.xray_tracing)\n        for setting in CUSTOM_SETTINGS:\n            if setting in self.stage_config:\n                setting_val = self.stage_config[setting]\n                if setting.endswith('policy'):\n                    with open(setting_val, 'r') as f:\n                        setting_val = f.read()\n                setattr(self.zappa, setting, setting_val)\n        if self.app_function:\n            self.collision_warning(self.app_function)\n            if self.app_function[-3:] == '.py':\n                click.echo(click.style('Warning!', fg='red', bold=True) +\n                    ' Your app_function is pointing to a ' + click.style(\n                    'file and not a function', bold=True) +\n                    \"! It should probably be something like 'my_file.app', not 'my_file.py'!\"\n                    )\n        return self.zappa\n\n    def get_json_or_yaml_settings(self, settings_name='zappa_settings'):\n        \"\"\"\n        Return zappa_settings path as JSON or YAML (or TOML), as appropriate.\n        \"\"\"\n        zs_json = settings_name + '.json'\n        zs_yml = settings_name + '.yml'\n        zs_yaml = settings_name + '.yaml'\n        zs_toml = settings_name + '.toml'\n        if not os.path.isfile(zs_json) and not os.path.isfile(zs_yml\n            ) and not os.path.isfile(zs_yaml) and not os.path.isfile(zs_toml):\n            raise ClickException(\n                'Please configure a zappa_settings file or call `zappa init`.')\n        if os.path.isfile(zs_json):\n            settings_file = zs_json\n        elif os.path.isfile(zs_toml):\n            settings_file = zs_toml\n        elif os.path.isfile(zs_yml):\n            settings_file = zs_yml\n        else:\n            settings_file = zs_yaml\n        return settings_file\n\n    def load_settings_file(self, settings_file=None):\n        \"\"\"\n        Load our settings file.\n        \"\"\"\n        if not settings_file:\n            settings_file = self.get_json_or_yaml_settings()\n        if not os.path.isfile(settings_file):\n            raise ClickException(\n                'Please configure your zappa_settings file or call `zappa init`.'\n                )\n        path, ext = os.path.splitext(settings_file)\n        if ext == '.yml' or ext == '.yaml':\n            with open(settings_file) as yaml_file:\n                try:\n                    self.zappa_settings = yaml.load(yaml_file)\n                except ValueError:\n                    raise ValueError(\n                        'Unable to load the Zappa settings YAML. It may be malformed.'\n                        )\n        elif ext == '.toml':\n            with open(settings_file) as toml_file:\n                try:\n                    self.zappa_settings = toml.load(toml_file)\n                except ValueError:\n                    raise ValueError(\n                        'Unable to load the Zappa settings TOML. It may be malformed.'\n                        )\n        else:\n            with open(settings_file) as json_file:\n                try:\n                    self.zappa_settings = json.load(json_file)\n                except ValueError:\n                    raise ValueError(\n                        'Unable to load the Zappa settings JSON. It may be malformed.'\n                        )\n\n    def create_package(self, output=None):\n        \"\"\"\n        Ensure that the package can be properly configured,\n        and then create it.\n\n        \"\"\"\n        current_file = os.path.dirname(os.path.abspath(inspect.getfile(\n            inspect.currentframe())))\n        handler_file = os.sep.join(current_file.split(os.sep)[0:]\n            ) + os.sep + 'handler.py'\n        if self.stage_config.get('slim_handler', False):\n            self.zip_path = self.zappa.create_lambda_zip(prefix=self.\n                lambda_name, use_precompiled_packages=self.stage_config.get\n                ('use_precompiled_packages', True), exclude=self.\n                stage_config.get('exclude', []), disable_progress=self.\n                disable_progress, archive_format='tarball')\n            exclude = self.stage_config.get('exclude', [])\n            cur_venv = self.zappa.get_current_venv()\n            exclude.append(cur_venv.split('/')[-1])\n            self.handler_path = self.zappa.create_lambda_zip(prefix=\n                'handler_{0!s}'.format(self.lambda_name), venv=self.zappa.\n                create_handler_venv(), handler_file=handler_file,\n                slim_handler=True, exclude=exclude, output=output,\n                disable_progress=self.disable_progress)\n        else:\n            if sys.version_info[0] < 3:\n                exclude = self.stage_config.get('exclude', ['boto3',\n                    'dateutil', 'botocore', 's3transfer', 'six.py',\n                    'jmespath', 'concurrent'])\n            else:\n                exclude = self.stage_config.get('exclude', ['boto3',\n                    'dateutil', 'botocore', 's3transfer', 'concurrent'])\n            self.zip_path = self.zappa.create_lambda_zip(prefix=self.\n                lambda_name, handler_file=handler_file,\n                use_precompiled_packages=self.stage_config.get(\n                'use_precompiled_packages', True), exclude=exclude, output=\n                output, disable_progress=self.disable_progress)\n            file_stats = os.stat(self.zip_path)\n            if file_stats.st_size > 52428800:\n                print(\n                    \"\"\"\n\nWarning: Application zip package is likely to be too large for AWS Lambda. Try setting \"slim_handler\" to true in your Zappa settings file.\n\n\"\"\"\n                    )\n        if self.stage_config.get('slim_handler', False):\n            handler_zip = self.handler_path\n        else:\n            handler_zip = self.zip_path\n        with zipfile.ZipFile(handler_zip, 'a') as lambda_zip:\n            settings_s = '# Generated by Zappa\\n'\n            if self.app_function:\n                if '.' not in self.app_function:\n                    raise ClickException('Your ' + click.style(\n                        'app_function', fg='red', bold=True) +\n                        ' value is not a modular path.' +\n                        ' It needs to be in the format `' + click.style(\n                        'your_module.your_app_object', bold=True) + '`.')\n                app_module, app_function = self.app_function.rsplit('.', 1)\n                settings_s = (settings_s +\n                    \"APP_MODULE='{0!s}'\\nAPP_FUNCTION='{1!s}'\\n\".format(\n                    app_module, app_function))\n            if self.exception_handler:\n                settings_s += \"EXCEPTION_HANDLER='{0!s}'\\n\".format(self.\n                    exception_handler)\n            else:\n                settings_s += 'EXCEPTION_HANDLER=None\\n'\n            if self.debug:\n                settings_s = settings_s + 'DEBUG=True\\n'\n            else:\n                settings_s = settings_s + 'DEBUG=False\\n'\n            settings_s = settings_s + \"LOG_LEVEL='{0!s}'\\n\".format(self.\n                log_level)\n            if self.binary_support:\n                settings_s = settings_s + 'BINARY_SUPPORT=True\\n'\n            else:\n                settings_s = settings_s + 'BINARY_SUPPORT=False\\n'\n            head_map_dict = {}\n            head_map_dict.update(dict(self.context_header_mappings))\n            settings_s = settings_s + 'CONTEXT_HEADER_MAPPINGS={0}\\n'.format(\n                head_map_dict)\n            if self.domain:\n                settings_s = settings_s + \"DOMAIN='{0!s}'\\n\".format(self.domain\n                    )\n            else:\n                settings_s = settings_s + 'DOMAIN=None\\n'\n            if self.remote_env:\n                settings_s = settings_s + \"REMOTE_ENV='{0!s}'\\n\".format(self\n                    .remote_env)\n            elif self.remote_env_bucket and self.remote_env_file:\n                settings_s = (settings_s +\n                    \"REMOTE_ENV='s3://{0!s}/{1!s}'\\n\".format(self.\n                    remote_env_bucket, self.remote_env_file))\n            env_dict = {}\n            if self.aws_region:\n                env_dict['AWS_REGION'] = self.aws_region\n            env_dict.update(dict(self.environment_variables))\n            try:\n                env_dict = dict((k.encode('ascii').decode('ascii'), v) for \n                    k, v in env_dict.items())\n            except Exception:\n                raise ValueError('Environment variable keys must be ascii.')\n            settings_s = settings_s + 'ENVIRONMENT_VARIABLES={0}\\n'.format(\n                env_dict)\n            settings_s = settings_s + \"API_STAGE='{0!s}'\\n\".format(self.\n                api_stage)\n            settings_s = settings_s + \"PROJECT_NAME='{0!s}'\\n\".format(self.\n                project_name)\n            if self.settings_file:\n                settings_s = settings_s + \"SETTINGS_FILE='{0!s}'\\n\".format(self\n                    .settings_file)\n            else:\n                settings_s = settings_s + 'SETTINGS_FILE=None\\n'\n            if self.django_settings:\n                settings_s = settings_s + \"DJANGO_SETTINGS='{0!s}'\\n\".format(\n                    self.django_settings)\n            else:\n                settings_s = settings_s + 'DJANGO_SETTINGS=None\\n'\n            if self.stage_config.get('slim_handler', False):\n                settings_s += (\n                    \"ARCHIVE_PATH='s3://{0!s}/{1!s}_{2!s}_current_project.tar.gz'\\n\"\n                    .format(self.s3_bucket_name, self.api_stage, self.\n                    project_name))\n                settings_s += 'SLIM_HANDLER=True\\n'\n                include = self.stage_config.get('include', [])\n                if len(include) >= 1:\n                    settings_s += 'INCLUDE=' + str(include) + '\\n'\n            event_mapping = {}\n            events = self.stage_config.get('events', [])\n            for event in events:\n                arn = event.get('event_source', {}).get('arn')\n                function = event.get('function')\n                if arn and function:\n                    event_mapping[arn] = function\n            settings_s = settings_s + 'AWS_EVENT_MAPPING={0!s}\\n'.format(\n                event_mapping)\n            bot_events = self.stage_config.get('bot_events', [])\n            bot_events_mapping = {}\n            for bot_event in bot_events:\n                event_source = bot_event.get('event_source', {})\n                intent = event_source.get('intent')\n                invocation_source = event_source.get('invocation_source')\n                function = bot_event.get('function')\n                if intent and invocation_source and function:\n                    bot_events_mapping[str(intent) + ':' + str(\n                        invocation_source)] = function\n            settings_s = settings_s + 'AWS_BOT_EVENT_MAPPING={0!s}\\n'.format(\n                bot_events_mapping)\n            cognito_trigger_mapping = {}\n            cognito_config = self.stage_config.get('cognito', {})\n            triggers = cognito_config.get('triggers', [])\n            for trigger in triggers:\n                source = trigger.get('source')\n                function = trigger.get('function')\n                if source and function:\n                    cognito_trigger_mapping[source] = function\n            settings_s = settings_s + 'COGNITO_TRIGGER_MAPPING={0!s}\\n'.format(\n                cognito_trigger_mapping)\n            authorizer_function = self.authorizer.get('function', None)\n            if authorizer_function:\n                settings_s += \"AUTHORIZER_FUNCTION='{0!s}'\\n\".format(\n                    authorizer_function)\n            if self.django_settings:\n                base = __file__.rsplit(os.sep, 1)[0]\n                django_py = ''.join(os.path.join(base, 'ext',\n                    'django_zappa.py'))\n                lambda_zip.write(django_py, 'django_zappa_app.py')\n            async_response_table = self.stage_config.get('async_response_table'\n                , '')\n            settings_s += \"ASYNC_RESPONSE_TABLE='{0!s}'\\n\".format(\n                async_response_table)\n            temp_settings = tempfile.NamedTemporaryFile(delete=False)\n            os.chmod(temp_settings.name, 420)\n            temp_settings.write(bytes(settings_s, 'utf-8'))\n            temp_settings.close()\n            lambda_zip.write(temp_settings.name, 'zappa_settings.py')\n            os.unlink(temp_settings.name)\n\n    def remove_local_zip(self):\n        \"\"\"\n        Remove our local zip file.\n        \"\"\"\n        if self.stage_config.get('delete_local_zip', True):\n            try:\n                if os.path.isfile(self.zip_path):\n                    os.remove(self.zip_path)\n                if self.handler_path and os.path.isfile(self.handler_path):\n                    os.remove(self.handler_path)\n            except Exception as e:\n                sys.exit(-1)\n\n    def remove_uploaded_zip(self):\n        \"\"\"\n        Remove the local and S3 zip file after uploading and updating.\n        \"\"\"\n        if self.stage_config.get('delete_s3_zip', True):\n            self.zappa.remove_from_s3(self.zip_path, self.s3_bucket_name)\n            if self.stage_config.get('slim_handler', False):\n                self.zappa.remove_from_s3(self.handler_path, self.\n                    s3_bucket_name)\n\n    def on_exit(self):\n        \"\"\"\n        Cleanup after the command finishes.\n        Always called: SystemExit, KeyboardInterrupt and any other Exception that occurs.\n        \"\"\"\n        if self.zip_path:\n            if self.load_credentials:\n                self.remove_uploaded_zip()\n            self.remove_local_zip()\n\n    def print_logs(self, logs, colorize=True, http=False, non_http=False,\n        force_colorize=None):\n        \"\"\"\n        Parse, filter and print logs to the console.\n\n        \"\"\"\n        for log in logs:\n            timestamp = log['timestamp']\n            message = log['message']\n            if 'START RequestId' in message:\n                continue\n            if 'REPORT RequestId' in message:\n                continue\n            if 'END RequestId' in message:\n                continue\n            if not colorize and not force_colorize:\n                if http:\n                    if self.is_http_log_entry(message.strip()):\n                        print('[' + str(timestamp) + '] ' + message.strip())\n                elif non_http:\n                    if not self.is_http_log_entry(message.strip()):\n                        print('[' + str(timestamp) + '] ' + message.strip())\n                else:\n                    print('[' + str(timestamp) + '] ' + message.strip())\n            elif http:\n                if self.is_http_log_entry(message.strip()):\n                    click.echo(click.style('[', fg='cyan') + click.style(\n                        str(timestamp), bold=True) + click.style(']', fg=\n                        'cyan') + self.colorize_log_entry(message.strip()),\n                        color=force_colorize)\n            elif non_http:\n                if not self.is_http_log_entry(message.strip()):\n                    click.echo(click.style('[', fg='cyan') + click.style(\n                        str(timestamp), bold=True) + click.style(']', fg=\n                        'cyan') + self.colorize_log_entry(message.strip()),\n                        color=force_colorize)\n            else:\n                click.echo(click.style('[', fg='cyan') + click.style(str(\n                    timestamp), bold=True) + click.style(']', fg='cyan') +\n                    self.colorize_log_entry(message.strip()), color=\n                    force_colorize)\n\n    def is_http_log_entry(self, string):\n        \"\"\"\n        Determines if a log entry is an HTTP-formatted log string or not.\n        \"\"\"\n        if 'Zappa Event' in string:\n            return False\n        for token in string.replace('\\t', ' ').split(' '):\n            try:\n                if token.count('.') is 3 and token.replace('.', '').isnumeric(\n                    ):\n                    return True\n            except Exception:\n                pass\n        return False\n\n    def get_project_name(self):\n        return slugify.slugify(os.getcwd().split(os.sep)[-1])[:15]\n\n    def colorize_log_entry(self, string):\n        \"\"\"\n        Apply various heuristics to return a colorized version of a string.\n        If these fail, simply return the string in plaintext.\n        \"\"\"\n        final_string = string\n        try:\n            inside_squares = re.findall('\\\\[([^]]*)\\\\]', string)\n            for token in inside_squares:\n                if token in ['CRITICAL', 'ERROR', 'WARNING', 'DEBUG',\n                    'INFO', 'NOTSET']:\n                    final_string = final_string.replace('[' + token + ']', \n                        click.style('[', fg='cyan') + click.style(token, fg\n                        ='cyan', bold=True) + click.style(']', fg='cyan'))\n                else:\n                    final_string = final_string.replace('[' + token + ']', \n                        click.style('[', fg='cyan') + click.style(token,\n                        bold=True) + click.style(']', fg='cyan'))\n            quotes = re.findall('\"[^\"]*\"', string)\n            for token in quotes:\n                final_string = final_string.replace(token, click.style(\n                    token, fg='yellow'))\n            for token in final_string.replace('\\t', ' ').split(' '):\n                try:\n                    if token.count('-') is 4 and token.replace('-', ''\n                        ).isalnum():\n                        final_string = final_string.replace(token, click.\n                            style(token, fg='magenta'))\n                except Exception:\n                    pass\n                try:\n                    if token.count('.') is 3 and token.replace('.', ''\n                        ).isnumeric():\n                        final_string = final_string.replace(token, click.\n                            style(token, fg='red'))\n                except Exception:\n                    pass\n                try:\n                    if token in ['200']:\n                        final_string = final_string.replace(token, click.\n                            style(token, fg='green'))\n                    if token in ['400', '401', '403', '404', '405', '500']:\n                        final_string = final_string.replace(token, click.\n                            style(token, fg='red'))\n                except Exception:\n                    pass\n            try:\n                if 'Zappa Event:' in final_string:\n                    final_string = final_string.replace('Zappa Event:',\n                        click.style('Zappa Event:', bold=True, fg='green'))\n            except Exception:\n                pass\n            for token in final_string.split('\\t'):\n                try:\n                    is_date = parser.parse(token)\n                    final_string = final_string.replace(token, click.style(\n                        token, fg='green'))\n                except Exception:\n                    pass\n            final_string = final_string.replace('\\t', ' ').replace('   ', ' ')\n            if final_string[0] != ' ':\n                final_string = ' ' + final_string\n            return final_string\n        except Exception as e:\n            return string\n\n    def execute_prebuild_script(self):\n        \"\"\"\n        Parse and execute the prebuild_script from the zappa_settings.\n\n        \"\"\"\n        pb_mod_path, pb_func = self.prebuild_script.rsplit('.', 1)\n        try:\n            if pb_mod_path.count('.') >= 1:\n                mod_folder_path, mod_name = pb_mod_path.rsplit('.', 1)\n                mod_folder_path_fragments = mod_folder_path.split('.')\n                working_dir = os.path.join(os.getcwd(), *\n                    mod_folder_path_fragments)\n            else:\n                mod_name = pb_mod_path\n                working_dir = os.getcwd()\n            working_dir_importer = pkgutil.get_importer(working_dir)\n            module_ = working_dir_importer.find_module(mod_name).load_module(\n                mod_name)\n        except (ImportError, AttributeError):\n            try:\n                module_ = importlib.import_module(pb_mod_path)\n            except ImportError:\n                raise ClickException(click.style('Failed ', fg='red') +\n                    'to ' + click.style('import prebuild script ', bold=\n                    True) + 'module: \"{pb_mod_path}\"'.format(pb_mod_path=\n                    click.style(pb_mod_path, bold=True)))\n        if not hasattr(module_, pb_func):\n            raise ClickException(click.style('Failed ', fg='red') + 'to ' +\n                click.style('find prebuild script ', bold=True) +\n                'function: \"{pb_func}\" '.format(pb_func=click.style(pb_func,\n                bold=True)) + 'in module \"{pb_mod_path}\"'.format(\n                pb_mod_path=pb_mod_path))\n        prebuild_function = getattr(module_, pb_func)\n        prebuild_function()\n\n    def collision_warning(self, item):\n        \"\"\"\n        Given a string, print a warning if this could\n        collide with a Zappa core package module.\n\n        Use for app functions and events.\n        \"\"\"\n        namespace_collisions = ['zappa.', 'wsgi.', 'middleware.',\n            'handler.', 'util.', 'letsencrypt.', 'cli.']\n        for namespace_collision in namespace_collisions:\n            if item.startswith(namespace_collision):\n                click.echo(click.style('Warning!', fg='red', bold=True) +\n                    ' You may have a namespace collision between ' + click.\n                    style(item, bold=True) + ' and ' + click.style(\n                    namespace_collision, bold=True) +\n                    '! You may want to rename that file.')\n\n    def deploy_api_gateway(self, api_id):\n        cache_cluster_enabled = self.stage_config.get('cache_cluster_enabled',\n            False)\n        cache_cluster_size = str(self.stage_config.get('cache_cluster_size',\n            0.5))\n        endpoint_url = self.zappa.deploy_api_gateway(api_id=api_id,\n            stage_name=self.api_stage, cache_cluster_enabled=\n            cache_cluster_enabled, cache_cluster_size=cache_cluster_size,\n            cloudwatch_log_level=self.stage_config.get(\n            'cloudwatch_log_level', 'OFF'), cloudwatch_data_trace=self.\n            stage_config.get('cloudwatch_data_trace', False),\n            cloudwatch_metrics_enabled=self.stage_config.get(\n            'cloudwatch_metrics_enabled', False), cache_cluster_ttl=self.\n            stage_config.get('cache_cluster_ttl', 300),\n            cache_cluster_encrypted=self.stage_config.get(\n            'cache_cluster_encrypted', False))\n        return endpoint_url\n\n    def check_venv(self):\n        \"\"\" Ensure we're inside a virtualenv. \"\"\"\n        if self.zappa:\n            venv = self.zappa.get_current_venv()\n        else:\n            venv = Zappa.get_current_venv()\n        if not venv:\n            raise ClickException(click.style('Zappa', bold=True) +\n                ' requires an ' + click.style('active virtual environment',\n                bold=True, fg='red') + '!\\n' +\n                'Learn more about virtual environments here: ' + click.\n                style(\n                'http://docs.python-guide.org/en/latest/dev/virtualenvs/',\n                bold=False, fg='cyan'))\n\n    def silence(self):\n        \"\"\"\n        Route all stdout to null.\n        \"\"\"\n        sys.stdout = open(os.devnull, 'w')\n        sys.stderr = open(os.devnull, 'w')\n\n    def touch_endpoint(self, endpoint_url):\n        \"\"\"\n        Test the deployed endpoint with a GET request\n        \"\"\"\n        touch_path = self.stage_config.get('touch_path', '/')\n        req = requests.get(endpoint_url + touch_path)\n        if req.status_code >= 500:\n            raise ClickException(click.style('Warning!', fg='red', bold=\n                True) + ' Status check on the deployed lambda failed.' +\n                \" A GET request to '\" + touch_path + \"' yielded a \" + click\n                .style(str(req.status_code), fg='red', bold=True) +\n                ' response code.')\n",
                        "belong_class_name": "ZappaCLI",
                        "belong_class_init": "def __init__(self):\n    self._stage_config_overrides = {}\n"
                    }
                ]
            ]
        },
        "Zappa-388_wsgi": {
            "pytest tests/tests.py::TestZappa::test_wsgi_without_body": [
                [
                    {
                        "function_name": "test_wsgi_without_body",
                        "function_content": "def test_wsgi_without_body(self):\n    event = {u'body': None, u'resource': u'/', u'requestContext': {\n        u'resourceId': u'6cqjw9qu0b', u'apiId': u'9itr2lba55',\n        u'resourcePath': u'/', u'httpMethod': u'POST', u'requestId':\n        u'c17cb1bf-867c-11e6-b938-ed697406e3b5', u'accountId':\n        u'724336686645', u'identity': {u'apiKey': None, u'userArn': None,\n        u'cognitoAuthenticationType': None, u'caller': None, u'userAgent':\n        u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0'\n        , u'user': None, u'cognitoIdentityPoolId': None,\n        u'cognitoIdentityId': None, u'cognitoAuthenticationProvider': None,\n        u'sourceIp': u'50.191.225.98', u'accountId': None}, u'stage':\n        u'devorr'}, u'queryStringParameters': None, u'httpMethod': u'POST',\n        u'pathParameters': None, u'headers': {u'Via':\n        u'1.1 38205a04d96d60185e88658d3185ccee.cloudfront.net (CloudFront)',\n        u'Accept-Language': u'en-US,en;q=0.5', u'Accept-Encoding':\n        u'gzip, deflate, br', u'CloudFront-Is-SmartTV-Viewer': u'false',\n        u'CloudFront-Forwarded-Proto': u'https', u'X-Forwarded-For':\n        u'71.231.27.57, 104.246.180.51', u'CloudFront-Viewer-Country':\n        u'US', u'Accept':\n        u'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        u'User-Agent':\n        u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:45.0) Gecko/20100101 Firefox/45.0'\n        , u'Host': u'xo2z7zafjh.execute-api.us-east-1.amazonaws.com',\n        u'X-Forwarded-Proto': u'https', u'Cookie': u'zappa=AQ4',\n        u'CloudFront-Is-Tablet-Viewer': u'false', u'X-Forwarded-Port':\n        u'443', u'Referer':\n        u'https://xo8z7zafjh.execute-api.us-east-1.amazonaws.com/former/post',\n        u'CloudFront-Is-Mobile-Viewer': u'false', u'X-Amz-Cf-Id':\n        u'31zxcUcVyUxBOMk320yh5NOhihn5knqrlYQYpGGyOngKKwJb0J0BAQ==',\n        u'CloudFront-Is-Desktop-Viewer': u'true'}, u'stageVariables': None,\n        u'path': u'/'}\n    environ = create_wsgi_request(event, trailing_slash=False)\n    response_tuple = collections.namedtuple('Response', ['status_code',\n        'content'])\n    response = response_tuple(200, 'hello')\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class TestZappa(unittest.TestCase):\n\n    def setUp(self):\n        self.sleep_patch = mock.patch('time.sleep', return_value=None)\n        if not os.environ.get('PLACEBO_MODE') == 'record':\n            self.sleep_patch.start()\n\n    def tearDown(self):\n        if not os.environ.get('PLACEBO_MODE') == 'record':\n            self.sleep_patch.stop()\n\n    def test_test(self):\n        self.assertTrue(True)\n\n    def test_zappa(self):\n        self.assertTrue(True)\n        Zappa()\n\n    def test_create_lambda_package(self):\n        mock_named_tuple = collections.namedtuple('mock_named_tuple', [\n            'project_name'])\n        mock_return_val = [mock_named_tuple(lambda_packages.keys()[0])]\n        with mock.patch('pip.get_installed_distributions', return_value=\n            mock_return_val):\n            z = Zappa()\n            path = z.create_lambda_zip(handler_file=os.path.realpath(__file__))\n            self.assertTrue(os.path.isfile(path))\n            os.remove(path)\n\n    def test_load_credentials(self):\n        z = Zappa()\n        z.aws_region = 'us-east-1'\n        z.load_credentials()\n        self.assertEqual(z.boto_session.region_name, 'us-east-1')\n        self.assertEqual(z.aws_region, 'us-east-1')\n        z.aws_region = 'eu-west-1'\n        z.profile_name = 'default'\n        z.load_credentials()\n        self.assertEqual(z.boto_session.region_name, 'eu-west-1')\n        self.assertEqual(z.aws_region, 'eu-west-1')\n        creds = {'AWS_ACCESS_KEY_ID': 'AK123', 'AWS_SECRET_ACCESS_KEY':\n            'JKL456', 'AWS_DEFAULT_REGION': 'us-west-1'}\n        with mock.patch.dict('os.environ', creds):\n            z.aws_region = None\n            z.load_credentials()\n            loaded_creds = z.boto_session._session.get_credentials()\n        self.assertEqual(loaded_creds.access_key, 'AK123')\n        self.assertEqual(loaded_creds.secret_key, 'JKL456')\n        self.assertEqual(z.boto_session.region_name, 'us-west-1')\n\n    @placebo_session\n    def test_upload_remove_s3(self, session):\n        bucket_name = 'test_zappa_upload_s3'\n        z = Zappa(session)\n        zip_path = z.create_lambda_zip(minify=False)\n        res = z.upload_to_s3(zip_path, bucket_name)\n        os.remove(zip_path)\n        self.assertTrue(res)\n        s3 = session.resource('s3')\n        s3.meta.client.head_bucket(Bucket=bucket_name)\n        s3.meta.client.head_object(Bucket=bucket_name, Key=zip_path)\n        res = z.remove_from_s3(zip_path, bucket_name)\n        self.assertTrue(res)\n        fail = z.upload_to_s3('/tmp/this_isnt_real', bucket_name)\n        self.assertFalse(fail)\n\n    @placebo_session\n    def test_create_lambda_function(self, session):\n        bucket_name = 'lmbda'\n        zip_path = 'Spheres-dev-1454694878.zip'\n        z = Zappa(session)\n        z.aws_region = 'us-east-1'\n        z.load_credentials(session)\n        z.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n        arn = z.create_lambda_function(bucket=bucket_name, s3_key=zip_path,\n            function_name='test_lmbda_function55', handler=\n            'runme.lambda_handler')\n        arn = z.update_lambda_function(bucket=bucket_name, s3_key=zip_path,\n            function_name='test_lmbda_function55')\n\n    @placebo_session\n    def test_rollback_lambda_function_version(self, session):\n        z = Zappa(session)\n        z.credentials_arn = (\n            'arn:aws:iam::724336686645:role/ZappaLambdaExecution')\n        function_name = 'django-helloworld-unicode'\n        too_many_versions = z.rollback_lambda_function_version(function_name,\n            99999)\n        self.assertFalse(too_many_versions)\n        function_arn = z.rollback_lambda_function_version(function_name, 1)\n\n    @placebo_session\n    def test_invoke_lambda_function(self, session):\n        z = Zappa(session)\n        z.credentials_arn = (\n            'arn:aws:iam::724336686645:role/ZappaLambdaExecution')\n        function_name = 'django-helloworld-unicode'\n        payload = '{\"event\": \"hello\"}'\n        response = z.invoke_lambda_function(function_name, payload)\n\n    @placebo_session\n    def test_create_iam_roles(self, session):\n        z = Zappa(session)\n        arn, updated = z.create_iam_roles()\n        self.assertEqual(arn, 'arn:aws:iam::123:role/{}'.format(z.role_name))\n\n    def test_create_api_gateway_routes_with_different_auth_methods(self):\n        z = Zappa()\n        z.parameter_depth = 1\n        z.integration_response_codes = [200]\n        z.method_response_codes = [200]\n        z.http_methods = ['GET']\n        z.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n        lambda_arn = 'arn:aws:lambda:us-east-1:12345:function:helloworld'\n        z.create_stack_template(lambda_arn, 'helloworld', False, {}, False,\n            None)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('NONE', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('NONE', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual(False, parsable_template['Resources']['GET0'][\n            'Properties']['ApiKeyRequired'])\n        self.assertEqual(False, parsable_template['Resources']['GET1'][\n            'Properties']['ApiKeyRequired'])\n        z.create_stack_template(lambda_arn, 'helloworld', False, {}, True, None\n            )\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual(False, parsable_template['Resources']['GET0'][\n            'Properties']['ApiKeyRequired'])\n        self.assertEqual(False, parsable_template['Resources']['GET1'][\n            'Properties']['ApiKeyRequired'])\n        z.create_stack_template(lambda_arn, 'helloworld', True, {}, True, None)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual(True, parsable_template['Resources']['GET0'][\n            'Properties']['ApiKeyRequired'])\n        self.assertEqual(True, parsable_template['Resources']['GET1'][\n            'Properties']['ApiKeyRequired'])\n        authorizer = {'function':\n            'runapi.authorization.gateway_authorizer.evaluate_token',\n            'result_ttl': 300, 'token_header': 'Authorization',\n            'validation_expression': 'xxx'}\n        z.create_stack_template(lambda_arn, 'helloworld', False, {}, True,\n            authorizer)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('AWS_IAM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        with self.assertRaises(KeyError):\n            parsable_template['Resources']['Authorizer']\n        invocations_uri = (\n            'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/' +\n            lambda_arn + '/invocations')\n        z.create_stack_template(lambda_arn, 'helloworld', False, {}, False,\n            authorizer)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('CUSTOM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('CUSTOM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('TOKEN', parsable_template['Resources'][\n            'Authorizer']['Properties']['Type'])\n        self.assertEqual('ZappaAuthorizer', parsable_template['Resources'][\n            'Authorizer']['Properties']['Name'])\n        self.assertEqual(300, parsable_template['Resources']['Authorizer'][\n            'Properties']['AuthorizerResultTtlInSeconds'])\n        self.assertEqual(invocations_uri, parsable_template['Resources'][\n            'Authorizer']['Properties']['AuthorizerUri'])\n        self.assertEqual(z.credentials_arn, parsable_template['Resources'][\n            'Authorizer']['Properties']['AuthorizerCredentials'])\n        self.assertEqual('xxx', parsable_template['Resources']['Authorizer'\n            ]['Properties']['IdentityValidationExpression'])\n        authorizer.pop('validation_expression', None)\n        z.create_stack_template(lambda_arn, 'helloworld', False, {}, False,\n            authorizer)\n        parsable_template = json.loads(z.cf_template.to_json())\n        self.assertEqual('CUSTOM', parsable_template['Resources']['GET0'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('CUSTOM', parsable_template['Resources']['GET1'][\n            'Properties']['AuthorizationType'])\n        self.assertEqual('TOKEN', parsable_template['Resources'][\n            'Authorizer']['Properties']['Type'])\n        with self.assertRaises(KeyError):\n            parsable_template['Resources']['Authorizer']['Properties'][\n                'IdentityValidationExpression']\n\n    @placebo_session\n    def test_get_api_url(self, session):\n        z = Zappa(session)\n        z.credentials_arn = (\n            'arn:aws:iam::724336686645:role/ZappaLambdaExecution')\n        url = z.get_api_url('Spheres-demonstration', 'demonstration')\n\n    @placebo_session\n    def test_fetch_logs(self, session):\n        z = Zappa(session)\n        z.credentials_arn = 'arn:aws:iam::12345:role/ZappaLambdaExecution'\n        events = z.fetch_logs('Spheres-demonstration')\n        self.assertTrue(events is not None)\n\n    def test_policy_json(self):\n        json.loads(ASSUME_POLICY)\n        json.loads(ATTACH_POLICY)\n\n    def test_schedule_events(self):\n        z = Zappa()\n        path = os.getcwd()\n\n    def test_logging(self):\n        \"\"\"\n        TODO\n        \"\"\"\n        Zappa()\n\n    def test_redirect_pattern(self):\n        test_urls = [\n            'https://asdf1234.execute-api.us-east-1.amazonaws.com/env/path/to/thing'\n            ,\n            'https://github.com/Miserlou/zappa/issues?q=is%3Aissue+is%3Aclosed'\n            , '/env/path/to/thing']\n        for code in ['301', '302']:\n            pattern = Zappa.selection_pattern(code)\n            for url in test_urls:\n                self.assertRegexpMatches(url, pattern)\n\n    def test_b64_pattern(self):\n        head = '\\\\{\"http_status\": '\n        for code in ['400', '401', '402', '403', '404', '500']:\n            pattern = Zappa.selection_pattern(code)\n            document = head + code + random_string(50)\n            self.assertRegexpMatches(document, pattern)\n            for bad_code in ['200', '301', '302']:\n                document = base64.b64encode(head + bad_code + random_string(50)\n                    )\n                self.assertNotRegexpMatches(document, pattern)\n\n    def test_200_pattern(self):\n        pattern = Zappa.selection_pattern('200')\n        self.assertEqual(pattern, '')\n\n    def test_wsgi_event(self):\n        event = {u'body': None, u'resource': u'/', u'requestContext': {\n            u'resourceId': u'6cqjw9qu0b', u'apiId': u'9itr2lba55',\n            u'resourcePath': u'/', u'httpMethod': u'GET', u'requestId':\n            u'c17cb1bf-867c-11e6-b938-ed697406e3b5', u'accountId':\n            u'724336686645', u'identity': {u'apiKey': None, u'userArn':\n            None, u'cognitoAuthenticationType': None, u'caller': None,\n            u'userAgent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0'\n            , u'user': None, u'cognitoIdentityPoolId': None,\n            u'cognitoIdentityId': None, u'cognitoAuthenticationProvider':\n            None, u'sourceIp': u'50.191.225.98', u'accountId': None},\n            u'stage': u'devorr'}, u'queryStringParameters': None,\n            u'httpMethod': u'GET', u'pathParameters': None, u'headers': {\n            u'Via':\n            u'1.1 6801928d54163af944bf854db8d5520e.cloudfront.net (CloudFront)'\n            , u'Accept-Language': u'en-US,en;q=0.5', u'Accept-Encoding':\n            u'gzip, deflate, br', u'CloudFront-Is-SmartTV-Viewer': u'false',\n            u'CloudFront-Forwarded-Proto': u'https', u'X-Forwarded-For':\n            u'50.191.225.98, 204.246.168.101', u'CloudFront-Viewer-Country':\n            u'US', u'Accept':\n            u'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            u'Upgrade-Insecure-Requests': u'1', u'Host':\n            u'9itr2lba55.execute-api.us-east-1.amazonaws.com',\n            u'X-Forwarded-Proto': u'https', u'X-Amz-Cf-Id':\n            u'qgNdqKT0_3RMttu5KjUdnvHI3OKm1BWF8mGD2lX8_rVrJQhhp-MLDw==',\n            u'CloudFront-Is-Tablet-Viewer': u'false', u'X-Forwarded-Port':\n            u'443', u'User-Agent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0'\n            , u'CloudFront-Is-Mobile-Viewer': u'false',\n            u'CloudFront-Is-Desktop-Viewer': u'true'}, u'stageVariables':\n            None, u'path': u'/'}\n        request = create_wsgi_request(event)\n\n    def test_wsgi_logging(self):\n        event = {u'body': None, u'resource': u'/{proxy+}',\n            u'requestContext': {u'resourceId': u'dg451y', u'apiId':\n            u'79gqbxq31c', u'resourcePath': u'/{proxy+}', u'httpMethod':\n            u'GET', u'requestId': u'766df67f-8991-11e6-b2c4-d120fedb94e5',\n            u'accountId': u'724336686645', u'identity': {u'apiKey': None,\n            u'userArn': None, u'cognitoAuthenticationType': None, u'caller':\n            None, u'userAgent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:49.0) Gecko/20100101 Firefox/49.0'\n            , u'user': None, u'cognitoIdentityPoolId': None,\n            u'cognitoIdentityId': None, u'cognitoAuthenticationProvider':\n            None, u'sourceIp': u'96.90.37.59', u'accountId': None},\n            u'stage': u'devorr'}, u'queryStringParameters': None,\n            u'httpMethod': u'GET', u'pathParameters': {u'proxy':\n            u'asdf1/asdf2'}, u'headers': {u'Via':\n            u'1.1 b2aeb492548a8a2d4036401355f928dd.cloudfront.net (CloudFront)'\n            , u'Accept-Language': u'en-US,en;q=0.5', u'Accept-Encoding':\n            u'gzip, deflate, br', u'X-Forwarded-Port': u'443',\n            u'X-Forwarded-For': u'96.90.37.59, 54.240.144.50',\n            u'CloudFront-Viewer-Country': u'US', u'Accept':\n            u'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            u'Upgrade-Insecure-Requests': u'1', u'Host':\n            u'79gqbxq31c.execute-api.us-east-1.amazonaws.com',\n            u'X-Forwarded-Proto': u'https', u'X-Amz-Cf-Id':\n            u'BBFP-RhGDrQGOzoCqjnfB2I_YzWt_dac9S5vBcSAEaoM4NfYhAQy7Q==',\n            u'User-Agent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:49.0) Gecko/20100101 Firefox/49.0'\n            , u'CloudFront-Forwarded-Proto': u'https'}, u'stageVariables':\n            None, u'path': u'/asdf1/asdf2'}\n        environ = create_wsgi_request(event, trailing_slash=False)\n        response_tuple = collections.namedtuple('Response', ['status_code',\n            'content'])\n        response = response_tuple(200, 'hello')\n        le = common_log(environ, response, response_time=True)\n        le = common_log(environ, response, response_time=False)\n\n    def test_wsgi_multipart(self):\n        event = {u'body':\n            u'LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS03Njk1MjI4NDg0Njc4MTc2NTgwNjMwOTYxDQpDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9Im15c3RyaW5nIg0KDQpkZGQNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tNzY5NTIyODQ4NDY3ODE3NjU4MDYzMDk2MS0tDQo='\n            , u'resource': u'/', u'requestContext': {u'resourceId':\n            u'6cqjw9qu0b', u'apiId': u'9itr2lba55', u'resourcePath': u'/',\n            u'httpMethod': u'POST', u'requestId':\n            u'c17cb1bf-867c-11e6-b938-ed697406e3b5', u'accountId':\n            u'724336686645', u'identity': {u'apiKey': None, u'userArn':\n            None, u'cognitoAuthenticationType': None, u'caller': None,\n            u'userAgent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0'\n            , u'user': None, u'cognitoIdentityPoolId': None,\n            u'cognitoIdentityId': None, u'cognitoAuthenticationProvider':\n            None, u'sourceIp': u'50.191.225.98', u'accountId': None},\n            u'stage': u'devorr'}, u'queryStringParameters': None,\n            u'httpMethod': u'POST', u'pathParameters': None, u'headers': {\n            u'Content-Type':\n            u'multipart/form-data; boundary=---------------------------7695228484678176580630961'\n            , u'Via':\n            u'1.1 38205a04d96d60185e88658d3185ccee.cloudfront.net (CloudFront)'\n            , u'Accept-Language': u'en-US,en;q=0.5', u'Accept-Encoding':\n            u'gzip, deflate, br', u'CloudFront-Is-SmartTV-Viewer': u'false',\n            u'CloudFront-Forwarded-Proto': u'https', u'X-Forwarded-For':\n            u'71.231.27.57, 104.246.180.51', u'CloudFront-Viewer-Country':\n            u'US', u'Accept':\n            u'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            u'User-Agent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:45.0) Gecko/20100101 Firefox/45.0'\n            , u'Host': u'xo2z7zafjh.execute-api.us-east-1.amazonaws.com',\n            u'X-Forwarded-Proto': u'https', u'Cookie': u'zappa=AQ4',\n            u'CloudFront-Is-Tablet-Viewer': u'false', u'X-Forwarded-Port':\n            u'443', u'Referer':\n            u'https://xo8z7zafjh.execute-api.us-east-1.amazonaws.com/former/post'\n            , u'CloudFront-Is-Mobile-Viewer': u'false', u'X-Amz-Cf-Id':\n            u'31zxcUcVyUxBOMk320yh5NOhihn5knqrlYQYpGGyOngKKwJb0J0BAQ==',\n            u'CloudFront-Is-Desktop-Viewer': u'true'}, u'stageVariables':\n            None, u'path': u'/'}\n        environ = create_wsgi_request(event, trailing_slash=False)\n        response_tuple = collections.namedtuple('Response', ['status_code',\n            'content'])\n        response = response_tuple(200, 'hello')\n\n    def test_wsgi_without_body(self):\n        event = {u'body': None, u'resource': u'/', u'requestContext': {\n            u'resourceId': u'6cqjw9qu0b', u'apiId': u'9itr2lba55',\n            u'resourcePath': u'/', u'httpMethod': u'POST', u'requestId':\n            u'c17cb1bf-867c-11e6-b938-ed697406e3b5', u'accountId':\n            u'724336686645', u'identity': {u'apiKey': None, u'userArn':\n            None, u'cognitoAuthenticationType': None, u'caller': None,\n            u'userAgent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0'\n            , u'user': None, u'cognitoIdentityPoolId': None,\n            u'cognitoIdentityId': None, u'cognitoAuthenticationProvider':\n            None, u'sourceIp': u'50.191.225.98', u'accountId': None},\n            u'stage': u'devorr'}, u'queryStringParameters': None,\n            u'httpMethod': u'POST', u'pathParameters': None, u'headers': {\n            u'Via':\n            u'1.1 38205a04d96d60185e88658d3185ccee.cloudfront.net (CloudFront)'\n            , u'Accept-Language': u'en-US,en;q=0.5', u'Accept-Encoding':\n            u'gzip, deflate, br', u'CloudFront-Is-SmartTV-Viewer': u'false',\n            u'CloudFront-Forwarded-Proto': u'https', u'X-Forwarded-For':\n            u'71.231.27.57, 104.246.180.51', u'CloudFront-Viewer-Country':\n            u'US', u'Accept':\n            u'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            u'User-Agent':\n            u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:45.0) Gecko/20100101 Firefox/45.0'\n            , u'Host': u'xo2z7zafjh.execute-api.us-east-1.amazonaws.com',\n            u'X-Forwarded-Proto': u'https', u'Cookie': u'zappa=AQ4',\n            u'CloudFront-Is-Tablet-Viewer': u'false', u'X-Forwarded-Port':\n            u'443', u'Referer':\n            u'https://xo8z7zafjh.execute-api.us-east-1.amazonaws.com/former/post'\n            , u'CloudFront-Is-Mobile-Viewer': u'false', u'X-Amz-Cf-Id':\n            u'31zxcUcVyUxBOMk320yh5NOhihn5knqrlYQYpGGyOngKKwJb0J0BAQ==',\n            u'CloudFront-Is-Desktop-Viewer': u'true'}, u'stageVariables':\n            None, u'path': u'/'}\n        environ = create_wsgi_request(event, trailing_slash=False)\n        response_tuple = collections.namedtuple('Response', ['status_code',\n            'content'])\n        response = response_tuple(200, 'hello')\n\n    @placebo_session\n    def test_handler(self, session):\n        lh = LambdaHandler('test_settings', session=session)\n        self.assertEqual(os.environ['hello'], 'world')\n        event = {'body': {}, 'headers': {}, 'params': {'parameter_1':\n            'asdf1', 'parameter_2': 'asdf2'}, 'method': 'GET', 'query': {}}\n        lh.handler(event, None)\n        event = {u'account': u'72333333333', u'region': u'us-east-1',\n            u'detail': {}, u'detail-type': u'Scheduled Event', u'source':\n            u'aws.events', u'version': u'0', u'time':\n            u'2016-05-10T21:05:39Z', u'id':\n            u'0d6a6db0-d5e7-4755-93a0-750a8bf49d55', u'resources': [\n            u'arn:aws:events:us-east-1:72333333333:rule/tests.test_app.schedule_me'\n            ]}\n        lh.handler(event, None)\n        event = {u'account': u'72333333333', u'region': u'us-east-1',\n            u'detail': {}, u'command': u'test_settings.command', u'source':\n            u'aws.events', u'version': u'0', u'time':\n            u'2016-05-10T21:05:39Z', u'id':\n            u'0d6a6db0-d5e7-4755-93a0-750a8bf49d55', u'resources': [\n            u'arn:aws:events:us-east-1:72333333333:rule/tests.test_app.schedule_me'\n            ]}\n        lh.handler(event, None)\n        event = {u'account': u'72333333333', u'region': u'us-east-1',\n            u'detail': {}, u'raw_command': u'print(\"check one two\")',\n            u'source': u'aws.events', u'version': u'0', u'time':\n            u'2016-05-10T21:05:39Z', u'id':\n            u'0d6a6db0-d5e7-4755-93a0-750a8bf49d55', u'resources': [\n            u'arn:aws:events:us-east-1:72333333333:rule/tests.test_app.schedule_me'\n            ]}\n        lh.handler(event, None)\n        event = {u'account': u'72333333333', u'region': u'us-east-1',\n            u'detail': {}, u'Records': [{'s3': {'configurationId':\n            'test_settings.aws_s3_event'}}], u'source': u'aws.events',\n            u'version': u'0', u'time': u'2016-05-10T21:05:39Z', u'id':\n            u'0d6a6db0-d5e7-4755-93a0-750a8bf49d55', u'resources': [\n            u'arn:aws:events:us-east-1:72333333333:rule/tests.test_app.schedule_me'\n            ]}\n        self.assertEqual('AWS S3 EVENT', lh.handler(event, None))\n        event = {u'account': u'72333333333', u'region': u'us-east-1',\n            u'detail': {}, u'Records': [{u'EventVersion': u'1.0',\n            u'EventSource': u'aws:sns', u'EventSubscriptionArn':\n            u'arn:aws:sns:EXAMPLE', u'Sns': {u'SignatureVersion': u'1',\n            u'Timestamp': u'1970-01-01T00:00:00.000Z', u'Signature':\n            u'EXAMPLE', u'SigningCertUrl': u'EXAMPLE', u'MessageId':\n            u'95df01b4-ee98-5cb9-9903-4c221d41eb5e', u'Message':\n            u'Hello from SNS!', u'Subject': u'TestInvoke', u'Type':\n            u'Notification', u'UnsubscribeUrl': u'EXAMPLE', u'TopicArn':\n            u'arn:aws:sns:1', u'MessageAttributes': {u'Test': {u'Type':\n            u'String', u'Value': u'TestString'}, u'TestBinary': {u'Type':\n            u'Binary', u'Value': u'TestBinary'}}}}]}\n        self.assertEqual('AWS SNS EVENT', lh.handler(event, None))\n        event = {u'Records': [{u'eventID': u'1', u'eventVersion': u'1.0',\n            u'dynamodb': {u'Keys': {u'Id': {u'N': u'101'}}, u'NewImage': {\n            u'Message': {u'S': u'New item!'}, u'Id': {u'N': u'101'}},\n            u'StreamViewType': u'NEW_AND_OLD_IMAGES', u'SequenceNumber':\n            u'111', u'SizeBytes': 26}, u'awsRegion': u'us-west-2',\n            u'eventName': u'INSERT', u'eventSourceARN':\n            u'arn:aws:dynamodb:1', u'eventSource': u'aws:dynamodb'}]}\n        self.assertEqual('AWS DYNAMODB EVENT', lh.handler(event, None))\n        event = {u'Records': [{u'eventID':\n            u'shardId-000000000000:49545115243490985018280067714973144582180062593244200961'\n            , u'eventVersion': u'1.0', u'kinesis': {u'partitionKey':\n            u'partitionKey-3', u'data':\n            u'SGVsbG8sIHRoaXMgaXMgYSB0ZXN0IDEyMy4=',\n            u'kinesisSchemaVersion': u'1.0', u'sequenceNumber':\n            u'49545115243490985018280067714973144582180062593244200961'},\n            u'invokeIdentityArn': u'arn:aws:iam::EXAMPLE', u'eventName':\n            u'aws:kinesis:record', u'eventSourceARN': u'arn:aws:kinesis:1',\n            u'eventSource': u'aws:kinesis', u'awsRegion': u'us-east-1'}]}\n        self.assertEqual('AWS KINESIS EVENT', lh.handler(event, None))\n        event = {u'authorizationToken': u'hubtoken1', u'methodArn':\n            u'arn:aws:execute-api:us-west-2:1234:xxxxx/dev/GET/v1/endpoint/param'\n            , u'type': u'TOKEN'}\n        self.assertEqual('AUTHORIZER_EVENT', lh.handler(event, None))\n        lh.settings.AUTHORIZER_FUNCTION = None\n        with self.assertRaisesRegexp(Exception, 'Unauthorized'):\n            lh.handler(event, None)\n        event = {u'Records': [{u'eventID':\n            u'shardId-000000000000:49545115243490985018280067714973144582180062593244200961'\n            , u'eventVersion': u'1.0', u'kinesis': {u'partitionKey':\n            u'partitionKey-3', u'data':\n            u'SGVsbG8sIHRoaXMgaXMgYSB0ZXN0IDEyMy4=',\n            u'kinesisSchemaVersion': u'1.0', u'sequenceNumber':\n            u'49545115243490985018280067714973144582180062593244200961'},\n            u'eventSourceARN': u'bad:arn:1'}]}\n        self.assertIsNone(lh.handler(event, None))\n\n    def test_cli_sanity(self):\n        zappa_cli = ZappaCLI()\n        return\n\n    def test_cli_utility(self):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('test_settings.json')\n        zappa_cli.create_package()\n        zappa_cli.remove_local_zip()\n        logs = [{'timestamp': '12345', 'message': '[START RequestId] test'},\n            {'timestamp': '12345', 'message': '[REPORT RequestId] test'}, {\n            'timestamp': '12345', 'message': '[END RequestId] test'}, {\n            'timestamp': '12345', 'message': 'test'}]\n        zappa_cli.print_logs(logs)\n        zappa_cli.check_for_update()\n\n    def test_cli_args(self):\n        zappa_cli = ZappaCLI()\n        argv = '-s test_settings.json derp ttt888'.split()\n        zappa_cli.handle(argv)\n\n    def test_bad_json_catch(self):\n        zappa_cli = ZappaCLI()\n        self.assertRaises(ValueError, zappa_cli.load_settings_file,\n            'tests/test_bad_settings.json')\n\n    def test_bad_stage_name_catch(self):\n        zappa_cli = ZappaCLI()\n        self.assertRaises(ValueError, zappa_cli.load_settings,\n            'tests/test_bad_stage_name_settings.json')\n\n    @placebo_session\n    def test_cli_aws(self, session):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.api_key_required = True\n        zappa_cli.authorization_type = 'NONE'\n        zappa_cli.load_settings('test_settings.json', session)\n        zappa_cli.zappa.credentials_arn = (\n            'arn:aws:iam::12345:role/ZappaLambdaExecution')\n        zappa_cli.deploy()\n        zappa_cli.update()\n        zappa_cli.rollback(1)\n        zappa_cli.tail(False)\n        zappa_cli.schedule()\n        zappa_cli.unschedule()\n        zappa_cli.undeploy(noconfirm=True, remove_logs=True)\n\n    @placebo_session\n    def test_cli_aws_status(self, session):\n        zappa_cli = ZappaCLI()\n        zappa_cli.api_stage = 'ttt888'\n        zappa_cli.load_settings('test_settings.json', session)\n        zappa_cli.api_stage = 'devor'\n        zappa_cli.lambda_name = 'baby-flask-devor'\n        zappa_cli.zappa.credentials_arn = (\n            'arn:aws:iam::12345:role/ZappaLambdaExecution')\n        resp = zappa_cli.status()\n\n    def test_cli_init(self):\n        if os.path.isfile('zappa_settings.json'):\n            os.remove('zappa_settings.json')\n        zappa_cli = ZappaCLI()\n        inputs = ['dev', 'lmbda', 'test_settings', '']\n        input_generator = (i for i in inputs)\n        with mock.patch('__builtin__.raw_input', lambda prompt: next(\n            input_generator)):\n            zappa_cli.init()\n        if os.path.isfile('zappa_settings.json'):\n            os.remove('zappa_settings.json')\n        input_generator = (i for i in inputs)\n        with mock.patch('__builtin__.raw_input', lambda prompt: next(\n            input_generator)):\n            zappa_cli = ZappaCLI()\n            argv = ['init']\n            zappa_cli.handle(argv)\n        if os.path.isfile('zappa_settings.json'):\n            os.remove('zappa_settings.json')\n\n    def test_domain_name_match(self):\n        zone = Zappa._get_best_match_zone(all_zones={'HostedZones': [{\n            'Name': 'example.com.au.', 'Id': 'zone-correct'}]}, domain=\n            'www.example.com.au')\n        assert zone == 'zone-correct'\n        zone = Zappa._get_best_match_zone(all_zones={'HostedZones': [{\n            'Name': 'example.com.au.', 'Id': 'zone-incorrect'}]}, domain=\n            'something-else.com.au')\n        assert zone is None\n        zone = Zappa._get_best_match_zone(all_zones={'HostedZones': [{\n            'Name': 'example.com.au.', 'Id': 'zone-incorrect'}, {'Name':\n            'subdomain.example.com.au.', 'Id': 'zone-correct'}]}, domain=\n            'www.subdomain.example.com.au')\n        assert zone == 'zone-correct'\n\n    def test_lets_encrypt_sanity(self):\n        import subprocess\n        proc = subprocess.Popen(['openssl genrsa 2048 > /tmp/account.key'],\n            stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=\n            subprocess.PIPE, shell=True)\n        out, err = proc.communicate()\n        if proc.returncode != 0:\n            raise IOError('OpenSSL Error: {0}'.format(err))\n        proc = subprocess.Popen([\n            \"openssl req -x509 -newkey rsa:2048 -subj '/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com' -passout pass:foo -keyout /tmp/key.key -out test_signed.crt -days 1 > /tmp/signed.crt\"\n            ], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=\n            subprocess.PIPE, shell=True)\n        out, err = proc.communicate()\n        if proc.returncode != 0:\n            raise IOError('OpenSSL Error: {0}'.format(err))\n        DEFAULT_CA = 'https://acme-staging.api.letsencrypt.org'\n        CA = 'https://acme-staging.api.letsencrypt.org'\n        try:\n            result = register_account()\n        except ValueError as e:\n            pass\n        create_domain_key()\n        create_domain_csr('herp.derp.wtf')\n        parse_account_key()\n        parse_csr()\n        create_chained_certificate()\n        try:\n            result = sign_certificate()\n        except ValueError as e:\n            pass\n        result = verify_challenge('http://echo.jsontest.com/status/valid')\n        try:\n            result = verify_challenge('http://echo.jsontest.com/status/fail')\n        except ValueError as e:\n            pass\n        try:\n            result = verify_challenge('http://bing.com')\n        except ValueError as e:\n            pass\n        encode_certificate(b'123')\n        os.remove('test_signed.crt')\n        cleanup()\n\n    def test_detect_dj(self):\n        settings_modules = detect_django_settings()\n\n    def test_dj_wsgi(self):\n        settings_modules = detect_django_settings()\n        settings = \"\"\"\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nimport os\nBASE_DIR = os.path.dirname(os.path.dirname(__file__))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/1.7/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'alskdfjalsdkf=0*%do-ayvy*m2k=vss*$7)j8q!@u0+d^na7mi2(^!l!d'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nTEMPLATE_DEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n)\n\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n)\n\nROOT_URLCONF = 'blah.urls'\nWSGI_APPLICATION = 'hackathon_starter.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/1.7/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Internationalization\n# https://docs.djangoproject.com/en/1.7/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n        \"\"\"\n        djts = open('dj_test_settings.py', 'w')\n        djts.write(settings)\n        djts.close()\n        app = get_django_wsgi('dj_test_settings')\n        os.remove('dj_test_settings.py')\n        os.remove('dj_test_settings.pyc')\n\n    def test_human_units(self):\n        zappa = Zappa()\n        zappa.human_size(1)\n        zappa.human_size(9999999999999)\n\n    def test_event_name(self):\n        zappa = Zappa()\n        truncated = zappa.get_event_name(\n            'basldfkjalsdkfjalsdkfjaslkdfjalsdkfjadlsfkjasdlfkjasdlfkjasdflkjasdf-asdfasdfasdfasdfasdf'\n            , 'this.is.my.dang.function.wassup.yeah.its.long')\n        self.assertTrue(len(truncated) <= 64)\n        truncated = zappa.get_event_name(\n            'basldfkjalsdkfjalsdkfjaslkdfjalsdkfjadlsfkjasdlfkjasdlfkjasdflkjasdf-asdfasdfasdfasdfasdf'\n            ,\n            'thisidoasdfaljksdfalskdjfalsdkfjasldkfjalsdkfjalsdkfjalsdfkjalasdfasdfasdfasdklfjasldkfjalsdkjfaslkdfjasldkfjasdflkjdasfskdj'\n            )\n        self.assertTrue(len(truncated) <= 64)\n        truncated = zappa.get_event_name('a', 'b')\n        self.assertTrue(len(truncated) <= 64)\n\n    def test_detect_dj(self):\n        settings_modules = detect_django_settings()\n\n    def test_detect_flask(self):\n        settings_modules = detect_flask_apps()\n\n    @placebo_session\n    def test_add_event_source(self, session):\n        event_source = {'arn': 'blah:blah:blah:blah', 'events': [\n            's3:ObjectCreated:*']}\n        try:\n            es = add_event_source(event_source, 'blah:blah:blah:blah',\n                'test_settings.callback', session)\n            self.fail('Success should have failed.')\n        except ValueError:\n            pass\n        event_source = {'arn': 's3:s3:s3:s3', 'events': ['s3:ObjectCreated:*']}\n        add_event_source(event_source, 'lambda:lambda:lambda:lambda',\n            'test_settings.callback', session, dry=True)\n        remove_event_source(event_source, 'lambda:lambda:lambda:lambda',\n            'test_settings.callback', session, dry=True)\n\n    def test_shameless(self):\n        shamelessly_promote()\n",
                        "belong_class_name": "TestZappa",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "create_wsgi_request",
                        "function_content": "def create_wsgi_request(event_info, server_name='zappa', script_name=None,\n    trailing_slash=True):\n    \"\"\"\n        Given some event_info,\n        create and return a valid WSGI request environ.\n        \"\"\"\n    method = event_info['httpMethod']\n    params = event_info['pathParameters']\n    query = event_info['queryStringParameters']\n    headers = event_info['headers']\n    remote_user = None\n    if event_info['requestContext'].get('authorizer'):\n        remote_user = event_info['requestContext']['authorizer'].get(\n            'principalId')\n    body = event_info['body']\n    for header in headers.keys():\n        canonical = header.title()\n        if canonical != header:\n            headers[canonical] = headers.pop(header)\n    path = event_info['path']\n    if query:\n        query_string = urlencode(query)\n    else:\n        query_string = ''\n    x_forwarded_for = headers.get('X-Forwarded-For', '')\n    if ',' in x_forwarded_for:\n        remote_addr = x_forwarded_for.split(', ')[0]\n    else:\n        remote_addr = '127.0.0.1'\n    environ = {'PATH_INFO': path, 'QUERY_STRING': query_string,\n        'REMOTE_ADDR': remote_addr, 'REQUEST_METHOD': method, 'SCRIPT_NAME':\n        str(script_name) if script_name else '', 'SERVER_NAME': str(\n        server_name), 'SERVER_PORT': str('80'), 'SERVER_PROTOCOL': str(\n        'HTTP/1.1'), 'wsgi.version': (1, 0), 'wsgi.url_scheme': str('http'),\n        'wsgi.input': body, 'wsgi.errors': str(''), 'wsgi.multiprocess': \n        False, 'wsgi.multithread': False, 'wsgi.run_once': False}\n    if method in ['POST', 'PUT', 'PATCH']:\n        if 'Content-Type' in headers:\n            environ['CONTENT_TYPE'] = headers['Content-Type']\n        environ['wsgi.input'] = StringIO(body)\n        environ['CONTENT_LENGTH'] = str(len(body))\n    for header in headers:\n        wsgi_name = 'HTTP_' + header.upper().replace('-', '_')\n        environ[wsgi_name] = str(headers[header])\n    if script_name:\n        environ['SCRIPT_NAME'] = script_name\n        path_info = environ['PATH_INFO']\n        if script_name in path_info:\n            environ['PATH_INFO'].replace(script_name, '')\n    if remote_user:\n        environ['REMOTE_USER'] = remote_user\n    return environ\n",
                        "function_parameter": "(event_info, server_name='zappa', script_name=None,\n    trailing_slash=True)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ]
            ]
        }
    },
    "airflow": {
        "airflow-14513_pod_launcher": {
            "pytest tests/kubernetes/test_pod_launcher.py::TestPodLauncher::test_monitor_pod_empty_logs": [
                [
                    {
                        "function_name": "test_monitor_pod_empty_logs",
                        "function_content": "def test_monitor_pod_empty_logs(self):\n    mock.sentinel.metadata = mock.MagicMock()\n    running_status = mock.MagicMock()\n    running_status.configure_mock(**{'name': 'base', 'state.running': True})\n    pod_info_running = mock.MagicMock(**{'status.container_statuses': [\n        running_status]})\n    pod_info_succeeded = mock.MagicMock(**{'status.phase': PodStatus.SUCCEEDED}\n        )\n\n    def pod_state_gen():\n        yield pod_info_running\n        while True:\n            yield pod_info_succeeded\n    self.mock_kube_client.read_namespaced_pod.side_effect = pod_state_gen()\n    self.mock_kube_client.read_namespaced_pod_log.return_value = iter(())\n    self.pod_launcher.monitor_pod(mock.sentinel, get_logs=True)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class TestPodLauncher(unittest.TestCase):\n\n    def setUp(self):\n        self.mock_kube_client = mock.Mock()\n        self.pod_launcher = PodLauncher(kube_client=self.mock_kube_client)\n\n    def test_read_pod_logs_successfully_returns_logs(self):\n        mock.sentinel.metadata = mock.MagicMock()\n        self.mock_kube_client.read_namespaced_pod_log.return_value = (mock.\n            sentinel.logs)\n        logs = self.pod_launcher.read_pod_logs(mock.sentinel)\n        assert mock.sentinel.logs == logs\n\n    def test_read_pod_logs_retries_successfully(self):\n        mock.sentinel.metadata = mock.MagicMock()\n        self.mock_kube_client.read_namespaced_pod_log.side_effect = [\n            BaseHTTPError('Boom'), mock.sentinel.logs]\n        logs = self.pod_launcher.read_pod_logs(mock.sentinel)\n        assert mock.sentinel.logs == logs\n        self.mock_kube_client.read_namespaced_pod_log.assert_has_calls([\n            mock.call(_preload_content=False, container='base', follow=True,\n            timestamps=False, name=mock.sentinel.metadata.name, namespace=\n            mock.sentinel.metadata.namespace), mock.call(_preload_content=\n            False, container='base', follow=True, timestamps=False, name=\n            mock.sentinel.metadata.name, namespace=mock.sentinel.metadata.\n            namespace)])\n\n    def test_read_pod_logs_retries_fails(self):\n        mock.sentinel.metadata = mock.MagicMock()\n        self.mock_kube_client.read_namespaced_pod_log.side_effect = [\n            BaseHTTPError('Boom'), BaseHTTPError('Boom'), BaseHTTPError('Boom')\n            ]\n        with pytest.raises(AirflowException):\n            self.pod_launcher.read_pod_logs(mock.sentinel)\n\n    def test_read_pod_logs_successfully_with_tail_lines(self):\n        mock.sentinel.metadata = mock.MagicMock()\n        self.mock_kube_client.read_namespaced_pod_log.side_effect = [mock.\n            sentinel.logs]\n        logs = self.pod_launcher.read_pod_logs(mock.sentinel, tail_lines=100)\n        assert mock.sentinel.logs == logs\n        self.mock_kube_client.read_namespaced_pod_log.assert_has_calls([\n            mock.call(_preload_content=False, container='base', follow=True,\n            timestamps=False, name=mock.sentinel.metadata.name, namespace=\n            mock.sentinel.metadata.namespace, tail_lines=100)])\n\n    def test_read_pod_logs_successfully_with_since_seconds(self):\n        mock.sentinel.metadata = mock.MagicMock()\n        self.mock_kube_client.read_namespaced_pod_log.side_effect = [mock.\n            sentinel.logs]\n        logs = self.pod_launcher.read_pod_logs(mock.sentinel, since_seconds=2)\n        assert mock.sentinel.logs == logs\n        self.mock_kube_client.read_namespaced_pod_log.assert_has_calls([\n            mock.call(_preload_content=False, container='base', follow=True,\n            timestamps=False, name=mock.sentinel.metadata.name, namespace=\n            mock.sentinel.metadata.namespace, since_seconds=2)])\n\n    def test_read_pod_events_successfully_returns_events(self):\n        mock.sentinel.metadata = mock.MagicMock()\n        self.mock_kube_client.list_namespaced_event.return_value = (mock.\n            sentinel.events)\n        events = self.pod_launcher.read_pod_events(mock.sentinel)\n        assert mock.sentinel.events == events\n\n    def test_read_pod_events_retries_successfully(self):\n        mock.sentinel.metadata = mock.MagicMock()\n        self.mock_kube_client.list_namespaced_event.side_effect = [\n            BaseHTTPError('Boom'), mock.sentinel.events]\n        events = self.pod_launcher.read_pod_events(mock.sentinel)\n        assert mock.sentinel.events == events\n        self.mock_kube_client.list_namespaced_event.assert_has_calls([mock.\n            call(namespace=mock.sentinel.metadata.namespace, field_selector\n            =f'involvedObject.name={mock.sentinel.metadata.name}'), mock.\n            call(namespace=mock.sentinel.metadata.namespace, field_selector\n            =f'involvedObject.name={mock.sentinel.metadata.name}')])\n\n    def test_read_pod_events_retries_fails(self):\n        mock.sentinel.metadata = mock.MagicMock()\n        self.mock_kube_client.list_namespaced_event.side_effect = [\n            BaseHTTPError('Boom'), BaseHTTPError('Boom'), BaseHTTPError('Boom')\n            ]\n        with pytest.raises(AirflowException):\n            self.pod_launcher.read_pod_events(mock.sentinel)\n\n    def test_read_pod_returns_logs(self):\n        mock.sentinel.metadata = mock.MagicMock()\n        self.mock_kube_client.read_namespaced_pod.return_value = (mock.\n            sentinel.pod_info)\n        pod_info = self.pod_launcher.read_pod(mock.sentinel)\n        assert mock.sentinel.pod_info == pod_info\n\n    def test_read_pod_retries_successfully(self):\n        mock.sentinel.metadata = mock.MagicMock()\n        self.mock_kube_client.read_namespaced_pod.side_effect = [BaseHTTPError\n            ('Boom'), mock.sentinel.pod_info]\n        pod_info = self.pod_launcher.read_pod(mock.sentinel)\n        assert mock.sentinel.pod_info == pod_info\n        self.mock_kube_client.read_namespaced_pod.assert_has_calls([mock.\n            call(mock.sentinel.metadata.name, mock.sentinel.metadata.\n            namespace), mock.call(mock.sentinel.metadata.name, mock.\n            sentinel.metadata.namespace)])\n\n    def test_monitor_pod_empty_logs(self):\n        mock.sentinel.metadata = mock.MagicMock()\n        running_status = mock.MagicMock()\n        running_status.configure_mock(**{'name': 'base', 'state.running': True}\n            )\n        pod_info_running = mock.MagicMock(**{'status.container_statuses': [\n            running_status]})\n        pod_info_succeeded = mock.MagicMock(**{'status.phase': PodStatus.\n            SUCCEEDED})\n\n        def pod_state_gen():\n            yield pod_info_running\n            while True:\n                yield pod_info_succeeded\n        self.mock_kube_client.read_namespaced_pod.side_effect = pod_state_gen()\n        self.mock_kube_client.read_namespaced_pod_log.return_value = iter(())\n        self.pod_launcher.monitor_pod(mock.sentinel, get_logs=True)\n\n    def test_read_pod_retries_fails(self):\n        mock.sentinel.metadata = mock.MagicMock()\n        self.mock_kube_client.read_namespaced_pod.side_effect = [BaseHTTPError\n            ('Boom'), BaseHTTPError('Boom'), BaseHTTPError('Boom')]\n        with pytest.raises(AirflowException):\n            self.pod_launcher.read_pod(mock.sentinel)\n\n    def test_parse_log_line(self):\n        timestamp, message = self.pod_launcher.parse_log_line(\n            \"\"\"2020-10-08T14:16:17.793417674Z Valid message\n\"\"\")\n        assert timestamp == '2020-10-08T14:16:17.793417674Z'\n        assert message == 'Valid message'\n        with pytest.raises(Exception):\n            self.pod_launcher.parse_log_line(\n                '2020-10-08T14:16:17.793417674ZInvalidmessage\\n')\n",
                        "belong_class_name": "TestPodLauncher",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "monitor_pod",
                        "function_content": "def monitor_pod(self, pod: V1Pod, get_logs: bool) ->Tuple[State, Optional[str]\n    ]:\n    \"\"\"\n        Monitors a pod and returns the final state\n\n        :param pod: pod spec that will be monitored\n        :type pod : V1Pod\n        :param get_logs: whether to read the logs locally\n        :return:  Tuple[State, Optional[str]]\n        \"\"\"\n    if get_logs:\n        read_logs_since_sec = None\n        last_log_time = None\n        while True:\n            logs = self.read_pod_logs(pod, timestamps=True, since_seconds=\n                read_logs_since_sec)\n            for line in logs:\n                timestamp, message = self.parse_log_line(line.decode('utf-8'))\n                last_log_time = pendulum.parse(timestamp)\n                self.log.info(message)\n            time.sleep(1)\n            if not self.base_container_is_running(pod):\n                break\n            self.log.warning('Pod %s log read interrupted', pod.metadata.name)\n            delta = pendulum.now() - last_log_time\n            read_logs_since_sec = math.ceil(delta.total_seconds())\n    result = None\n    if self.extract_xcom:\n        while self.base_container_is_running(pod):\n            self.log.info('Container %s has state %s', pod.metadata.name,\n                State.RUNNING)\n            time.sleep(2)\n        result = self._extract_xcom(pod)\n        self.log.info(result)\n        result = json.loads(result)\n    while self.pod_is_running(pod):\n        self.log.info('Pod %s has state %s', pod.metadata.name, State.RUNNING)\n        time.sleep(2)\n    return self._task_status(self.read_pod(pod)), result\n",
                        "function_parameter": "(self, pod: V1Pod, get_logs: bool)",
                        "belong_class_content": "class PodLauncher(LoggingMixin):\n    \"\"\"Launches PODS\"\"\"\n\n    def __init__(self, kube_client: client.CoreV1Api=None, in_cluster: bool\n        =True, cluster_context: Optional[str]=None, extract_xcom: bool=False):\n        \"\"\"\n        Creates the launcher.\n\n        :param kube_client: kubernetes client\n        :param in_cluster: whether we are in cluster\n        :param cluster_context: context of the cluster\n        :param extract_xcom: whether we should extract xcom\n        \"\"\"\n        super().__init__()\n        self._client = kube_client or get_kube_client(in_cluster=in_cluster,\n            cluster_context=cluster_context)\n        self._watch = watch.Watch()\n        self.extract_xcom = extract_xcom\n\n    def run_pod_async(self, pod: V1Pod, **kwargs):\n        \"\"\"Runs POD asynchronously\"\"\"\n        pod_mutation_hook(pod)\n        sanitized_pod = self._client.api_client.sanitize_for_serialization(pod)\n        json_pod = json.dumps(sanitized_pod, indent=2)\n        self.log.debug('Pod Creation Request: \\n%s', json_pod)\n        try:\n            resp = self._client.create_namespaced_pod(body=sanitized_pod,\n                namespace=pod.metadata.namespace, **kwargs)\n            self.log.debug('Pod Creation Response: %s', resp)\n        except Exception as e:\n            self.log.exception(\n                'Exception when attempting to create Namespaced Pod: %s',\n                json_pod)\n            raise e\n        return resp\n\n    def delete_pod(self, pod: V1Pod):\n        \"\"\"Deletes POD\"\"\"\n        try:\n            self._client.delete_namespaced_pod(pod.metadata.name, pod.\n                metadata.namespace, body=client.V1DeleteOptions())\n        except ApiException as e:\n            if e.status != 404:\n                raise\n\n    def start_pod(self, pod: V1Pod, startup_timeout: int=120):\n        \"\"\"\n        Launches the pod synchronously and waits for completion.\n\n        :param pod:\n        :param startup_timeout: Timeout for startup of the pod (if pod is pending for too long, fails task)\n        :return:\n        \"\"\"\n        resp = self.run_pod_async(pod)\n        curr_time = dt.now()\n        if resp.status.start_time is None:\n            while self.pod_not_started(pod):\n                self.log.warning('Pod not yet started: %s', pod.metadata.name)\n                delta = dt.now() - curr_time\n                if delta.total_seconds() >= startup_timeout:\n                    raise AirflowException('Pod took too long to start')\n                time.sleep(1)\n\n    def monitor_pod(self, pod: V1Pod, get_logs: bool) ->Tuple[State,\n        Optional[str]]:\n        \"\"\"\n        Monitors a pod and returns the final state\n\n        :param pod: pod spec that will be monitored\n        :type pod : V1Pod\n        :param get_logs: whether to read the logs locally\n        :return:  Tuple[State, Optional[str]]\n        \"\"\"\n        if get_logs:\n            read_logs_since_sec = None\n            last_log_time = None\n            while True:\n                logs = self.read_pod_logs(pod, timestamps=True,\n                    since_seconds=read_logs_since_sec)\n                for line in logs:\n                    timestamp, message = self.parse_log_line(line.decode(\n                        'utf-8'))\n                    last_log_time = pendulum.parse(timestamp)\n                    self.log.info(message)\n                time.sleep(1)\n                if not self.base_container_is_running(pod):\n                    break\n                self.log.warning('Pod %s log read interrupted', pod.\n                    metadata.name)\n                delta = pendulum.now() - last_log_time\n                read_logs_since_sec = math.ceil(delta.total_seconds())\n        result = None\n        if self.extract_xcom:\n            while self.base_container_is_running(pod):\n                self.log.info('Container %s has state %s', pod.metadata.\n                    name, State.RUNNING)\n                time.sleep(2)\n            result = self._extract_xcom(pod)\n            self.log.info(result)\n            result = json.loads(result)\n        while self.pod_is_running(pod):\n            self.log.info('Pod %s has state %s', pod.metadata.name, State.\n                RUNNING)\n            time.sleep(2)\n        return self._task_status(self.read_pod(pod)), result\n\n    def parse_log_line(self, line: str) ->Tuple[str, str]:\n        \"\"\"\n        Parse K8s log line and returns the final state\n\n        :param line: k8s log line\n        :type line: str\n        :return: timestamp and log message\n        :rtype: Tuple[str, str]\n        \"\"\"\n        split_at = line.find(' ')\n        if split_at == -1:\n            raise Exception(\n                f'Log not in \"{{timestamp}} {{log}}\" format. Got: {line}')\n        timestamp = line[:split_at]\n        message = line[split_at + 1:].rstrip()\n        return timestamp, message\n\n    def _task_status(self, event):\n        self.log.info('Event: %s had an event of type %s', event.metadata.\n            name, event.status.phase)\n        status = self.process_status(event.metadata.name, event.status.phase)\n        return status\n\n    def pod_not_started(self, pod: V1Pod):\n        \"\"\"Tests if pod has not started\"\"\"\n        state = self._task_status(self.read_pod(pod))\n        return state == State.QUEUED\n\n    def pod_is_running(self, pod: V1Pod):\n        \"\"\"Tests if pod is running\"\"\"\n        state = self._task_status(self.read_pod(pod))\n        return state not in (State.SUCCESS, State.FAILED)\n\n    def base_container_is_running(self, pod: V1Pod):\n        \"\"\"Tests if base container is running\"\"\"\n        event = self.read_pod(pod)\n        status = next(iter(filter(lambda s: s.name == 'base', event.status.\n            container_statuses)), None)\n        if not status:\n            return False\n        return status.state.running is not None\n\n    @tenacity.retry(stop=tenacity.stop_after_attempt(3), wait=tenacity.\n        wait_exponential(), reraise=True)\n    def read_pod_logs(self, pod: V1Pod, tail_lines: Optional[int]=None,\n        timestamps: bool=False, since_seconds: Optional[int]=None):\n        \"\"\"Reads log from the POD\"\"\"\n        additional_kwargs = {}\n        if since_seconds:\n            additional_kwargs['since_seconds'] = since_seconds\n        if tail_lines:\n            additional_kwargs['tail_lines'] = tail_lines\n        try:\n            return self._client.read_namespaced_pod_log(name=pod.metadata.\n                name, namespace=pod.metadata.namespace, container='base',\n                follow=True, timestamps=timestamps, _preload_content=False,\n                **additional_kwargs)\n        except BaseHTTPError as e:\n            raise AirflowException(\n                f'There was an error reading the kubernetes API: {e}')\n\n    @tenacity.retry(stop=tenacity.stop_after_attempt(3), wait=tenacity.\n        wait_exponential(), reraise=True)\n    def read_pod_events(self, pod):\n        \"\"\"Reads events from the POD\"\"\"\n        try:\n            return self._client.list_namespaced_event(namespace=pod.\n                metadata.namespace, field_selector=\n                f'involvedObject.name={pod.metadata.name}')\n        except BaseHTTPError as e:\n            raise AirflowException(\n                f'There was an error reading the kubernetes API: {e}')\n\n    @tenacity.retry(stop=tenacity.stop_after_attempt(3), wait=tenacity.\n        wait_exponential(), reraise=True)\n    def read_pod(self, pod: V1Pod):\n        \"\"\"Read POD information\"\"\"\n        try:\n            return self._client.read_namespaced_pod(pod.metadata.name, pod.\n                metadata.namespace)\n        except BaseHTTPError as e:\n            raise AirflowException(\n                f'There was an error reading the kubernetes API: {e}')\n\n    def _extract_xcom(self, pod: V1Pod):\n        resp = kubernetes_stream(self._client.\n            connect_get_namespaced_pod_exec, pod.metadata.name, pod.\n            metadata.namespace, container=PodDefaults.\n            SIDECAR_CONTAINER_NAME, command=['/bin/sh'], stdin=True, stdout\n            =True, stderr=True, tty=False, _preload_content=False)\n        try:\n            result = self._exec_pod_command(resp,\n                f'cat {PodDefaults.XCOM_MOUNT_PATH}/return.json')\n            self._exec_pod_command(resp, 'kill -s SIGINT 1')\n        finally:\n            resp.close()\n        if result is None:\n            raise AirflowException(\n                f'Failed to extract xcom from pod: {pod.metadata.name}')\n        return result\n\n    def _exec_pod_command(self, resp, command):\n        if resp.is_open():\n            self.log.info('Running command... %s\\n', command)\n            resp.write_stdin(command + '\\n')\n            while resp.is_open():\n                resp.update(timeout=1)\n                if resp.peek_stdout():\n                    return resp.read_stdout()\n                if resp.peek_stderr():\n                    self.log.info(resp.read_stderr())\n                    break\n        return None\n\n    def process_status(self, job_id, status):\n        \"\"\"Process status information for the JOB\"\"\"\n        status = status.lower()\n        if status == PodStatus.PENDING:\n            return State.QUEUED\n        elif status == PodStatus.FAILED:\n            self.log.error('Event with job id %s Failed', job_id)\n            return State.FAILED\n        elif status == PodStatus.SUCCEEDED:\n            self.log.info('Event with job id %s Succeeded', job_id)\n            return State.SUCCESS\n        elif status == PodStatus.RUNNING:\n            return State.RUNNING\n        else:\n            self.log.error('Event: Invalid state %s on job %s', status, job_id)\n            return State.FAILED\n",
                        "belong_class_name": "PodLauncher",
                        "belong_class_init": "def __init__(self, kube_client: client.CoreV1Api=None, in_cluster: bool=\n    True, cluster_context: Optional[str]=None, extract_xcom: bool=False):\n    \"\"\"\n        Creates the launcher.\n\n        :param kube_client: kubernetes client\n        :param in_cluster: whether we are in cluster\n        :param cluster_context: context of the cluster\n        :param extract_xcom: whether we should extract xcom\n        \"\"\"\n    super().__init__()\n    self._client = kube_client or get_kube_client(in_cluster=in_cluster,\n        cluster_context=cluster_context)\n    self._watch = watch.Watch()\n    self.extract_xcom = extract_xcom\n"
                    }
                ]
            ]
        }
    },
    "beets": {
        "beets-3360_thumbnails": {
            "pytest test/test_thumbnails.py::TestPathlibURI::test_uri": [
                [
                    {
                        "function_name": "test_uri",
                        "function_content": "def test_uri(self):\n    test_uri = PathlibURI()\n    test_uri.uri(b'/')\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class TestPathlibURI:\n    \"\"\"Test PathlibURI class\"\"\"\n\n    def test_uri(self):\n        test_uri = PathlibURI()\n        test_uri.uri(b'/')\n",
                        "belong_class_name": "TestPathlibURI",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "uri",
                        "function_content": "def uri(self, path):\n    return PurePosixPath(path).as_uri()\n",
                        "function_parameter": "(self, path)",
                        "belong_class_content": "class PathlibURI(URIGetter):\n    available = True\n    name = 'Python Pathlib'\n\n    def uri(self, path):\n        return PurePosixPath(path).as_uri()\n",
                        "belong_class_name": "PathlibURI",
                        "belong_class_init": ""
                    }
                ]
            ]
        }
    },
    "core": {
        "core-20233_template": {
            "pytest tests/helpers/test_template.py::TestHelpersTemplate::test_render_with_possible_json_value_non_string_value": [
                [
                    {
                        "function_name": "test_render_with_possible_json_value_non_string_value",
                        "function_content": "def test_render_with_possible_json_value_non_string_value(self):\n    \"\"\"Render with possible JSON value with non-string value.\"\"\"\n    tpl = template.Template(\n        \"\\n{{ strptime(value~'+0000', '%Y-%m-%d %H:%M:%S%z') }}\\n            \",\n        self.hass)\n    value = datetime(2019, 1, 18, 12, 13, 14)\n    expected = str(pytz.utc.localize(value))\n    assert expected == tpl.render_with_possible_json_value(value)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class TestHelpersTemplate(unittest.TestCase):\n    \"\"\"Test the Template.\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up the tests.\"\"\"\n        self.hass = get_test_home_assistant()\n        self.hass.config.units = UnitSystem('custom', TEMP_CELSIUS,\n            LENGTH_METERS, VOLUME_LITERS, MASS_GRAMS)\n\n    def tearDown(self):\n        \"\"\"Stop down stuff we started.\"\"\"\n        self.hass.stop()\n\n    def test_referring_states_by_entity_id(self):\n        \"\"\"Test referring states by entity id.\"\"\"\n        self.hass.states.set('test.object', 'happy')\n        assert 'happy' == template.Template('{{ states.test.object.state }}',\n            self.hass).render()\n\n    def test_iterating_all_states(self):\n        \"\"\"Test iterating all states.\"\"\"\n        self.hass.states.set('test.object', 'happy')\n        self.hass.states.set('sensor.temperature', 10)\n        assert '10happy' == template.Template(\n            '{% for state in states %}{{ state.state }}{% endfor %}', self.hass\n            ).render()\n\n    def test_iterating_domain_states(self):\n        \"\"\"Test iterating domain states.\"\"\"\n        self.hass.states.set('test.object', 'happy')\n        self.hass.states.set('sensor.back_door', 'open')\n        self.hass.states.set('sensor.temperature', 10)\n        assert 'open10' == template.Template(\n            \"\"\"\n{% for state in states.sensor %}{{ state.state }}{% endfor %}\n                \"\"\"\n            , self.hass).render()\n\n    def test_float(self):\n        \"\"\"Test float.\"\"\"\n        self.hass.states.set('sensor.temperature', '12')\n        assert '12.0' == template.Template(\n            '{{ float(states.sensor.temperature.state) }}', self.hass).render()\n        assert 'True' == template.Template(\n            '{{ float(states.sensor.temperature.state) > 11 }}', self.hass\n            ).render()\n\n    def test_rounding_value(self):\n        \"\"\"Test rounding value.\"\"\"\n        self.hass.states.set('sensor.temperature', 12.78)\n        assert '12.8' == template.Template(\n            '{{ states.sensor.temperature.state | round(1) }}', self.hass\n            ).render()\n        assert '128' == template.Template(\n            '{{ states.sensor.temperature.state | multiply(10) | round }}',\n            self.hass).render()\n\n    def test_rounding_value_get_original_value_on_error(self):\n        \"\"\"Test rounding value get original value on error.\"\"\"\n        assert 'None' == template.Template('{{ None | round }}', self.hass\n            ).render()\n        assert 'no_number' == template.Template('{{ \"no_number\" | round }}',\n            self.hass).render()\n\n    def test_multiply(self):\n        \"\"\"Test multiply.\"\"\"\n        tests = {None: 'None', (10): '100', '\"abcd\"': 'abcd'}\n        for inp, out in tests.items():\n            assert out == template.Template(\n                '{{ %s | multiply(10) | round }}' % inp, self.hass).render()\n\n    def test_logarithm(self):\n        \"\"\"Test logarithm.\"\"\"\n        tests = [(4, 2, '2.0'), (1000, 10, '3.0'), (math.e, '', '1.0'), (\n            '\"invalid\"', '_', 'invalid'), (10, '\"invalid\"', '10.0')]\n        for value, base, expected in tests:\n            assert expected == template.Template(\n                '{{ %s | log(%s) | round(1) }}' % (value, base), self.hass\n                ).render()\n            assert expected == template.Template(\n                '{{ log(%s, %s) | round(1) }}' % (value, base), self.hass\n                ).render()\n\n    def test_sine(self):\n        \"\"\"Test sine.\"\"\"\n        tests = [(0, '0.0'), (math.pi / 2, '1.0'), (math.pi, '0.0'), (math.\n            pi * 1.5, '-1.0'), (math.pi / 10, '0.309')]\n        for value, expected in tests:\n            assert expected == template.Template(\n                '{{ %s | sin | round(3) }}' % value, self.hass).render()\n\n    def test_cos(self):\n        \"\"\"Test cosine.\"\"\"\n        tests = [(0, '1.0'), (math.pi / 2, '0.0'), (math.pi, '-1.0'), (math\n            .pi * 1.5, '-0.0'), (math.pi / 10, '0.951')]\n        for value, expected in tests:\n            assert expected == template.Template(\n                '{{ %s | cos | round(3) }}' % value, self.hass).render()\n\n    def test_tan(self):\n        \"\"\"Test tangent.\"\"\"\n        tests = [(0, '0.0'), (math.pi, '-0.0'), (math.pi / 180 * 45, '1.0'),\n            (math.pi / 180 * 90, '1.633123935319537e+16'), (math.pi / 180 *\n            135, '-1.0')]\n        for value, expected in tests:\n            assert expected == template.Template(\n                '{{ %s | tan | round(3) }}' % value, self.hass).render()\n\n    def test_sqrt(self):\n        \"\"\"Test square root.\"\"\"\n        tests = [(0, '0.0'), (1, '1.0'), (2, '1.414'), (10, '3.162'), (100,\n            '10.0')]\n        for value, expected in tests:\n            assert expected == template.Template(\n                '{{ %s | sqrt | round(3) }}' % value, self.hass).render()\n\n    def test_strptime(self):\n        \"\"\"Test the parse timestamp method.\"\"\"\n        tests = [('2016-10-19 15:22:05.588122 UTC',\n            '%Y-%m-%d %H:%M:%S.%f %Z', None), (\n            '2016-10-19 15:22:05.588122+0100', '%Y-%m-%d %H:%M:%S.%f%z',\n            None), ('2016-10-19 15:22:05.588122', '%Y-%m-%d %H:%M:%S.%f',\n            None), ('2016-10-19', '%Y-%m-%d', None), ('2016', '%Y', None),\n            ('15:22:05', '%H:%M:%S', None), ('1469119144', '%Y',\n            '1469119144'), ('invalid', '%Y', 'invalid')]\n        for inp, fmt, expected in tests:\n            if expected is None:\n                expected = datetime.strptime(inp, fmt)\n            temp = \"{{ strptime('%s', '%s') }}\" % (inp, fmt)\n            assert str(expected) == template.Template(temp, self.hass).render()\n\n    def test_timestamp_custom(self):\n        \"\"\"Test the timestamps to custom filter.\"\"\"\n        now = dt_util.utcnow()\n        tests = [(None, None, None, 'None'), (1469119144, None, True,\n            '2016-07-21 16:39:04'), (1469119144, '%Y', True, '2016'), (\n            1469119144, 'invalid', True, 'invalid'), (dt_util.as_timestamp(\n            now), None, False, now.strftime('%Y-%m-%d %H:%M:%S'))]\n        for inp, fmt, local, out in tests:\n            if fmt:\n                fil = \"timestamp_custom('{}')\".format(fmt)\n            elif fmt and local:\n                fil = \"timestamp_custom('{0}', {1})\".format(fmt, local)\n            else:\n                fil = 'timestamp_custom'\n            assert out == template.Template('{{ %s | %s }}' % (inp, fil),\n                self.hass).render()\n\n    def test_timestamp_local(self):\n        \"\"\"Test the timestamps to local filter.\"\"\"\n        tests = {None: 'None', (1469119144): '2016-07-21 16:39:04'}\n        for inp, out in tests.items():\n            assert out == template.Template('{{ %s | timestamp_local }}' %\n                inp, self.hass).render()\n\n    def test_min(self):\n        \"\"\"Test the min filter.\"\"\"\n        assert '1' == template.Template('{{ [1, 2, 3] | min }}', self.hass\n            ).render()\n\n    def test_max(self):\n        \"\"\"Test the max filter.\"\"\"\n        assert '3' == template.Template('{{ [1, 2, 3] | max }}', self.hass\n            ).render()\n\n    def test_base64_encode(self):\n        \"\"\"Test the base64_encode filter.\"\"\"\n        self.assertEqual('aG9tZWFzc2lzdGFudA==', template.Template(\n            '{{ \"homeassistant\" | base64_encode }}', self.hass).render())\n\n    def test_base64_decode(self):\n        \"\"\"Test the base64_decode filter.\"\"\"\n        self.assertEqual('homeassistant', template.Template(\n            '{{ \"aG9tZWFzc2lzdGFudA==\" | base64_decode }}', self.hass).render()\n            )\n\n    def test_ordinal(self):\n        \"\"\"Test the ordinal filter.\"\"\"\n        tests = [(1, '1st'), (2, '2nd'), (3, '3rd'), (4, '4th'), (5, '5th')]\n        for value, expected in tests:\n            self.assertEqual(expected, template.Template(\n                '{{ %s | ordinal }}' % value, self.hass).render())\n\n    def test_timestamp_utc(self):\n        \"\"\"Test the timestamps to local filter.\"\"\"\n        now = dt_util.utcnow()\n        tests = {None: 'None', (1469119144): '2016-07-21 16:39:04', dt_util\n            .as_timestamp(now): now.strftime('%Y-%m-%d %H:%M:%S')}\n        for inp, out in tests.items():\n            assert out == template.Template('{{ %s | timestamp_utc }}' %\n                inp, self.hass).render()\n\n    def test_as_timestamp(self):\n        \"\"\"Test the as_timestamp function.\"\"\"\n        assert 'None' == template.Template('{{ as_timestamp(\"invalid\") }}',\n            self.hass).render()\n        self.hass.mock = None\n        assert 'None' == template.Template('{{ as_timestamp(states.mock) }}',\n            self.hass).render()\n        tpl = (\n            '{{ as_timestamp(strptime(\"2024-02-03T09:10:24+0000\", \"%Y-%m-%dT%H:%M:%S%z\")) }}'\n            )\n        assert '1706951424.0' == template.Template(tpl, self.hass).render()\n\n    @patch.object(random, 'choice')\n    def test_random_every_time(self, test_choice):\n        \"\"\"Ensure the random filter runs every time, not just once.\"\"\"\n        tpl = template.Template('{{ [1,2] | random }}', self.hass)\n        test_choice.return_value = 'foo'\n        assert 'foo' == tpl.render()\n        test_choice.return_value = 'bar'\n        assert 'bar' == tpl.render()\n\n    def test_passing_vars_as_keywords(self):\n        \"\"\"Test passing variables as keywords.\"\"\"\n        assert '127' == template.Template('{{ hello }}', self.hass).render(\n            hello=127)\n\n    def test_passing_vars_as_vars(self):\n        \"\"\"Test passing variables as variables.\"\"\"\n        assert '127' == template.Template('{{ hello }}', self.hass).render({\n            'hello': 127})\n\n    def test_passing_vars_as_list(self):\n        \"\"\"Test passing variables as list.\"\"\"\n        assert \"['foo', 'bar']\" == template.render_complex(template.\n            Template('{{ hello }}', self.hass), {'hello': ['foo', 'bar']})\n\n    def test_passing_vars_as_list_element(self):\n        \"\"\"Test passing variables as list.\"\"\"\n        assert 'bar' == template.render_complex(template.Template(\n            '{{ hello[1] }}', self.hass), {'hello': ['foo', 'bar']})\n\n    def test_passing_vars_as_dict_element(self):\n        \"\"\"Test passing variables as list.\"\"\"\n        assert 'bar' == template.render_complex(template.Template(\n            '{{ hello.foo }}', self.hass), {'hello': {'foo': 'bar'}})\n\n    def test_passing_vars_as_dict(self):\n        \"\"\"Test passing variables as list.\"\"\"\n        assert \"{'foo': 'bar'}\" == template.render_complex(template.\n            Template('{{ hello }}', self.hass), {'hello': {'foo': 'bar'}})\n\n    def test_render_with_possible_json_value_with_valid_json(self):\n        \"\"\"Render with possible JSON value with valid JSON.\"\"\"\n        tpl = template.Template('{{ value_json.hello }}', self.hass)\n        assert 'world' == tpl.render_with_possible_json_value(\n            '{\"hello\": \"world\"}')\n\n    def test_render_with_possible_json_value_with_invalid_json(self):\n        \"\"\"Render with possible JSON value with invalid JSON.\"\"\"\n        tpl = template.Template('{{ value_json }}', self.hass)\n        assert '' == tpl.render_with_possible_json_value('{ I AM NOT JSON }')\n\n    def test_render_with_possible_json_value_with_template_error_value(self):\n        \"\"\"Render with possible JSON value with template error value.\"\"\"\n        tpl = template.Template('{{ non_existing.variable }}', self.hass)\n        assert '-' == tpl.render_with_possible_json_value('hello', '-')\n\n    def test_render_with_possible_json_value_with_missing_json_value(self):\n        \"\"\"Render with possible JSON value with unknown JSON object.\"\"\"\n        tpl = template.Template('{{ value_json.goodbye }}', self.hass)\n        assert '' == tpl.render_with_possible_json_value('{\"hello\": \"world\"}')\n\n    def test_render_with_possible_json_value_valid_with_is_defined(self):\n        \"\"\"Render with possible JSON value with known JSON object.\"\"\"\n        tpl = template.Template('{{ value_json.hello|is_defined }}', self.hass)\n        assert 'world' == tpl.render_with_possible_json_value(\n            '{\"hello\": \"world\"}')\n\n    def test_render_with_possible_json_value_undefined_json(self):\n        \"\"\"Render with possible JSON value with unknown JSON object.\"\"\"\n        tpl = template.Template('{{ value_json.bye|is_defined }}', self.hass)\n        assert '{\"hello\": \"world\"}' == tpl.render_with_possible_json_value(\n            '{\"hello\": \"world\"}')\n\n    def test_render_with_possible_json_value_undefined_json_error_value(self):\n        \"\"\"Render with possible JSON value with unknown JSON object.\"\"\"\n        tpl = template.Template('{{ value_json.bye|is_defined }}', self.hass)\n        assert '' == tpl.render_with_possible_json_value('{\"hello\": \"world\"}',\n            '')\n\n    def test_render_with_possible_json_value_non_string_value(self):\n        \"\"\"Render with possible JSON value with non-string value.\"\"\"\n        tpl = template.Template(\n            \"\"\"\n{{ strptime(value~'+0000', '%Y-%m-%d %H:%M:%S%z') }}\n            \"\"\"\n            , self.hass)\n        value = datetime(2019, 1, 18, 12, 13, 14)\n        expected = str(pytz.utc.localize(value))\n        assert expected == tpl.render_with_possible_json_value(value)\n\n    def test_raise_exception_on_error(self):\n        \"\"\"Test raising an exception on error.\"\"\"\n        with pytest.raises(TemplateError):\n            template.Template('{{ invalid_syntax').ensure_valid()\n\n    def test_if_state_exists(self):\n        \"\"\"Test if state exists works.\"\"\"\n        self.hass.states.set('test.object', 'available')\n        tpl = template.Template(\n            '{% if states.test.object %}exists{% else %}not exists{% endif %}',\n            self.hass)\n        assert 'exists' == tpl.render()\n\n    def test_is_state(self):\n        \"\"\"Test is_state method.\"\"\"\n        self.hass.states.set('test.object', 'available')\n        tpl = template.Template(\n            \"\"\"\n{% if is_state(\"test.object\", \"available\") %}yes{% else %}no{% endif %}\n            \"\"\"\n            , self.hass)\n        assert 'yes' == tpl.render()\n        tpl = template.Template(\n            '\\n{{ is_state(\"test.noobject\", \"available\") }}\\n            ',\n            self.hass)\n        assert 'False' == tpl.render()\n\n    def test_is_state_attr(self):\n        \"\"\"Test is_state_attr method.\"\"\"\n        self.hass.states.set('test.object', 'available', {'mode': 'on'})\n        tpl = template.Template(\n            \"\"\"\n{% if is_state_attr(\"test.object\", \"mode\", \"on\") %}yes{% else %}no{% endif %}\n                \"\"\"\n            , self.hass)\n        assert 'yes' == tpl.render()\n        tpl = template.Template(\n            \"\"\"\n{{ is_state_attr(\"test.noobject\", \"mode\", \"on\") }}\n                \"\"\"\n            , self.hass)\n        assert 'False' == tpl.render()\n\n    def test_state_attr(self):\n        \"\"\"Test state_attr method.\"\"\"\n        self.hass.states.set('test.object', 'available', {'mode': 'on'})\n        tpl = template.Template(\n            \"\"\"\n{% if state_attr(\"test.object\", \"mode\") == \"on\" %}yes{% else %}no{% endif %}\n                \"\"\"\n            , self.hass)\n        assert 'yes' == tpl.render()\n        tpl = template.Template(\n            \"\"\"\n{{ state_attr(\"test.noobject\", \"mode\") == None }}\n                \"\"\"\n            , self.hass)\n        assert 'True' == tpl.render()\n\n    def test_states_function(self):\n        \"\"\"Test using states as a function.\"\"\"\n        self.hass.states.set('test.object', 'available')\n        tpl = template.Template('{{ states(\"test.object\") }}', self.hass)\n        assert 'available' == tpl.render()\n        tpl2 = template.Template('{{ states(\"test.object2\") }}', self.hass)\n        assert 'unknown' == tpl2.render()\n\n    @patch(\n        'homeassistant.helpers.template.TemplateEnvironment.is_safe_callable',\n        return_value=True)\n    def test_now(self, mock_is_safe):\n        \"\"\"Test now method.\"\"\"\n        now = dt_util.now()\n        with patch.dict(template.ENV.globals, {'now': lambda : now}):\n            assert now.isoformat() == template.Template(\n                '{{ now().isoformat() }}', self.hass).render()\n\n    @patch(\n        'homeassistant.helpers.template.TemplateEnvironment.is_safe_callable',\n        return_value=True)\n    def test_utcnow(self, mock_is_safe):\n        \"\"\"Test utcnow method.\"\"\"\n        now = dt_util.utcnow()\n        with patch.dict(template.ENV.globals, {'utcnow': lambda : now}):\n            assert now.isoformat() == template.Template(\n                '{{ utcnow().isoformat() }}', self.hass).render()\n\n    def test_regex_match(self):\n        \"\"\"Test regex_match method.\"\"\"\n        tpl = template.Template(\n            \"\"\"\n{{ '123-456-7890' | regex_match('(\\\\\\\\d{3})-(\\\\\\\\d{3})-(\\\\\\\\d{4})') }}\n                \"\"\"\n            , self.hass)\n        assert 'True' == tpl.render()\n        tpl = template.Template(\n            \"\"\"\n{{ 'home assistant test' | regex_match('Home', True) }}\n                \"\"\"\n            , self.hass)\n        assert 'True' == tpl.render()\n        tpl = template.Template(\n            \"\"\"\n        {{ 'Another home assistant test' | regex_match('home') }}\n                        \"\"\"\n            , self.hass)\n        assert 'False' == tpl.render()\n\n    def test_regex_search(self):\n        \"\"\"Test regex_search method.\"\"\"\n        tpl = template.Template(\n            \"\"\"\n{{ '123-456-7890' | regex_search('(\\\\\\\\d{3})-(\\\\\\\\d{3})-(\\\\\\\\d{4})') }}\n                \"\"\"\n            , self.hass)\n        assert 'True' == tpl.render()\n        tpl = template.Template(\n            \"\"\"\n{{ 'home assistant test' | regex_search('Home', True) }}\n                \"\"\"\n            , self.hass)\n        assert 'True' == tpl.render()\n        tpl = template.Template(\n            \"\"\"\n        {{ 'Another home assistant test' | regex_search('home') }}\n                        \"\"\"\n            , self.hass)\n        assert 'True' == tpl.render()\n\n    def test_regex_replace(self):\n        \"\"\"Test regex_replace method.\"\"\"\n        tpl = template.Template(\n            \"\"\"\n{{ 'Hello World' | regex_replace('(Hello\\\\\\\\s)',) }}\n                \"\"\"\n            , self.hass)\n        assert 'World' == tpl.render()\n\n    def test_regex_findall_index(self):\n        \"\"\"Test regex_findall_index method.\"\"\"\n        tpl = template.Template(\n            \"\"\"\n{{ 'Flight from JFK to LHR' | regex_findall_index('([A-Z]{3})', 0) }}\n                \"\"\"\n            , self.hass)\n        assert 'JFK' == tpl.render()\n        tpl = template.Template(\n            \"\"\"\n{{ 'Flight from JFK to LHR' | regex_findall_index('([A-Z]{3})', 1) }}\n                \"\"\"\n            , self.hass)\n        assert 'LHR' == tpl.render()\n\n    def test_bitwise_and(self):\n        \"\"\"Test bitwise_and method.\"\"\"\n        tpl = template.Template('\\n{{ 8 | bitwise_and(8) }}\\n                ',\n            self.hass)\n        assert str(8 & 8) == tpl.render()\n        tpl = template.Template('\\n{{ 10 | bitwise_and(2) }}\\n                '\n            , self.hass)\n        assert str(10 & 2) == tpl.render()\n        tpl = template.Template('\\n{{ 8 | bitwise_and(2) }}\\n                ',\n            self.hass)\n        assert str(8 & 2) == tpl.render()\n\n    def test_bitwise_or(self):\n        \"\"\"Test bitwise_or method.\"\"\"\n        tpl = template.Template('\\n{{ 8 | bitwise_or(8) }}\\n                ',\n            self.hass)\n        assert str(8 | 8) == tpl.render()\n        tpl = template.Template('\\n{{ 10 | bitwise_or(2) }}\\n                ',\n            self.hass)\n        assert str(10 | 2) == tpl.render()\n        tpl = template.Template('\\n{{ 8 | bitwise_or(2) }}\\n                ',\n            self.hass)\n        assert str(8 | 2) == tpl.render()\n\n    def test_distance_function_with_1_state(self):\n        \"\"\"Test distance function with 1 state.\"\"\"\n        self.hass.states.set('test.object', 'happy', {'latitude': 32.87336,\n            'longitude': -117.22943})\n        tpl = template.Template('{{ distance(states.test.object) | round }}',\n            self.hass)\n        assert '187' == tpl.render()\n\n    def test_distance_function_with_2_states(self):\n        \"\"\"Test distance function with 2 states.\"\"\"\n        self.hass.states.set('test.object', 'happy', {'latitude': 32.87336,\n            'longitude': -117.22943})\n        self.hass.states.set('test.object_2', 'happy', {'latitude': self.\n            hass.config.latitude, 'longitude': self.hass.config.longitude})\n        tpl = template.Template(\n            '{{ distance(states.test.object, states.test.object_2) | round }}',\n            self.hass)\n        assert '187' == tpl.render()\n\n    def test_distance_function_with_1_coord(self):\n        \"\"\"Test distance function with 1 coord.\"\"\"\n        tpl = template.Template(\n            '{{ distance(\"32.87336\", \"-117.22943\") | round }}', self.hass)\n        assert '187' == tpl.render()\n\n    def test_distance_function_with_2_coords(self):\n        \"\"\"Test distance function with 2 coords.\"\"\"\n        assert '187' == template.Template(\n            '{{ distance(\"32.87336\", \"-117.22943\", %s, %s) | round }}' % (\n            self.hass.config.latitude, self.hass.config.longitude), self.hass\n            ).render()\n\n    def test_distance_function_with_1_state_1_coord(self):\n        \"\"\"Test distance function with 1 state 1 coord.\"\"\"\n        self.hass.states.set('test.object_2', 'happy', {'latitude': self.\n            hass.config.latitude, 'longitude': self.hass.config.longitude})\n        tpl = template.Template(\n            '{{ distance(\"32.87336\", \"-117.22943\", states.test.object_2) | round }}'\n            , self.hass)\n        assert '187' == tpl.render()\n        tpl2 = template.Template(\n            '{{ distance(states.test.object_2, \"32.87336\", \"-117.22943\") | round }}'\n            , self.hass)\n        assert '187' == tpl2.render()\n\n    def test_distance_function_return_None_if_invalid_state(self):\n        \"\"\"Test distance function return None if invalid state.\"\"\"\n        self.hass.states.set('test.object_2', 'happy', {'latitude': 10})\n        tpl = template.Template('{{ distance(states.test.object_2) | round }}',\n            self.hass)\n        assert 'None' == tpl.render()\n\n    def test_distance_function_return_None_if_invalid_coord(self):\n        \"\"\"Test distance function return None if invalid coord.\"\"\"\n        assert 'None' == template.Template('{{ distance(\"123\", \"abc\") }}',\n            self.hass).render()\n        assert 'None' == template.Template('{{ distance(\"123\") }}', self.hass\n            ).render()\n        self.hass.states.set('test.object_2', 'happy', {'latitude': self.\n            hass.config.latitude, 'longitude': self.hass.config.longitude})\n        tpl = template.Template('{{ distance(\"123\", states.test_object_2) }}',\n            self.hass)\n        assert 'None' == tpl.render()\n\n    def test_distance_function_with_2_entity_ids(self):\n        \"\"\"Test distance function with 2 entity ids.\"\"\"\n        self.hass.states.set('test.object', 'happy', {'latitude': 32.87336,\n            'longitude': -117.22943})\n        self.hass.states.set('test.object_2', 'happy', {'latitude': self.\n            hass.config.latitude, 'longitude': self.hass.config.longitude})\n        tpl = template.Template(\n            '{{ distance(\"test.object\", \"test.object_2\") | round }}', self.hass\n            )\n        assert '187' == tpl.render()\n\n    def test_distance_function_with_1_entity_1_coord(self):\n        \"\"\"Test distance function with 1 entity_id and 1 coord.\"\"\"\n        self.hass.states.set('test.object', 'happy', {'latitude': self.hass\n            .config.latitude, 'longitude': self.hass.config.longitude})\n        tpl = template.Template(\n            '{{ distance(\"test.object\", \"32.87336\", \"-117.22943\") | round }}',\n            self.hass)\n        assert '187' == tpl.render()\n\n    def test_closest_function_home_vs_domain(self):\n        \"\"\"Test closest function home vs domain.\"\"\"\n        self.hass.states.set('test_domain.object', 'happy', {'latitude': \n            self.hass.config.latitude + 0.1, 'longitude': self.hass.config.\n            longitude + 0.1})\n        self.hass.states.set('not_test_domain.but_closer', 'happy', {\n            'latitude': self.hass.config.latitude, 'longitude': self.hass.\n            config.longitude})\n        assert 'test_domain.object' == template.Template(\n            '{{ closest(states.test_domain).entity_id }}', self.hass).render()\n\n    def test_closest_function_home_vs_all_states(self):\n        \"\"\"Test closest function home vs all states.\"\"\"\n        self.hass.states.set('test_domain.object', 'happy', {'latitude': \n            self.hass.config.latitude + 0.1, 'longitude': self.hass.config.\n            longitude + 0.1})\n        self.hass.states.set('test_domain_2.and_closer', 'happy', {\n            'latitude': self.hass.config.latitude, 'longitude': self.hass.\n            config.longitude})\n        assert 'test_domain_2.and_closer' == template.Template(\n            '{{ closest(states).entity_id }}', self.hass).render()\n\n    def test_closest_function_home_vs_group_entity_id(self):\n        \"\"\"Test closest function home vs group entity id.\"\"\"\n        self.hass.states.set('test_domain.object', 'happy', {'latitude': \n            self.hass.config.latitude + 0.1, 'longitude': self.hass.config.\n            longitude + 0.1})\n        self.hass.states.set('not_in_group.but_closer', 'happy', {\n            'latitude': self.hass.config.latitude, 'longitude': self.hass.\n            config.longitude})\n        group.Group.create_group(self.hass, 'location group', [\n            'test_domain.object'])\n        assert 'test_domain.object' == template.Template(\n            '{{ closest(\"group.location_group\").entity_id }}', self.hass\n            ).render()\n\n    def test_closest_function_home_vs_group_state(self):\n        \"\"\"Test closest function home vs group state.\"\"\"\n        self.hass.states.set('test_domain.object', 'happy', {'latitude': \n            self.hass.config.latitude + 0.1, 'longitude': self.hass.config.\n            longitude + 0.1})\n        self.hass.states.set('not_in_group.but_closer', 'happy', {\n            'latitude': self.hass.config.latitude, 'longitude': self.hass.\n            config.longitude})\n        group.Group.create_group(self.hass, 'location group', [\n            'test_domain.object'])\n        assert 'test_domain.object' == template.Template(\n            '{{ closest(states.group.location_group).entity_id }}', self.hass\n            ).render()\n\n    def test_closest_function_to_coord(self):\n        \"\"\"Test closest function to coord.\"\"\"\n        self.hass.states.set('test_domain.closest_home', 'happy', {\n            'latitude': self.hass.config.latitude + 0.1, 'longitude': self.\n            hass.config.longitude + 0.1})\n        self.hass.states.set('test_domain.closest_zone', 'happy', {\n            'latitude': self.hass.config.latitude + 0.2, 'longitude': self.\n            hass.config.longitude + 0.2})\n        self.hass.states.set('zone.far_away', 'zoning', {'latitude': self.\n            hass.config.latitude + 0.3, 'longitude': self.hass.config.\n            longitude + 0.3})\n        tpl = template.Template(\n            '{{ closest(\"%s\", %s, states.test_domain).entity_id }}' % (self\n            .hass.config.latitude + 0.3, self.hass.config.longitude + 0.3),\n            self.hass)\n        assert 'test_domain.closest_zone' == tpl.render()\n\n    def test_closest_function_to_entity_id(self):\n        \"\"\"Test closest function to entity id.\"\"\"\n        self.hass.states.set('test_domain.closest_home', 'happy', {\n            'latitude': self.hass.config.latitude + 0.1, 'longitude': self.\n            hass.config.longitude + 0.1})\n        self.hass.states.set('test_domain.closest_zone', 'happy', {\n            'latitude': self.hass.config.latitude + 0.2, 'longitude': self.\n            hass.config.longitude + 0.2})\n        self.hass.states.set('zone.far_away', 'zoning', {'latitude': self.\n            hass.config.latitude + 0.3, 'longitude': self.hass.config.\n            longitude + 0.3})\n        assert 'test_domain.closest_zone' == template.Template(\n            '{{ closest(\"zone.far_away\", states.test_domain).entity_id }}',\n            self.hass).render()\n\n    def test_closest_function_to_state(self):\n        \"\"\"Test closest function to state.\"\"\"\n        self.hass.states.set('test_domain.closest_home', 'happy', {\n            'latitude': self.hass.config.latitude + 0.1, 'longitude': self.\n            hass.config.longitude + 0.1})\n        self.hass.states.set('test_domain.closest_zone', 'happy', {\n            'latitude': self.hass.config.latitude + 0.2, 'longitude': self.\n            hass.config.longitude + 0.2})\n        self.hass.states.set('zone.far_away', 'zoning', {'latitude': self.\n            hass.config.latitude + 0.3, 'longitude': self.hass.config.\n            longitude + 0.3})\n        assert 'test_domain.closest_zone' == template.Template(\n            '{{ closest(states.zone.far_away, states.test_domain).entity_id }}'\n            , self.hass).render()\n\n    def test_closest_function_invalid_state(self):\n        \"\"\"Test closest function invalid state.\"\"\"\n        self.hass.states.set('test_domain.closest_home', 'happy', {\n            'latitude': self.hass.config.latitude + 0.1, 'longitude': self.\n            hass.config.longitude + 0.1})\n        for state in ('states.zone.non_existing', '\"zone.non_existing\"'):\n            assert 'None' == template.Template('{{ closest(%s, states) }}' %\n                state, self.hass).render()\n\n    def test_closest_function_state_with_invalid_location(self):\n        \"\"\"Test closest function state with invalid location.\"\"\"\n        self.hass.states.set('test_domain.closest_home', 'happy', {\n            'latitude': 'invalid latitude', 'longitude': self.hass.config.\n            longitude + 0.1})\n        assert 'None' == template.Template(\n            '{{ closest(states.test_domain.closest_home, states) }}', self.hass\n            ).render()\n\n    def test_closest_function_invalid_coordinates(self):\n        \"\"\"Test closest function invalid coordinates.\"\"\"\n        self.hass.states.set('test_domain.closest_home', 'happy', {\n            'latitude': self.hass.config.latitude + 0.1, 'longitude': self.\n            hass.config.longitude + 0.1})\n        assert 'None' == template.Template(\n            '{{ closest(\"invalid\", \"coord\", states) }}', self.hass).render()\n\n    def test_closest_function_no_location_states(self):\n        \"\"\"Test closest function without location states.\"\"\"\n        assert '' == template.Template('{{ closest(states).entity_id }}',\n            self.hass).render()\n\n    def test_extract_entities_none_exclude_stuff(self):\n        \"\"\"Test extract entities function with none or exclude stuff.\"\"\"\n        assert [] == template.extract_entities(None)\n        assert [] == template.extract_entities('mdi:water')\n        assert MATCH_ALL == template.extract_entities(\n            '{{ closest(states.zone.far_away, states.test_domain).entity_id }}'\n            )\n        assert MATCH_ALL == template.extract_entities(\n            '{{ distance(\"123\", states.test_object_2) }}')\n\n    def test_extract_entities_no_match_entities(self):\n        \"\"\"Test extract entities function with none entities stuff.\"\"\"\n        assert MATCH_ALL == template.extract_entities(\n            \"{{ value_json.tst | timestamp_custom('%Y' True) }}\")\n        assert MATCH_ALL == template.extract_entities(\n            \"\"\"\n{% for state in states.sensor %}\n  {{ state.entity_id }}={{ state.state }},d\n{% endfor %}\n            \"\"\"\n            )\n\n    def test_extract_entities_match_entities(self):\n        \"\"\"Test extract entities function with entities stuff.\"\"\"\n        assert ['device_tracker.phone_1'] == template.extract_entities(\n            \"\"\"\n{% if is_state('device_tracker.phone_1', 'home') %}\n    Ha, Hercules is home!\n{% else %}\n    Hercules is at {{ states('device_tracker.phone_1') }}.\n{% endif %}\n            \"\"\"\n            )\n        assert ['binary_sensor.garage_door'] == template.extract_entities(\n            \"\"\"\n{{ as_timestamp(states.binary_sensor.garage_door.last_changed) }}\n            \"\"\"\n            )\n        assert ['binary_sensor.garage_door'] == template.extract_entities(\n            \"\"\"\n{{ states(\"binary_sensor.garage_door\") }}\n            \"\"\")\n        assert ['device_tracker.phone_2'] == template.extract_entities(\n            \"\"\"\n{{ is_state_attr('device_tracker.phone_2', 'battery', 40) }}\n            \"\"\"\n            )\n        assert sorted(['device_tracker.phone_1', 'device_tracker.phone_2']\n            ) == sorted(template.extract_entities(\n            \"\"\"\n{% if is_state('device_tracker.phone_1', 'home') %}\n    Ha, Hercules is home!\n{% elif states.device_tracker.phone_2.attributes.battery < 40 %}\n    Hercules you power goes done!.\n{% endif %}\n            \"\"\"\n            ))\n        assert sorted(['sensor.pick_humidity', 'sensor.pick_temperature']\n            ) == sorted(template.extract_entities(\n            \"\"\"\n{{\n    states.sensor.pick_temperature.state ~ \u201e\u00b0C (\u201c ~\n    states.sensor.pick_humidity.state ~ \u201e %\u201c\n}}\n            \"\"\"\n            ))\n        assert sorted(['sensor.luftfeuchtigkeit_mean',\n            'input_number.luftfeuchtigkeit']) == sorted(template.\n            extract_entities(\n            \"{% if (states('sensor.luftfeuchtigkeit_mean') | int) > (states('input_number.luftfeuchtigkeit') | int +1.5) %}true{% endif %}\"\n            ))\n\n    def test_extract_entities_with_variables(self):\n        \"\"\"Test extract entities function with variables and entities stuff.\"\"\"\n        assert ['input_boolean.switch'] == template.extract_entities(\n            \"{{ is_state('input_boolean.switch', 'off') }}\", {})\n        assert ['trigger.entity_id'] == template.extract_entities(\n            \"{{ is_state(trigger.entity_id, 'off') }}\", {})\n        assert MATCH_ALL == template.extract_entities(\n            \"{{ is_state(data, 'off') }}\", {})\n        assert ['input_boolean.switch'] == template.extract_entities(\n            \"{{ is_state(data, 'off') }}\", {'data': 'input_boolean.switch'})\n        assert ['input_boolean.switch'] == template.extract_entities(\n            \"{{ is_state(trigger.entity_id, 'off') }}\", {'trigger': {\n            'entity_id': 'input_boolean.switch'}})\n        assert MATCH_ALL == template.extract_entities(\n            \"{{ is_state('media_player.' ~ where , 'playing') }}\", {'where':\n            'livingroom'})\n\n    def test_jinja_namespace(self):\n        \"\"\"Test Jinja's namespace command can be used.\"\"\"\n        test_template = template.Template(\n            \"{% set ns = namespace(a_key='') %}{% set ns.a_key = states.sensor.dummy.state %}{{ ns.a_key }}\"\n            , self.hass)\n        self.hass.states.set('sensor.dummy', 'a value')\n        assert 'a value' == test_template.render()\n        self.hass.states.set('sensor.dummy', 'another value')\n        assert 'another value' == test_template.render()\n",
                        "belong_class_name": "TestHelpersTemplate",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "render_with_possible_json_value",
                        "function_content": "def render_with_possible_json_value(self, value, error_value=_SENTINEL):\n    \"\"\"Render template with value exposed.\n\n        If valid JSON will expose value_json too.\n        \"\"\"\n    return run_callback_threadsafe(self.hass.loop, self.\n        async_render_with_possible_json_value, value, error_value).result()\n",
                        "function_parameter": "(self, value, error_value=_SENTINEL)",
                        "belong_class_content": "class Template:\n    \"\"\"Class to hold a template and manage caching and rendering.\"\"\"\n\n    def __init__(self, template, hass=None):\n        \"\"\"Instantiate a template.\"\"\"\n        if not isinstance(template, str):\n            raise TypeError('Expected template to be a string')\n        self.template = template\n        self._compiled_code = None\n        self._compiled = None\n        self.hass = hass\n\n    def ensure_valid(self):\n        \"\"\"Return if template is valid.\"\"\"\n        if self._compiled_code is not None:\n            return\n        try:\n            self._compiled_code = ENV.compile(self.template)\n        except jinja2.exceptions.TemplateSyntaxError as err:\n            raise TemplateError(err)\n\n    def extract_entities(self, variables=None):\n        \"\"\"Extract all entities for state_changed listener.\"\"\"\n        return extract_entities(self.template, variables)\n\n    def render(self, variables: TemplateVarsType=None, **kwargs):\n        \"\"\"Render given template.\"\"\"\n        if variables is not None:\n            kwargs.update(variables)\n        return run_callback_threadsafe(self.hass.loop, self.async_render,\n            kwargs).result()\n\n    def async_render(self, variables: TemplateVarsType=None, **kwargs) ->str:\n        \"\"\"Render given template.\n\n        This method must be run in the event loop.\n        \"\"\"\n        if self._compiled is None:\n            self._ensure_compiled()\n        if variables is not None:\n            kwargs.update(variables)\n        try:\n            return self._compiled.render(kwargs).strip()\n        except jinja2.TemplateError as err:\n            raise TemplateError(err)\n\n    def render_with_possible_json_value(self, value, error_value=_SENTINEL):\n        \"\"\"Render template with value exposed.\n\n        If valid JSON will expose value_json too.\n        \"\"\"\n        return run_callback_threadsafe(self.hass.loop, self.\n            async_render_with_possible_json_value, value, error_value).result()\n\n    def async_render_with_possible_json_value(self, value, error_value=\n        _SENTINEL, variables=None):\n        \"\"\"Render template with value exposed.\n\n        If valid JSON will expose value_json too.\n\n        This method must be run in the event loop.\n        \"\"\"\n        if self._compiled is None:\n            self._ensure_compiled()\n        variables = dict(variables or {})\n        variables['value'] = value\n        try:\n            variables['value_json'] = json.loads(value)\n        except ValueError:\n            pass\n        try:\n            return self._compiled.render(variables).strip()\n        except jinja2.TemplateError as ex:\n            if error_value is _SENTINEL:\n                _LOGGER.error(\n                    'Error parsing value: %s (value: %s, template: %s)', ex,\n                    value, self.template)\n            return value if error_value is _SENTINEL else error_value\n\n    def _ensure_compiled(self):\n        \"\"\"Bind a template to a specific hass instance.\"\"\"\n        self.ensure_valid()\n        assert self.hass is not None, 'hass variable not set on template'\n        template_methods = TemplateMethods(self.hass)\n        global_vars = ENV.make_globals({'closest': template_methods.closest,\n            'distance': template_methods.distance, 'is_state': self.hass.\n            states.is_state, 'is_state_attr': template_methods.\n            is_state_attr, 'state_attr': template_methods.state_attr,\n            'states': AllStates(self.hass)})\n        self._compiled = jinja2.Template.from_code(ENV, self._compiled_code,\n            global_vars, None)\n        return self._compiled\n\n    def __eq__(self, other):\n        \"\"\"Compare template with another.\"\"\"\n        return (self.__class__ == other.__class__ and self.template ==\n            other.template and self.hass == other.hass)\n",
                        "belong_class_name": "Template",
                        "belong_class_init": "def __init__(self, template, hass=None):\n    \"\"\"Instantiate a template.\"\"\"\n    if not isinstance(template, str):\n        raise TypeError('Expected template to be a string')\n    self.template = template\n    self._compiled_code = None\n    self._compiled = None\n    self.hass = hass\n"
                    }
                ]
            ]
        },
        "core-21734_dsmr": {
            "pytest tests/components/sensor/test_dsmr.py::test_derivative": [
                [
                    {
                        "function_name": "test_derivative",
                        "function_content": "@asyncio.coroutine\ndef test_derivative():\n    \"\"\"Test calculation of derivative value.\"\"\"\n    from dsmr_parser.objects import MBusObject\n    config = {'platform': 'dsmr'}\n    entity = DerivativeDSMREntity('test', '1.0.0', config)\n    yield from entity.async_update()\n    assert entity.state is None, 'initial state not unknown'\n    entity.telegram = {'1.0.0': MBusObject([{'value': datetime.datetime.\n        fromtimestamp(1551642213)}, {'value': Decimal(745.695), 'unit': 'm3'}])\n        }\n    yield from entity.async_update()\n    assert entity.state is None, 'state after first update should still be unknown'\n    entity.telegram = {'1.0.0': MBusObject([{'value': datetime.datetime.\n        fromtimestamp(1551642543)}, {'value': Decimal(745.698), 'unit': 'm3'}])\n        }\n    yield from entity.async_update()\n    assert abs(entity.state - 0.033\n        ) < 1e-05, 'state should be hourly usage calculated from first and second update'\n    assert entity.unit_of_measurement == 'm3/h'\n",
                        "function_parameter": "()",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ]
            ]
        }
    },
    "kivy": {},
    "luigi": {
        "luigi-1836_pig": {
            "PYTHONPATH=./ pytest test/contrib/pig_test.py": [
                [
                    {
                        "function_name": "test_run__fail",
                        "function_content": "@patch('subprocess.Popen')\ndef test_run__fail(self, mock):\n    arglist_result = []\n    p = subprocess.Popen\n    subprocess.Popen = _get_fake_Popen(arglist_result, 1)\n    try:\n        job = SimpleTestJob()\n        job.run()\n        self.assertEqual([['/usr/share/pig/bin/pig', '-f',\n            'my_simple_pig_script.pig']], arglist_result)\n    except PigJobError as e:\n        p = e\n        self.assertEqual('stderr', p.err)\n    else:\n        self.fail('Should have thrown PigJobError')\n    finally:\n        subprocess.Popen = p\n",
                        "function_parameter": "(self, mock)",
                        "belong_class_content": "class SimplePigTest(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    @patch('subprocess.Popen')\n    def test_run__success(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 0)\n        try:\n            job = SimpleTestJob()\n            job.run()\n            self.assertEqual([['/usr/share/pig/bin/pig', '-f',\n                'my_simple_pig_script.pig']], arglist_result)\n        finally:\n            subprocess.Popen = p\n\n    @patch('subprocess.Popen')\n    def test_run__fail(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 1)\n        try:\n            job = SimpleTestJob()\n            job.run()\n            self.assertEqual([['/usr/share/pig/bin/pig', '-f',\n                'my_simple_pig_script.pig']], arglist_result)\n        except PigJobError as e:\n            p = e\n            self.assertEqual('stderr', p.err)\n        else:\n            self.fail('Should have thrown PigJobError')\n        finally:\n            subprocess.Popen = p\n",
                        "belong_class_name": "SimplePigTest",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "run",
                        "function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile()\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": "",
                        "called_function_name": "track_and_progress",
                        "called_function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "called_arguments": "(cmd)",
                        "called_function_parameter": "(self, cmd)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "track_and_progress",
                        "function_content": "def track_and_progress(self, cmd):\n    temp_stdout = tempfile.TemporaryFile()\n    env = os.environ.copy()\n    env['PIG_HOME'] = self.pig_home()\n    for k, v in six.iteritems(self.pig_env_vars()):\n        env[k] = v\n    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, env=env)\n    reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n    err_lines = []\n    with PigRunContext():\n        while proc.poll() is None:\n            ret = select.select(reads, [], [])\n            for fd in ret[0]:\n                if fd == proc.stderr.fileno():\n                    line = proc.stderr.readline().decode('utf8')\n                    err_lines.append(line)\n                if fd == proc.stdout.fileno():\n                    line = proc.stdout.readline().decode('utf8')\n                    temp_stdout.write(line)\n            err_line = line.lower()\n            if err_line.find('More information at:') != -1:\n                logger.info(err_line.split('more information at: ')[-1].strip()\n                    )\n            if err_line.find(' - '):\n                t = err_line.split(' - ')[-1].strip()\n                if t != '':\n                    logger.info(t)\n    err = ''.join(err_lines + [an_err_line.decode('utf8') for an_err_line in\n        proc.stderr])\n    if proc.returncode == 0:\n        logger.info('Job completed successfully!')\n    else:\n        logger.error('Error when running script:\\n%s', self.pig_script_path())\n        logger.error(err)\n        raise PigJobError('Pig script failed with return value: %s' % (proc\n            .returncode,), err=err)\n",
                        "function_parameter": "(self, cmd)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile()\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": ""
                    }
                ],
                [
                    {
                        "function_name": "test_run__success",
                        "function_content": "@patch('subprocess.Popen')\ndef test_run__success(self, mock):\n    arglist_result = []\n    p = subprocess.Popen\n    subprocess.Popen = _get_fake_Popen(arglist_result, 0)\n    try:\n        job = SimpleTestJob()\n        job.run()\n        self.assertEqual([['/usr/share/pig/bin/pig', '-f',\n            'my_simple_pig_script.pig']], arglist_result)\n    finally:\n        subprocess.Popen = p\n",
                        "function_parameter": "(self, mock)",
                        "belong_class_content": "class SimplePigTest(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    @patch('subprocess.Popen')\n    def test_run__success(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 0)\n        try:\n            job = SimpleTestJob()\n            job.run()\n            self.assertEqual([['/usr/share/pig/bin/pig', '-f',\n                'my_simple_pig_script.pig']], arglist_result)\n        finally:\n            subprocess.Popen = p\n\n    @patch('subprocess.Popen')\n    def test_run__fail(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 1)\n        try:\n            job = SimpleTestJob()\n            job.run()\n            self.assertEqual([['/usr/share/pig/bin/pig', '-f',\n                'my_simple_pig_script.pig']], arglist_result)\n        except PigJobError as e:\n            p = e\n            self.assertEqual('stderr', p.err)\n        else:\n            self.fail('Should have thrown PigJobError')\n        finally:\n            subprocess.Popen = p\n",
                        "belong_class_name": "SimplePigTest",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "run",
                        "function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile()\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": "",
                        "called_function_name": "track_and_progress",
                        "called_function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "called_arguments": "(cmd)",
                        "called_function_parameter": "(self, cmd)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "track_and_progress",
                        "function_content": "def track_and_progress(self, cmd):\n    temp_stdout = tempfile.TemporaryFile()\n    env = os.environ.copy()\n    env['PIG_HOME'] = self.pig_home()\n    for k, v in six.iteritems(self.pig_env_vars()):\n        env[k] = v\n    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, env=env)\n    reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n    err_lines = []\n    with PigRunContext():\n        while proc.poll() is None:\n            ret = select.select(reads, [], [])\n            for fd in ret[0]:\n                if fd == proc.stderr.fileno():\n                    line = proc.stderr.readline().decode('utf8')\n                    err_lines.append(line)\n                if fd == proc.stdout.fileno():\n                    line = proc.stdout.readline().decode('utf8')\n                    temp_stdout.write(line)\n            err_line = line.lower()\n            if err_line.find('More information at:') != -1:\n                logger.info(err_line.split('more information at: ')[-1].strip()\n                    )\n            if err_line.find(' - '):\n                t = err_line.split(' - ')[-1].strip()\n                if t != '':\n                    logger.info(t)\n    err = ''.join(err_lines + [an_err_line.decode('utf8') for an_err_line in\n        proc.stderr])\n    if proc.returncode == 0:\n        logger.info('Job completed successfully!')\n    else:\n        logger.error('Error when running script:\\n%s', self.pig_script_path())\n        logger.error(err)\n        raise PigJobError('Pig script failed with return value: %s' % (proc\n            .returncode,), err=err)\n",
                        "function_parameter": "(self, cmd)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile()\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": ""
                    }
                ],
                [
                    {
                        "function_name": "test_run__fail",
                        "function_content": "@patch('subprocess.Popen')\ndef test_run__fail(self, mock):\n    arglist_result = []\n    p = subprocess.Popen\n    subprocess.Popen = _get_fake_Popen(arglist_result, 1)\n    with tempfile.NamedTemporaryFile(delete=False\n        ) as param_file_mock, tempfile.NamedTemporaryFile(delete=False\n        ) as prop_file_mock, patch(\n        'luigi.contrib.pig.tempfile.NamedTemporaryFile', side_effect=[\n        param_file_mock, prop_file_mock]):\n        try:\n            job = ComplexTestJob()\n            job.run()\n        except PigJobError as e:\n            p = e\n            self.assertEqual('stderr', p.err)\n            self.assertEqual([['/usr/share/pig/bin/pig', '-x', 'local',\n                '-param_file', param_file_mock.name, '-propertyFile',\n                prop_file_mock.name, '-f', 'my_complex_pig_script.pig']],\n                arglist_result)\n            with open(param_file_mock.name) as pparams_file:\n                pparams = pparams_file.readlines()\n                self.assertEqual(1, len(pparams))\n                self.assertEqual('YOUR_PARAM_NAME=Your param value\\n',\n                    pparams[0])\n            with open(prop_file_mock.name) as pprops_file:\n                pprops = pprops_file.readlines()\n                self.assertEqual(1, len(pprops))\n                self.assertEqual('pig.additional.jars=/path/to/your/jar\\n',\n                    pprops[0])\n        else:\n            self.fail('Should have thrown PigJobError')\n        finally:\n            subprocess.Popen = p\n",
                        "function_parameter": "(self, mock)",
                        "belong_class_content": "class ComplexPigTest(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    @patch('subprocess.Popen')\n    def test_run__success(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 0)\n        with tempfile.NamedTemporaryFile(delete=False\n            ) as param_file_mock, tempfile.NamedTemporaryFile(delete=False\n            ) as prop_file_mock, patch(\n            'luigi.contrib.pig.tempfile.NamedTemporaryFile', side_effect=[\n            param_file_mock, prop_file_mock]):\n            try:\n                job = ComplexTestJob()\n                job.run()\n                self.assertEqual([['/usr/share/pig/bin/pig', '-x', 'local',\n                    '-param_file', param_file_mock.name, '-propertyFile',\n                    prop_file_mock.name, '-f', 'my_complex_pig_script.pig']\n                    ], arglist_result)\n                with open(param_file_mock.name) as pparams_file:\n                    pparams = pparams_file.readlines()\n                    self.assertEqual(1, len(pparams))\n                    self.assertEqual('YOUR_PARAM_NAME=Your param value\\n',\n                        pparams[0])\n                with open(prop_file_mock.name) as pprops_file:\n                    pprops = pprops_file.readlines()\n                    self.assertEqual(1, len(pprops))\n                    self.assertEqual('pig.additional.jars=/path/to/your/jar\\n',\n                        pprops[0])\n            finally:\n                subprocess.Popen = p\n\n    @patch('subprocess.Popen')\n    def test_run__fail(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 1)\n        with tempfile.NamedTemporaryFile(delete=False\n            ) as param_file_mock, tempfile.NamedTemporaryFile(delete=False\n            ) as prop_file_mock, patch(\n            'luigi.contrib.pig.tempfile.NamedTemporaryFile', side_effect=[\n            param_file_mock, prop_file_mock]):\n            try:\n                job = ComplexTestJob()\n                job.run()\n            except PigJobError as e:\n                p = e\n                self.assertEqual('stderr', p.err)\n                self.assertEqual([['/usr/share/pig/bin/pig', '-x', 'local',\n                    '-param_file', param_file_mock.name, '-propertyFile',\n                    prop_file_mock.name, '-f', 'my_complex_pig_script.pig']\n                    ], arglist_result)\n                with open(param_file_mock.name) as pparams_file:\n                    pparams = pparams_file.readlines()\n                    self.assertEqual(1, len(pparams))\n                    self.assertEqual('YOUR_PARAM_NAME=Your param value\\n',\n                        pparams[0])\n                with open(prop_file_mock.name) as pprops_file:\n                    pprops = pprops_file.readlines()\n                    self.assertEqual(1, len(pprops))\n                    self.assertEqual('pig.additional.jars=/path/to/your/jar\\n',\n                        pprops[0])\n            else:\n                self.fail('Should have thrown PigJobError')\n            finally:\n                subprocess.Popen = p\n",
                        "belong_class_name": "ComplexPigTest",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "run",
                        "function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile()\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": "",
                        "called_function_name": "track_and_progress",
                        "called_function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "called_arguments": "(cmd)",
                        "called_function_parameter": "(self, cmd)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "track_and_progress",
                        "function_content": "def track_and_progress(self, cmd):\n    temp_stdout = tempfile.TemporaryFile()\n    env = os.environ.copy()\n    env['PIG_HOME'] = self.pig_home()\n    for k, v in six.iteritems(self.pig_env_vars()):\n        env[k] = v\n    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, env=env)\n    reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n    err_lines = []\n    with PigRunContext():\n        while proc.poll() is None:\n            ret = select.select(reads, [], [])\n            for fd in ret[0]:\n                if fd == proc.stderr.fileno():\n                    line = proc.stderr.readline().decode('utf8')\n                    err_lines.append(line)\n                if fd == proc.stdout.fileno():\n                    line = proc.stdout.readline().decode('utf8')\n                    temp_stdout.write(line)\n            err_line = line.lower()\n            if err_line.find('More information at:') != -1:\n                logger.info(err_line.split('more information at: ')[-1].strip()\n                    )\n            if err_line.find(' - '):\n                t = err_line.split(' - ')[-1].strip()\n                if t != '':\n                    logger.info(t)\n    err = ''.join(err_lines + [an_err_line.decode('utf8') for an_err_line in\n        proc.stderr])\n    if proc.returncode == 0:\n        logger.info('Job completed successfully!')\n    else:\n        logger.error('Error when running script:\\n%s', self.pig_script_path())\n        logger.error(err)\n        raise PigJobError('Pig script failed with return value: %s' % (proc\n            .returncode,), err=err)\n",
                        "function_parameter": "(self, cmd)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile()\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": ""
                    }
                ],
                [
                    {
                        "function_name": "test_run__success",
                        "function_content": "@patch('subprocess.Popen')\ndef test_run__success(self, mock):\n    arglist_result = []\n    p = subprocess.Popen\n    subprocess.Popen = _get_fake_Popen(arglist_result, 0)\n    with tempfile.NamedTemporaryFile(delete=False\n        ) as param_file_mock, tempfile.NamedTemporaryFile(delete=False\n        ) as prop_file_mock, patch(\n        'luigi.contrib.pig.tempfile.NamedTemporaryFile', side_effect=[\n        param_file_mock, prop_file_mock]):\n        try:\n            job = ComplexTestJob()\n            job.run()\n            self.assertEqual([['/usr/share/pig/bin/pig', '-x', 'local',\n                '-param_file', param_file_mock.name, '-propertyFile',\n                prop_file_mock.name, '-f', 'my_complex_pig_script.pig']],\n                arglist_result)\n            with open(param_file_mock.name) as pparams_file:\n                pparams = pparams_file.readlines()\n                self.assertEqual(1, len(pparams))\n                self.assertEqual('YOUR_PARAM_NAME=Your param value\\n',\n                    pparams[0])\n            with open(prop_file_mock.name) as pprops_file:\n                pprops = pprops_file.readlines()\n                self.assertEqual(1, len(pprops))\n                self.assertEqual('pig.additional.jars=/path/to/your/jar\\n',\n                    pprops[0])\n        finally:\n            subprocess.Popen = p\n",
                        "function_parameter": "(self, mock)",
                        "belong_class_content": "class ComplexPigTest(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    @patch('subprocess.Popen')\n    def test_run__success(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 0)\n        with tempfile.NamedTemporaryFile(delete=False\n            ) as param_file_mock, tempfile.NamedTemporaryFile(delete=False\n            ) as prop_file_mock, patch(\n            'luigi.contrib.pig.tempfile.NamedTemporaryFile', side_effect=[\n            param_file_mock, prop_file_mock]):\n            try:\n                job = ComplexTestJob()\n                job.run()\n                self.assertEqual([['/usr/share/pig/bin/pig', '-x', 'local',\n                    '-param_file', param_file_mock.name, '-propertyFile',\n                    prop_file_mock.name, '-f', 'my_complex_pig_script.pig']\n                    ], arglist_result)\n                with open(param_file_mock.name) as pparams_file:\n                    pparams = pparams_file.readlines()\n                    self.assertEqual(1, len(pparams))\n                    self.assertEqual('YOUR_PARAM_NAME=Your param value\\n',\n                        pparams[0])\n                with open(prop_file_mock.name) as pprops_file:\n                    pprops = pprops_file.readlines()\n                    self.assertEqual(1, len(pprops))\n                    self.assertEqual('pig.additional.jars=/path/to/your/jar\\n',\n                        pprops[0])\n            finally:\n                subprocess.Popen = p\n\n    @patch('subprocess.Popen')\n    def test_run__fail(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 1)\n        with tempfile.NamedTemporaryFile(delete=False\n            ) as param_file_mock, tempfile.NamedTemporaryFile(delete=False\n            ) as prop_file_mock, patch(\n            'luigi.contrib.pig.tempfile.NamedTemporaryFile', side_effect=[\n            param_file_mock, prop_file_mock]):\n            try:\n                job = ComplexTestJob()\n                job.run()\n            except PigJobError as e:\n                p = e\n                self.assertEqual('stderr', p.err)\n                self.assertEqual([['/usr/share/pig/bin/pig', '-x', 'local',\n                    '-param_file', param_file_mock.name, '-propertyFile',\n                    prop_file_mock.name, '-f', 'my_complex_pig_script.pig']\n                    ], arglist_result)\n                with open(param_file_mock.name) as pparams_file:\n                    pparams = pparams_file.readlines()\n                    self.assertEqual(1, len(pparams))\n                    self.assertEqual('YOUR_PARAM_NAME=Your param value\\n',\n                        pparams[0])\n                with open(prop_file_mock.name) as pprops_file:\n                    pprops = pprops_file.readlines()\n                    self.assertEqual(1, len(pprops))\n                    self.assertEqual('pig.additional.jars=/path/to/your/jar\\n',\n                        pprops[0])\n            else:\n                self.fail('Should have thrown PigJobError')\n            finally:\n                subprocess.Popen = p\n",
                        "belong_class_name": "ComplexPigTest",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "run",
                        "function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile()\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": "",
                        "called_function_name": "track_and_progress",
                        "called_function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "called_arguments": "(cmd)",
                        "called_function_parameter": "(self, cmd)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "track_and_progress",
                        "function_content": "def track_and_progress(self, cmd):\n    temp_stdout = tempfile.TemporaryFile()\n    env = os.environ.copy()\n    env['PIG_HOME'] = self.pig_home()\n    for k, v in six.iteritems(self.pig_env_vars()):\n        env[k] = v\n    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, env=env)\n    reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n    err_lines = []\n    with PigRunContext():\n        while proc.poll() is None:\n            ret = select.select(reads, [], [])\n            for fd in ret[0]:\n                if fd == proc.stderr.fileno():\n                    line = proc.stderr.readline().decode('utf8')\n                    err_lines.append(line)\n                if fd == proc.stdout.fileno():\n                    line = proc.stdout.readline().decode('utf8')\n                    temp_stdout.write(line)\n            err_line = line.lower()\n            if err_line.find('More information at:') != -1:\n                logger.info(err_line.split('more information at: ')[-1].strip()\n                    )\n            if err_line.find(' - '):\n                t = err_line.split(' - ')[-1].strip()\n                if t != '':\n                    logger.info(t)\n    err = ''.join(err_lines + [an_err_line.decode('utf8') for an_err_line in\n        proc.stderr])\n    if proc.returncode == 0:\n        logger.info('Job completed successfully!')\n    else:\n        logger.error('Error when running script:\\n%s', self.pig_script_path())\n        logger.error(err)\n        raise PigJobError('Pig script failed with return value: %s' % (proc\n            .returncode,), err=err)\n",
                        "function_parameter": "(self, cmd)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile()\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": ""
                    }
                ]
            ]
        },
        "luigi-1836_pig-148": {
            "PYTHONPATH=./ pytest test/contrib/pig_test.py": [
                [
                    {
                        "function_name": "test_run__fail",
                        "function_content": "@patch('subprocess.Popen')\ndef test_run__fail(self, mock):\n    arglist_result = []\n    p = subprocess.Popen\n    subprocess.Popen = _get_fake_Popen(arglist_result, 1)\n    try:\n        job = SimpleTestJob()\n        job.run()\n        self.assertEqual([['/usr/share/pig/bin/pig', '-f',\n            'my_simple_pig_script.pig']], arglist_result)\n    except PigJobError as e:\n        p = e\n        self.assertEqual('stderr', p.err)\n    else:\n        self.fail('Should have thrown PigJobError')\n    finally:\n        subprocess.Popen = p\n",
                        "function_parameter": "(self, mock)",
                        "belong_class_content": "class SimplePigTest(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    @patch('subprocess.Popen')\n    def test_run__success(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 0)\n        try:\n            job = SimpleTestJob()\n            job.run()\n            self.assertEqual([['/usr/share/pig/bin/pig', '-f',\n                'my_simple_pig_script.pig']], arglist_result)\n        finally:\n            subprocess.Popen = p\n\n    @patch('subprocess.Popen')\n    def test_run__fail(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 1)\n        try:\n            job = SimpleTestJob()\n            job.run()\n            self.assertEqual([['/usr/share/pig/bin/pig', '-f',\n                'my_simple_pig_script.pig']], arglist_result)\n        except PigJobError as e:\n            p = e\n            self.assertEqual('stderr', p.err)\n        else:\n            self.fail('Should have thrown PigJobError')\n        finally:\n            subprocess.Popen = p\n",
                        "belong_class_name": "SimplePigTest",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "run",
                        "function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile('wb')\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": "",
                        "called_function_name": "track_and_progress",
                        "called_function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "called_arguments": "(cmd)",
                        "called_function_parameter": "(self, cmd)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "track_and_progress",
                        "function_content": "def track_and_progress(self, cmd):\n    temp_stdout = tempfile.TemporaryFile('wb')\n    env = os.environ.copy()\n    env['PIG_HOME'] = self.pig_home()\n    for k, v in six.iteritems(self.pig_env_vars()):\n        env[k] = v\n    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, env=env)\n    reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n    err_lines = []\n    with PigRunContext():\n        while proc.poll() is None:\n            ret = select.select(reads, [], [])\n            for fd in ret[0]:\n                if fd == proc.stderr.fileno():\n                    line = proc.stderr.readline().decode('utf8')\n                    err_lines.append(line)\n                if fd == proc.stdout.fileno():\n                    line = proc.stdout.readline().decode('utf8')\n                    temp_stdout.write(line)\n            err_line = line.lower()\n            if err_line.find('More information at:') != -1:\n                logger.info(err_line.split('more information at: ')[-1].strip()\n                    )\n            if err_line.find(' - '):\n                t = err_line.split(' - ')[-1].strip()\n                if t != '':\n                    logger.info(t)\n    err = ''.join(err_lines + [an_err_line.decode('utf8') for an_err_line in\n        proc.stderr])\n    if proc.returncode == 0:\n        logger.info('Job completed successfully!')\n    else:\n        logger.error('Error when running script:\\n%s', self.pig_script_path())\n        logger.error(err)\n        raise PigJobError('Pig script failed with return value: %s' % (proc\n            .returncode,), err=err)\n",
                        "function_parameter": "(self, cmd)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile('wb')\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": ""
                    }
                ],
                [
                    {
                        "function_name": "test_run__success",
                        "function_content": "@patch('subprocess.Popen')\ndef test_run__success(self, mock):\n    arglist_result = []\n    p = subprocess.Popen\n    subprocess.Popen = _get_fake_Popen(arglist_result, 0)\n    try:\n        job = SimpleTestJob()\n        job.run()\n        self.assertEqual([['/usr/share/pig/bin/pig', '-f',\n            'my_simple_pig_script.pig']], arglist_result)\n    finally:\n        subprocess.Popen = p\n",
                        "function_parameter": "(self, mock)",
                        "belong_class_content": "class SimplePigTest(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    @patch('subprocess.Popen')\n    def test_run__success(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 0)\n        try:\n            job = SimpleTestJob()\n            job.run()\n            self.assertEqual([['/usr/share/pig/bin/pig', '-f',\n                'my_simple_pig_script.pig']], arglist_result)\n        finally:\n            subprocess.Popen = p\n\n    @patch('subprocess.Popen')\n    def test_run__fail(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 1)\n        try:\n            job = SimpleTestJob()\n            job.run()\n            self.assertEqual([['/usr/share/pig/bin/pig', '-f',\n                'my_simple_pig_script.pig']], arglist_result)\n        except PigJobError as e:\n            p = e\n            self.assertEqual('stderr', p.err)\n        else:\n            self.fail('Should have thrown PigJobError')\n        finally:\n            subprocess.Popen = p\n",
                        "belong_class_name": "SimplePigTest",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "run",
                        "function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile('wb')\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": "",
                        "called_function_name": "track_and_progress",
                        "called_function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "called_arguments": "(cmd)",
                        "called_function_parameter": "(self, cmd)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "track_and_progress",
                        "function_content": "def track_and_progress(self, cmd):\n    temp_stdout = tempfile.TemporaryFile('wb')\n    env = os.environ.copy()\n    env['PIG_HOME'] = self.pig_home()\n    for k, v in six.iteritems(self.pig_env_vars()):\n        env[k] = v\n    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, env=env)\n    reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n    err_lines = []\n    with PigRunContext():\n        while proc.poll() is None:\n            ret = select.select(reads, [], [])\n            for fd in ret[0]:\n                if fd == proc.stderr.fileno():\n                    line = proc.stderr.readline().decode('utf8')\n                    err_lines.append(line)\n                if fd == proc.stdout.fileno():\n                    line = proc.stdout.readline().decode('utf8')\n                    temp_stdout.write(line)\n            err_line = line.lower()\n            if err_line.find('More information at:') != -1:\n                logger.info(err_line.split('more information at: ')[-1].strip()\n                    )\n            if err_line.find(' - '):\n                t = err_line.split(' - ')[-1].strip()\n                if t != '':\n                    logger.info(t)\n    err = ''.join(err_lines + [an_err_line.decode('utf8') for an_err_line in\n        proc.stderr])\n    if proc.returncode == 0:\n        logger.info('Job completed successfully!')\n    else:\n        logger.error('Error when running script:\\n%s', self.pig_script_path())\n        logger.error(err)\n        raise PigJobError('Pig script failed with return value: %s' % (proc\n            .returncode,), err=err)\n",
                        "function_parameter": "(self, cmd)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile('wb')\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": ""
                    }
                ],
                [
                    {
                        "function_name": "test_run__fail",
                        "function_content": "@patch('subprocess.Popen')\ndef test_run__fail(self, mock):\n    arglist_result = []\n    p = subprocess.Popen\n    subprocess.Popen = _get_fake_Popen(arglist_result, 1)\n    with tempfile.NamedTemporaryFile(delete=False\n        ) as param_file_mock, tempfile.NamedTemporaryFile(delete=False\n        ) as prop_file_mock, patch(\n        'luigi.contrib.pig.tempfile.NamedTemporaryFile', side_effect=[\n        param_file_mock, prop_file_mock]):\n        try:\n            job = ComplexTestJob()\n            job.run()\n        except PigJobError as e:\n            p = e\n            self.assertEqual('stderr', p.err)\n            self.assertEqual([['/usr/share/pig/bin/pig', '-x', 'local',\n                '-param_file', param_file_mock.name, '-propertyFile',\n                prop_file_mock.name, '-f', 'my_complex_pig_script.pig']],\n                arglist_result)\n            with open(param_file_mock.name) as pparams_file:\n                pparams = pparams_file.readlines()\n                self.assertEqual(1, len(pparams))\n                self.assertEqual('YOUR_PARAM_NAME=Your param value\\n',\n                    pparams[0])\n            with open(prop_file_mock.name) as pprops_file:\n                pprops = pprops_file.readlines()\n                self.assertEqual(1, len(pprops))\n                self.assertEqual('pig.additional.jars=/path/to/your/jar\\n',\n                    pprops[0])\n        else:\n            self.fail('Should have thrown PigJobError')\n        finally:\n            subprocess.Popen = p\n",
                        "function_parameter": "(self, mock)",
                        "belong_class_content": "class ComplexPigTest(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    @patch('subprocess.Popen')\n    def test_run__success(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 0)\n        with tempfile.NamedTemporaryFile(delete=False\n            ) as param_file_mock, tempfile.NamedTemporaryFile(delete=False\n            ) as prop_file_mock, patch(\n            'luigi.contrib.pig.tempfile.NamedTemporaryFile', side_effect=[\n            param_file_mock, prop_file_mock]):\n            try:\n                job = ComplexTestJob()\n                job.run()\n                self.assertEqual([['/usr/share/pig/bin/pig', '-x', 'local',\n                    '-param_file', param_file_mock.name, '-propertyFile',\n                    prop_file_mock.name, '-f', 'my_complex_pig_script.pig']\n                    ], arglist_result)\n                with open(param_file_mock.name) as pparams_file:\n                    pparams = pparams_file.readlines()\n                    self.assertEqual(1, len(pparams))\n                    self.assertEqual('YOUR_PARAM_NAME=Your param value\\n',\n                        pparams[0])\n                with open(prop_file_mock.name) as pprops_file:\n                    pprops = pprops_file.readlines()\n                    self.assertEqual(1, len(pprops))\n                    self.assertEqual('pig.additional.jars=/path/to/your/jar\\n',\n                        pprops[0])\n            finally:\n                subprocess.Popen = p\n\n    @patch('subprocess.Popen')\n    def test_run__fail(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 1)\n        with tempfile.NamedTemporaryFile(delete=False\n            ) as param_file_mock, tempfile.NamedTemporaryFile(delete=False\n            ) as prop_file_mock, patch(\n            'luigi.contrib.pig.tempfile.NamedTemporaryFile', side_effect=[\n            param_file_mock, prop_file_mock]):\n            try:\n                job = ComplexTestJob()\n                job.run()\n            except PigJobError as e:\n                p = e\n                self.assertEqual('stderr', p.err)\n                self.assertEqual([['/usr/share/pig/bin/pig', '-x', 'local',\n                    '-param_file', param_file_mock.name, '-propertyFile',\n                    prop_file_mock.name, '-f', 'my_complex_pig_script.pig']\n                    ], arglist_result)\n                with open(param_file_mock.name) as pparams_file:\n                    pparams = pparams_file.readlines()\n                    self.assertEqual(1, len(pparams))\n                    self.assertEqual('YOUR_PARAM_NAME=Your param value\\n',\n                        pparams[0])\n                with open(prop_file_mock.name) as pprops_file:\n                    pprops = pprops_file.readlines()\n                    self.assertEqual(1, len(pprops))\n                    self.assertEqual('pig.additional.jars=/path/to/your/jar\\n',\n                        pprops[0])\n            else:\n                self.fail('Should have thrown PigJobError')\n            finally:\n                subprocess.Popen = p\n",
                        "belong_class_name": "ComplexPigTest",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "run",
                        "function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile('wb')\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": "",
                        "called_function_name": "track_and_progress",
                        "called_function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "called_arguments": "(cmd)",
                        "called_function_parameter": "(self, cmd)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "track_and_progress",
                        "function_content": "def track_and_progress(self, cmd):\n    temp_stdout = tempfile.TemporaryFile('wb')\n    env = os.environ.copy()\n    env['PIG_HOME'] = self.pig_home()\n    for k, v in six.iteritems(self.pig_env_vars()):\n        env[k] = v\n    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, env=env)\n    reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n    err_lines = []\n    with PigRunContext():\n        while proc.poll() is None:\n            ret = select.select(reads, [], [])\n            for fd in ret[0]:\n                if fd == proc.stderr.fileno():\n                    line = proc.stderr.readline().decode('utf8')\n                    err_lines.append(line)\n                if fd == proc.stdout.fileno():\n                    line = proc.stdout.readline().decode('utf8')\n                    temp_stdout.write(line)\n            err_line = line.lower()\n            if err_line.find('More information at:') != -1:\n                logger.info(err_line.split('more information at: ')[-1].strip()\n                    )\n            if err_line.find(' - '):\n                t = err_line.split(' - ')[-1].strip()\n                if t != '':\n                    logger.info(t)\n    err = ''.join(err_lines + [an_err_line.decode('utf8') for an_err_line in\n        proc.stderr])\n    if proc.returncode == 0:\n        logger.info('Job completed successfully!')\n    else:\n        logger.error('Error when running script:\\n%s', self.pig_script_path())\n        logger.error(err)\n        raise PigJobError('Pig script failed with return value: %s' % (proc\n            .returncode,), err=err)\n",
                        "function_parameter": "(self, cmd)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile('wb')\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": ""
                    }
                ],
                [
                    {
                        "function_name": "test_run__success",
                        "function_content": "@patch('subprocess.Popen')\ndef test_run__success(self, mock):\n    arglist_result = []\n    p = subprocess.Popen\n    subprocess.Popen = _get_fake_Popen(arglist_result, 0)\n    with tempfile.NamedTemporaryFile(delete=False\n        ) as param_file_mock, tempfile.NamedTemporaryFile(delete=False\n        ) as prop_file_mock, patch(\n        'luigi.contrib.pig.tempfile.NamedTemporaryFile', side_effect=[\n        param_file_mock, prop_file_mock]):\n        try:\n            job = ComplexTestJob()\n            job.run()\n            self.assertEqual([['/usr/share/pig/bin/pig', '-x', 'local',\n                '-param_file', param_file_mock.name, '-propertyFile',\n                prop_file_mock.name, '-f', 'my_complex_pig_script.pig']],\n                arglist_result)\n            with open(param_file_mock.name) as pparams_file:\n                pparams = pparams_file.readlines()\n                self.assertEqual(1, len(pparams))\n                self.assertEqual('YOUR_PARAM_NAME=Your param value\\n',\n                    pparams[0])\n            with open(prop_file_mock.name) as pprops_file:\n                pprops = pprops_file.readlines()\n                self.assertEqual(1, len(pprops))\n                self.assertEqual('pig.additional.jars=/path/to/your/jar\\n',\n                    pprops[0])\n        finally:\n            subprocess.Popen = p\n",
                        "function_parameter": "(self, mock)",
                        "belong_class_content": "class ComplexPigTest(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    @patch('subprocess.Popen')\n    def test_run__success(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 0)\n        with tempfile.NamedTemporaryFile(delete=False\n            ) as param_file_mock, tempfile.NamedTemporaryFile(delete=False\n            ) as prop_file_mock, patch(\n            'luigi.contrib.pig.tempfile.NamedTemporaryFile', side_effect=[\n            param_file_mock, prop_file_mock]):\n            try:\n                job = ComplexTestJob()\n                job.run()\n                self.assertEqual([['/usr/share/pig/bin/pig', '-x', 'local',\n                    '-param_file', param_file_mock.name, '-propertyFile',\n                    prop_file_mock.name, '-f', 'my_complex_pig_script.pig']\n                    ], arglist_result)\n                with open(param_file_mock.name) as pparams_file:\n                    pparams = pparams_file.readlines()\n                    self.assertEqual(1, len(pparams))\n                    self.assertEqual('YOUR_PARAM_NAME=Your param value\\n',\n                        pparams[0])\n                with open(prop_file_mock.name) as pprops_file:\n                    pprops = pprops_file.readlines()\n                    self.assertEqual(1, len(pprops))\n                    self.assertEqual('pig.additional.jars=/path/to/your/jar\\n',\n                        pprops[0])\n            finally:\n                subprocess.Popen = p\n\n    @patch('subprocess.Popen')\n    def test_run__fail(self, mock):\n        arglist_result = []\n        p = subprocess.Popen\n        subprocess.Popen = _get_fake_Popen(arglist_result, 1)\n        with tempfile.NamedTemporaryFile(delete=False\n            ) as param_file_mock, tempfile.NamedTemporaryFile(delete=False\n            ) as prop_file_mock, patch(\n            'luigi.contrib.pig.tempfile.NamedTemporaryFile', side_effect=[\n            param_file_mock, prop_file_mock]):\n            try:\n                job = ComplexTestJob()\n                job.run()\n            except PigJobError as e:\n                p = e\n                self.assertEqual('stderr', p.err)\n                self.assertEqual([['/usr/share/pig/bin/pig', '-x', 'local',\n                    '-param_file', param_file_mock.name, '-propertyFile',\n                    prop_file_mock.name, '-f', 'my_complex_pig_script.pig']\n                    ], arglist_result)\n                with open(param_file_mock.name) as pparams_file:\n                    pparams = pparams_file.readlines()\n                    self.assertEqual(1, len(pparams))\n                    self.assertEqual('YOUR_PARAM_NAME=Your param value\\n',\n                        pparams[0])\n                with open(prop_file_mock.name) as pprops_file:\n                    pprops = pprops_file.readlines()\n                    self.assertEqual(1, len(pprops))\n                    self.assertEqual('pig.additional.jars=/path/to/your/jar\\n',\n                        pprops[0])\n            else:\n                self.fail('Should have thrown PigJobError')\n            finally:\n                subprocess.Popen = p\n",
                        "belong_class_name": "ComplexPigTest",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "run",
                        "function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile('wb')\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": "",
                        "called_function_name": "track_and_progress",
                        "called_function_content": "def run(self):\n    with self._build_pig_cmd() as cmd:\n        self.track_and_progress(cmd)\n",
                        "called_arguments": "(cmd)",
                        "called_function_parameter": "(self, cmd)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "track_and_progress",
                        "function_content": "def track_and_progress(self, cmd):\n    temp_stdout = tempfile.TemporaryFile('wb')\n    env = os.environ.copy()\n    env['PIG_HOME'] = self.pig_home()\n    for k, v in six.iteritems(self.pig_env_vars()):\n        env[k] = v\n    proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, env=env)\n    reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n    err_lines = []\n    with PigRunContext():\n        while proc.poll() is None:\n            ret = select.select(reads, [], [])\n            for fd in ret[0]:\n                if fd == proc.stderr.fileno():\n                    line = proc.stderr.readline().decode('utf8')\n                    err_lines.append(line)\n                if fd == proc.stdout.fileno():\n                    line = proc.stdout.readline().decode('utf8')\n                    temp_stdout.write(line)\n            err_line = line.lower()\n            if err_line.find('More information at:') != -1:\n                logger.info(err_line.split('more information at: ')[-1].strip()\n                    )\n            if err_line.find(' - '):\n                t = err_line.split(' - ')[-1].strip()\n                if t != '':\n                    logger.info(t)\n    err = ''.join(err_lines + [an_err_line.decode('utf8') for an_err_line in\n        proc.stderr])\n    if proc.returncode == 0:\n        logger.info('Job completed successfully!')\n    else:\n        logger.error('Error when running script:\\n%s', self.pig_script_path())\n        logger.error(err)\n        raise PigJobError('Pig script failed with return value: %s' % (proc\n            .returncode,), err=err)\n",
                        "function_parameter": "(self, cmd)",
                        "belong_class_content": "class PigJobTask(luigi.Task):\n\n    def pig_home(self):\n        return configuration.get_config().get('pig', 'home', '/usr/share/pig')\n\n    def pig_command_path(self):\n        return os.path.join(self.pig_home(), 'bin/pig')\n\n    def pig_env_vars(self):\n        \"\"\"\n        Dictionary of environment variables that should be set when running Pig.\n\n        Ex::\n            return { 'PIG_CLASSPATH': '/your/path' }\n        \"\"\"\n        return {}\n\n    def pig_properties(self):\n        \"\"\"\n        Dictionary of properties that should be set when running Pig.\n\n        Example::\n\n            return { 'pig.additional.jars':'/path/to/your/jar' }\n        \"\"\"\n        return {}\n\n    def pig_parameters(self):\n        \"\"\"\n        Dictionary of parameters that should be set for the Pig job.\n\n        Example::\n\n            return { 'YOUR_PARAM_NAME':'Your param value' }\n        \"\"\"\n        return {}\n\n    def pig_options(self):\n        \"\"\"\n        List of options that will be appended to the Pig command.\n\n        Example::\n\n            return ['-x', 'local']\n        \"\"\"\n        return []\n\n    def output(self):\n        raise NotImplementedError('subclass should define output path')\n\n    def pig_script_path(self):\n        \"\"\"\n        Return the path to the Pig script to be run.\n        \"\"\"\n        raise NotImplementedError('subclass should define pig_script_path')\n\n    @contextmanager\n    def _build_pig_cmd(self):\n        opts = self.pig_options()\n\n        def line(k, v):\n            return ('%s=%s%s' % (k, v, os.linesep)).encode('utf-8')\n        with tempfile.NamedTemporaryFile(\n            ) as param_file, tempfile.NamedTemporaryFile() as prop_file:\n            if self.pig_parameters():\n                items = six.iteritems(self.pig_parameters())\n                param_file.writelines(line(k, v) for k, v in items)\n                param_file.flush()\n                opts.append('-param_file')\n                opts.append(param_file.name)\n            if self.pig_properties():\n                items = six.iteritems(self.pig_properties())\n                prop_file.writelines(line(k, v) for k, v in items)\n                prop_file.flush()\n                opts.append('-propertyFile')\n                opts.append(prop_file.name)\n            cmd = [self.pig_command_path()] + opts + ['-f', self.\n                pig_script_path()]\n            logger.info(subprocess.list2cmdline(cmd))\n            yield cmd\n\n    def run(self):\n        with self._build_pig_cmd() as cmd:\n            self.track_and_progress(cmd)\n\n    def track_and_progress(self, cmd):\n        temp_stdout = tempfile.TemporaryFile('wb')\n        env = os.environ.copy()\n        env['PIG_HOME'] = self.pig_home()\n        for k, v in six.iteritems(self.pig_env_vars()):\n            env[k] = v\n        proc = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, env=env)\n        reads = [proc.stderr.fileno(), proc.stdout.fileno()]\n        err_lines = []\n        with PigRunContext():\n            while proc.poll() is None:\n                ret = select.select(reads, [], [])\n                for fd in ret[0]:\n                    if fd == proc.stderr.fileno():\n                        line = proc.stderr.readline().decode('utf8')\n                        err_lines.append(line)\n                    if fd == proc.stdout.fileno():\n                        line = proc.stdout.readline().decode('utf8')\n                        temp_stdout.write(line)\n                err_line = line.lower()\n                if err_line.find('More information at:') != -1:\n                    logger.info(err_line.split('more information at: ')[-1]\n                        .strip())\n                if err_line.find(' - '):\n                    t = err_line.split(' - ')[-1].strip()\n                    if t != '':\n                        logger.info(t)\n        err = ''.join(err_lines + [an_err_line.decode('utf8') for\n            an_err_line in proc.stderr])\n        if proc.returncode == 0:\n            logger.info('Job completed successfully!')\n        else:\n            logger.error('Error when running script:\\n%s', self.\n                pig_script_path())\n            logger.error(err)\n            raise PigJobError('Pig script failed with return value: %s' % (\n                proc.returncode,), err=err)\n",
                        "belong_class_name": "PigJobTask",
                        "belong_class_init": ""
                    }
                ]
            ]
        }
    },
    "numpy": {
        "numpy-10473_polynomial": {
            "PYTHONPATH=./ pytest numpy/lib/tests/test_polynomial.py::TestDocs::test_polydiv": [
                [
                    {
                        "function_name": "test_polydiv",
                        "function_content": "def test_polydiv(self):\n    b = np.poly1d([2, 6, 6, 1])\n    a = np.poly1d([-1.0j, 1 + 2.0j, -(2 + 1.0j), 1])\n    q, r = np.polydiv(b, a)\n    assert_equal(q.coeffs.dtype, np.complex128)\n    assert_equal(r.coeffs.dtype, np.complex128)\n    assert_equal(q * a + r, b)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class TestDocs(object):\n\n    def test_doctests(self):\n        return rundocs()\n\n    def test_poly(self):\n        assert_array_almost_equal(np.poly([3, -np.sqrt(2), np.sqrt(2)]), [1,\n            -3, -2, 6])\n        A = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]\n        assert_array_almost_equal(np.poly(A), [1, -6, -72, -27])\n        assert_(np.isrealobj(np.poly([+1.082j, +2.613j, -2.613j, -1.082j])))\n        assert_(np.isrealobj(np.poly([0 + 1.0j, -0 + -1.0j, 1 + 2.0j, 1 - \n            2.0j, 1.0 + 3.5j, 1 - 3.5j])))\n        assert_(np.isrealobj(np.poly([1.0j, -1.0j, 1 + 2.0j, 1 - 2.0j, 1 + \n            3.0j, 1 - 3.0j])))\n        assert_(np.isrealobj(np.poly([1.0j, -1.0j, 1 + 2.0j, 1 - 2.0j])))\n        assert_(np.isrealobj(np.poly([1.0j, -1.0j, 2.0j, -2.0j])))\n        assert_(np.isrealobj(np.poly([1.0j, -1.0j])))\n        assert_(np.isrealobj(np.poly([1, -1])))\n        assert_(np.iscomplexobj(np.poly([1.0j, -1.0000001j])))\n        np.random.seed(42)\n        a = np.random.randn(100) + 1.0j * np.random.randn(100)\n        assert_(np.isrealobj(np.poly(np.concatenate((a, np.conjugate(a))))))\n\n    def test_roots(self):\n        assert_array_equal(np.roots([1, 0, 0]), [0, 0])\n\n    def test_str_leading_zeros(self):\n        p = np.poly1d([4, 3, 2, 1])\n        p[3] = 0\n        assert_equal(str(p), '   2\\n3 x + 2 x + 1')\n        p = np.poly1d([1, 2])\n        p[0] = 0\n        p[1] = 0\n        assert_equal(str(p), ' \\n0')\n\n    def test_polyfit(self):\n        c = np.array([3.0, 2.0, 1.0])\n        x = np.linspace(0, 2, 7)\n        y = np.polyval(c, x)\n        err = [1, -1, 1, -1, 1, -1, 1]\n        weights = np.arange(8, 1, -1) ** 2 / 7.0\n        assert_raises(ValueError, np.polyfit, [0, 1, 3], [0, 1, 3], deg=0,\n            cov=True)\n        m, cov = np.polyfit(x, y + err, 2, cov=True)\n        est = [3.8571, 0.2857, 1.619]\n        assert_almost_equal(est, m, decimal=4)\n        val0 = [[2.9388, -5.8776, 1.6327], [-5.8776, 12.7347, -4.2449], [\n            1.6327, -4.2449, 2.322]]\n        assert_almost_equal(val0, cov, decimal=4)\n        m2, cov2 = np.polyfit(x, y + err, 2, w=weights, cov=True)\n        assert_almost_equal([4.8927, -1.0177, 1.7768], m2, decimal=4)\n        val = [[8.7929, -10.0103, 0.9756], [-10.0103, 13.6134, -1.8178], [\n            0.9756, -1.8178, 0.6674]]\n        assert_almost_equal(val, cov2, decimal=4)\n        y = y[:, np.newaxis]\n        c = c[:, np.newaxis]\n        assert_almost_equal(c, np.polyfit(x, y, 2))\n        yy = np.concatenate((y, y), axis=1)\n        cc = np.concatenate((c, c), axis=1)\n        assert_almost_equal(cc, np.polyfit(x, yy, 2))\n        m, cov = np.polyfit(x, yy + np.array(err)[:, np.newaxis], 2, cov=True)\n        assert_almost_equal(est, m[:, 0], decimal=4)\n        assert_almost_equal(est, m[:, 1], decimal=4)\n        assert_almost_equal(val0, cov[:, :, 0], decimal=4)\n        assert_almost_equal(val0, cov[:, :, 1], decimal=4)\n\n    def test_objects(self):\n        from decimal import Decimal\n        p = np.poly1d([Decimal('4.0'), Decimal('3.0'), Decimal('2.0')])\n        p2 = p * Decimal('1.333333333333333')\n        assert_(p2[1] == Decimal('3.9999999999999990'))\n        p2 = p.deriv()\n        assert_(p2[1] == Decimal('8.0'))\n        p2 = p.integ()\n        assert_(p2[3] == Decimal('1.333333333333333333333333333'))\n        assert_(p2[2] == Decimal('1.5'))\n        assert_(np.issubdtype(p2.coeffs.dtype, np.object_))\n        p = np.poly([Decimal(1), Decimal(2)])\n        assert_equal(np.poly([Decimal(1), Decimal(2)]), [1, Decimal(-3),\n            Decimal(2)])\n\n    def test_complex(self):\n        p = np.poly1d([3.0j, 2.0j, 1.0j])\n        p2 = p.integ()\n        assert_((p2.coeffs == [1.0j, 1.0j, 1.0j, 0]).all())\n        p2 = p.deriv()\n        assert_((p2.coeffs == [6.0j, 2.0j]).all())\n\n    def test_integ_coeffs(self):\n        p = np.poly1d([3, 2, 1])\n        p2 = p.integ(3, k=[9, 7, 6])\n        assert_((p2.coeffs == [1 / 4.0 / 5.0, 1 / 3.0 / 4.0, 1 / 2.0 / 3.0,\n            9 / 1.0 / 2.0, 7, 6]).all())\n\n    def test_zero_dims(self):\n        try:\n            np.poly(np.zeros((0, 0)))\n        except ValueError:\n            pass\n\n    def test_poly_int_overflow(self):\n        \"\"\"\n        Regression test for gh-5096.\n        \"\"\"\n        v = np.arange(1, 21)\n        assert_almost_equal(np.poly(v), np.poly(np.diag(v)))\n\n    def test_poly_eq(self):\n        p = np.poly1d([1, 2, 3])\n        p2 = np.poly1d([1, 2, 4])\n        assert_equal(p == None, False)\n        assert_equal(p != None, True)\n        assert_equal(p == p, True)\n        assert_equal(p == p2, False)\n        assert_equal(p != p2, True)\n\n    def test_polydiv(self):\n        b = np.poly1d([2, 6, 6, 1])\n        a = np.poly1d([-1.0j, 1 + 2.0j, -(2 + 1.0j), 1])\n        q, r = np.polydiv(b, a)\n        assert_equal(q.coeffs.dtype, np.complex128)\n        assert_equal(r.coeffs.dtype, np.complex128)\n        assert_equal(q * a + r, b)\n\n    def test_poly_coeffs_immutable(self):\n        \"\"\" Coefficients should not be modifiable \"\"\"\n        p = np.poly1d([1, 2, 3])\n        try:\n            p.coeffs += 1\n        except Exception:\n            pass\n        assert_equal(p.coeffs, [1, 2, 3])\n        p.coeffs[2] += 10\n        assert_equal(p.coeffs, [1, 2, 3])\n",
                        "belong_class_name": "TestDocs",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "polydiv",
                        "function_content": "def polydiv(u, v):\n    \"\"\"\n    Returns the quotient and remainder of polynomial division.\n\n    The input arrays are the coefficients (including any coefficients\n    equal to zero) of the \"numerator\" (dividend) and \"denominator\"\n    (divisor) polynomials, respectively.\n\n    Parameters\n    ----------\n    u : array_like or poly1d\n        Dividend polynomial's coefficients.\n\n    v : array_like or poly1d\n        Divisor polynomial's coefficients.\n\n    Returns\n    -------\n    q : ndarray\n        Coefficients, including those equal to zero, of the quotient.\n    r : ndarray\n        Coefficients, including those equal to zero, of the remainder.\n\n    See Also\n    --------\n    poly, polyadd, polyder, polydiv, polyfit, polyint, polymul, polysub,\n    polyval\n\n    Notes\n    -----\n    Both `u` and `v` must be 0-d or 1-d (ndim = 0 or 1), but `u.ndim` need\n    not equal `v.ndim`. In other words, all four possible combinations -\n    ``u.ndim = v.ndim = 0``, ``u.ndim = v.ndim = 1``,\n    ``u.ndim = 1, v.ndim = 0``, and ``u.ndim = 0, v.ndim = 1`` - work.\n\n    Examples\n    --------\n    .. math:: \\\\frac{3x^2 + 5x + 2}{2x + 1} = 1.5x + 1.75, remainder 0.25\n\n    >>> x = np.array([3.0, 5.0, 2.0])\n    >>> y = np.array([2.0, 1.0])\n    >>> np.polydiv(x, y)\n    (array([ 1.5 ,  1.75]), array([ 0.25]))\n\n    \"\"\"\n    truepoly = isinstance(u, poly1d) or isinstance(u, poly1d)\n    u = atleast_1d(u) + 0.0\n    v = atleast_1d(v) + 0.0\n    w = u[0] + v[0]\n    m = len(u) - 1\n    n = len(v) - 1\n    scale = 1.0 / v[0]\n    q = NX.zeros((max(m - n + 1, 1),), w.dtype)\n    r = u.copy()\n    for k in range(0, m - n + 1):\n        d = scale * r[k]\n        q[k] = d\n        r[k:k + n + 1] -= d * v\n    while NX.allclose(r[0], 0, rtol=1e-14) and r.shape[-1] > 1:\n        r = r[1:]\n    if truepoly:\n        return poly1d(q), poly1d(r)\n    return q, r\n",
                        "function_parameter": "(u, v)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ]
            ]
        }
    },
    "pandas": {
        "pandas-15941_common": {
            "pytest pandas/tests/types/test_common.py::test_get_dtype_error_catch": [
                [
                    {
                        "function_name": "test_get_dtype_error_catch",
                        "function_content": "@pytest.mark.parametrize('func', get_is_dtype_funcs(), ids=lambda x: x.__name__\n    )\ndef test_get_dtype_error_catch(func):\n    assert not func(None)\n",
                        "function_parameter": "(func)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    },
                    {
                        "function_name": "is_string_dtype",
                        "function_content": "def is_string_dtype(arr_or_dtype):\n    dtype = _get_dtype(arr_or_dtype)\n    return dtype.kind in ('O', 'S', 'U') and not is_period_dtype(dtype)\n",
                        "function_parameter": "(arr_or_dtype)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "_get_dtype",
                        "called_function_content": "def is_string_dtype(arr_or_dtype):\n    dtype = _get_dtype(arr_or_dtype)\n",
                        "called_arguments": "(arr_or_dtype)",
                        "called_function_parameter": "(arr_or_dtype)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_get_dtype",
                        "function_content": "def _get_dtype(arr_or_dtype):\n    if arr_or_dtype is None:\n        raise TypeError\n    if isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n    elif isinstance(arr_or_dtype, CategoricalDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, DatetimeTZDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, PeriodDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, string_types):\n        if is_categorical_dtype(arr_or_dtype):\n            return CategoricalDtype.construct_from_string(arr_or_dtype)\n        elif is_datetime64tz_dtype(arr_or_dtype):\n            return DatetimeTZDtype.construct_from_string(arr_or_dtype)\n        elif is_period_dtype(arr_or_dtype):\n            return PeriodDtype.construct_from_string(arr_or_dtype)\n    if hasattr(arr_or_dtype, 'dtype'):\n        arr_or_dtype = arr_or_dtype.dtype\n    return np.dtype(arr_or_dtype)\n",
                        "function_parameter": "(arr_or_dtype)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ],
                [
                    {
                        "function_name": "test_get_dtype_error_catch",
                        "function_content": "@pytest.mark.parametrize('func', get_is_dtype_funcs(), ids=lambda x: x.__name__\n    )\ndef test_get_dtype_error_catch(func):\n    assert not func(None)\n",
                        "function_parameter": "(func)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    },
                    {
                        "function_name": "is_string_like_dtype",
                        "function_content": "def is_string_like_dtype(arr_or_dtype):\n    dtype = _get_dtype(arr_or_dtype)\n    return dtype.kind in ('S', 'U')\n",
                        "function_parameter": "(arr_or_dtype)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "_get_dtype",
                        "called_function_content": "def is_string_like_dtype(arr_or_dtype):\n    dtype = _get_dtype(arr_or_dtype)\n",
                        "called_arguments": "(arr_or_dtype)",
                        "called_function_parameter": "(arr_or_dtype)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_get_dtype",
                        "function_content": "def _get_dtype(arr_or_dtype):\n    if arr_or_dtype is None:\n        raise TypeError\n    if isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n    elif isinstance(arr_or_dtype, CategoricalDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, DatetimeTZDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, PeriodDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, string_types):\n        if is_categorical_dtype(arr_or_dtype):\n            return CategoricalDtype.construct_from_string(arr_or_dtype)\n        elif is_datetime64tz_dtype(arr_or_dtype):\n            return DatetimeTZDtype.construct_from_string(arr_or_dtype)\n        elif is_period_dtype(arr_or_dtype):\n            return PeriodDtype.construct_from_string(arr_or_dtype)\n    if hasattr(arr_or_dtype, 'dtype'):\n        arr_or_dtype = arr_or_dtype.dtype\n    return np.dtype(arr_or_dtype)\n",
                        "function_parameter": "(arr_or_dtype)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ],
                [
                    {
                        "function_name": "test_get_dtype_error_catch",
                        "function_content": "@pytest.mark.parametrize('func', get_is_dtype_funcs(), ids=lambda x: x.__name__\n    )\ndef test_get_dtype_error_catch(func):\n    assert not func(None)\n",
                        "function_parameter": "(func)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    },
                    {
                        "function_name": "is_timedelta64_ns_dtype",
                        "function_content": "def is_timedelta64_ns_dtype(arr_or_dtype):\n    tipo = _get_dtype(arr_or_dtype)\n    return tipo == _TD_DTYPE\n",
                        "function_parameter": "(arr_or_dtype)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "_get_dtype",
                        "called_function_content": "def is_timedelta64_ns_dtype(arr_or_dtype):\n    tipo = _get_dtype(arr_or_dtype)\n",
                        "called_arguments": "(arr_or_dtype)",
                        "called_function_parameter": "(arr_or_dtype)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_get_dtype",
                        "function_content": "def _get_dtype(arr_or_dtype):\n    if arr_or_dtype is None:\n        raise TypeError\n    if isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n    elif isinstance(arr_or_dtype, CategoricalDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, DatetimeTZDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, PeriodDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, string_types):\n        if is_categorical_dtype(arr_or_dtype):\n            return CategoricalDtype.construct_from_string(arr_or_dtype)\n        elif is_datetime64tz_dtype(arr_or_dtype):\n            return DatetimeTZDtype.construct_from_string(arr_or_dtype)\n        elif is_period_dtype(arr_or_dtype):\n            return PeriodDtype.construct_from_string(arr_or_dtype)\n    if hasattr(arr_or_dtype, 'dtype'):\n        arr_or_dtype = arr_or_dtype.dtype\n    return np.dtype(arr_or_dtype)\n",
                        "function_parameter": "(arr_or_dtype)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ]
            ]
        },
        "pandas-15941_common-119": {
            "pytest pandas/tests/types/test_common.py::test_get_dtype_error_catch": [
                [
                    {
                        "function_name": "test_get_dtype_error_catch",
                        "function_content": "@pytest.mark.parametrize('func', get_is_dtype_funcs(), ids=lambda x: x.__name__\n    )\ndef test_get_dtype_error_catch(func):\n    assert not func(None)\n",
                        "function_parameter": "(func)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    },
                    {
                        "function_name": "is_string_dtype",
                        "function_content": "def is_string_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of the string dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : ndarray, dtype, type\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean : Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_dtype(str)\n    True\n    >>> is_string_dtype(object)\n    True\n    >>> is_string_dtype(int)\n    False\n    >>>\n    >>> is_string_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_dtype(np.array([1, 2]))\n    False\n    \"\"\"\n    dtype = _get_dtype(arr_or_dtype)\n    return dtype.kind in ('O', 'S', 'U') and not is_period_dtype(dtype)\n",
                        "function_parameter": "(arr_or_dtype)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "_get_dtype",
                        "called_function_content": "def is_string_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of the string dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : ndarray, dtype, type\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean : Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_dtype(str)\n    True\n    >>> is_string_dtype(object)\n    True\n    >>> is_string_dtype(int)\n    False\n    >>>\n    >>> is_string_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_dtype(np.array([1, 2]))\n    False\n    \"\"\"\n    dtype = _get_dtype(arr_or_dtype)\n",
                        "called_arguments": "(arr_or_dtype)",
                        "called_function_parameter": "(arr_or_dtype)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_get_dtype",
                        "function_content": "def _get_dtype(arr_or_dtype):\n    \"\"\"\n    Get the dtype instance associated with an array\n    or dtype object.\n\n    Parameters\n    ----------\n    arr_or_dtype : ndarray, Series, dtype, type\n        The array-like or dtype object whose dtype we want to extract.\n\n    Returns\n    -------\n    obj_dtype : The extract dtype instance from the\n                passed in array or dtype object.\n\n    Raises\n    ------\n    TypeError : The passed in object is None.\n    \"\"\"\n    if arr_or_dtype is None:\n        raise TypeError('Cannot deduce dtype from null object')\n    if isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n    elif isinstance(arr_or_dtype, CategoricalDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, DatetimeTZDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, PeriodDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, string_types):\n        if is_categorical_dtype(arr_or_dtype):\n            return CategoricalDtype.construct_from_string(arr_or_dtype)\n        elif is_datetime64tz_dtype(arr_or_dtype):\n            return DatetimeTZDtype.construct_from_string(arr_or_dtype)\n        elif is_period_dtype(arr_or_dtype):\n            return PeriodDtype.construct_from_string(arr_or_dtype)\n    if hasattr(arr_or_dtype, 'dtype'):\n        arr_or_dtype = arr_or_dtype.dtype\n    return np.dtype(arr_or_dtype)\n",
                        "function_parameter": "(arr_or_dtype)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ]
            ]
        },
        "pandas-15941_common-212": {
            "pytest pandas/tests/types/test_common.py::test_get_dtype_error_catch": [
                [
                    {
                        "function_name": "test_get_dtype_error_catch",
                        "function_content": "@pytest.mark.parametrize('func', get_is_dtype_funcs(), ids=lambda x: x.__name__\n    )\ndef test_get_dtype_error_catch(func):\n    assert not func(None)\n",
                        "function_parameter": "(func)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    },
                    {
                        "function_name": "is_timedelta64_ns_dtype",
                        "function_content": "def is_timedelta64_ns_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of the timedelta64[ns] dtype.\n\n    This is a very specific dtype, so generic ones like `np.timedelta64`\n    will return False if passed into this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : ndarray, dtype, type\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean : Whether or not the array or dtype\n              is of the timedelta64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ns]')\n    True\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ps]')  # Wrong frequency\n    False\n    >>>\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype='m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\n    False\n    \"\"\"\n    tipo = _get_dtype(arr_or_dtype)\n    return tipo == _TD_DTYPE\n",
                        "function_parameter": "(arr_or_dtype)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "_get_dtype",
                        "called_function_content": "def is_timedelta64_ns_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of the timedelta64[ns] dtype.\n\n    This is a very specific dtype, so generic ones like `np.timedelta64`\n    will return False if passed into this function.\n\n    Parameters\n    ----------\n    arr_or_dtype : ndarray, dtype, type\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean : Whether or not the array or dtype\n              is of the timedelta64[ns] dtype.\n\n    Examples\n    --------\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ns]')\n    True\n    >>> is_timedelta64_ns_dtype(np.dtype('m8[ps]')  # Wrong frequency\n    False\n    >>>\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype='m8[ns]'))\n    True\n    >>> is_timedelta64_ns_dtype(np.array([1, 2], dtype=np.timedelta64))\n    False\n    \"\"\"\n    tipo = _get_dtype(arr_or_dtype)\n",
                        "called_arguments": "(arr_or_dtype)",
                        "called_function_parameter": "(arr_or_dtype)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_get_dtype",
                        "function_content": "def _get_dtype(arr_or_dtype):\n    \"\"\"\n    Get the dtype instance associated with an array\n    or dtype object.\n\n    Parameters\n    ----------\n    arr_or_dtype : ndarray, Series, dtype, type\n        The array-like or dtype object whose dtype we want to extract.\n\n    Returns\n    -------\n    obj_dtype : The extract dtype instance from the\n                passed in array or dtype object.\n\n    Raises\n    ------\n    TypeError : The passed in object is None.\n    \"\"\"\n    if arr_or_dtype is None:\n        raise TypeError('Cannot deduce dtype from null object')\n    if isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n    elif isinstance(arr_or_dtype, CategoricalDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, DatetimeTZDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, PeriodDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, string_types):\n        if is_categorical_dtype(arr_or_dtype):\n            return CategoricalDtype.construct_from_string(arr_or_dtype)\n        elif is_datetime64tz_dtype(arr_or_dtype):\n            return DatetimeTZDtype.construct_from_string(arr_or_dtype)\n        elif is_period_dtype(arr_or_dtype):\n            return PeriodDtype.construct_from_string(arr_or_dtype)\n    if hasattr(arr_or_dtype, 'dtype'):\n        arr_or_dtype = arr_or_dtype.dtype\n    return np.dtype(arr_or_dtype)\n",
                        "function_parameter": "(arr_or_dtype)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ]
            ]
        },
        "pandas-15941_common-306": {
            "pytest pandas/tests/types/test_common.py::test_get_dtype_error_catch": [
                [
                    {
                        "function_name": "test_get_dtype_error_catch",
                        "function_content": "@pytest.mark.parametrize('func', get_is_dtype_funcs(), ids=lambda x: x.__name__\n    )\ndef test_get_dtype_error_catch(func):\n    assert not func(None)\n",
                        "function_parameter": "(func)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    },
                    {
                        "function_name": "is_string_like_dtype",
                        "function_content": "def is_string_like_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of a string-like dtype.\n\n    Unlike `is_string_dtype`, the object dtype is excluded because it\n    is a mixed dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : ndarray, dtype, type\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean : Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_like_dtype(str)\n    True\n    >>> is_string_like_dtype(object)\n    False\n    >>>\n    >>> is_string_like_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_like_dtype(np.array([1, 2]))\n    False\n    \"\"\"\n    dtype = _get_dtype(arr_or_dtype)\n    return dtype.kind in ('S', 'U')\n",
                        "function_parameter": "(arr_or_dtype)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "_get_dtype",
                        "called_function_content": "def is_string_like_dtype(arr_or_dtype):\n    \"\"\"\n    Check whether the provided array or dtype is of a string-like dtype.\n\n    Unlike `is_string_dtype`, the object dtype is excluded because it\n    is a mixed dtype.\n\n    Parameters\n    ----------\n    arr_or_dtype : ndarray, dtype, type\n        The array or dtype to check.\n\n    Returns\n    -------\n    boolean : Whether or not the array or dtype is of the string dtype.\n\n    Examples\n    --------\n    >>> is_string_like_dtype(str)\n    True\n    >>> is_string_like_dtype(object)\n    False\n    >>>\n    >>> is_string_like_dtype(np.array(['a', 'b']))\n    True\n    >>> is_string_like_dtype(np.array([1, 2]))\n    False\n    \"\"\"\n    dtype = _get_dtype(arr_or_dtype)\n",
                        "called_arguments": "(arr_or_dtype)",
                        "called_function_parameter": "(arr_or_dtype)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_get_dtype",
                        "function_content": "def _get_dtype(arr_or_dtype):\n    \"\"\"\n    Get the dtype instance associated with an array\n    or dtype object.\n\n    Parameters\n    ----------\n    arr_or_dtype : ndarray, Series, dtype, type\n        The array-like or dtype object whose dtype we want to extract.\n\n    Returns\n    -------\n    obj_dtype : The extract dtype instance from the\n                passed in array or dtype object.\n\n    Raises\n    ------\n    TypeError : The passed in object is None.\n    \"\"\"\n    if arr_or_dtype is None:\n        raise TypeError('Cannot deduce dtype from null object')\n    if isinstance(arr_or_dtype, np.dtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, type):\n        return np.dtype(arr_or_dtype)\n    elif isinstance(arr_or_dtype, CategoricalDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, DatetimeTZDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, PeriodDtype):\n        return arr_or_dtype\n    elif isinstance(arr_or_dtype, string_types):\n        if is_categorical_dtype(arr_or_dtype):\n            return CategoricalDtype.construct_from_string(arr_or_dtype)\n        elif is_datetime64tz_dtype(arr_or_dtype):\n            return DatetimeTZDtype.construct_from_string(arr_or_dtype)\n        elif is_period_dtype(arr_or_dtype):\n            return PeriodDtype.construct_from_string(arr_or_dtype)\n    if hasattr(arr_or_dtype, 'dtype'):\n        arr_or_dtype = arr_or_dtype.dtype\n    return np.dtype(arr_or_dtype)\n",
                        "function_parameter": "(arr_or_dtype)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ]
            ]
        },
        "pandas-21540_normalize": {
            "pytest pandas/tests/io/json/test_normalize.py::TestJSONNormalize::test_value_array_record_prefix": [
                [
                    {
                        "function_name": "test_value_array_record_prefix",
                        "function_content": "def test_value_array_record_prefix(self):\n    result = json_normalize({'A': [1, 2]}, 'A', record_prefix='Prefix.')\n    expected = DataFrame([[1], [2]], columns=['Prefix.0'])\n    tm.assert_frame_equal(result, expected)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class TestJSONNormalize(object):\n\n    def test_simple_records(self):\n        recs = [{'a': 1, 'b': 2, 'c': 3}, {'a': 4, 'b': 5, 'c': 6}, {'a': 7,\n            'b': 8, 'c': 9}, {'a': 10, 'b': 11, 'c': 12}]\n        result = json_normalize(recs)\n        expected = DataFrame(recs)\n        tm.assert_frame_equal(result, expected)\n\n    def test_simple_normalize(self, state_data):\n        result = json_normalize(state_data[0], 'counties')\n        expected = DataFrame(state_data[0]['counties'])\n        tm.assert_frame_equal(result, expected)\n        result = json_normalize(state_data, 'counties')\n        expected = []\n        for rec in state_data:\n            expected.extend(rec['counties'])\n        expected = DataFrame(expected)\n        tm.assert_frame_equal(result, expected)\n        result = json_normalize(state_data, 'counties', meta='state')\n        expected['state'] = np.array(['Florida', 'Ohio']).repeat([3, 2])\n        tm.assert_frame_equal(result, expected)\n\n    def test_empty_array(self):\n        result = json_normalize([])\n        expected = DataFrame()\n        tm.assert_frame_equal(result, expected)\n\n    def test_simple_normalize_with_separator(self, deep_nested):\n        result = json_normalize({'A': {'A': 1, 'B': 2}})\n        expected = DataFrame([[1, 2]], columns=['A.A', 'A.B'])\n        tm.assert_frame_equal(result.reindex_like(expected), expected)\n        result = json_normalize({'A': {'A': 1, 'B': 2}}, sep='_')\n        expected = DataFrame([[1, 2]], columns=['A_A', 'A_B'])\n        tm.assert_frame_equal(result.reindex_like(expected), expected)\n        result = json_normalize({'A': {'A': 1, 'B': 2}}, sep=u'\u03c3')\n        expected = DataFrame([[1, 2]], columns=[u'A\u03c3A', u'A\u03c3B'])\n        tm.assert_frame_equal(result.reindex_like(expected), expected)\n        result = json_normalize(deep_nested, ['states', 'cities'], meta=[\n            'country', ['states', 'name']], sep='_')\n        expected = Index(['name', 'pop', 'country', 'states_name']\n            ).sort_values()\n        assert result.columns.sort_values().equals(expected)\n\n    def test_value_array_record_prefix(self):\n        result = json_normalize({'A': [1, 2]}, 'A', record_prefix='Prefix.')\n        expected = DataFrame([[1], [2]], columns=['Prefix.0'])\n        tm.assert_frame_equal(result, expected)\n\n    def test_more_deeply_nested(self, deep_nested):\n        result = json_normalize(deep_nested, ['states', 'cities'], meta=[\n            'country', ['states', 'name']])\n        ex_data = {'country': ['USA'] * 4 + ['Germany'] * 3, 'states.name':\n            ['California', 'California', 'Ohio', 'Ohio', 'Bayern',\n            'Nordrhein-Westfalen', 'Nordrhein-Westfalen'], 'name': [\n            'San Francisco', 'Los Angeles', 'Columbus', 'Cleveland',\n            'Munich', 'Duesseldorf', 'Koeln'], 'pop': [12345, 12346, 1234, \n            1236, 12347, 1238, 1239]}\n        expected = DataFrame(ex_data, columns=result.columns)\n        tm.assert_frame_equal(result, expected)\n\n    def test_shallow_nested(self):\n        data = [{'state': 'Florida', 'shortname': 'FL', 'info': {'governor':\n            'Rick Scott'}, 'counties': [{'name': 'Dade', 'population': \n            12345}, {'name': 'Broward', 'population': 40000}, {'name':\n            'Palm Beach', 'population': 60000}]}, {'state': 'Ohio',\n            'shortname': 'OH', 'info': {'governor': 'John Kasich'},\n            'counties': [{'name': 'Summit', 'population': 1234}, {'name':\n            'Cuyahoga', 'population': 1337}]}]\n        result = json_normalize(data, 'counties', ['state', 'shortname', [\n            'info', 'governor']])\n        ex_data = {'name': ['Dade', 'Broward', 'Palm Beach', 'Summit',\n            'Cuyahoga'], 'state': ['Florida'] * 3 + ['Ohio'] * 2,\n            'shortname': ['FL', 'FL', 'FL', 'OH', 'OH'], 'info.governor': [\n            'Rick Scott'] * 3 + ['John Kasich'] * 2, 'population': [12345, \n            40000, 60000, 1234, 1337]}\n        expected = DataFrame(ex_data, columns=result.columns)\n        tm.assert_frame_equal(result, expected)\n\n    def test_meta_name_conflict(self):\n        data = [{'foo': 'hello', 'bar': 'there', 'data': [{'foo':\n            'something', 'bar': 'else'}, {'foo': 'something2', 'bar':\n            'else2'}]}]\n        with pytest.raises(ValueError):\n            json_normalize(data, 'data', meta=['foo', 'bar'])\n        result = json_normalize(data, 'data', meta=['foo', 'bar'],\n            meta_prefix='meta')\n        for val in ['metafoo', 'metabar', 'foo', 'bar']:\n            assert val in result\n\n    def test_meta_parameter_not_modified(self):\n        data = [{'foo': 'hello', 'bar': 'there', 'data': [{'foo':\n            'something', 'bar': 'else'}, {'foo': 'something2', 'bar':\n            'else2'}]}]\n        COLUMNS = ['foo', 'bar']\n        result = json_normalize(data, 'data', meta=COLUMNS, meta_prefix='meta')\n        assert COLUMNS == ['foo', 'bar']\n        for val in ['metafoo', 'metabar', 'foo', 'bar']:\n            assert val in result\n\n    def test_record_prefix(self, state_data):\n        result = json_normalize(state_data[0], 'counties')\n        expected = DataFrame(state_data[0]['counties'])\n        tm.assert_frame_equal(result, expected)\n        result = json_normalize(state_data, 'counties', meta='state',\n            record_prefix='county_')\n        expected = []\n        for rec in state_data:\n            expected.extend(rec['counties'])\n        expected = DataFrame(expected)\n        expected = expected.rename(columns=lambda x: 'county_' + x)\n        expected['state'] = np.array(['Florida', 'Ohio']).repeat([3, 2])\n        tm.assert_frame_equal(result, expected)\n\n    def test_non_ascii_key(self):\n        if compat.PY3:\n            testjson = (b'[{\"\\xc3\\x9cnic\\xc3\\xb8de\":0,\"sub\":{\"A\":1, \"B\":2}},' +\n                b'{\"\\xc3\\x9cnic\\xc3\\xb8de\":1,\"sub\":{\"A\":3, \"B\":4}}]').decode(\n                'utf8')\n        else:\n            testjson = (\n                '[{\"\u00c3\\x9cnic\u00c3\u00b8de\":0,\"sub\":{\"A\":1, \"B\":2}},{\"\u00c3\\x9cnic\u00c3\u00b8de\":1,\"sub\":{\"A\":3, \"B\":4}}]'\n                )\n        testdata = {u'sub.A': [1, 3], u'sub.B': [2, 4],\n            b'\\xc3\\x9cnic\\xc3\\xb8de'.decode('utf8'): [0, 1]}\n        expected = DataFrame(testdata)\n        result = json_normalize(json.loads(testjson))\n        tm.assert_frame_equal(result, expected)\n\n    def test_missing_field(self, author_missing_data):\n        result = json_normalize(author_missing_data)\n        ex_data = [{'info': np.nan, 'author_name.first': np.nan,\n            'author_name.last_name': np.nan, 'info.created_at': np.nan,\n            'info.last_updated': np.nan}, {'info': None,\n            'author_name.first': 'Jane', 'author_name.last_name': 'Doe',\n            'info.created_at': '11/08/1993', 'info.last_updated': '26/05/2012'}\n            ]\n        expected = DataFrame(ex_data)\n        tm.assert_frame_equal(result, expected)\n",
                        "belong_class_name": "TestJSONNormalize",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "json_normalize",
                        "function_content": "def json_normalize(data, record_path=None, meta=None, meta_prefix=None,\n    record_prefix=None, errors='raise', sep='.'):\n    \"\"\"\n    \"Normalize\" semi-structured JSON data into a flat table\n\n    Parameters\n    ----------\n    data : dict or list of dicts\n        Unserialized JSON objects\n    record_path : string or list of strings, default None\n        Path in each object to list of records. If not passed, data will be\n        assumed to be an array of records\n    meta : list of paths (string or list of strings), default None\n        Fields to use as metadata for each record in resulting table\n    record_prefix : string, default None\n        If True, prefix records with dotted (?) path, e.g. foo.bar.field if\n        path to records is ['foo', 'bar']\n    meta_prefix : string, default None\n    errors : {'raise', 'ignore'}, default 'raise'\n\n        * 'ignore' : will ignore KeyError if keys listed in meta are not\n          always present\n        * 'raise' : will raise KeyError if keys listed in meta are not\n          always present\n\n        .. versionadded:: 0.20.0\n\n    sep : string, default '.'\n        Nested records will generate names separated by sep,\n        e.g., for sep='.', { 'foo' : { 'bar' : 0 } } -> foo.bar\n\n        .. versionadded:: 0.20.0\n\n\n    Returns\n    -------\n    frame : DataFrame\n\n    Examples\n    --------\n\n    >>> from pandas.io.json import json_normalize\n    >>> data = [{'id': 1, 'name': {'first': 'Coleen', 'last': 'Volk'}},\n    ...         {'name': {'given': 'Mose', 'family': 'Regner'}},\n    ...         {'id': 2, 'name': 'Faye Raker'}]\n    >>> json_normalize(data)\n        id        name name.family name.first name.given name.last\n    0  1.0         NaN         NaN     Coleen        NaN      Volk\n    1  NaN         NaN      Regner        NaN       Mose       NaN\n    2  2.0  Faye Raker         NaN        NaN        NaN       NaN\n\n    >>> data = [{'state': 'Florida',\n    ...          'shortname': 'FL',\n    ...          'info': {\n    ...               'governor': 'Rick Scott'\n    ...          },\n    ...          'counties': [{'name': 'Dade', 'population': 12345},\n    ...                      {'name': 'Broward', 'population': 40000},\n    ...                      {'name': 'Palm Beach', 'population': 60000}]},\n    ...         {'state': 'Ohio',\n    ...          'shortname': 'OH',\n    ...          'info': {\n    ...               'governor': 'John Kasich'\n    ...          },\n    ...          'counties': [{'name': 'Summit', 'population': 1234},\n    ...                       {'name': 'Cuyahoga', 'population': 1337}]}]\n    >>> result = json_normalize(data, 'counties', ['state', 'shortname',\n    ...                                           ['info', 'governor']])\n    >>> result\n             name  population info.governor    state shortname\n    0        Dade       12345    Rick Scott  Florida        FL\n    1     Broward       40000    Rick Scott  Florida        FL\n    2  Palm Beach       60000    Rick Scott  Florida        FL\n    3      Summit        1234   John Kasich     Ohio        OH\n    4    Cuyahoga        1337   John Kasich     Ohio        OH\n\n    \"\"\"\n\n    def _pull_field(js, spec):\n        result = js\n        if isinstance(spec, list):\n            for field in spec:\n                result = result[field]\n        else:\n            result = result[spec]\n        return result\n    if isinstance(data, list) and not data:\n        return DataFrame()\n    if isinstance(data, dict):\n        data = [data]\n    if record_path is None:\n        if any([[isinstance(x, dict) for x in compat.itervalues(y)] for y in\n            data]):\n            data = nested_to_record(data, sep=sep)\n        return DataFrame(data)\n    elif not isinstance(record_path, list):\n        record_path = [record_path]\n    if meta is None:\n        meta = []\n    elif not isinstance(meta, list):\n        meta = [meta]\n    meta = [(m if isinstance(m, list) else [m]) for m in meta]\n    records = []\n    lengths = []\n    meta_vals = defaultdict(list)\n    if not isinstance(sep, compat.string_types):\n        sep = str(sep)\n    meta_keys = [sep.join(val) for val in meta]\n\n    def _recursive_extract(data, path, seen_meta, level=0):\n        if len(path) > 1:\n            for obj in data:\n                for val, key in zip(meta, meta_keys):\n                    if level + 1 == len(val):\n                        seen_meta[key] = _pull_field(obj, val[-1])\n                _recursive_extract(obj[path[0]], path[1:], seen_meta, level\n                    =level + 1)\n        else:\n            for obj in data:\n                recs = _pull_field(obj, path[0])\n                lengths.append(len(recs))\n                for val, key in zip(meta, meta_keys):\n                    if level + 1 > len(val):\n                        meta_val = seen_meta[key]\n                    else:\n                        try:\n                            meta_val = _pull_field(obj, val[level:])\n                        except KeyError as e:\n                            if errors == 'ignore':\n                                meta_val = np.nan\n                            else:\n                                raise KeyError(\n                                    \"Try running with errors='ignore' as key {err} is not always present\"\n                                    .format(err=e))\n                    meta_vals[key].append(meta_val)\n                records.extend(recs)\n    _recursive_extract(data, record_path, {}, level=0)\n    result = DataFrame(records)\n    if record_prefix is not None:\n        result.rename(columns=lambda x: record_prefix + x, inplace=True)\n    for k, v in compat.iteritems(meta_vals):\n        if meta_prefix is not None:\n            k = meta_prefix + k\n        if k in result:\n            raise ValueError(\n                'Conflicting metadata name {name}, need distinguishing prefix '\n                .format(name=k))\n        result[k] = np.array(v).repeat(lengths)\n    return result\n",
                        "function_parameter": "(data, record_path=None, meta=None, meta_prefix=None,\n    record_prefix=None, errors='raise', sep='.')",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "rename",
                        "called_function_content": "def json_normalize(data, record_path=None, meta=None, meta_prefix=None,\n    record_prefix=None, errors='raise', sep='.'):\n    \"\"\"\n    \"Normalize\" semi-structured JSON data into a flat table\n\n    Parameters\n    ----------\n    data : dict or list of dicts\n        Unserialized JSON objects\n    record_path : string or list of strings, default None\n        Path in each object to list of records. If not passed, data will be\n        assumed to be an array of records\n    meta : list of paths (string or list of strings), default None\n        Fields to use as metadata for each record in resulting table\n    record_prefix : string, default None\n        If True, prefix records with dotted (?) path, e.g. foo.bar.field if\n        path to records is ['foo', 'bar']\n    meta_prefix : string, default None\n    errors : {'raise', 'ignore'}, default 'raise'\n\n        * 'ignore' : will ignore KeyError if keys listed in meta are not\n          always present\n        * 'raise' : will raise KeyError if keys listed in meta are not\n          always present\n\n        .. versionadded:: 0.20.0\n\n    sep : string, default '.'\n        Nested records will generate names separated by sep,\n        e.g., for sep='.', { 'foo' : { 'bar' : 0 } } -> foo.bar\n\n        .. versionadded:: 0.20.0\n\n\n    Returns\n    -------\n    frame : DataFrame\n\n    Examples\n    --------\n\n    >>> from pandas.io.json import json_normalize\n    >>> data = [{'id': 1, 'name': {'first': 'Coleen', 'last': 'Volk'}},\n    ...         {'name': {'given': 'Mose', 'family': 'Regner'}},\n    ...         {'id': 2, 'name': 'Faye Raker'}]\n    >>> json_normalize(data)\n        id        name name.family name.first name.given name.last\n    0  1.0         NaN         NaN     Coleen        NaN      Volk\n    1  NaN         NaN      Regner        NaN       Mose       NaN\n    2  2.0  Faye Raker         NaN        NaN        NaN       NaN\n\n    >>> data = [{'state': 'Florida',\n    ...          'shortname': 'FL',\n    ...          'info': {\n    ...               'governor': 'Rick Scott'\n    ...          },\n    ...          'counties': [{'name': 'Dade', 'population': 12345},\n    ...                      {'name': 'Broward', 'population': 40000},\n    ...                      {'name': 'Palm Beach', 'population': 60000}]},\n    ...         {'state': 'Ohio',\n    ...          'shortname': 'OH',\n    ...          'info': {\n    ...               'governor': 'John Kasich'\n    ...          },\n    ...          'counties': [{'name': 'Summit', 'population': 1234},\n    ...                       {'name': 'Cuyahoga', 'population': 1337}]}]\n    >>> result = json_normalize(data, 'counties', ['state', 'shortname',\n    ...                                           ['info', 'governor']])\n    >>> result\n             name  population info.governor    state shortname\n    0        Dade       12345    Rick Scott  Florida        FL\n    1     Broward       40000    Rick Scott  Florida        FL\n    2  Palm Beach       60000    Rick Scott  Florida        FL\n    3      Summit        1234   John Kasich     Ohio        OH\n    4    Cuyahoga        1337   John Kasich     Ohio        OH\n\n    \"\"\"\n\n    def _pull_field(js, spec):\n        result = js\n        if isinstance(spec, list):\n            for field in spec:\n                result = result[field]\n        else:\n            result = result[spec]\n        return result\n    if isinstance(data, list) and not data:\n        return DataFrame()\n    if isinstance(data, dict):\n        data = [data]\n    if record_path is None:\n        if any([[isinstance(x, dict) for x in compat.itervalues(y)] for y in\n            data]):\n            data = nested_to_record(data, sep=sep)\n        return DataFrame(data)\n    elif not isinstance(record_path, list):\n        record_path = [record_path]\n    if meta is None:\n        meta = []\n    elif not isinstance(meta, list):\n        meta = [meta]\n    meta = [(m if isinstance(m, list) else [m]) for m in meta]\n    records = []\n    lengths = []\n    meta_vals = defaultdict(list)\n    if not isinstance(sep, compat.string_types):\n        sep = str(sep)\n    meta_keys = [sep.join(val) for val in meta]\n\n    def _recursive_extract(data, path, seen_meta, level=0):\n        if len(path) > 1:\n            for obj in data:\n                for val, key in zip(meta, meta_keys):\n                    if level + 1 == len(val):\n                        seen_meta[key] = _pull_field(obj, val[-1])\n                _recursive_extract(obj[path[0]], path[1:], seen_meta, level\n                    =level + 1)\n        else:\n            for obj in data:\n                recs = _pull_field(obj, path[0])\n                lengths.append(len(recs))\n                for val, key in zip(meta, meta_keys):\n                    if level + 1 > len(val):\n                        meta_val = seen_meta[key]\n                    else:\n                        try:\n                            meta_val = _pull_field(obj, val[level:])\n                        except KeyError as e:\n                            if errors == 'ignore':\n                                meta_val = np.nan\n                            else:\n                                raise KeyError(\n                                    \"Try running with errors='ignore' as key {err} is not always present\"\n                                    .format(err=e))\n                    meta_vals[key].append(meta_val)\n                records.extend(recs)\n    _recursive_extract(data, record_path, {}, level=0)\n    result = DataFrame(records)\n    if record_prefix is not None:\n        result.rename(columns=lambda x: record_prefix + x, inplace=True)\n",
                        "called_arguments": "(columns=lambda x: record_prefix + x, inplace=True)",
                        "called_function_parameter": "(self, *args, **kwargs)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "rename",
                        "function_content": "@rewrite_axis_style_signature('mapper', [('copy', True), ('inplace', False),\n    ('level', None)])\ndef rename(self, *args, **kwargs):\n    \"\"\"Alter axes labels.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        mapper, index, columns : dict-like or function, optional\n            dict-like or functions transformations to apply to\n            that axis' values. Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index`` and\n            ``columns``.\n        axis : int or str, optional\n            Axis to target with ``mapper``. Can be either the axis name\n            ('index', 'columns') or number (0, 1). The default is 'index'.\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n            Whether to return a new DataFrame. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        renamed : DataFrame\n\n        See Also\n        --------\n        pandas.DataFrame.rename_axis\n\n        Examples\n        --------\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n        \"\"\"\n    axes = validate_axis_style_args(self, args, kwargs, 'mapper', 'rename')\n    kwargs.update(axes)\n    kwargs.pop('axis', None)\n    kwargs.pop('mapper', None)\n    return super(DataFrame, self).rename(**kwargs)\n",
                        "function_parameter": "(self, *args, **kwargs)",
                        "belong_class_content": "class DataFrame(NDFrame):\n    \"\"\" Two-dimensional size-mutable, potentially heterogeneous tabular data\n    structure with labeled axes (rows and columns). Arithmetic operations\n    align on both row and column labels. Can be thought of as a dict-like\n    container for Series objects. The primary pandas data structure.\n\n    Parameters\n    ----------\n    data : numpy ndarray (structured or homogeneous), dict, or DataFrame\n        Dict can contain Series, arrays, constants, or list-like objects\n\n        .. versionchanged :: 0.23.0\n           If data is a dict, argument order is maintained for Python 3.6\n           and later.\n\n    index : Index or array-like\n        Index to use for resulting frame. Will default to RangeIndex if\n        no indexing information part of input data and no index provided\n    columns : Index or array-like\n        Column labels to use for resulting frame. Will default to\n        RangeIndex (0, 1, 2, ..., n) if no column labels are provided\n    dtype : dtype, default None\n        Data type to force. Only a single dtype is allowed. If None, infer\n    copy : boolean, default False\n        Copy data from inputs. Only affects DataFrame / 2d ndarray input\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary.\n\n    >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df = pd.DataFrame(data=d)\n    >>> df\n       col1  col2\n    0     1     3\n    1     2     4\n\n    Notice that the inferred dtype is int64.\n\n    >>> df.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n\n    To enforce a single dtype:\n\n    >>> df = pd.DataFrame(data=d, dtype=np.int8)\n    >>> df.dtypes\n    col1    int8\n    col2    int8\n    dtype: object\n\n    Constructing DataFrame from numpy ndarray:\n\n    >>> df2 = pd.DataFrame(np.random.randint(low=0, high=10, size=(5, 5)),\n    ...                    columns=['a', 'b', 'c', 'd', 'e'])\n    >>> df2\n        a   b   c   d   e\n    0   2   8   8   3   4\n    1   4   2   9   0   9\n    2   1   0   7   8   0\n    3   5   1   7   1   3\n    4   6   0   2   4   2\n\n    See also\n    --------\n    DataFrame.from_records : constructor from tuples, also record arrays\n    DataFrame.from_dict : from dicts of Series, arrays, or dicts\n    DataFrame.from_items : from sequence of (key, value) pairs\n    pandas.read_csv, pandas.read_table, pandas.read_clipboard\n    \"\"\"\n\n    @property\n    def _constructor(self):\n        return DataFrame\n    _constructor_sliced = Series\n    _deprecations = NDFrame._deprecations | frozenset(['sortlevel',\n        'get_value', 'set_value', 'from_csv', 'from_items'])\n    _accessors = set()\n\n    @property\n    def _constructor_expanddim(self):\n        from pandas.core.panel import Panel\n        return Panel\n\n    def __init__(self, data=None, index=None, columns=None, dtype=None,\n        copy=False):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n        if isinstance(data, DataFrame):\n            data = data._data\n        if isinstance(data, BlockManager):\n            mgr = self._init_mgr(data, axes=dict(index=index, columns=\n                columns), dtype=dtype, copy=copy)\n        elif isinstance(data, dict):\n            mgr = self._init_dict(data, index, columns, dtype=dtype)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = _masked_rec_array_to_mgr(data, index, columns, dtype,\n                    copy)\n            else:\n                mask = ma.getmaskarray(data)\n                if mask.any():\n                    data, fill_value = maybe_upcast(data, copy=True)\n                    data[mask] = fill_value\n                else:\n                    data = data.copy()\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                    copy=copy)\n        elif isinstance(data, (np.ndarray, Series, Index)):\n            if data.dtype.names:\n                data_columns = list(data.dtype.names)\n                data = {k: data[k] for k in data_columns}\n                if columns is None:\n                    columns = data_columns\n                mgr = self._init_dict(data, index, columns, dtype=dtype)\n            elif getattr(data, 'name', None) is not None:\n                mgr = self._init_dict({data.name: data}, index, columns,\n                    dtype=dtype)\n            else:\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                    copy=copy)\n        elif isinstance(data, (list, types.GeneratorType)):\n            if isinstance(data, types.GeneratorType):\n                data = list(data)\n            if len(data) > 0:\n                if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                    if is_named_tuple(data[0]) and columns is None:\n                        columns = data[0]._fields\n                    arrays, columns = _to_arrays(data, columns, dtype=dtype)\n                    columns = _ensure_index(columns)\n                    if index is None:\n                        if isinstance(data[0], Series):\n                            index = _get_names_from_index(data)\n                        elif isinstance(data[0], Categorical):\n                            index = com._default_index(len(data[0]))\n                        else:\n                            index = com._default_index(len(data))\n                    mgr = _arrays_to_mgr(arrays, columns, index, columns,\n                        dtype=dtype)\n                else:\n                    mgr = self._init_ndarray(data, index, columns, dtype=\n                        dtype, copy=copy)\n            else:\n                mgr = self._init_dict({}, index, columns, dtype=dtype)\n        elif isinstance(data, collections.Iterator):\n            raise TypeError(\"data argument can't be an iterator\")\n        else:\n            try:\n                arr = np.array(data, dtype=dtype, copy=copy)\n            except (ValueError, TypeError) as e:\n                exc = TypeError(\n                    'DataFrame constructor called with incompatible data and dtype: {e}'\n                    .format(e=e))\n                raise_with_traceback(exc)\n            if arr.ndim == 0 and index is not None and columns is not None:\n                values = cast_scalar_to_array((len(index), len(columns)),\n                    data, dtype=dtype)\n                mgr = self._init_ndarray(values, index, columns, dtype=\n                    values.dtype, copy=False)\n            else:\n                raise ValueError('DataFrame constructor not properly called!')\n        NDFrame.__init__(self, mgr, fastpath=True)\n\n    def _init_dict(self, data, index, columns, dtype=None):\n        \"\"\"\n        Segregate Series based on type and coerce into matrices.\n        Needs to handle a lot of exceptional cases.\n        \"\"\"\n        if columns is not None:\n            arrays = Series(data, index=columns, dtype=object)\n            data_names = arrays.index\n            missing = arrays.isnull()\n            if index is None:\n                index = extract_index(arrays[~missing])\n            else:\n                index = _ensure_index(index)\n            if missing.any() and not is_integer_dtype(dtype):\n                if dtype is None or np.issubdtype(dtype, np.flexible):\n                    nan_dtype = object\n                else:\n                    nan_dtype = dtype\n                v = construct_1d_arraylike_from_scalar(np.nan, len(index),\n                    nan_dtype)\n                arrays.loc[missing] = [v] * missing.sum()\n        else:\n            keys = com._dict_keys_to_ordered_list(data)\n            columns = data_names = Index(keys)\n            arrays = [data[k] for k in keys]\n        return _arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)\n\n    def _init_ndarray(self, values, index, columns, dtype=None, copy=False):\n        if isinstance(values, Series):\n            if columns is None:\n                if values.name is not None:\n                    columns = [values.name]\n            if index is None:\n                index = values.index\n            else:\n                values = values.reindex(index)\n            if not len(values) and columns is not None and len(columns):\n                values = np.empty((0, 1), dtype=object)\n\n        def _get_axes(N, K, index=index, columns=columns):\n            if index is None:\n                index = com._default_index(N)\n            else:\n                index = _ensure_index(index)\n            if columns is None:\n                columns = com._default_index(K)\n            else:\n                columns = _ensure_index(columns)\n            return index, columns\n        if is_categorical_dtype(getattr(values, 'dtype', None)\n            ) or is_categorical_dtype(dtype):\n            if not hasattr(values, 'dtype'):\n                values = _prep_ndarray(values, copy=copy)\n                values = values.ravel()\n            elif copy:\n                values = values.copy()\n            index, columns = _get_axes(len(values), 1)\n            return _arrays_to_mgr([values], columns, index, columns, dtype=\n                dtype)\n        elif is_datetimetz(values) or is_extension_array_dtype(values):\n            if columns is None:\n                columns = [0]\n            return _arrays_to_mgr([values], columns, index, columns, dtype=\n                dtype)\n        values = _prep_ndarray(values, copy=copy)\n        if dtype is not None:\n            if not is_dtype_equal(values.dtype, dtype):\n                try:\n                    values = values.astype(dtype)\n                except Exception as orig:\n                    e = ValueError(\n                        \"failed to cast to '{dtype}' (Exception was: {orig})\"\n                        .format(dtype=dtype, orig=orig))\n                    raise_with_traceback(e)\n        index, columns = _get_axes(*values.shape)\n        values = values.T\n        if dtype is None and is_object_dtype(values):\n            values = maybe_infer_to_datetimelike(values)\n        return create_block_manager_from_blocks([values], [columns, index])\n\n    @property\n    def axes(self):\n        \"\"\"\n        Return a list representing the axes of the DataFrame.\n\n        It has the row axis labels and column axis labels as the only members.\n        They are returned in that order.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.axes\n        [RangeIndex(start=0, stop=2, step=1), Index(['coll', 'col2'],\n        dtype='object')]\n        \"\"\"\n        return [self.index, self.columns]\n\n    @property\n    def shape(self):\n        \"\"\"\n        Return a tuple representing the dimensionality of the DataFrame.\n\n        See Also\n        --------\n        ndarray.shape\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.shape\n        (2, 2)\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n        ...                    'col3': [5, 6]})\n        >>> df.shape\n        (2, 3)\n        \"\"\"\n        return len(self.index), len(self.columns)\n\n    def _repr_fits_vertical_(self):\n        \"\"\"\n        Check length against max_rows.\n        \"\"\"\n        max_rows = get_option('display.max_rows')\n        return len(self) <= max_rows\n\n    def _repr_fits_horizontal_(self, ignore_width=False):\n        \"\"\"\n        Check if full repr fits in horizontal boundaries imposed by the display\n        options width and max_columns. In case off non-interactive session, no\n        boundaries apply.\n\n        ignore_width is here so ipnb+HTML output can behave the way\n        users expect. display.max_columns remains in effect.\n        GH3541, GH3573\n        \"\"\"\n        width, height = console.get_console_size()\n        max_columns = get_option('display.max_columns')\n        nb_columns = len(self.columns)\n        if (max_columns and nb_columns > max_columns or not ignore_width and\n            width and nb_columns > width // 2):\n            return False\n        if ignore_width or not com.in_interactive_session():\n            return True\n        if get_option('display.width') is not None or com.in_ipython_frontend(\n            ):\n            max_rows = 1\n        else:\n            max_rows = get_option('display.max_rows')\n        buf = StringIO()\n        d = self\n        if not max_rows is None:\n            d = d.iloc[:min(max_rows, len(d))]\n        else:\n            return True\n        d.to_string(buf=buf)\n        value = buf.getvalue()\n        repr_width = max(len(l) for l in value.split('\\n'))\n        return repr_width < width\n\n    def _info_repr(self):\n        \"\"\"True if the repr should show the info view.\"\"\"\n        info_repr_option = get_option('display.large_repr') == 'info'\n        return info_repr_option and not (self._repr_fits_horizontal_() and\n            self._repr_fits_vertical_())\n\n    def __unicode__(self):\n        \"\"\"\n        Return a string representation for a particular DataFrame\n\n        Invoked by unicode(df) in py2 only. Yields a Unicode String in both\n        py2/py3.\n        \"\"\"\n        buf = StringIO(u(''))\n        if self._info_repr():\n            self.info(buf=buf)\n            return buf.getvalue()\n        max_rows = get_option('display.max_rows')\n        max_cols = get_option('display.max_columns')\n        show_dimensions = get_option('display.show_dimensions')\n        if get_option('display.expand_frame_repr'):\n            width, _ = console.get_console_size()\n        else:\n            width = None\n        self.to_string(buf=buf, max_rows=max_rows, max_cols=max_cols,\n            line_width=width, show_dimensions=show_dimensions)\n        return buf.getvalue()\n\n    def _repr_html_(self):\n        \"\"\"\n        Return a html representation for a particular DataFrame.\n        Mainly for IPython notebook.\n        \"\"\"\n        if com.in_qtconsole():\n            return None\n        if self._info_repr():\n            buf = StringIO(u(''))\n            self.info(buf=buf)\n            val = buf.getvalue().replace('<', '&lt;', 1)\n            val = val.replace('>', '&gt;', 1)\n            return '<pre>' + val + '</pre>'\n        if get_option('display.notebook_repr_html'):\n            max_rows = get_option('display.max_rows')\n            max_cols = get_option('display.max_columns')\n            show_dimensions = get_option('display.show_dimensions')\n            return self.to_html(max_rows=max_rows, max_cols=max_cols,\n                show_dimensions=show_dimensions, notebook=True)\n        else:\n            return None\n\n    @property\n    def style(self):\n        \"\"\"\n        Property returning a Styler object containing methods for\n        building a styled HTML representation fo the DataFrame.\n\n        See Also\n        --------\n        pandas.io.formats.style.Styler\n        \"\"\"\n        from pandas.io.formats.style import Styler\n        return Styler(self)\n\n    def iteritems(self):\n        \"\"\"\n        Iterator over (column name, Series) pairs.\n\n        See also\n        --------\n        iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n        itertuples : Iterate over DataFrame rows as namedtuples of the values.\n\n        \"\"\"\n        if self.columns.is_unique and hasattr(self, '_item_cache'):\n            for k in self.columns:\n                yield k, self._get_item_cache(k)\n        else:\n            for i, k in enumerate(self.columns):\n                yield k, self._ixs(i, axis=1)\n\n    def iterrows(self):\n        \"\"\"\n        Iterate over DataFrame rows as (index, Series) pairs.\n\n        Notes\n        -----\n\n        1. Because ``iterrows`` returns a Series for each row,\n           it does **not** preserve dtypes across the rows (dtypes are\n           preserved across columns for DataFrames). For example,\n\n           >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n           >>> row = next(df.iterrows())[1]\n           >>> row\n           int      1.0\n           float    1.5\n           Name: 0, dtype: float64\n           >>> print(row['int'].dtype)\n           float64\n           >>> print(df['int'].dtype)\n           int64\n\n           To preserve dtypes while iterating over the rows, it is better\n           to use :meth:`itertuples` which returns namedtuples of the values\n           and which is generally faster than ``iterrows``.\n\n        2. You should **never modify** something you are iterating over.\n           This is not guaranteed to work in all cases. Depending on the\n           data types, the iterator returns a copy and not a view, and writing\n           to it will have no effect.\n\n        Returns\n        -------\n        it : generator\n            A generator that iterates over the rows of the frame.\n\n        See also\n        --------\n        itertuples : Iterate over DataFrame rows as namedtuples of the values.\n        iteritems : Iterate over (column name, Series) pairs.\n\n        \"\"\"\n        columns = self.columns\n        klass = self._constructor_sliced\n        for k, v in zip(self.index, self.values):\n            s = klass(v, index=columns, name=k)\n            yield k, s\n\n    def itertuples(self, index=True, name='Pandas'):\n        \"\"\"\n        Iterate over DataFrame rows as namedtuples, with index value as first\n        element of the tuple.\n\n        Parameters\n        ----------\n        index : boolean, default True\n            If True, return the index as the first element of the tuple.\n        name : string, default \"Pandas\"\n            The name of the returned namedtuples or None to return regular\n            tuples.\n\n        Notes\n        -----\n        The column names will be renamed to positional names if they are\n        invalid Python identifiers, repeated, or start with an underscore.\n        With a large number of columns (>255), regular tuples are returned.\n\n        See also\n        --------\n        iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n        iteritems : Iterate over (column name, Series) pairs.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [0.1, 0.2]},\n                              index=['a', 'b'])\n        >>> df\n           col1  col2\n        a     1   0.1\n        b     2   0.2\n        >>> for row in df.itertuples():\n        ...     print(row)\n        ...\n        Pandas(Index='a', col1=1, col2=0.10000000000000001)\n        Pandas(Index='b', col1=2, col2=0.20000000000000001)\n\n        \"\"\"\n        arrays = []\n        fields = []\n        if index:\n            arrays.append(self.index)\n            fields.append('Index')\n        arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))\n        if name is not None and len(self.columns) + index < 256:\n            try:\n                itertuple = collections.namedtuple(name, fields + list(self\n                    .columns), rename=True)\n                return map(itertuple._make, zip(*arrays))\n            except Exception:\n                pass\n        return zip(*arrays)\n    items = iteritems\n\n    def __len__(self):\n        \"\"\"Returns length of info axis, but here we use the index \"\"\"\n        return len(self.index)\n\n    def dot(self, other):\n        \"\"\"\n        Matrix multiplication with DataFrame or Series objects.  Can also be\n        called using `self @ other` in Python >= 3.5.\n\n        Parameters\n        ----------\n        other : DataFrame or Series\n\n        Returns\n        -------\n        dot_product : DataFrame or Series\n        \"\"\"\n        if isinstance(other, (Series, DataFrame)):\n            common = self.columns.union(other.index)\n            if len(common) > len(self.columns) or len(common) > len(other.index\n                ):\n                raise ValueError('matrices are not aligned')\n            left = self.reindex(columns=common, copy=False)\n            right = other.reindex(index=common, copy=False)\n            lvals = left.values\n            rvals = right.values\n        else:\n            left = self\n            lvals = self.values\n            rvals = np.asarray(other)\n            if lvals.shape[1] != rvals.shape[0]:\n                raise ValueError('Dot product shape mismatch, {l} vs {r}'.\n                    format(l=lvals.shape, r=rvals.shape))\n        if isinstance(other, DataFrame):\n            return self._constructor(np.dot(lvals, rvals), index=left.index,\n                columns=other.columns)\n        elif isinstance(other, Series):\n            return Series(np.dot(lvals, rvals), index=left.index)\n        elif isinstance(rvals, (np.ndarray, Index)):\n            result = np.dot(lvals, rvals)\n            if result.ndim == 2:\n                return self._constructor(result, index=left.index)\n            else:\n                return Series(result, index=left.index)\n        else:\n            raise TypeError('unsupported type: {oth}'.format(oth=type(other)))\n\n    def __matmul__(self, other):\n        \"\"\" Matrix multiplication using binary `@` operator in Python>=3.5 \"\"\"\n        return self.dot(other)\n\n    def __rmatmul__(self, other):\n        \"\"\" Matrix multiplication using binary `@` operator in Python>=3.5 \"\"\"\n        return self.T.dot(np.transpose(other)).T\n\n    @classmethod\n    def from_dict(cls, data, orient='columns', dtype=None, columns=None):\n        \"\"\"\n        Construct DataFrame from dict of array-like or dicts.\n\n        Creates DataFrame object from dictionary by columns or by index\n        allowing dtype specification.\n\n        Parameters\n        ----------\n        data : dict\n            Of the form {field : array-like} or {field : dict}.\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the passed dict\n            should be the columns of the resulting DataFrame, pass 'columns'\n            (default). Otherwise if the keys should be rows, pass 'index'.\n        dtype : dtype, default None\n            Data type to force, otherwise infer.\n        columns : list, default None\n            Column labels to use when ``orient='index'``. Raises a ValueError\n            if used with ``orient='columns'``.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        pandas.DataFrame\n\n        See Also\n        --------\n        DataFrame.from_records : DataFrame from ndarray (structured\n            dtype), list of tuples, dict, or DataFrame\n        DataFrame : DataFrame object creation using constructor\n\n        Examples\n        --------\n        By default the keys of the dict become the DataFrame columns:\n\n        >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data)\n           col_1 col_2\n        0      3     a\n        1      2     b\n        2      1     c\n        3      0     d\n\n        Specify ``orient='index'`` to create the DataFrame using dictionary\n        keys as rows:\n\n        >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data, orient='index')\n               0  1  2  3\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n\n        When using the 'index' orientation, the column names can be\n        specified manually:\n\n        >>> pd.DataFrame.from_dict(data, orient='index',\n        ...                        columns=['A', 'B', 'C', 'D'])\n               A  B  C  D\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n        \"\"\"\n        index = None\n        orient = orient.lower()\n        if orient == 'index':\n            if len(data) > 0:\n                if isinstance(list(data.values())[0], (Series, dict)):\n                    data = _from_nested_dict(data)\n                else:\n                    data, index = list(data.values()), list(data.keys())\n        elif orient == 'columns':\n            if columns is not None:\n                raise ValueError(\n                    \"cannot use columns parameter with orient='columns'\")\n        else:\n            raise ValueError('only recognize index or columns for orient')\n        return cls(data, index=index, columns=columns, dtype=dtype)\n\n    def to_dict(self, orient='dict', into=dict):\n        \"\"\"\n        Convert the DataFrame to a dictionary.\n\n        The type of the key-value pairs can be customized with the parameters\n        (see below).\n\n        Parameters\n        ----------\n        orient : str {'dict', 'list', 'series', 'split', 'records', 'index'}\n            Determines the type of the values of the dictionary.\n\n            - 'dict' (default) : dict like {column -> {index -> value}}\n            - 'list' : dict like {column -> [values]}\n            - 'series' : dict like {column -> Series(values)}\n            - 'split' : dict like\n              {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}\n            - 'records' : list like\n              [{column -> value}, ... , {column -> value}]\n            - 'index' : dict like {index -> {column -> value}}\n\n            Abbreviations are allowed. `s` indicates `series` and `sp`\n            indicates `split`.\n\n        into : class, default dict\n            The collections.Mapping subclass used for all Mappings\n            in the return value.  Can be the actual class or an empty\n            instance of the mapping type you want.  If you want a\n            collections.defaultdict, you must pass it initialized.\n\n            .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        result : collections.Mapping like {column -> {index -> value}}\n\n        See Also\n        --------\n        DataFrame.from_dict: create a DataFrame from a dictionary\n        DataFrame.to_json: convert a DataFrame to JSON format\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2],\n        ...                    'col2': [0.5, 0.75]},\n        ...                   index=['a', 'b'])\n        >>> df\n           col1  col2\n        a     1   0.50\n        b     2   0.75\n        >>> df.to_dict()\n        {'col1': {'a': 1, 'b': 2}, 'col2': {'a': 0.5, 'b': 0.75}}\n\n        You can specify the return orientation.\n\n        >>> df.to_dict('series')\n        {'col1': a    1\n                 b    2\n                 Name: col1, dtype: int64,\n         'col2': a    0.50\n                 b    0.75\n                 Name: col2, dtype: float64}\n\n        >>> df.to_dict('split')\n        {'index': ['a', 'b'], 'columns': ['col1', 'col2'],\n         'data': [[1.0, 0.5], [2.0, 0.75]]}\n\n        >>> df.to_dict('records')\n        [{'col1': 1.0, 'col2': 0.5}, {'col1': 2.0, 'col2': 0.75}]\n\n        >>> df.to_dict('index')\n        {'a': {'col1': 1.0, 'col2': 0.5}, 'b': {'col1': 2.0, 'col2': 0.75}}\n\n        You can also specify the mapping type.\n\n        >>> from collections import OrderedDict, defaultdict\n        >>> df.to_dict(into=OrderedDict)\n        OrderedDict([('col1', OrderedDict([('a', 1), ('b', 2)])),\n                     ('col2', OrderedDict([('a', 0.5), ('b', 0.75)]))])\n\n        If you want a `defaultdict`, you need to initialize it:\n\n        >>> dd = defaultdict(list)\n        >>> df.to_dict('records', into=dd)\n        [defaultdict(<class 'list'>, {'col1': 1.0, 'col2': 0.5}),\n         defaultdict(<class 'list'>, {'col1': 2.0, 'col2': 0.75})]\n        \"\"\"\n        if not self.columns.is_unique:\n            warnings.warn(\n                'DataFrame columns are not unique, some columns will be omitted.'\n                , UserWarning, stacklevel=2)\n        into_c = com.standardize_mapping(into)\n        if orient.lower().startswith('d'):\n            return into_c((k, v.to_dict(into)) for k, v in compat.iteritems\n                (self))\n        elif orient.lower().startswith('l'):\n            return into_c((k, v.tolist()) for k, v in compat.iteritems(self))\n        elif orient.lower().startswith('sp'):\n            return into_c((('index', self.index.tolist()), ('columns', self\n                .columns.tolist()), ('data', lib.map_infer(self.values.\n                ravel(), com._maybe_box_datetimelike).reshape(self.values.\n                shape).tolist())))\n        elif orient.lower().startswith('s'):\n            return into_c((k, com._maybe_box_datetimelike(v)) for k, v in\n                compat.iteritems(self))\n        elif orient.lower().startswith('r'):\n            return [into_c((k, com._maybe_box_datetimelike(v)) for k, v in\n                zip(self.columns, np.atleast_1d(row))) for row in self.values]\n        elif orient.lower().startswith('i'):\n            return into_c((t[0], dict(zip(self.columns, t[1:]))) for t in\n                self.itertuples())\n        else:\n            raise ValueError(\"orient '{o}' not understood\".format(o=orient))\n\n    def to_gbq(self, destination_table, project_id, chunksize=None, verbose\n        =None, reauth=False, if_exists='fail', private_key=None,\n        auth_local_webserver=False, table_schema=None):\n        \"\"\"\n        Write a DataFrame to a Google BigQuery table.\n\n        This function requires the `pandas-gbq package\n        <https://pandas-gbq.readthedocs.io>`__.\n\n        Authentication to the Google BigQuery service is via OAuth 2.0.\n\n        - If ``private_key`` is provided, the library loads the JSON service\n          account credentials and uses those to authenticate.\n\n        - If no ``private_key`` is provided, the library tries `application\n          default credentials`_.\n\n          .. _application default credentials:\n              https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n\n        - If application default credentials are not found or cannot be used\n          with BigQuery, the library authenticates with user account\n          credentials. In this case, you will be asked to grant permissions\n          for product name 'pandas GBQ'.\n\n        Parameters\n        ----------\n        destination_table : str\n            Name of table to be written, in the form 'dataset.tablename'.\n        project_id : str\n            Google BigQuery Account project ID.\n        chunksize : int, optional\n            Number of rows to be inserted in each chunk from the dataframe.\n            Set to ``None`` to load the whole dataframe at once.\n        reauth : bool, default False\n            Force Google BigQuery to re-authenticate the user. This is useful\n            if multiple accounts are used.\n        if_exists : str, default 'fail'\n            Behavior when the destination table exists. Value can be one of:\n\n            ``'fail'``\n                If table exists, do nothing.\n            ``'replace'``\n                If table exists, drop it, recreate it, and insert data.\n            ``'append'``\n                If table exists, insert data. Create if does not exist.\n        private_key : str, optional\n            Service account private key in JSON format. Can be file path\n            or string contents. This is useful for remote server\n            authentication (eg. Jupyter/IPython notebook on remote host).\n        auth_local_webserver : bool, default False\n            Use the `local webserver flow`_ instead of the `console flow`_\n            when getting user credentials.\n\n            .. _local webserver flow:\n                http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n            .. _console flow:\n                http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n            *New in version 0.2.0 of pandas-gbq*.\n        table_schema : list of dicts, optional\n            List of BigQuery table fields to which according DataFrame\n            columns conform to, e.g. ``[{'name': 'col1', 'type':\n            'STRING'},...]``. If schema is not provided, it will be\n            generated according to dtypes of DataFrame columns. See\n            BigQuery API documentation on available names of a field.\n\n            *New in version 0.3.1 of pandas-gbq*.\n        verbose : boolean, deprecated\n            *Deprecated in Pandas-GBQ 0.4.0.* Use the `logging module\n            to adjust verbosity instead\n            <https://pandas-gbq.readthedocs.io/en/latest/intro.html#logging>`__.\n\n        See Also\n        --------\n        pandas_gbq.to_gbq : This function in the pandas-gbq library.\n        pandas.read_gbq : Read a DataFrame from Google BigQuery.\n        \"\"\"\n        from pandas.io import gbq\n        return gbq.to_gbq(self, destination_table, project_id, chunksize=\n            chunksize, verbose=verbose, reauth=reauth, if_exists=if_exists,\n            private_key=private_key, auth_local_webserver=\n            auth_local_webserver, table_schema=table_schema)\n\n    @classmethod\n    def from_records(cls, data, index=None, exclude=None, columns=None,\n        coerce_float=False, nrows=None):\n        \"\"\"\n        Convert structured or record ndarray to DataFrame\n\n        Parameters\n        ----------\n        data : ndarray (structured dtype), list of tuples, dict, or DataFrame\n        index : string, list of fields, array-like\n            Field of array to use as the index, alternately a specific set of\n            input labels to use\n        exclude : sequence, default None\n            Columns or fields to exclude\n        columns : sequence, default None\n            Column names to use. If the passed data do not have names\n            associated with them, this argument provides names for the\n            columns. Otherwise this argument indicates the order of the columns\n            in the result (any names not found in the data will become all-NA\n            columns)\n        coerce_float : boolean, default False\n            Attempt to convert values of non-string, non-numeric objects (like\n            decimal.Decimal) to floating point, useful for SQL result sets\n\n        Returns\n        -------\n        df : DataFrame\n        \"\"\"\n        if columns is not None:\n            columns = _ensure_index(columns)\n        if is_iterator(data):\n            if nrows == 0:\n                return cls()\n            try:\n                first_row = next(data)\n            except StopIteration:\n                return cls(index=index, columns=columns)\n            dtype = None\n            if hasattr(first_row, 'dtype') and first_row.dtype.names:\n                dtype = first_row.dtype\n            values = [first_row]\n            if nrows is None:\n                values += data\n            else:\n                values.extend(itertools.islice(data, nrows - 1))\n            if dtype is not None:\n                data = np.array(values, dtype=dtype)\n            else:\n                data = values\n        if isinstance(data, dict):\n            if columns is None:\n                columns = arr_columns = _ensure_index(sorted(data))\n                arrays = [data[k] for k in columns]\n            else:\n                arrays = []\n                arr_columns = []\n                for k, v in compat.iteritems(data):\n                    if k in columns:\n                        arr_columns.append(k)\n                        arrays.append(v)\n                arrays, arr_columns = _reorder_arrays(arrays, arr_columns,\n                    columns)\n        elif isinstance(data, (np.ndarray, DataFrame)):\n            arrays, columns = _to_arrays(data, columns)\n            if columns is not None:\n                columns = _ensure_index(columns)\n            arr_columns = columns\n        else:\n            arrays, arr_columns = _to_arrays(data, columns, coerce_float=\n                coerce_float)\n            arr_columns = _ensure_index(arr_columns)\n            if columns is not None:\n                columns = _ensure_index(columns)\n            else:\n                columns = arr_columns\n        if exclude is None:\n            exclude = set()\n        else:\n            exclude = set(exclude)\n        result_index = None\n        if index is not None:\n            if isinstance(index, compat.string_types) or not hasattr(index,\n                '__iter__'):\n                i = columns.get_loc(index)\n                exclude.add(index)\n                if len(arrays) > 0:\n                    result_index = Index(arrays[i], name=index)\n                else:\n                    result_index = Index([], name=index)\n            else:\n                try:\n                    to_remove = [arr_columns.get_loc(field) for field in index]\n                    index_data = [arrays[i] for i in to_remove]\n                    result_index = _ensure_index_from_sequences(index_data,\n                        names=index)\n                    exclude.update(index)\n                except Exception:\n                    result_index = index\n        if any(exclude):\n            arr_exclude = [x for x in exclude if x in arr_columns]\n            to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n            arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n            arr_columns = arr_columns.drop(arr_exclude)\n            columns = columns.drop(exclude)\n        mgr = _arrays_to_mgr(arrays, arr_columns, result_index, columns)\n        return cls(mgr)\n\n    def to_records(self, index=True, convert_datetime64=None):\n        \"\"\"\n        Convert DataFrame to a NumPy record array.\n\n        Index will be put in the 'index' field of the record array if\n        requested.\n\n        Parameters\n        ----------\n        index : boolean, default True\n            Include index in resulting record array, stored in 'index' field.\n        convert_datetime64 : boolean, default None\n            .. deprecated:: 0.23.0\n\n            Whether to convert the index to datetime.datetime if it is a\n            DatetimeIndex.\n\n        Returns\n        -------\n        y : numpy.recarray\n\n        See Also\n        --------\n        DataFrame.from_records: convert structured or record ndarray\n            to DataFrame.\n        numpy.recarray: ndarray that allows field access using\n            attributes, analogous to typed columns in a\n            spreadsheet.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n        ...                   index=['a', 'b'])\n        >>> df\n           A     B\n        a  1  0.50\n        b  2  0.75\n        >>> df.to_records()\n        rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n                  dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n        The index can be excluded from the record array:\n\n        >>> df.to_records(index=False)\n        rec.array([(1, 0.5 ), (2, 0.75)],\n                  dtype=[('A', '<i8'), ('B', '<f8')])\n\n        By default, timestamps are converted to `datetime.datetime`:\n\n        >>> df.index = pd.date_range('2018-01-01 09:00', periods=2, freq='min')\n        >>> df\n                             A     B\n        2018-01-01 09:00:00  1  0.50\n        2018-01-01 09:01:00  2  0.75\n        >>> df.to_records()\n        rec.array([(datetime.datetime(2018, 1, 1, 9, 0), 1, 0.5 ),\n                   (datetime.datetime(2018, 1, 1, 9, 1), 2, 0.75)],\n                  dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n        The timestamp conversion can be disabled so NumPy's datetime64\n        data type is used instead:\n\n        >>> df.to_records(convert_datetime64=False)\n        rec.array([('2018-01-01T09:00:00.000000000', 1, 0.5 ),\n                   ('2018-01-01T09:01:00.000000000', 2, 0.75)],\n                  dtype=[('index', '<M8[ns]'), ('A', '<i8'), ('B', '<f8')])\n        \"\"\"\n        if convert_datetime64 is not None:\n            warnings.warn(\n                \"The 'convert_datetime64' parameter is deprecated and will be removed in a future version\"\n                , FutureWarning, stacklevel=2)\n        if index:\n            if is_datetime64_any_dtype(self.index) and convert_datetime64:\n                ix_vals = [self.index.to_pydatetime()]\n            elif isinstance(self.index, MultiIndex):\n                ix_vals = lmap(np.array, zip(*self.index.values))\n            else:\n                ix_vals = [self.index.values]\n            arrays = ix_vals + [self[c].get_values() for c in self.columns]\n            count = 0\n            index_names = list(self.index.names)\n            if isinstance(self.index, MultiIndex):\n                for i, n in enumerate(index_names):\n                    if n is None:\n                        index_names[i] = 'level_%d' % count\n                        count += 1\n            elif index_names[0] is None:\n                index_names = ['index']\n            names = lmap(compat.text_type, index_names) + lmap(compat.\n                text_type, self.columns)\n        else:\n            arrays = [self[c].get_values() for c in self.columns]\n            names = lmap(compat.text_type, self.columns)\n        formats = [v.dtype for v in arrays]\n        return np.rec.fromarrays(arrays, dtype={'names': names, 'formats':\n            formats})\n\n    @classmethod\n    def from_items(cls, items, columns=None, orient='columns'):\n        \"\"\"Construct a dataframe from a list of tuples\n\n        .. deprecated:: 0.23.0\n          `from_items` is deprecated and will be removed in a future version.\n          Use :meth:`DataFrame.from_dict(dict(items)) <DataFrame.from_dict>`\n          instead.\n          :meth:`DataFrame.from_dict(OrderedDict(items)) <DataFrame.from_dict>`\n          may be used to preserve the key order.\n\n        Convert (key, value) pairs to DataFrame. The keys will be the axis\n        index (usually the columns, but depends on the specified\n        orientation). The values should be arrays or Series.\n\n        Parameters\n        ----------\n        items : sequence of (key, value) pairs\n            Values should be arrays or Series.\n        columns : sequence of column labels, optional\n            Must be passed if orient='index'.\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the\n            input correspond to column labels, pass 'columns'\n            (default). Otherwise if the keys correspond to the index,\n            pass 'index'.\n\n        Returns\n        -------\n        frame : DataFrame\n        \"\"\"\n        warnings.warn(\n            'from_items is deprecated. Please use DataFrame.from_dict(dict(items), ...) instead. DataFrame.from_dict(OrderedDict(items)) may be used to preserve the key order.'\n            , FutureWarning, stacklevel=2)\n        keys, values = lzip(*items)\n        if orient == 'columns':\n            if columns is not None:\n                columns = _ensure_index(columns)\n                idict = dict(items)\n                if len(idict) < len(items):\n                    if not columns.equals(_ensure_index(keys)):\n                        raise ValueError(\n                            'With non-unique item names, passed columns must be identical'\n                            )\n                    arrays = values\n                else:\n                    arrays = [idict[k] for k in columns if k in idict]\n            else:\n                columns = _ensure_index(keys)\n                arrays = values\n            try:\n                return cls._from_arrays(arrays, columns, None)\n            except ValueError:\n                if not is_nested_list_like(values):\n                    raise ValueError(\n                        'The value in each (key, value) pair must be an array, Series, or dict'\n                        )\n        elif orient == 'index':\n            if columns is None:\n                raise TypeError(\"Must pass columns with orient='index'\")\n            keys = _ensure_index(keys)\n            try:\n                arr = np.array(values, dtype=object).T\n                data = [lib.maybe_convert_objects(v) for v in arr]\n                return cls._from_arrays(data, columns, keys)\n            except TypeError:\n                if not is_nested_list_like(values):\n                    raise ValueError(\n                        'The value in each (key, value) pair must be an array, Series, or dict'\n                        )\n        else:\n            raise ValueError(\"'orient' must be either 'columns' or 'index'\")\n\n    @classmethod\n    def _from_arrays(cls, arrays, columns, index, dtype=None):\n        mgr = _arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n        return cls(mgr)\n\n    @classmethod\n    def from_csv(cls, path, header=0, sep=',', index_col=0, parse_dates=\n        True, encoding=None, tupleize_cols=None, infer_datetime_format=False):\n        \"\"\"Read CSV file.\n\n        .. deprecated:: 0.21.0\n            Use :func:`pandas.read_csv` instead.\n\n        It is preferable to use the more powerful :func:`pandas.read_csv`\n        for most general purposes, but ``from_csv`` makes for an easy\n        roundtrip to and from a file (the exact counterpart of\n        ``to_csv``), especially with a DataFrame of time series data.\n\n        This method only differs from the preferred :func:`pandas.read_csv`\n        in some defaults:\n\n        - `index_col` is ``0`` instead of ``None`` (take first column as index\n          by default)\n        - `parse_dates` is ``True`` instead of ``False`` (try parsing the index\n          as datetime by default)\n\n        So a ``pd.DataFrame.from_csv(path)`` can be replaced by\n        ``pd.read_csv(path, index_col=0, parse_dates=True)``.\n\n        Parameters\n        ----------\n        path : string file path or file handle / StringIO\n        header : int, default 0\n            Row to use as header (skip prior rows)\n        sep : string, default ','\n            Field delimiter\n        index_col : int or sequence, default 0\n            Column to use for index. If a sequence is given, a MultiIndex\n            is used. Different default from read_table\n        parse_dates : boolean, default True\n            Parse dates. Different default from read_table\n        tupleize_cols : boolean, default False\n            write multi_index columns as a list of tuples (if True)\n            or new (expanded format) if False)\n        infer_datetime_format: boolean, default False\n            If True and `parse_dates` is True for a column, try to infer the\n            datetime format based on the first datetime string. If the format\n            can be inferred, there often will be a large parsing speed-up.\n\n        See also\n        --------\n        pandas.read_csv\n\n        Returns\n        -------\n        y : DataFrame\n\n        \"\"\"\n        warnings.warn(\n            'from_csv is deprecated. Please use read_csv(...) instead. Note that some of the default arguments are different, so please refer to the documentation for from_csv when changing your function calls'\n            , FutureWarning, stacklevel=2)\n        from pandas.io.parsers import read_table\n        return read_table(path, header=header, sep=sep, parse_dates=\n            parse_dates, index_col=index_col, encoding=encoding,\n            tupleize_cols=tupleize_cols, infer_datetime_format=\n            infer_datetime_format)\n\n    def to_sparse(self, fill_value=None, kind='block'):\n        \"\"\"\n        Convert to SparseDataFrame\n\n        Parameters\n        ----------\n        fill_value : float, default NaN\n        kind : {'block', 'integer'}\n\n        Returns\n        -------\n        y : SparseDataFrame\n        \"\"\"\n        from pandas.core.sparse.frame import SparseDataFrame\n        return SparseDataFrame(self._series, index=self.index, columns=self\n            .columns, default_kind=kind, default_fill_value=fill_value)\n\n    def to_panel(self):\n        \"\"\"\n        Transform long (stacked) format (DataFrame) into wide (3D, Panel)\n        format.\n\n        .. deprecated:: 0.20.0\n\n        Currently the index of the DataFrame must be a 2-level MultiIndex. This\n        may be generalized later\n\n        Returns\n        -------\n        panel : Panel\n        \"\"\"\n        if not isinstance(self.index, MultiIndex) or len(self.index.levels\n            ) != 2:\n            raise NotImplementedError('Only 2-level MultiIndex are supported.')\n        if not self.index.is_unique:\n            raise ValueError(\n                \"Can't convert non-uniquely indexed DataFrame to Panel\")\n        self._consolidate_inplace()\n        if self.index.lexsort_depth < 2:\n            selfsorted = self.sort_index(level=0)\n        else:\n            selfsorted = self\n        major_axis, minor_axis = selfsorted.index.levels\n        major_labels, minor_labels = selfsorted.index.labels\n        shape = len(major_axis), len(minor_axis)\n        major_axis = major_axis.copy()\n        major_axis.name = self.index.names[0]\n        minor_axis = minor_axis.copy()\n        minor_axis.name = self.index.names[1]\n        new_axes = [selfsorted.columns, major_axis, minor_axis]\n        new_mgr = selfsorted._data.reshape_nd(axes=new_axes, labels=[\n            major_labels, minor_labels], shape=shape, ref_items=selfsorted.\n            columns)\n        return self._constructor_expanddim(new_mgr)\n\n    def to_csv(self, path_or_buf=None, sep=',', na_rep='', float_format=\n        None, columns=None, header=True, index=True, index_label=None, mode\n        ='w', encoding=None, compression=None, quoting=None, quotechar='\"',\n        line_terminator='\\n', chunksize=None, tupleize_cols=None,\n        date_format=None, doublequote=True, escapechar=None, decimal='.'):\n        \"\"\"Write DataFrame to a comma-separated values (csv) file\n\n        Parameters\n        ----------\n        path_or_buf : string or file handle, default None\n            File path or object, if None is provided the result is returned as\n            a string.\n        sep : character, default ','\n            Field delimiter for the output file.\n        na_rep : string, default ''\n            Missing data representation\n        float_format : string, default None\n            Format string for floating point numbers\n        columns : sequence, optional\n            Columns to write\n        header : boolean or list of string, default True\n            Write out the column names. If a list of strings is given it is\n            assumed to be aliases for the column names\n        index : boolean, default True\n            Write row names (index)\n        index_label : string or sequence, or False, default None\n            Column label for index column(s) if desired. If None is given, and\n            `header` and `index` are True, then the index names are used. A\n            sequence should be given if the DataFrame uses MultiIndex.  If\n            False do not print fields for index names. Use index_label=False\n            for easier importing in R\n        mode : str\n            Python write mode, default 'w'\n        encoding : string, optional\n            A string representing the encoding to use in the output file,\n            defaults to 'ascii' on Python 2 and 'utf-8' on Python 3.\n        compression : string, optional\n            A string representing the compression to use in the output file.\n            Allowed values are 'gzip', 'bz2', 'zip', 'xz'. This input is only\n            used when the first argument is a filename.\n        line_terminator : string, default ``'\\\\n'``\n            The newline character or character sequence to use in the output\n            file\n        quoting : optional constant from csv module\n            defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n            then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n            will treat them as non-numeric\n        quotechar : string (length 1), default '\\\\\"'\n            character used to quote fields\n        doublequote : boolean, default True\n            Control quoting of `quotechar` inside a field\n        escapechar : string (length 1), default None\n            character used to escape `sep` and `quotechar` when appropriate\n        chunksize : int or None\n            rows to write at a time\n        tupleize_cols : boolean, default False\n            .. deprecated:: 0.21.0\n               This argument will be removed and will always write each row\n               of the multi-index as a separate row in the CSV file.\n\n            Write MultiIndex columns as a list of tuples (if True) or in\n            the new, expanded format, where each MultiIndex column is a row\n            in the CSV (if False).\n        date_format : string, default None\n            Format string for datetime objects\n        decimal: string, default '.'\n            Character recognized as decimal separator. E.g. use ',' for\n            European data\n\n        \"\"\"\n        if tupleize_cols is not None:\n            warnings.warn(\n                \"The 'tupleize_cols' parameter is deprecated and will be removed in a future version\"\n                , FutureWarning, stacklevel=2)\n        else:\n            tupleize_cols = False\n        from pandas.io.formats.csvs import CSVFormatter\n        formatter = CSVFormatter(self, path_or_buf, line_terminator=\n            line_terminator, sep=sep, encoding=encoding, compression=\n            compression, quoting=quoting, na_rep=na_rep, float_format=\n            float_format, cols=columns, header=header, index=index,\n            index_label=index_label, mode=mode, chunksize=chunksize,\n            quotechar=quotechar, tupleize_cols=tupleize_cols, date_format=\n            date_format, doublequote=doublequote, escapechar=escapechar,\n            decimal=decimal)\n        formatter.save()\n        if path_or_buf is None:\n            return formatter.path_or_buf.getvalue()\n\n    @Appender(_shared_docs['to_excel'] % _shared_doc_kwargs)\n    def to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='',\n        float_format=None, columns=None, header=True, index=True,\n        index_label=None, startrow=0, startcol=0, engine=None, merge_cells=\n        True, encoding=None, inf_rep='inf', verbose=True, freeze_panes=None):\n        from pandas.io.formats.excel import ExcelFormatter\n        formatter = ExcelFormatter(self, na_rep=na_rep, cols=columns,\n            header=header, float_format=float_format, index=index,\n            index_label=index_label, merge_cells=merge_cells, inf_rep=inf_rep)\n        formatter.write(excel_writer, sheet_name=sheet_name, startrow=\n            startrow, startcol=startcol, freeze_panes=freeze_panes, engine=\n            engine)\n\n    @deprecate_kwarg(old_arg_name='encoding', new_arg_name=None)\n    def to_stata(self, fname, convert_dates=None, write_index=True,\n        encoding='latin-1', byteorder=None, time_stamp=None, data_label=\n        None, variable_labels=None, version=114, convert_strl=None):\n        \"\"\"\n        Export Stata binary dta files.\n\n        Parameters\n        ----------\n        fname : path (string), buffer or path object\n            string, path object (pathlib.Path or py._path.local.LocalPath) or\n            object implementing a binary write() functions. If using a buffer\n            then the buffer will not be automatically closed after the file\n            data has been written.\n        convert_dates : dict\n            Dictionary mapping columns containing datetime types to stata\n            internal format to use when writing the dates. Options are 'tc',\n            'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n            or a name. Datetime columns that do not have a conversion type\n            specified will be converted to 'tc'. Raises NotImplementedError if\n            a datetime column has timezone information.\n        write_index : bool\n            Write the index to Stata dataset.\n        encoding : str\n            Default is latin-1. Unicode is not supported.\n        byteorder : str\n            Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`.\n        time_stamp : datetime\n            A datetime to use as file creation date.  Default is the current\n            time.\n        data_label : str\n            A label for the data set.  Must be 80 characters or smaller.\n        variable_labels : dict\n            Dictionary containing columns as keys and variable labels as\n            values. Each label must be 80 characters or smaller.\n\n            .. versionadded:: 0.19.0\n\n        version : {114, 117}\n            Version to use in the output dta file.  Version 114 can be used\n            read by Stata 10 and later.  Version 117 can be read by Stata 13\n            or later. Version 114 limits string variables to 244 characters or\n            fewer while 117 allows strings with lengths up to 2,000,000\n            characters.\n\n            .. versionadded:: 0.23.0\n\n        convert_strl : list, optional\n            List of column names to convert to string columns to Stata StrL\n            format. Only available if version is 117.  Storing strings in the\n            StrL format can produce smaller dta files if strings have more than\n            8 characters and values are repeated.\n\n            .. versionadded:: 0.23.0\n\n        Raises\n        ------\n        NotImplementedError\n            * If datetimes contain timezone information\n            * Column dtype is not representable in Stata\n        ValueError\n            * Columns listed in convert_dates are neither datetime64[ns]\n              or datetime.datetime\n            * Column listed in convert_dates is not in DataFrame\n            * Categorical label contains more than 32,000 characters\n\n            .. versionadded:: 0.19.0\n\n        See Also\n        --------\n        pandas.read_stata : Import Stata data files\n        pandas.io.stata.StataWriter : low-level writer for Stata data files\n        pandas.io.stata.StataWriter117 : low-level writer for version 117 files\n\n        Examples\n        --------\n        >>> data.to_stata('./data_file.dta')\n\n        Or with dates\n\n        >>> data.to_stata('./date_data_file.dta', {2 : 'tw'})\n\n        Alternatively you can create an instance of the StataWriter class\n\n        >>> writer = StataWriter('./data_file.dta', data)\n        >>> writer.write_file()\n\n        With dates:\n\n        >>> writer = StataWriter('./date_data_file.dta', data, {2 : 'tw'})\n        >>> writer.write_file()\n        \"\"\"\n        kwargs = {}\n        if version not in (114, 117):\n            raise ValueError('Only formats 114 and 117 supported.')\n        if version == 114:\n            if convert_strl is not None:\n                raise ValueError(\n                    'strl support is only available when using format 117')\n            from pandas.io.stata import StataWriter as statawriter\n        else:\n            from pandas.io.stata import StataWriter117 as statawriter\n            kwargs['convert_strl'] = convert_strl\n        writer = statawriter(fname, self, convert_dates=convert_dates,\n            byteorder=byteorder, time_stamp=time_stamp, data_label=\n            data_label, write_index=write_index, variable_labels=\n            variable_labels, **kwargs)\n        writer.write_file()\n\n    def to_feather(self, fname):\n        \"\"\"\n        write out the binary feather-format for DataFrames\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        fname : str\n            string file path\n\n        \"\"\"\n        from pandas.io.feather_format import to_feather\n        to_feather(self, fname)\n\n    def to_parquet(self, fname, engine='auto', compression='snappy', **kwargs):\n        \"\"\"\n        Write a DataFrame to the binary parquet format.\n\n        .. versionadded:: 0.21.0\n\n        This function writes the dataframe as a `parquet file\n        <https://parquet.apache.org/>`_. You can choose different parquet\n        backends, and have the option of compression. See\n        :ref:`the user guide <io.parquet>` for more details.\n\n        Parameters\n        ----------\n        fname : str\n            String file path.\n        engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n            Parquet library to use. If 'auto', then the option\n            ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n            behavior is to try 'pyarrow', falling back to 'fastparquet' if\n            'pyarrow' is unavailable.\n        compression : {'snappy', 'gzip', 'brotli', None}, default 'snappy'\n            Name of the compression to use. Use ``None`` for no compression.\n        **kwargs\n            Additional arguments passed to the parquet library. See\n            :ref:`pandas io <io.parquet>` for more details.\n\n        See Also\n        --------\n        read_parquet : Read a parquet file.\n        DataFrame.to_csv : Write a csv file.\n        DataFrame.to_sql : Write to a sql table.\n        DataFrame.to_hdf : Write to hdf.\n\n        Notes\n        -----\n        This function requires either the `fastparquet\n        <https://pypi.org/project/fastparquet>`_ or `pyarrow\n        <https://arrow.apache.org/docs/python/>`_ library.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.to_parquet('df.parquet.gzip', compression='gzip')\n        >>> pd.read_parquet('df.parquet.gzip')\n           col1  col2\n        0     1     3\n        1     2     4\n        \"\"\"\n        from pandas.io.parquet import to_parquet\n        to_parquet(self, fname, engine, compression=compression, **kwargs)\n\n    @Substitution(header=\n        'Write out the column names. If a list of strings is given, it is assumed to be aliases for the column names'\n        )\n    @Appender(fmt.docstring_to_string, indents=1)\n    def to_string(self, buf=None, columns=None, col_space=None, header=True,\n        index=True, na_rep='NaN', formatters=None, float_format=None,\n        sparsify=None, index_names=True, justify=None, line_width=None,\n        max_rows=None, max_cols=None, show_dimensions=False):\n        \"\"\"\n        Render a DataFrame to a console-friendly tabular output.\n        \"\"\"\n        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n            col_space=col_space, na_rep=na_rep, formatters=formatters,\n            float_format=float_format, sparsify=sparsify, justify=justify,\n            index_names=index_names, header=header, index=index, line_width\n            =line_width, max_rows=max_rows, max_cols=max_cols,\n            show_dimensions=show_dimensions)\n        formatter.to_string()\n        if buf is None:\n            result = formatter.buf.getvalue()\n            return result\n\n    @Substitution(header='whether to print column labels, default True')\n    @Appender(fmt.docstring_to_string, indents=1)\n    def to_html(self, buf=None, columns=None, col_space=None, header=True,\n        index=True, na_rep='NaN', formatters=None, float_format=None,\n        sparsify=None, index_names=True, justify=None, bold_rows=True,\n        classes=None, escape=True, max_rows=None, max_cols=None,\n        show_dimensions=False, notebook=False, decimal='.', border=None,\n        table_id=None):\n        \"\"\"\n        Render a DataFrame as an HTML table.\n\n        `to_html`-specific options:\n\n        bold_rows : boolean, default True\n            Make the row labels bold in the output\n        classes : str or list or tuple, default None\n            CSS class(es) to apply to the resulting html table\n        escape : boolean, default True\n            Convert the characters <, >, and & to HTML-safe sequences.\n        max_rows : int, optional\n            Maximum number of rows to show before truncating. If None, show\n            all.\n        max_cols : int, optional\n            Maximum number of columns to show before truncating. If None, show\n            all.\n        decimal : string, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe\n\n            .. versionadded:: 0.18.0\n\n        border : int\n            A ``border=border`` attribute is included in the opening\n            `<table>` tag. Default ``pd.options.html.border``.\n\n            .. versionadded:: 0.19.0\n\n        table_id : str, optional\n            A css id is included in the opening `<table>` tag if specified.\n\n            .. versionadded:: 0.23.0\n\n        \"\"\"\n        if (justify is not None and justify not in fmt.\n            _VALID_JUSTIFY_PARAMETERS):\n            raise ValueError('Invalid value for justify parameter')\n        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n            col_space=col_space, na_rep=na_rep, formatters=formatters,\n            float_format=float_format, sparsify=sparsify, justify=justify,\n            index_names=index_names, header=header, index=index, bold_rows=\n            bold_rows, escape=escape, max_rows=max_rows, max_cols=max_cols,\n            show_dimensions=show_dimensions, decimal=decimal, table_id=table_id\n            )\n        formatter.to_html(classes=classes, notebook=notebook, border=border)\n        if buf is None:\n            return formatter.buf.getvalue()\n\n    def info(self, verbose=None, buf=None, max_cols=None, memory_usage=None,\n        null_counts=None):\n        \"\"\"\n        Print a concise summary of a DataFrame.\n\n        This method prints information about a DataFrame including\n        the index dtype and column dtypes, non-null values and memory usage.\n\n        Parameters\n        ----------\n        verbose : bool, optional\n            Whether to print the full summary. By default, the setting in\n            ``pandas.options.display.max_info_columns`` is followed.\n        buf : writable buffer, defaults to sys.stdout\n            Where to send the output. By default, the output is printed to\n            sys.stdout. Pass a writable buffer if you need to further process\n            the output.\n        max_cols : int, optional\n            When to switch from the verbose to the truncated output. If the\n            DataFrame has more than `max_cols` columns, the truncated output\n            is used. By default, the setting in\n            ``pandas.options.display.max_info_columns`` is used.\n        memory_usage : bool, str, optional\n            Specifies whether total memory usage of the DataFrame\n            elements (including the index) should be displayed. By default,\n            this follows the ``pandas.options.display.memory_usage`` setting.\n\n            True always show memory usage. False never shows memory usage.\n            A value of 'deep' is equivalent to \"True with deep introspection\".\n            Memory usage is shown in human-readable units (base-2\n            representation). Without deep introspection a memory estimation is\n            made based in column dtype and number of rows assuming values\n            consume the same memory amount for corresponding dtypes. With deep\n            memory introspection, a real memory usage calculation is performed\n            at the cost of computational resources.\n        null_counts : bool, optional\n            Whether to show the non-null counts. By default, this is shown\n            only if the frame is smaller than\n            ``pandas.options.display.max_info_rows`` and\n            ``pandas.options.display.max_info_columns``. A value of True always\n            shows the counts, and False never shows the counts.\n\n        Returns\n        -------\n        None\n            This method prints a summary of a DataFrame and returns None.\n\n        See Also\n        --------\n        DataFrame.describe: Generate descriptive statistics of DataFrame\n            columns.\n        DataFrame.memory_usage: Memory usage of DataFrame columns.\n\n        Examples\n        --------\n        >>> int_values = [1, 2, 3, 4, 5]\n        >>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n        >>> float_values = [0.0, 0.25, 0.5, 0.75, 1.0]\n        >>> df = pd.DataFrame({\"int_col\": int_values, \"text_col\": text_values,\n        ...                   \"float_col\": float_values})\n        >>> df\n           int_col text_col  float_col\n        0        1    alpha       0.00\n        1        2     beta       0.25\n        2        3    gamma       0.50\n        3        4    delta       0.75\n        4        5  epsilon       1.00\n\n        Prints information of all columns:\n\n        >>> df.info(verbose=True)\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 5 entries, 0 to 4\n        Data columns (total 3 columns):\n        int_col      5 non-null int64\n        text_col     5 non-null object\n        float_col    5 non-null float64\n        dtypes: float64(1), int64(1), object(1)\n        memory usage: 200.0+ bytes\n\n        Prints a summary of columns count and its dtypes but not per column\n        information:\n\n        >>> df.info(verbose=False)\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 5 entries, 0 to 4\n        Columns: 3 entries, int_col to float_col\n        dtypes: float64(1), int64(1), object(1)\n        memory usage: 200.0+ bytes\n\n        Pipe output of DataFrame.info to buffer instead of sys.stdout, get\n        buffer content and writes to a text file:\n\n        >>> import io\n        >>> buffer = io.StringIO()\n        >>> df.info(buf=buffer)\n        >>> s = buffer.getvalue()\n        >>> with open(\"df_info.txt\", \"w\", encoding=\"utf-8\") as f:\n        ...     f.write(s)\n        260\n\n        The `memory_usage` parameter allows deep introspection mode, specially\n        useful for big DataFrames and fine-tune memory optimization:\n\n        >>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)\n        >>> df = pd.DataFrame({\n        ...     'column_1': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n        ...     'column_2': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n        ...     'column_3': np.random.choice(['a', 'b', 'c'], 10 ** 6)\n        ... })\n        >>> df.info()\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 1000000 entries, 0 to 999999\n        Data columns (total 3 columns):\n        column_1    1000000 non-null object\n        column_2    1000000 non-null object\n        column_3    1000000 non-null object\n        dtypes: object(3)\n        memory usage: 22.9+ MB\n\n        >>> df.info(memory_usage='deep')\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 1000000 entries, 0 to 999999\n        Data columns (total 3 columns):\n        column_1    1000000 non-null object\n        column_2    1000000 non-null object\n        column_3    1000000 non-null object\n        dtypes: object(3)\n        memory usage: 188.8 MB\n        \"\"\"\n        if buf is None:\n            buf = sys.stdout\n        lines = []\n        lines.append(str(type(self)))\n        lines.append(self.index._summary())\n        if len(self.columns) == 0:\n            lines.append('Empty {name}'.format(name=type(self).__name__))\n            fmt.buffer_put_lines(buf, lines)\n            return\n        cols = self.columns\n        if max_cols is None:\n            max_cols = get_option('display.max_info_columns', len(self.\n                columns) + 1)\n        max_rows = get_option('display.max_info_rows', len(self) + 1)\n        if null_counts is None:\n            show_counts = len(self.columns) <= max_cols and len(self\n                ) < max_rows\n        else:\n            show_counts = null_counts\n        exceeds_info_cols = len(self.columns) > max_cols\n\n        def _verbose_repr():\n            lines.append('Data columns (total %d columns):' % len(self.columns)\n                )\n            space = max(len(pprint_thing(k)) for k in self.columns) + 4\n            counts = None\n            tmpl = '{count}{dtype}'\n            if show_counts:\n                counts = self.count()\n                if len(cols) != len(counts):\n                    raise AssertionError(\n                        'Columns must equal counts ({cols:d} != {counts:d})'\n                        .format(cols=len(cols), counts=len(counts)))\n                tmpl = '{count} non-null {dtype}'\n            dtypes = self.dtypes\n            for i, col in enumerate(self.columns):\n                dtype = dtypes.iloc[i]\n                col = pprint_thing(col)\n                count = ''\n                if show_counts:\n                    count = counts.iloc[i]\n                lines.append(_put_str(col, space) + tmpl.format(count=count,\n                    dtype=dtype))\n\n        def _non_verbose_repr():\n            lines.append(self.columns._summary(name='Columns'))\n\n        def _sizeof_fmt(num, size_qualifier):\n            for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n                if num < 1024.0:\n                    return '{num:3.1f}{size_q} {x}'.format(num=num, size_q=\n                        size_qualifier, x=x)\n                num /= 1024.0\n            return '{num:3.1f}{size_q} {pb}'.format(num=num, size_q=\n                size_qualifier, pb='PB')\n        if verbose:\n            _verbose_repr()\n        elif verbose is False:\n            _non_verbose_repr()\n        elif exceeds_info_cols:\n            _non_verbose_repr()\n        else:\n            _verbose_repr()\n        counts = self.get_dtype_counts()\n        dtypes = ['{k}({kk:d})'.format(k=k[0], kk=k[1]) for k in sorted(\n            compat.iteritems(counts))]\n        lines.append('dtypes: {types}'.format(types=', '.join(dtypes)))\n        if memory_usage is None:\n            memory_usage = get_option('display.memory_usage')\n        if memory_usage:\n            size_qualifier = ''\n            if memory_usage == 'deep':\n                deep = True\n            else:\n                deep = False\n                if 'object' in counts or self.index._is_memory_usage_qualified(\n                    ):\n                    size_qualifier = '+'\n            mem_usage = self.memory_usage(index=True, deep=deep).sum()\n            lines.append('memory usage: {mem}\\n'.format(mem=_sizeof_fmt(\n                mem_usage, size_qualifier)))\n        fmt.buffer_put_lines(buf, lines)\n\n    def memory_usage(self, index=True, deep=False):\n        \"\"\"\n        Return the memory usage of each column in bytes.\n\n        The memory usage can optionally include the contribution of\n        the index and elements of `object` dtype.\n\n        This value is displayed in `DataFrame.info` by default. This can be\n        suppressed by setting ``pandas.options.display.memory_usage`` to False.\n\n        Parameters\n        ----------\n        index : bool, default True\n            Specifies whether to include the memory usage of the DataFrame's\n            index in returned Series. If ``index=True`` the memory usage of the\n            index the first item in the output.\n        deep : bool, default False\n            If True, introspect the data deeply by interrogating\n            `object` dtypes for system-level memory consumption, and include\n            it in the returned values.\n\n        Returns\n        -------\n        sizes : Series\n            A Series whose index is the original column names and whose values\n            is the memory usage of each column in bytes.\n\n        See Also\n        --------\n        numpy.ndarray.nbytes : Total bytes consumed by the elements of an\n            ndarray.\n        Series.memory_usage : Bytes consumed by a Series.\n        pandas.Categorical : Memory-efficient array for string values with\n            many repeated values.\n        DataFrame.info : Concise summary of a DataFrame.\n\n        Examples\n        --------\n        >>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n        >>> data = dict([(t, np.ones(shape=5000).astype(t))\n        ...              for t in dtypes])\n        >>> df = pd.DataFrame(data)\n        >>> df.head()\n           int64  float64  complex128 object  bool\n        0      1      1.0      (1+0j)      1  True\n        1      1      1.0      (1+0j)      1  True\n        2      1      1.0      (1+0j)      1  True\n        3      1      1.0      (1+0j)      1  True\n        4      1      1.0      (1+0j)      1  True\n\n        >>> df.memory_usage()\n        Index            80\n        int64         40000\n        float64       40000\n        complex128    80000\n        object        40000\n        bool           5000\n        dtype: int64\n\n        >>> df.memory_usage(index=False)\n        int64         40000\n        float64       40000\n        complex128    80000\n        object        40000\n        bool           5000\n        dtype: int64\n\n        The memory footprint of `object` dtype columns is ignored by default:\n\n        >>> df.memory_usage(deep=True)\n        Index             80\n        int64          40000\n        float64        40000\n        complex128     80000\n        object        160000\n        bool            5000\n        dtype: int64\n\n        Use a Categorical for efficient storage of an object-dtype column with\n        many repeated values.\n\n        >>> df['object'].astype('category').memory_usage(deep=True)\n        5168\n        \"\"\"\n        result = Series([c.memory_usage(index=False, deep=deep) for col, c in\n            self.iteritems()], index=self.columns)\n        if index:\n            result = Series(self.index.memory_usage(deep=deep), index=['Index']\n                ).append(result)\n        return result\n\n    def transpose(self, *args, **kwargs):\n        \"\"\"\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        copy : bool, default False\n            If True, the underlying data is copied. Otherwise (default), no\n            copy is made if possible.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted for\n            compatibility with numpy.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5     8\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        \"\"\"\n        nv.validate_transpose(args, dict())\n        return super(DataFrame, self).transpose(1, 0, **kwargs)\n    T = property(transpose)\n\n    def _unpickle_frame_compat(self, state):\n        if len(state) == 2:\n            series, idx = state\n            columns = sorted(series)\n        else:\n            series, cols, idx = state\n            columns = com._unpickle_array(cols)\n        index = com._unpickle_array(idx)\n        self._data = self._init_dict(series, index, columns, None)\n\n    def _unpickle_matrix_compat(self, state):\n        (vals, idx, cols), object_state = state\n        index = com._unpickle_array(idx)\n        dm = DataFrame(vals, index=index, columns=com._unpickle_array(cols),\n            copy=False)\n        if object_state is not None:\n            ovals, _, ocols = object_state\n            objects = DataFrame(ovals, index=index, columns=com.\n                _unpickle_array(ocols), copy=False)\n            dm = dm.join(objects)\n        self._data = dm._data\n\n    def get_value(self, index, col, takeable=False):\n        \"\"\"Quickly retrieve single value at passed column and index\n\n        .. deprecated:: 0.21.0\n            Use .at[] or .iat[] accessors instead.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        value : scalar value\n        \"\"\"\n        warnings.warn(\n            'get_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead'\n            , FutureWarning, stacklevel=2)\n        return self._get_value(index, col, takeable=takeable)\n\n    def _get_value(self, index, col, takeable=False):\n        if takeable:\n            series = self._iget_item_cache(col)\n            return com._maybe_box_datetimelike(series._values[index])\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n        try:\n            return engine.get_value(series._values, index)\n        except (TypeError, ValueError):\n            col = self.columns.get_loc(col)\n            index = self.index.get_loc(index)\n            return self._get_value(index, col, takeable=True)\n    _get_value.__doc__ = get_value.__doc__\n\n    def set_value(self, index, col, value, takeable=False):\n        \"\"\"Put single value at passed column and index\n\n        .. deprecated:: 0.21.0\n            Use .at[] or .iat[] accessors instead.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        value : scalar value\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        frame : DataFrame\n            If label pair is contained, will be reference to calling DataFrame,\n            otherwise a new object\n        \"\"\"\n        warnings.warn(\n            'set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead'\n            , FutureWarning, stacklevel=2)\n        return self._set_value(index, col, value, takeable=takeable)\n\n    def _set_value(self, index, col, value, takeable=False):\n        try:\n            if takeable is True:\n                series = self._iget_item_cache(col)\n                return series._set_value(index, value, takeable=True)\n            series = self._get_item_cache(col)\n            engine = self.index._engine\n            engine.set_value(series._values, index, value)\n            return self\n        except (KeyError, TypeError):\n            self.loc[index, col] = value\n            self._item_cache.pop(col, None)\n            return self\n    _set_value.__doc__ = set_value.__doc__\n\n    def _ixs(self, i, axis=0):\n        \"\"\"\n        i : int, slice, or sequence of integers\n        axis : int\n        \"\"\"\n        if axis == 0:\n            \"\"\"\n            Notes\n            -----\n            If slice passed, the resulting data will be a view\n            \"\"\"\n            if isinstance(i, slice):\n                return self[i]\n            else:\n                label = self.index[i]\n                if isinstance(label, Index):\n                    result = self.take(i, axis=axis)\n                    copy = True\n                else:\n                    new_values = self._data.fast_xs(i)\n                    if is_scalar(new_values):\n                        return new_values\n                    copy = isinstance(new_values, np.ndarray\n                        ) and new_values.base is None\n                    result = self._constructor_sliced(new_values, index=\n                        self.columns, name=self.index[i], dtype=new_values.\n                        dtype)\n                result._set_is_copy(self, copy=copy)\n                return result\n        else:\n            \"\"\"\n            Notes\n            -----\n            If slice passed, the resulting data will be a view\n            \"\"\"\n            label = self.columns[i]\n            if isinstance(i, slice):\n                lab_slice = slice(label[0], label[-1])\n                return self.loc[:, lab_slice]\n            else:\n                if isinstance(label, Index):\n                    return self._take(i, axis=1)\n                index_len = len(self.index)\n                values = self._data.iget(i)\n                if index_len and not len(values):\n                    values = np.array([np.nan] * index_len, dtype=object)\n                result = self._box_col_values(values, label)\n                result._set_as_cached(label, self)\n                return result\n\n    def __getitem__(self, key):\n        key = com._apply_if_callable(key, self)\n        is_mi_columns = isinstance(self.columns, MultiIndex)\n        try:\n            if key in self.columns and not is_mi_columns:\n                return self._getitem_column(key)\n        except:\n            pass\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            return self._getitem_slice(indexer)\n        if isinstance(key, (Series, np.ndarray, Index, list)):\n            return self._getitem_array(key)\n        elif isinstance(key, DataFrame):\n            return self._getitem_frame(key)\n        elif is_mi_columns:\n            return self._getitem_multilevel(key)\n        else:\n            return self._getitem_column(key)\n\n    def _getitem_column(self, key):\n        \"\"\" return the actual column \"\"\"\n        if self.columns.is_unique:\n            return self._get_item_cache(key)\n        result = self._constructor(self._data.get(key))\n        if result.columns.is_unique:\n            result = result[key]\n        return result\n\n    def _getitem_slice(self, key):\n        return self._slice(key, axis=0)\n\n    def _getitem_array(self, key):\n        if com.is_bool_indexer(key):\n            if isinstance(key, Series) and not key.index.equals(self.index):\n                warnings.warn(\n                    'Boolean Series key will be reindexed to match DataFrame index.'\n                    , UserWarning, stacklevel=3)\n            elif len(key) != len(self.index):\n                raise ValueError('Item wrong length %d instead of %d.' % (\n                    len(key), len(self.index)))\n            key = check_bool_indexer(self.index, key)\n            indexer = key.nonzero()[0]\n            return self._take(indexer, axis=0)\n        else:\n            indexer = self.loc._convert_to_indexer(key, axis=1,\n                raise_missing=True)\n            return self._take(indexer, axis=1)\n\n    def _getitem_multilevel(self, key):\n        loc = self.columns.get_loc(key)\n        if isinstance(loc, (slice, Series, np.ndarray, Index)):\n            new_columns = self.columns[loc]\n            result_columns = maybe_droplevels(new_columns, key)\n            if self._is_mixed_type:\n                result = self.reindex(columns=new_columns)\n                result.columns = result_columns\n            else:\n                new_values = self.values[:, loc]\n                result = self._constructor(new_values, index=self.index,\n                    columns=result_columns)\n                result = result.__finalize__(self)\n            if len(result.columns) == 1:\n                top = result.columns[0]\n                if isinstance(top, tuple):\n                    top = top[0]\n                if top == '':\n                    result = result['']\n                    if isinstance(result, Series):\n                        result = self._constructor_sliced(result, index=\n                            self.index, name=key)\n            result._set_is_copy(self)\n            return result\n        else:\n            return self._get_item_cache(key)\n\n    def _getitem_frame(self, key):\n        if key.values.size and not is_bool_dtype(key.values):\n            raise ValueError('Must pass DataFrame with boolean values only')\n        return self.where(key)\n\n    def query(self, expr, inplace=False, **kwargs):\n        \"\"\"Query the columns of a frame with a boolean expression.\n\n        Parameters\n        ----------\n        expr : string\n            The query string to evaluate.  You can refer to variables\n            in the environment by prefixing them with an '@' character like\n            ``@a + b``.\n        inplace : bool\n            Whether the query should modify the data in place or return\n            a modified copy\n\n            .. versionadded:: 0.18.0\n\n        kwargs : dict\n            See the documentation for :func:`pandas.eval` for complete details\n            on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n        Returns\n        -------\n        q : DataFrame\n\n        Notes\n        -----\n        The result of the evaluation of this expression is first passed to\n        :attr:`DataFrame.loc` and if that fails because of a\n        multidimensional key (e.g., a DataFrame) then the result will be passed\n        to :meth:`DataFrame.__getitem__`.\n\n        This method uses the top-level :func:`pandas.eval` function to\n        evaluate the passed query.\n\n        The :meth:`~pandas.DataFrame.query` method uses a slightly\n        modified Python syntax by default. For example, the ``&`` and ``|``\n        (bitwise) operators have the precedence of their boolean cousins,\n        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n        however the semantics are different.\n\n        You can change the semantics of the expression by passing the keyword\n        argument ``parser='python'``. This enforces the same semantics as\n        evaluation in Python space. Likewise, you can pass ``engine='python'``\n        to evaluate an expression using Python itself as a backend. This is not\n        recommended as it is inefficient compared to using ``numexpr`` as the\n        engine.\n\n        The :attr:`DataFrame.index` and\n        :attr:`DataFrame.columns` attributes of the\n        :class:`~pandas.DataFrame` instance are placed in the query namespace\n        by default, which allows you to treat both the index and columns of the\n        frame as a column in the frame.\n        The identifier ``index`` is used for the frame index; you can also\n        use the name of the index to identify it in a query. Please note that\n        Python keywords may not be used as identifiers.\n\n        For further details and examples see the ``query`` documentation in\n        :ref:`indexing <indexing.query>`.\n\n        See Also\n        --------\n        pandas.eval\n        DataFrame.eval\n\n        Examples\n        --------\n        >>> from numpy.random import randn\n        >>> from pandas import DataFrame\n        >>> df = pd.DataFrame(randn(10, 2), columns=list('ab'))\n        >>> df.query('a > b')\n        >>> df[df.a > df.b]  # same result as the previous expression\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(expr, compat.string_types):\n            msg = 'expr must be a string to be evaluated, {0} given'\n            raise ValueError(msg.format(type(expr)))\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        kwargs['target'] = None\n        res = self.eval(expr, **kwargs)\n        try:\n            new_data = self.loc[res]\n        except ValueError:\n            new_data = self[res]\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return new_data\n\n    def eval(self, expr, inplace=False, **kwargs):\n        \"\"\"\n        Evaluate a string describing operations on DataFrame columns.\n\n        Operates on columns only, not specific rows or elements.  This allows\n        `eval` to run arbitrary code, which can make you vulnerable to code\n        injection if you pass user input to this function.\n\n        Parameters\n        ----------\n        expr : str\n            The expression string to evaluate.\n        inplace : bool, default False\n            If the expression contains an assignment, whether to perform the\n            operation inplace and mutate the existing DataFrame. Otherwise,\n            a new DataFrame is returned.\n\n            .. versionadded:: 0.18.0.\n        kwargs : dict\n            See the documentation for :func:`~pandas.eval` for complete details\n            on the keyword arguments accepted by\n            :meth:`~pandas.DataFrame.query`.\n\n        Returns\n        -------\n        ndarray, scalar, or pandas object\n            The result of the evaluation.\n\n        See Also\n        --------\n        DataFrame.query : Evaluates a boolean expression to query the columns\n            of a frame.\n        DataFrame.assign : Can evaluate an expression or function to create new\n            values for a column.\n        pandas.eval : Evaluate a Python expression as a string using various\n            backends.\n\n        Notes\n        -----\n        For more details see the API documentation for :func:`~pandas.eval`.\n        For detailed examples see :ref:`enhancing performance with eval\n        <enhancingperf.eval>`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n        >>> df\n           A   B\n        0  1  10\n        1  2   8\n        2  3   6\n        3  4   4\n        4  5   2\n        >>> df.eval('A + B')\n        0    11\n        1    10\n        2     9\n        3     8\n        4     7\n        dtype: int64\n\n        Assignment is allowed though by default the original DataFrame is not\n        modified.\n\n        >>> df.eval('C = A + B')\n           A   B   C\n        0  1  10  11\n        1  2   8  10\n        2  3   6   9\n        3  4   4   8\n        4  5   2   7\n        >>> df\n           A   B\n        0  1  10\n        1  2   8\n        2  3   6\n        3  4   4\n        4  5   2\n\n        Use ``inplace=True`` to modify the original DataFrame.\n\n        >>> df.eval('C = A + B', inplace=True)\n        >>> df\n           A   B   C\n        0  1  10  11\n        1  2   8  10\n        2  3   6   9\n        3  4   4   8\n        4  5   2   7\n        \"\"\"\n        from pandas.core.computation.eval import eval as _eval\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        resolvers = kwargs.pop('resolvers', None)\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        if resolvers is None:\n            index_resolvers = self._get_index_resolvers()\n            resolvers = dict(self.iteritems()), index_resolvers\n        if 'target' not in kwargs:\n            kwargs['target'] = self\n        kwargs['resolvers'] = kwargs.get('resolvers', ()) + tuple(resolvers)\n        return _eval(expr, inplace=inplace, **kwargs)\n\n    def select_dtypes(self, include=None, exclude=None):\n        \"\"\"\n        Return a subset of the DataFrame's columns based on the column dtypes.\n\n        Parameters\n        ----------\n        include, exclude : scalar or list-like\n            A selection of dtypes or strings to be included/excluded. At least\n            one of these parameters must be supplied.\n\n        Raises\n        ------\n        ValueError\n            * If both of ``include`` and ``exclude`` are empty\n            * If ``include`` and ``exclude`` have overlapping elements\n            * If any kind of string dtype is passed in.\n\n        Returns\n        -------\n        subset : DataFrame\n            The subset of the frame including the dtypes in ``include`` and\n            excluding the dtypes in ``exclude``.\n\n        Notes\n        -----\n        * To select all *numeric* types, use ``np.number`` or ``'number'``\n        * To select strings you must use the ``object`` dtype, but note that\n          this will return *all* object dtype columns\n        * See the `numpy dtype hierarchy\n          <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n        * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n          ``'datetime64'``\n        * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n          ``'timedelta64'``\n        * To select Pandas categorical dtypes, use ``'category'``\n        * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n          0.20.0) or ``'datetime64[ns, tz]'``\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 2] * 3,\n        ...                    'b': [True, False] * 3,\n        ...                    'c': [1.0, 2.0] * 3})\n        >>> df\n                a      b  c\n        0       1   True  1.0\n        1       2  False  2.0\n        2       1   True  1.0\n        3       2  False  2.0\n        4       1   True  1.0\n        5       2  False  2.0\n\n        >>> df.select_dtypes(include='bool')\n           b\n        0  True\n        1  False\n        2  True\n        3  False\n        4  True\n        5  False\n\n        >>> df.select_dtypes(include=['float64'])\n           c\n        0  1.0\n        1  2.0\n        2  1.0\n        3  2.0\n        4  1.0\n        5  2.0\n\n        >>> df.select_dtypes(exclude=['int'])\n               b    c\n        0   True  1.0\n        1  False  2.0\n        2   True  1.0\n        3  False  2.0\n        4   True  1.0\n        5  False  2.0\n        \"\"\"\n        if not is_list_like(include):\n            include = (include,) if include is not None else ()\n        if not is_list_like(exclude):\n            exclude = (exclude,) if exclude is not None else ()\n        selection = tuple(map(frozenset, (include, exclude)))\n        if not any(selection):\n            raise ValueError(\n                'at least one of include or exclude must be nonempty')\n        include, exclude = map(lambda x: frozenset(map(\n            _get_dtype_from_object, x)), selection)\n        for dtypes in (include, exclude):\n            invalidate_string_dtypes(dtypes)\n        if not include.isdisjoint(exclude):\n            raise ValueError('include and exclude overlap on {inc_ex}'.\n                format(inc_ex=include & exclude))\n        include_these = Series(not bool(include), index=self.columns)\n        exclude_these = Series(not bool(exclude), index=self.columns)\n\n        def is_dtype_instance_mapper(idx, dtype):\n            return idx, functools.partial(issubclass, dtype.type)\n        for idx, f in itertools.starmap(is_dtype_instance_mapper, enumerate\n            (self.dtypes)):\n            if include:\n                include_these.iloc[idx] = any(map(f, include))\n            if exclude:\n                exclude_these.iloc[idx] = not any(map(f, exclude))\n        dtype_indexer = include_these & exclude_these\n        return self.loc[com._get_info_slice(self, dtype_indexer)]\n\n    def _box_item_values(self, key, values):\n        items = self.columns[self.columns.get_loc(key)]\n        if values.ndim == 2:\n            return self._constructor(values.T, columns=items, index=self.index)\n        else:\n            return self._box_col_values(values, items)\n\n    def _box_col_values(self, values, items):\n        \"\"\" provide boxed values for a column \"\"\"\n        klass = _get_sliced_frame_result_type(values, self)\n        return klass(values, index=self.index, name=items, fastpath=True)\n\n    def __setitem__(self, key, value):\n        key = com._apply_if_callable(key, self)\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            return self._setitem_slice(indexer, value)\n        if isinstance(key, DataFrame) or getattr(key, 'ndim', None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        else:\n            self._set_item(key, value)\n\n    def _setitem_slice(self, key, value):\n        self._check_setitem_copy()\n        self.loc._setitem_with_indexer(key, value)\n\n    def _setitem_array(self, key, value):\n        if com.is_bool_indexer(key):\n            if len(key) != len(self.index):\n                raise ValueError('Item wrong length %d instead of %d!' % (\n                    len(key), len(self.index)))\n            key = check_bool_indexer(self.index, key)\n            indexer = key.nonzero()[0]\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer(indexer, value)\n        elif isinstance(value, DataFrame):\n            if len(value.columns) != len(key):\n                raise ValueError('Columns must be same length as key')\n            for k1, k2 in zip(key, value.columns):\n                self[k1] = value[k2]\n        else:\n            indexer = self.loc._convert_to_indexer(key, axis=1)\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer((slice(None), indexer), value)\n\n    def _setitem_frame(self, key, value):\n        if isinstance(key, np.ndarray):\n            if key.shape != self.shape:\n                raise ValueError('Array conditional must be same shape as self'\n                    )\n            key = self._constructor(key, **self._construct_axes_dict())\n        if key.values.size and not is_bool_dtype(key.values):\n            raise TypeError(\n                'Must pass DataFrame or 2-d ndarray with boolean values only')\n        self._check_inplace_setting(value)\n        self._check_setitem_copy()\n        self._where(-key, value, inplace=True)\n\n    def _ensure_valid_index(self, value):\n        \"\"\"\n        ensure that if we don't have an index, that we can create one from the\n        passed value\n        \"\"\"\n        if not len(self.index) and is_list_like(value):\n            try:\n                value = Series(value)\n            except:\n                raise ValueError(\n                    'Cannot set a frame with no defined index and a value that cannot be converted to a Series'\n                    )\n            self._data = self._data.reindex_axis(value.index.copy(), axis=1,\n                fill_value=np.nan)\n\n    def _set_item(self, key, value):\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(key, value)\n        NDFrame._set_item(self, key, value)\n        if len(self):\n            self._check_setitem_copy()\n\n    def insert(self, loc, column, value, allow_duplicates=False):\n        \"\"\"\n        Insert column into DataFrame at specified location.\n\n        Raises a ValueError if `column` is already contained in the DataFrame,\n        unless `allow_duplicates` is set to True.\n\n        Parameters\n        ----------\n        loc : int\n            Insertion index. Must verify 0 <= loc <= len(columns)\n        column : string, number, or hashable object\n            label of the inserted column\n        value : int, Series, or array-like\n        allow_duplicates : bool, optional\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(column, value, broadcast=False)\n        self._data.insert(loc, column, value, allow_duplicates=allow_duplicates\n            )\n\n    def assign(self, **kwargs):\n        \"\"\"\n        Assign new columns to a DataFrame, returning a new object\n        (a copy) with the new columns added to the original ones.\n        Existing columns that are re-assigned will be overwritten.\n\n        Parameters\n        ----------\n        kwargs : keyword, value pairs\n            keywords are the column names. If the values are\n            callable, they are computed on the DataFrame and\n            assigned to the new columns. The callable must not\n            change input DataFrame (though pandas doesn't check it).\n            If the values are not callable, (e.g. a Series, scalar, or array),\n            they are simply assigned.\n\n        Returns\n        -------\n        df : DataFrame\n            A new DataFrame with the new columns in addition to\n            all the existing columns.\n\n        Notes\n        -----\n        Assigning multiple columns within the same ``assign`` is possible.\n        For Python 3.6 and above, later items in '\\\\*\\\\*kwargs' may refer to\n        newly created or modified columns in 'df'; items are computed and\n        assigned into 'df' in order.  For Python 3.5 and below, the order of\n        keyword arguments is not specified, you cannot refer to newly created\n        or modified columns. All items are computed first, and then assigned\n        in alphabetical order.\n\n        .. versionchanged :: 0.23.0\n\n            Keyword argument order is maintained for Python 3.6 and later.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 11), 'B': np.random.randn(10)})\n\n        Where the value is a callable, evaluated on `df`:\n\n        >>> df.assign(ln_A = lambda x: np.log(x.A))\n            A         B      ln_A\n        0   1  0.426905  0.000000\n        1   2 -0.780949  0.693147\n        2   3 -0.418711  1.098612\n        3   4 -0.269708  1.386294\n        4   5 -0.274002  1.609438\n        5   6 -0.500792  1.791759\n        6   7  1.649697  1.945910\n        7   8 -1.495604  2.079442\n        8   9  0.549296  2.197225\n        9  10 -0.758542  2.302585\n\n        Where the value already exists and is inserted:\n\n        >>> newcol = np.log(df['A'])\n        >>> df.assign(ln_A=newcol)\n            A         B      ln_A\n        0   1  0.426905  0.000000\n        1   2 -0.780949  0.693147\n        2   3 -0.418711  1.098612\n        3   4 -0.269708  1.386294\n        4   5 -0.274002  1.609438\n        5   6 -0.500792  1.791759\n        6   7  1.649697  1.945910\n        7   8 -1.495604  2.079442\n        8   9  0.549296  2.197225\n        9  10 -0.758542  2.302585\n\n        Where the keyword arguments depend on each other\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3]})\n\n        >>> df.assign(B=df.A, C=lambda x:x['A']+ x['B'])\n            A  B  C\n         0  1  1  2\n         1  2  2  4\n         2  3  3  6\n        \"\"\"\n        data = self.copy()\n        if PY36:\n            for k, v in kwargs.items():\n                data[k] = com._apply_if_callable(v, data)\n        else:\n            results = OrderedDict()\n            for k, v in kwargs.items():\n                results[k] = com._apply_if_callable(v, data)\n            results = sorted(results.items())\n            for k, v in results:\n                data[k] = v\n        return data\n\n    def _sanitize_column(self, key, value, broadcast=True):\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        key : object\n        value : scalar, Series, or array-like\n        broadcast : bool, default True\n            If ``key`` matches multiple duplicate column names in the\n            DataFrame, this parameter indicates whether ``value`` should be\n            tiled so that the returned array contains a (duplicated) column for\n            each occurrence of the key. If False, ``value`` will not be tiled.\n\n        Returns\n        -------\n        sanitized_column : numpy-array\n        \"\"\"\n\n        def reindexer(value):\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n                try:\n                    value = value.reindex(self.index)._values\n                except Exception as e:\n                    if not value.index.is_unique:\n                        raise e\n                    raise TypeError(\n                        'incompatible index of inserted column with frame index'\n                        )\n            return value\n        if isinstance(value, Series):\n            value = reindexer(value)\n        elif isinstance(value, DataFrame):\n            if isinstance(self.columns, MultiIndex) and key in self.columns:\n                loc = self.columns.get_loc(key)\n                if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                    cols = maybe_droplevels(self.columns[loc], key)\n                    if len(cols) and not cols.equals(value.columns):\n                        value = value.reindex(cols, axis=1)\n            value = reindexer(value).T\n        elif isinstance(value, ExtensionArray):\n            from pandas.core.series import _sanitize_index\n            value = value.copy()\n            value = _sanitize_index(value, self.index, copy=False)\n        elif isinstance(value, Index) or is_sequence(value):\n            from pandas.core.series import _sanitize_index\n            value = _sanitize_index(value, self.index, copy=False)\n            if not isinstance(value, (np.ndarray, Index)):\n                if isinstance(value, list) and len(value) > 0:\n                    value = maybe_convert_platform(value)\n                else:\n                    value = com._asarray_tuplesafe(value)\n            elif value.ndim == 2:\n                value = value.copy().T\n            elif isinstance(value, Index):\n                value = value.copy(deep=True)\n            else:\n                value = value.copy()\n            if is_object_dtype(value.dtype):\n                value = maybe_infer_to_datetimelike(value)\n        else:\n            value = cast_scalar_to_array(len(self.index), value)\n            value = maybe_cast_to_datetime(value, value.dtype)\n        if is_extension_type(value) or is_extension_array_dtype(value):\n            return value\n        if broadcast and key in self.columns and value.ndim == 1:\n            if not self.columns.is_unique or isinstance(self.columns,\n                MultiIndex):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1))\n        return np.atleast_2d(np.asarray(value))\n\n    @property\n    def _series(self):\n        result = {}\n        for idx, item in enumerate(self.columns):\n            result[item] = Series(self._data.iget(idx), index=self.index,\n                name=item)\n        return result\n\n    def lookup(self, row_labels, col_labels):\n        \"\"\"Label-based \"fancy indexing\" function for DataFrame.\n        Given equal-length arrays of row and column labels, return an\n        array of the values corresponding to each (row, col) pair.\n\n        Parameters\n        ----------\n        row_labels : sequence\n            The row labels to use for lookup\n        col_labels : sequence\n            The column labels to use for lookup\n\n        Notes\n        -----\n        Akin to::\n\n            result = []\n            for row, col in zip(row_labels, col_labels):\n                result.append(df.get_value(row, col))\n\n        Examples\n        --------\n        values : ndarray\n            The found values\n\n        \"\"\"\n        n = len(row_labels)\n        if n != len(col_labels):\n            raise ValueError('Row labels must have same size as column labels')\n        thresh = 1000\n        if not self._is_mixed_type or n > thresh:\n            values = self.values\n            ridx = self.index.get_indexer(row_labels)\n            cidx = self.columns.get_indexer(col_labels)\n            if (ridx == -1).any():\n                raise KeyError('One or more row labels was not found')\n            if (cidx == -1).any():\n                raise KeyError('One or more column labels was not found')\n            flat_index = ridx * len(self.columns) + cidx\n            result = values.flat[flat_index]\n        else:\n            result = np.empty(n, dtype='O')\n            for i, (r, c) in enumerate(zip(row_labels, col_labels)):\n                result[i] = self._get_value(r, c)\n        if is_object_dtype(result):\n            result = lib.maybe_convert_objects(result)\n        return result\n\n    def _reindex_axes(self, axes, level, limit, tolerance, method,\n        fill_value, copy):\n        frame = self\n        columns = axes['columns']\n        if columns is not None:\n            frame = frame._reindex_columns(columns, method, copy, level,\n                fill_value, limit, tolerance)\n        index = axes['index']\n        if index is not None:\n            frame = frame._reindex_index(index, method, copy, level,\n                fill_value, limit, tolerance)\n        return frame\n\n    def _reindex_index(self, new_index, method, copy, level, fill_value=np.\n        nan, limit=None, tolerance=None):\n        new_index, indexer = self.index.reindex(new_index, method=method,\n            level=level, limit=limit, tolerance=tolerance)\n        return self._reindex_with_indexers({(0): [new_index, indexer]},\n            copy=copy, fill_value=fill_value, allow_dups=False)\n\n    def _reindex_columns(self, new_columns, method, copy, level, fill_value\n        =None, limit=None, tolerance=None):\n        new_columns, indexer = self.columns.reindex(new_columns, method=\n            method, level=level, limit=limit, tolerance=tolerance)\n        return self._reindex_with_indexers({(1): [new_columns, indexer]},\n            copy=copy, fill_value=fill_value, allow_dups=False)\n\n    def _reindex_multi(self, axes, copy, fill_value):\n        \"\"\" we are guaranteed non-Nones in the axes! \"\"\"\n        new_index, row_indexer = self.index.reindex(axes['index'])\n        new_columns, col_indexer = self.columns.reindex(axes['columns'])\n        if row_indexer is not None and col_indexer is not None:\n            indexer = row_indexer, col_indexer\n            new_values = algorithms.take_2d_multi(self.values, indexer,\n                fill_value=fill_value)\n            return self._constructor(new_values, index=new_index, columns=\n                new_columns)\n        else:\n            return self._reindex_with_indexers({(0): [new_index,\n                row_indexer], (1): [new_columns, col_indexer]}, copy=copy,\n                fill_value=fill_value)\n\n    @Appender(_shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n        fill_value=None, method=None, limit=None, fill_axis=0,\n        broadcast_axis=None):\n        return super(DataFrame, self).align(other, join=join, axis=axis,\n            level=level, copy=copy, fill_value=fill_value, method=method,\n            limit=limit, fill_axis=fill_axis, broadcast_axis=broadcast_axis)\n\n    @Appender(_shared_docs['reindex'] % _shared_doc_kwargs)\n    @rewrite_axis_style_signature('labels', [('method', None), ('copy', \n        True), ('level', None), ('fill_value', np.nan), ('limit', None), (\n        'tolerance', None)])\n    def reindex(self, *args, **kwargs):\n        axes = validate_axis_style_args(self, args, kwargs, 'labels', 'reindex'\n            )\n        kwargs.update(axes)\n        kwargs.pop('axis', None)\n        kwargs.pop('labels', None)\n        return super(DataFrame, self).reindex(**kwargs)\n\n    @Appender(_shared_docs['reindex_axis'] % _shared_doc_kwargs)\n    def reindex_axis(self, labels, axis=0, method=None, level=None, copy=\n        True, limit=None, fill_value=np.nan):\n        return super(DataFrame, self).reindex_axis(labels=labels, axis=axis,\n            method=method, level=level, copy=copy, limit=limit, fill_value=\n            fill_value)\n\n    def drop(self, labels=None, axis=0, index=None, columns=None, level=\n        None, inplace=False, errors='raise'):\n        \"\"\"\n        Drop specified labels from rows or columns.\n\n        Remove rows or columns by specifying label names and corresponding\n        axis, or by specifying directly index or column names. When using a\n        multi-index, labels on different levels can be removed by specifying\n        the level.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n            Index or column labels to drop.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Whether to drop labels from the index (0 or 'index') or\n            columns (1 or 'columns').\n        index, columns : single label or list-like\n            Alternative to specifying axis (``labels, axis=1``\n            is equivalent to ``columns=labels``).\n\n            .. versionadded:: 0.21.0\n        level : int or level name, optional\n            For MultiIndex, level from which the labels will be removed.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and only existing labels are\n            dropped.\n\n        Returns\n        -------\n        dropped : pandas.DataFrame\n\n        See Also\n        --------\n        DataFrame.loc : Label-location based indexer for selection by label.\n        DataFrame.dropna : Return DataFrame with labels on given axis omitted\n            where (all or any) data are missing\n        DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n            removed, optionally only considering certain columns\n        Series.drop : Return Series with specified index labels removed.\n\n        Raises\n        ------\n        KeyError\n            If none of the labels are found in the selected axis\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.arange(12).reshape(3,4),\n        ...                   columns=['A', 'B', 'C', 'D'])\n        >>> df\n           A  B   C   D\n        0  0  1   2   3\n        1  4  5   6   7\n        2  8  9  10  11\n\n        Drop columns\n\n        >>> df.drop(['B', 'C'], axis=1)\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        >>> df.drop(columns=['B', 'C'])\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        Drop a row by index\n\n        >>> df.drop([0, 1])\n           A  B   C   D\n        2  8  9  10  11\n\n        Drop columns and/or rows of MultiIndex DataFrame\n\n        >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n        ...                              ['speed', 'weight', 'length']],\n        ...                      labels=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n        ...                              [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n        >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n        ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n        ...                         [250, 150], [1.5, 0.8], [320, 250],\n        ...                         [1, 0.8], [0.3,0.2]])\n        >>> df\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n                length  1.5     1.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n                length  1.5     0.8\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n                length  0.3     0.2\n\n        >>> df.drop(index='cow', columns='small')\n                        big\n        lama    speed   45.0\n                weight  200.0\n                length  1.5\n        falcon  speed   320.0\n                weight  1.0\n                length  0.3\n\n        >>> df.drop(index='length', level=1)\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n        \"\"\"\n        return super(DataFrame, self).drop(labels=labels, axis=axis, index=\n            index, columns=columns, level=level, inplace=inplace, errors=errors\n            )\n\n    @rewrite_axis_style_signature('mapper', [('copy', True), ('inplace', \n        False), ('level', None)])\n    def rename(self, *args, **kwargs):\n        \"\"\"Alter axes labels.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        mapper, index, columns : dict-like or function, optional\n            dict-like or functions transformations to apply to\n            that axis' values. Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index`` and\n            ``columns``.\n        axis : int or str, optional\n            Axis to target with ``mapper``. Can be either the axis name\n            ('index', 'columns') or number (0, 1). The default is 'index'.\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n            Whether to return a new DataFrame. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        renamed : DataFrame\n\n        See Also\n        --------\n        pandas.DataFrame.rename_axis\n\n        Examples\n        --------\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n        \"\"\"\n        axes = validate_axis_style_args(self, args, kwargs, 'mapper', 'rename')\n        kwargs.update(axes)\n        kwargs.pop('axis', None)\n        kwargs.pop('mapper', None)\n        return super(DataFrame, self).rename(**kwargs)\n\n    @Substitution(**_shared_doc_kwargs)\n    @Appender(NDFrame.fillna.__doc__)\n    def fillna(self, value=None, method=None, axis=None, inplace=False,\n        limit=None, downcast=None, **kwargs):\n        return super(DataFrame, self).fillna(value=value, method=method,\n            axis=axis, inplace=inplace, limit=limit, downcast=downcast, **\n            kwargs)\n\n    @Appender(_shared_docs['replace'] % _shared_doc_kwargs)\n    def replace(self, to_replace=None, value=None, inplace=False, limit=\n        None, regex=False, method='pad'):\n        return super(DataFrame, self).replace(to_replace=to_replace, value=\n            value, inplace=inplace, limit=limit, regex=regex, method=method)\n\n    @Appender(_shared_docs['shift'] % _shared_doc_kwargs)\n    def shift(self, periods=1, freq=None, axis=0):\n        return super(DataFrame, self).shift(periods=periods, freq=freq,\n            axis=axis)\n\n    def set_index(self, keys, drop=True, append=False, inplace=False,\n        verify_integrity=False):\n        \"\"\"\n        Set the DataFrame index (row labels) using one or more existing\n        columns. By default yields a new object.\n\n        Parameters\n        ----------\n        keys : column label or list of column labels / arrays\n        drop : boolean, default True\n            Delete columns to be used as the new index\n        append : boolean, default False\n            Whether to append columns to existing index\n        inplace : boolean, default False\n            Modify the DataFrame in place (do not create a new object)\n        verify_integrity : boolean, default False\n            Check the new index for duplicates. Otherwise defer the check until\n            necessary. Setting to False will improve the performance of this\n            method\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n        ...                    'year': [2012, 2014, 2013, 2014],\n        ...                    'sale':[55, 40, 84, 31]})\n           month  sale  year\n        0  1      55    2012\n        1  4      40    2014\n        2  7      84    2013\n        3  10     31    2014\n\n        Set the index to become the 'month' column:\n\n        >>> df.set_index('month')\n               sale  year\n        month\n        1      55    2012\n        4      40    2014\n        7      84    2013\n        10     31    2014\n\n        Create a multi-index using columns 'year' and 'month':\n\n        >>> df.set_index(['year', 'month'])\n                    sale\n        year  month\n        2012  1     55\n        2014  4     40\n        2013  7     84\n        2014  10    31\n\n        Create a multi-index using a set of values and a column:\n\n        >>> df.set_index([[1, 2, 3, 4], 'year'])\n                 month  sale\n           year\n        1  2012  1      55\n        2  2014  4      40\n        3  2013  7      84\n        4  2014  10     31\n\n        Returns\n        -------\n        dataframe : DataFrame\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(keys, list):\n            keys = [keys]\n        if inplace:\n            frame = self\n        else:\n            frame = self.copy()\n        arrays = []\n        names = []\n        if append:\n            names = [x for x in self.index.names]\n            if isinstance(self.index, MultiIndex):\n                for i in range(self.index.nlevels):\n                    arrays.append(self.index._get_level_values(i))\n            else:\n                arrays.append(self.index)\n        to_remove = []\n        for col in keys:\n            if isinstance(col, MultiIndex):\n                for n in range(col.nlevels - 1):\n                    arrays.append(col._get_level_values(n))\n                level = col._get_level_values(col.nlevels - 1)\n                names.extend(col.names)\n            elif isinstance(col, Series):\n                level = col._values\n                names.append(col.name)\n            elif isinstance(col, Index):\n                level = col\n                names.append(col.name)\n            elif isinstance(col, (list, np.ndarray, Index)):\n                level = col\n                names.append(None)\n            else:\n                level = frame[col]._values\n                names.append(col)\n                if drop:\n                    to_remove.append(col)\n            arrays.append(level)\n        index = _ensure_index_from_sequences(arrays, names)\n        if verify_integrity and not index.is_unique:\n            duplicates = index[index.duplicated()].unique()\n            raise ValueError('Index has duplicate keys: {dup}'.format(dup=\n                duplicates))\n        for c in to_remove:\n            del frame[c]\n        index._cleanup()\n        frame.index = index\n        if not inplace:\n            return frame\n\n    def reset_index(self, level=None, drop=False, inplace=False, col_level=\n        0, col_fill=''):\n        \"\"\"\n        For DataFrame with multi-level index, return new DataFrame with\n        labeling information in the columns under the index names, defaulting\n        to 'level_0', 'level_1', etc. if any are None. For a standard index,\n        the index name will be used (if set), otherwise a default 'index' or\n        'level_0' (if 'index' is already taken) will be used.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default None\n            Only remove the given levels from the index. Removes all levels by\n            default\n        drop : boolean, default False\n            Do not try to insert index into dataframe columns. This resets\n            the index to the default integer index.\n        inplace : boolean, default False\n            Modify the DataFrame in place (do not create a new object)\n        col_level : int or str, default 0\n            If the columns have multiple levels, determines which level the\n            labels are inserted into. By default it is inserted into the first\n            level.\n        col_fill : object, default ''\n            If the columns have multiple levels, determines how the other\n            levels are named. If None then the index name is repeated.\n\n        Returns\n        -------\n        resetted : DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('bird',    389.0),\n        ...                    ('bird',     24.0),\n        ...                    ('mammal',   80.5),\n        ...                    ('mammal', np.nan)],\n        ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n        ...                   columns=('class', 'max_speed'))\n        >>> df\n                 class  max_speed\n        falcon    bird      389.0\n        parrot    bird       24.0\n        lion    mammal       80.5\n        monkey  mammal        NaN\n\n        When we reset the index, the old index is added as a column, and a\n        new sequential index is used:\n\n        >>> df.reset_index()\n            index   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        We can use the `drop` parameter to avoid the old index being added as\n        a column:\n\n        >>> df.reset_index(drop=True)\n            class  max_speed\n        0    bird      389.0\n        1    bird       24.0\n        2  mammal       80.5\n        3  mammal        NaN\n\n        You can also use `reset_index` with `MultiIndex`.\n\n        >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n        ...                                    ('bird', 'parrot'),\n        ...                                    ('mammal', 'lion'),\n        ...                                    ('mammal', 'monkey')],\n        ...                                   names=['class', 'name'])\n        >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n        ...                                      ('species', 'type')])\n        >>> df = pd.DataFrame([(389.0, 'fly'),\n        ...                    ( 24.0, 'fly'),\n        ...                    ( 80.5, 'run'),\n        ...                    (np.nan, 'jump')],\n        ...                   index=index,\n        ...                   columns=columns)\n        >>> df\n                       speed species\n                         max    type\n        class  name\n        bird   falcon  389.0     fly\n               parrot   24.0     fly\n        mammal lion     80.5     run\n               monkey    NaN    jump\n\n        If the index has multiple levels, we can reset a subset of them:\n\n        >>> df.reset_index(level='class')\n                 class  speed species\n                          max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        If we are not dropping the index, by default, it is placed in the top\n        level. We can place it in another level:\n\n        >>> df.reset_index(level='class', col_level=1)\n                        speed species\n                 class    max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        When the index is inserted under another level, we can specify under\n        which one with the parameter `col_fill`:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                      species  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n\n        If we specify a nonexistent level for `col_fill`, it is created:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                        genus  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if inplace:\n            new_obj = self\n        else:\n            new_obj = self.copy()\n\n        def _maybe_casted_values(index, labels=None):\n            values = index._values\n            if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n                if values.dtype == np.object_:\n                    values = lib.maybe_convert_objects(values)\n            if labels is not None:\n                mask = labels == -1\n                if mask.all():\n                    values = np.empty(len(mask))\n                    values.fill(np.nan)\n                else:\n                    values = values.take(labels)\n                    if mask.any():\n                        values, changed = maybe_upcast_putmask(values, mask,\n                            np.nan)\n            return values\n        new_index = com._default_index(len(new_obj))\n        if level is not None:\n            if not isinstance(level, (tuple, list)):\n                level = [level]\n            level = [self.index._get_level_number(lev) for lev in level]\n            if len(level) < self.index.nlevels:\n                new_index = self.index.droplevel(level)\n        if not drop:\n            if isinstance(self.index, MultiIndex):\n                names = [(n if n is not None else 'level_%d' % i) for i, n in\n                    enumerate(self.index.names)]\n                to_insert = lzip(self.index.levels, self.index.labels)\n            else:\n                default = 'index' if 'index' not in self else 'level_0'\n                names = [default] if self.index.name is None else [self.\n                    index.name]\n                to_insert = (self.index, None),\n            multi_col = isinstance(self.columns, MultiIndex)\n            for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n                if not (level is None or i in level):\n                    continue\n                name = names[i]\n                if multi_col:\n                    col_name = list(name) if isinstance(name, tuple) else [name\n                        ]\n                    if col_fill is None:\n                        if len(col_name) not in (1, self.columns.nlevels):\n                            raise ValueError(\n                                'col_fill=None is incompatible with incomplete column name {}'\n                                .format(name))\n                        col_fill = col_name[0]\n                    lev_num = self.columns._get_level_number(col_level)\n                    name_lst = [col_fill] * lev_num + col_name\n                    missing = self.columns.nlevels - len(name_lst)\n                    name_lst += [col_fill] * missing\n                    name = tuple(name_lst)\n                level_values = _maybe_casted_values(lev, lab)\n                new_obj.insert(0, name, level_values)\n        new_obj.index = new_index\n        if not inplace:\n            return new_obj\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isna(self):\n        return super(DataFrame, self).isna()\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isnull(self):\n        return super(DataFrame, self).isnull()\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notna(self):\n        return super(DataFrame, self).notna()\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notnull(self):\n        return super(DataFrame, self).notnull()\n\n    def dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False\n        ):\n        \"\"\"\n        Remove missing values.\n\n        See the :ref:`User Guide <missing_data>` for more on which values are\n        considered missing, and how to work with missing data.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Determine if rows or columns which contain missing values are\n            removed.\n\n            * 0, or 'index' : Drop rows which contain missing values.\n            * 1, or 'columns' : Drop columns which contain missing value.\n\n            .. deprecated:: 0.23.0\n                Pass tuple or list to drop on multiple axes.\n\n        how : {'any', 'all'}, default 'any'\n            Determine if row or column is removed from DataFrame, when we have\n            at least one NA or all NA.\n\n            * 'any' : If any NA values are present, drop that row or column.\n            * 'all' : If all values are NA, drop that row or column.\n        thresh : int, optional\n            Require that many non-NA values.\n        subset : array-like, optional\n            Labels along other axis to consider, e.g. if you are dropping rows\n            these would be a list of columns to include.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame with NA entries dropped from it.\n\n        See Also\n        --------\n        DataFrame.isna: Indicate missing values.\n        DataFrame.notna : Indicate existing (non-missing) values.\n        DataFrame.fillna : Replace missing values.\n        Series.dropna : Drop missing values.\n        Index.dropna : Drop missing indices.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n        ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n        ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n        ...                             pd.NaT]})\n        >>> df\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Drop the rows where at least one element is missing.\n\n        >>> df.dropna()\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n\n        Drop the columns where at least one element is missing.\n\n        >>> df.dropna(axis='columns')\n               name\n        0    Alfred\n        1    Batman\n        2  Catwoman\n\n        Drop the rows where all elements are missing.\n\n        >>> df.dropna(how='all')\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Keep only the rows with at least 2 non-NA values.\n\n        >>> df.dropna(thresh=2)\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Define in which columns to look for missing values.\n\n        >>> df.dropna(subset=['name', 'born'])\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n\n        Keep the DataFrame with valid entries in the same variable.\n\n        >>> df.dropna(inplace=True)\n        >>> df\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if isinstance(axis, (tuple, list)):\n            msg = (\n                'supplying multiple axes to axis is deprecated and will be removed in a future version.'\n                )\n            warnings.warn(msg, FutureWarning, stacklevel=2)\n            result = self\n            for ax in axis:\n                result = result.dropna(how=how, thresh=thresh, subset=\n                    subset, axis=ax)\n        else:\n            axis = self._get_axis_number(axis)\n            agg_axis = 1 - axis\n            agg_obj = self\n            if subset is not None:\n                ax = self._get_axis(agg_axis)\n                indices = ax.get_indexer_for(subset)\n                check = indices == -1\n                if check.any():\n                    raise KeyError(list(np.compress(check, subset)))\n                agg_obj = self.take(indices, axis=agg_axis)\n            count = agg_obj.count(axis=agg_axis)\n            if thresh is not None:\n                mask = count >= thresh\n            elif how == 'any':\n                mask = count == len(agg_obj._get_axis(agg_axis))\n            elif how == 'all':\n                mask = count > 0\n            elif how is not None:\n                raise ValueError('invalid how option: {h}'.format(h=how))\n            else:\n                raise TypeError('must specify how or thresh')\n            result = self._take(mask.nonzero()[0], axis=axis)\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result\n\n    def drop_duplicates(self, subset=None, keep='first', inplace=False):\n        \"\"\"\n        Return DataFrame with duplicate rows removed, optionally only\n        considering certain columns\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns\n        keep : {'first', 'last', False}, default 'first'\n            - ``first`` : Drop duplicates except for the first occurrence.\n            - ``last`` : Drop duplicates except for the last occurrence.\n            - False : Drop all duplicates.\n        inplace : boolean, default False\n            Whether to drop duplicates in place or to return a copy\n\n        Returns\n        -------\n        deduplicated : DataFrame\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        duplicated = self.duplicated(subset, keep=keep)\n        if inplace:\n            inds, = (-duplicated).nonzero()\n            new_data = self._data.take(inds)\n            self._update_inplace(new_data)\n        else:\n            return self[-duplicated]\n\n    def duplicated(self, subset=None, keep='first'):\n        \"\"\"\n        Return boolean Series denoting duplicate rows, optionally only\n        considering certain columns\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns\n        keep : {'first', 'last', False}, default 'first'\n            - ``first`` : Mark duplicates as ``True`` except for the\n              first occurrence.\n            - ``last`` : Mark duplicates as ``True`` except for the\n              last occurrence.\n            - False : Mark all duplicates as ``True``.\n\n        Returns\n        -------\n        duplicated : Series\n        \"\"\"\n        from pandas.core.sorting import get_group_index\n        from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n\n        def f(vals):\n            labels, shape = algorithms.factorize(vals, size_hint=min(len(\n                self), _SIZE_HINT_LIMIT))\n            return labels.astype('i8', copy=False), len(shape)\n        if subset is None:\n            subset = self.columns\n        elif not np.iterable(subset) or isinstance(subset, compat.string_types\n            ) or isinstance(subset, tuple) and subset in self.columns:\n            subset = subset,\n        diff = Index(subset).difference(self.columns)\n        if not diff.empty:\n            raise KeyError(diff)\n        vals = (col.values for name, col in self.iteritems() if name in subset)\n        labels, shape = map(list, zip(*map(f, vals)))\n        ids = get_group_index(labels, shape, sort=False, xnull=False)\n        return Series(duplicated_int64(ids, keep), index=self.index)\n\n    @Appender(_shared_docs['sort_values'] % _shared_doc_kwargs)\n    def sort_values(self, by, axis=0, ascending=True, inplace=False, kind=\n        'quicksort', na_position='last'):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n        stacklevel = 2\n        if not isinstance(by, list):\n            by = [by]\n        if is_sequence(ascending) and len(by) != len(ascending):\n            raise ValueError(\n                'Length of ascending (%d) != length of by (%d)' % (len(\n                ascending), len(by)))\n        if len(by) > 1:\n            from pandas.core.sorting import lexsort_indexer\n            keys = []\n            for x in by:\n                k = self._get_label_or_level_values(x, axis=axis,\n                    stacklevel=stacklevel)\n                keys.append(k)\n            indexer = lexsort_indexer(keys, orders=ascending, na_position=\n                na_position)\n            indexer = _ensure_platform_int(indexer)\n        else:\n            from pandas.core.sorting import nargsort\n            by = by[0]\n            k = self._get_label_or_level_values(by, axis=axis, stacklevel=\n                stacklevel)\n            if isinstance(ascending, (tuple, list)):\n                ascending = ascending[0]\n            indexer = nargsort(k, kind=kind, ascending=ascending,\n                na_position=na_position)\n        new_data = self._data.take(indexer, axis=self.\n            _get_block_manager_axis(axis), verify=False)\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    @Appender(_shared_docs['sort_index'] % _shared_doc_kwargs)\n    def sort_index(self, axis=0, level=None, ascending=True, inplace=False,\n        kind='quicksort', na_position='last', sort_remaining=True, by=None):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if by is not None:\n            warnings.warn(\n                'by argument to sort_index is deprecated, please use .sort_values(by=...)'\n                , FutureWarning, stacklevel=2)\n            if level is not None:\n                raise ValueError('unable to simultaneously sort by and level')\n            return self.sort_values(by, axis=axis, ascending=ascending,\n                inplace=inplace)\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n        labels = labels._sort_levels_monotonic()\n        if level is not None:\n            new_axis, indexer = labels.sortlevel(level, ascending=ascending,\n                sort_remaining=sort_remaining)\n        elif isinstance(labels, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n            indexer = lexsort_indexer(labels._get_labels_for_sorting(),\n                orders=ascending, na_position=na_position)\n        else:\n            from pandas.core.sorting import nargsort\n            if (ascending and labels.is_monotonic_increasing or not\n                ascending and labels.is_monotonic_decreasing):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n            indexer = nargsort(labels, kind=kind, ascending=ascending,\n                na_position=na_position)\n        baxis = self._get_block_manager_axis(axis)\n        new_data = self._data.take(indexer, axis=baxis, verify=False)\n        new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def sortlevel(self, level=0, axis=0, ascending=True, inplace=False,\n        sort_remaining=True):\n        \"\"\"Sort multilevel index by chosen axis and primary level. Data will be\n        lexicographically sorted by the chosen level followed by the other\n        levels (in order).\n\n        .. deprecated:: 0.20.0\n            Use :meth:`DataFrame.sort_index`\n\n\n        Parameters\n        ----------\n        level : int\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n        ascending : boolean, default True\n        inplace : boolean, default False\n            Sort the DataFrame without creating a new instance\n        sort_remaining : boolean, default True\n            Sort by the other levels too.\n\n        Returns\n        -------\n        sorted : DataFrame\n\n        See Also\n        --------\n        DataFrame.sort_index(level=...)\n\n        \"\"\"\n        warnings.warn('sortlevel is deprecated, use sort_index(level= ...)',\n            FutureWarning, stacklevel=2)\n        return self.sort_index(level=level, axis=axis, ascending=ascending,\n            inplace=inplace, sort_remaining=sort_remaining)\n\n    def nlargest(self, n, columns, keep='first'):\n        \"\"\"\n        Return the first `n` rows ordered by `columns` in descending order.\n\n        Return the first `n` rows with the largest values in `columns`, in\n        descending order. The columns that are not specified are returned as\n        well, but not used for ordering.\n\n        This method is equivalent to\n        ``df.sort_values(columns, ascending=False).head(n)``, but more\n        performant.\n\n        Parameters\n        ----------\n        n : int\n            Number of rows to return.\n        columns : label or list of labels\n            Column label(s) to order by.\n        keep : {'first', 'last'}, default 'first'\n            Where there are duplicate values:\n\n            - `first` : prioritize the first occurrence(s)\n            - `last` : prioritize the last occurrence(s)\n\n        Returns\n        -------\n        DataFrame\n            The first `n` rows ordered by the given columns in descending\n            order.\n\n        See Also\n        --------\n        DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n            ascending order.\n        DataFrame.sort_values : Sort DataFrame by the values\n        DataFrame.head : Return the first `n` rows without re-ordering.\n\n        Notes\n        -----\n        This function cannot be used with all column types. For example, when\n        specifying columns with `object` or `category` dtypes, ``TypeError`` is\n        raised.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 10, 8, 10, -1],\n        ...                    'b': list('abdce'),\n        ...                    'c': [1.0, 2.0, np.nan, 3.0, 4.0]})\n        >>> df\n            a  b    c\n        0   1  a  1.0\n        1  10  b  2.0\n        2   8  d  NaN\n        3  10  c  3.0\n        4  -1  e  4.0\n\n        In the following example, we will use ``nlargest`` to select the three\n        rows having the largest values in column \"a\".\n\n        >>> df.nlargest(3, 'a')\n            a  b    c\n        1  10  b  2.0\n        3  10  c  3.0\n        2   8  d  NaN\n\n        When using ``keep='last'``, ties are resolved in reverse order:\n\n        >>> df.nlargest(3, 'a', keep='last')\n            a  b    c\n        3  10  c  3.0\n        1  10  b  2.0\n        2   8  d  NaN\n\n        To order by the largest values in column \"a\" and then \"c\", we can\n        specify multiple columns like in the next example.\n\n        >>> df.nlargest(3, ['a', 'c'])\n            a  b    c\n        3  10  c  3.0\n        1  10  b  2.0\n        2   8  d  NaN\n\n        Attempting to use ``nlargest`` on non-numeric dtypes will raise a\n        ``TypeError``:\n\n        >>> df.nlargest(3, 'b')\n        Traceback (most recent call last):\n        TypeError: Column 'b' has dtype object, cannot use method 'nlargest'\n        \"\"\"\n        return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns\n            ).nlargest()\n\n    def nsmallest(self, n, columns, keep='first'):\n        \"\"\"Get the rows of a DataFrame sorted by the `n` smallest\n        values of `columns`.\n\n        Parameters\n        ----------\n        n : int\n            Number of items to retrieve\n        columns : list or str\n            Column name or names to order by\n        keep : {'first', 'last'}, default 'first'\n            Where there are duplicate values:\n            - ``first`` : take the first occurrence.\n            - ``last`` : take the last occurrence.\n\n        Returns\n        -------\n        DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 10, 8, 11, -1],\n        ...                    'b': list('abdce'),\n        ...                    'c': [1.0, 2.0, np.nan, 3.0, 4.0]})\n        >>> df.nsmallest(3, 'a')\n           a  b   c\n        4 -1  e   4\n        0  1  a   1\n        2  8  d NaN\n        \"\"\"\n        return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns\n            ).nsmallest()\n\n    def swaplevel(self, i=-2, j=-1, axis=0):\n        \"\"\"\n        Swap levels i and j in a MultiIndex on a particular axis\n\n        Parameters\n        ----------\n        i, j : int, string (can be mixed)\n            Level of index to be swapped. Can pass level name as string.\n\n        Returns\n        -------\n        swapped : type of caller (new object)\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n\n        \"\"\"\n        result = self.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            result.index = result.index.swaplevel(i, j)\n        else:\n            result.columns = result.columns.swaplevel(i, j)\n        return result\n\n    def reorder_levels(self, order, axis=0):\n        \"\"\"\n        Rearrange index levels using input order.\n        May not drop or duplicate levels\n\n        Parameters\n        ----------\n        order : list of int or list of str\n            List representing new level order. Reference level by number\n            (position) or by key (label).\n        axis : int\n            Where to reorder levels.\n\n        Returns\n        -------\n        type of caller (new object)\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if not isinstance(self._get_axis(axis), MultiIndex):\n            raise TypeError('Can only reorder levels on a hierarchical axis.')\n        result = self.copy()\n        if axis == 0:\n            result.index = result.index.reorder_levels(order)\n        else:\n            result.columns = result.columns.reorder_levels(order)\n        return result\n\n    def _combine_frame(self, other, func, fill_value=None, level=None):\n        this, other = self.align(other, join='outer', level=level, copy=False)\n        new_index, new_columns = this.index, this.columns\n\n        def _arith_op(left, right):\n            left, right = ops.fill_binop(left, right, fill_value)\n            return func(left, right)\n        if this._is_mixed_type or other._is_mixed_type:\n            if this.columns.is_unique:\n                result = {col: _arith_op(this[col], other[col]) for col in this\n                    }\n                result = self._constructor(result, index=new_index, columns\n                    =new_columns, copy=False)\n            else:\n                result = {i: _arith_op(this.iloc[:, i], other.iloc[:, i]) for\n                    i, col in enumerate(this.columns)}\n                result = self._constructor(result, index=new_index, copy=False)\n                result.columns = new_columns\n            return result\n        else:\n            result = _arith_op(this.values, other.values)\n        return self._constructor(result, index=new_index, columns=\n            new_columns, copy=False)\n\n    def _combine_match_index(self, other, func, level=None):\n        left, right = self.align(other, join='outer', axis=0, level=level,\n            copy=False)\n        new_data = func(left.values.T, right.values).T\n        return self._constructor(new_data, index=left.index, columns=self.\n            columns, copy=False)\n\n    def _combine_match_columns(self, other, func, level=None, try_cast=True):\n        left, right = self.align(other, join='outer', axis=1, level=level,\n            copy=False)\n        new_data = left._data.eval(func=func, other=right, axes=[left.\n            columns, self.index], try_cast=try_cast)\n        return self._constructor(new_data)\n\n    def _combine_const(self, other, func, errors='raise', try_cast=True):\n        new_data = self._data.eval(func=func, other=other, errors=errors,\n            try_cast=try_cast)\n        return self._constructor(new_data)\n\n    def _compare_frame(self, other, func, str_rep):\n        import pandas.core.computation.expressions as expressions\n        if self.columns.is_unique:\n\n            def _compare(a, b):\n                return {col: func(a[col], b[col]) for col in a.columns}\n            new_data = expressions.evaluate(_compare, str_rep, self, other)\n            return self._constructor(data=new_data, index=self.index,\n                columns=self.columns, copy=False)\n        else:\n\n            def _compare(a, b):\n                return {i: func(a.iloc[:, i], b.iloc[:, i]) for i, col in\n                    enumerate(a.columns)}\n            new_data = expressions.evaluate(_compare, str_rep, self, other)\n            result = self._constructor(data=new_data, index=self.index,\n                copy=False)\n            result.columns = self.columns\n            return result\n\n    def combine(self, other, func, fill_value=None, overwrite=True):\n        \"\"\"\n        Add two DataFrame objects and do not propagate NaN values, so if for a\n        (column, time) one frame is missing a value, it will default to the\n        other frame's value (which might be NaN as well)\n\n        Parameters\n        ----------\n        other : DataFrame\n        func : function\n            Function that takes two series as inputs and return a Series or a\n            scalar\n        fill_value : scalar value\n        overwrite : boolean, default True\n            If True then overwrite values for common keys in the calling frame\n\n        Returns\n        -------\n        result : DataFrame\n\n        Examples\n        --------\n        >>> df1 = DataFrame({'A': [0, 0], 'B': [4, 4]})\n        >>> df2 = DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine(df2, lambda s1, s2: s1 if s1.sum() < s2.sum() else s2)\n           A  B\n        0  0  3\n        1  0  3\n\n        See Also\n        --------\n        DataFrame.combine_first : Combine two DataFrame objects and default to\n            non-null values in frame calling the method\n        \"\"\"\n        other_idxlen = len(other.index)\n        this, other = self.align(other, copy=False)\n        new_index = this.index\n        if other.empty and len(new_index) == len(self.index):\n            return self.copy()\n        if self.empty and len(other) == other_idxlen:\n            return other.copy()\n        new_columns = this.columns.union(other.columns)\n        do_fill = fill_value is not None\n        result = {}\n        for col in new_columns:\n            series = this[col]\n            otherSeries = other[col]\n            this_dtype = series.dtype\n            other_dtype = otherSeries.dtype\n            this_mask = isna(series)\n            other_mask = isna(otherSeries)\n            if not overwrite and other_mask.all():\n                result[col] = this[col].copy()\n                continue\n            if do_fill:\n                series = series.copy()\n                otherSeries = otherSeries.copy()\n                series[this_mask] = fill_value\n                otherSeries[other_mask] = fill_value\n            new_dtype = this_dtype\n            if not is_dtype_equal(this_dtype, other_dtype):\n                new_dtype = find_common_type([this_dtype, other_dtype])\n                if not is_dtype_equal(this_dtype, new_dtype):\n                    series = series.astype(new_dtype)\n                if not is_dtype_equal(other_dtype, new_dtype):\n                    otherSeries = otherSeries.astype(new_dtype)\n            needs_i8_conversion_i = needs_i8_conversion(new_dtype)\n            if needs_i8_conversion_i:\n                arr = func(series, otherSeries, True)\n            else:\n                arr = func(series, otherSeries)\n            arr = maybe_downcast_to_dtype(arr, this_dtype)\n            result[col] = arr\n        return self._constructor(result, index=new_index, columns=new_columns\n            )._convert(datetime=True, copy=False)\n\n    def combine_first(self, other):\n        \"\"\"\n        Combine two DataFrame objects and default to non-null values in frame\n        calling the method. Result index columns will be the union of the\n        respective indexes and columns\n\n        Parameters\n        ----------\n        other : DataFrame\n\n        Returns\n        -------\n        combined : DataFrame\n\n        Examples\n        --------\n        df1's values prioritized, use values from df2 to fill holes:\n\n        >>> df1 = pd.DataFrame([[1, np.nan]])\n        >>> df2 = pd.DataFrame([[3, 4]])\n        >>> df1.combine_first(df2)\n           0    1\n        0  1  4.0\n\n        See Also\n        --------\n        DataFrame.combine : Perform series-wise operation on two DataFrames\n            using a given function\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n\n        def combiner(x, y, needs_i8_conversion=False):\n            x_values = x.values if hasattr(x, 'values') else x\n            y_values = y.values if hasattr(y, 'values') else y\n            if needs_i8_conversion:\n                mask = isna(x)\n                x_values = x_values.view('i8')\n                y_values = y_values.view('i8')\n            else:\n                mask = isna(x_values)\n            return expressions.where(mask, y_values, x_values)\n        return self.combine(other, combiner, overwrite=False)\n\n    def update(self, other, join='left', overwrite=True, filter_func=None,\n        raise_conflict=False):\n        \"\"\"\n        Modify in place using non-NA values from another DataFrame.\n\n        Aligns on indices. There is no return value.\n\n        Parameters\n        ----------\n        other : DataFrame, or object coercible into a DataFrame\n            Should have at least one matching index/column label\n            with the original DataFrame. If a Series is passed,\n            its name attribute must be set, and that will be\n            used as the column name to align with the original DataFrame.\n        join : {'left'}, default 'left'\n            Only left join is implemented, keeping the index and columns of the\n            original object.\n        overwrite : bool, default True\n            How to handle non-NA values for overlapping keys:\n\n            * True: overwrite original DataFrame's values\n              with values from `other`.\n            * False: only update values that are NA in\n              the original DataFrame.\n\n        filter_func : callable(1d-array) -> boolean 1d-array, optional\n            Can choose to replace values other than NA. Return True for values\n            that should be updated.\n        raise_conflict : bool, default False\n            If True, will raise a ValueError if the DataFrame and `other`\n            both contain non-NA data in the same place.\n\n        Raises\n        ------\n        ValueError\n            When `raise_conflict` is True and there's overlapping non-NA data.\n\n        See Also\n        --------\n        dict.update : Similar method for dictionaries.\n        DataFrame.merge : For column(s)-on-columns(s) operations.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, 5, 6],\n        ...                        'C': [7, 8, 9]})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        The DataFrame's length does not increase as a result of the update,\n        only values at matching index/column labels are updated.\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  d\n        1  b  e\n        2  c  f\n\n        For Series, it's name attribute must be set.\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n        >>> df.update(new_column)\n        >>> df\n           A  B\n        0  a  d\n        1  b  y\n        2  c  e\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  x\n        1  b  d\n        2  c  e\n\n        If `other` contains NaNs the corresponding values are not updated\n        in the original dataframe.\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n        >>> df.update(new_df)\n        >>> df\n           A      B\n        0  1    4.0\n        1  2  500.0\n        2  3    6.0\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n        if join != 'left':\n            raise NotImplementedError('Only left join is supported')\n        if not isinstance(other, DataFrame):\n            other = DataFrame(other)\n        other = other.reindex_like(self)\n        for col in self.columns:\n            this = self[col].values\n            that = other[col].values\n            if filter_func is not None:\n                with np.errstate(all='ignore'):\n                    mask = ~filter_func(this) | isna(that)\n            else:\n                if raise_conflict:\n                    mask_this = notna(that)\n                    mask_that = notna(this)\n                    if any(mask_this & mask_that):\n                        raise ValueError('Data overlaps.')\n                if overwrite:\n                    mask = isna(that)\n                else:\n                    mask = notna(this)\n            if mask.all():\n                continue\n            self[col] = expressions.where(mask, this, that)\n\n    def pivot(self, index=None, columns=None, values=None):\n        \"\"\"\n        Return reshaped DataFrame organized by given index / column values.\n\n        Reshape data (produce a \"pivot\" table) based on column values. Uses\n        unique values from specified `index` / `columns` to form axes of the\n        resulting DataFrame. This function does not support data\n        aggregation, multiple values will result in a MultiIndex in the\n        columns. See the :ref:`User Guide <reshaping>` for more on reshaping.\n\n        Parameters\n        ----------\n        index : string or object, optional\n            Column to use to make new frame's index. If None, uses\n            existing index.\n        columns : string or object\n            Column to use to make new frame's columns.\n        values : string, object or a list of the previous, optional\n            Column(s) to use for populating new frame's values. If not\n            specified, all remaining columns will be used and the result will\n            have hierarchically indexed columns.\n\n            .. versionchanged :: 0.23.0\n               Also accept list of column names.\n\n        Returns\n        -------\n        DataFrame\n            Returns reshaped DataFrame.\n\n        Raises\n        ------\n        ValueError:\n            When there are any `index`, `columns` combinations with multiple\n            values. `DataFrame.pivot_table` when you need to aggregate.\n\n        See Also\n        --------\n        DataFrame.pivot_table : generalization of pivot that can handle\n            duplicate values for one index/column pair.\n        DataFrame.unstack : pivot based on the index values instead of a\n            column.\n\n        Notes\n        -----\n        For finer-tuned control, see hierarchical indexing documentation along\n        with the related stack/unstack methods.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',\n        ...                            'two'],\n        ...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n        ...                    'baz': [1, 2, 3, 4, 5, 6],\n        ...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n        >>> df\n            foo   bar  baz  zoo\n        0   one   A    1    x\n        1   one   B    2    y\n        2   one   C    3    z\n        3   two   A    4    q\n        4   two   B    5    w\n        5   two   C    6    t\n\n        >>> df.pivot(index='foo', columns='bar', values='baz')\n        bar  A   B   C\n        foo\n        one  1   2   3\n        two  4   5   6\n\n        >>> df.pivot(index='foo', columns='bar')['baz']\n        bar  A   B   C\n        foo\n        one  1   2   3\n        two  4   5   6\n\n        >>> df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])\n              baz       zoo\n        bar   A  B  C   A  B  C\n        foo\n        one   1  2  3   x  y  z\n        two   4  5  6   q  w  t\n\n        A ValueError is raised if there are any duplicates.\n\n        >>> df = pd.DataFrame({\"foo\": ['one', 'one', 'two', 'two'],\n        ...                    \"bar\": ['A', 'A', 'B', 'C'],\n        ...                    \"baz\": [1, 2, 3, 4]})\n        >>> df\n           foo bar  baz\n        0  one   A    1\n        1  one   A    2\n        2  two   B    3\n        3  two   C    4\n\n        Notice that the first two rows are the same for our `index`\n        and `columns` arguments.\n\n        >>> df.pivot(index='foo', columns='bar', values='baz')\n        Traceback (most recent call last):\n           ...\n        ValueError: Index contains duplicate entries, cannot reshape\n        \"\"\"\n        from pandas.core.reshape.reshape import pivot\n        return pivot(self, index=index, columns=columns, values=values)\n    _shared_docs['pivot_table'] = \"\"\"\n        Create a spreadsheet-style pivot table as a DataFrame. The levels in\n        the pivot table will be stored in MultiIndex objects (hierarchical\n        indexes) on the index and columns of the result DataFrame\n\n        Parameters\n        ----------%s\n        values : column to aggregate, optional\n        index : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table index.  If an array is passed,\n            it is being used as the same manner as column values.\n        columns : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table column.  If an array is passed,\n            it is being used as the same manner as column values.\n        aggfunc : function, list of functions, dict, default numpy.mean\n            If list of functions passed, the resulting pivot table will have\n            hierarchical columns whose top level are the function names\n            (inferred from the function objects themselves)\n            If dict is passed, the key is column to aggregate and value\n            is function or list of functions\n        fill_value : scalar, default None\n            Value to replace missing values with\n        margins : boolean, default False\n            Add all row / columns (e.g. for subtotal / grand totals)\n        dropna : boolean, default True\n            Do not include columns whose entries are all NaN\n        margins_name : string, default 'All'\n            Name of the row / column that will contain the totals\n            when margins is True.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n        ...                          \"bar\", \"bar\", \"bar\", \"bar\"],\n        ...                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n        ...                          \"one\", \"one\", \"two\", \"two\"],\n        ...                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n        ...                          \"small\", \"large\", \"small\", \"small\",\n        ...                          \"large\"],\n        ...                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7]})\n        >>> df\n             A    B      C  D\n        0  foo  one  small  1\n        1  foo  one  large  2\n        2  foo  one  large  2\n        3  foo  two  small  3\n        4  foo  two  small  3\n        5  bar  one  large  4\n        6  bar  one  small  5\n        7  bar  two  small  6\n        8  bar  two  large  7\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum)\n        >>> table\n        C        large  small\n        A   B\n        bar one    4.0    5.0\n            two    7.0    6.0\n        foo one    4.0    1.0\n            two    NaN    6.0\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum)\n        >>> table\n        C        large  small\n        A   B\n        bar one    4.0    5.0\n            two    7.0    6.0\n        foo one    4.0    1.0\n            two    NaN    6.0\n\n        >>> table = pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n        ...                     aggfunc={'D': np.mean,\n        ...                              'E': [min, max, np.mean]})\n        >>> table\n                          D   E\n                       mean max median min\n        A   C\n        bar large  5.500000  16   14.5  13\n            small  5.500000  15   14.5  14\n        foo large  2.000000  10    9.5   9\n            small  2.333333  12   11.0   8\n\n        Returns\n        -------\n        table : DataFrame\n\n        See also\n        --------\n        DataFrame.pivot : pivot without aggregation that can handle\n            non-numeric data\n        \"\"\"\n\n    @Substitution('')\n    @Appender(_shared_docs['pivot_table'])\n    def pivot_table(self, values=None, index=None, columns=None, aggfunc=\n        'mean', fill_value=None, margins=False, dropna=True, margins_name='All'\n        ):\n        from pandas.core.reshape.pivot import pivot_table\n        return pivot_table(self, values=values, index=index, columns=\n            columns, aggfunc=aggfunc, fill_value=fill_value, margins=\n            margins, dropna=dropna, margins_name=margins_name)\n\n    def stack(self, level=-1, dropna=True):\n        \"\"\"\n        Stack the prescribed level(s) from columns to index.\n\n        Return a reshaped DataFrame or Series having a multi-level\n        index with one or more new inner-most levels compared to the current\n        DataFrame. The new inner-most levels are created by pivoting the\n        columns of the current dataframe:\n\n          - if the columns have a single level, the output is a Series;\n          - if the columns have multiple levels, the new index\n            level(s) is (are) taken from the prescribed level(s) and\n            the output is a DataFrame.\n\n        The new index levels are sorted.\n\n        Parameters\n        ----------\n        level : int, str, list, default -1\n            Level(s) to stack from the column axis onto the index\n            axis, defined as one index or label, or a list of indices\n            or labels.\n        dropna : bool, default True\n            Whether to drop rows in the resulting Frame/Series with\n            missing values. Stacking a column level onto the index\n            axis can create combinations of index and column values\n            that are missing from the original dataframe. See Examples\n            section.\n\n        Returns\n        -------\n        DataFrame or Series\n            Stacked dataframe or series.\n\n        See Also\n        --------\n        DataFrame.unstack : Unstack prescribed level(s) from index axis\n             onto column axis.\n        DataFrame.pivot : Reshape dataframe from long format to wide\n             format.\n        DataFrame.pivot_table : Create a spreadsheet-style pivot table\n             as a DataFrame.\n\n        Notes\n        -----\n        The function is named by analogy with a collection of books\n        being re-organised from being side by side on a horizontal\n        position (the columns of the dataframe) to being stacked\n        vertically on top of of each other (in the index of the\n        dataframe).\n\n        Examples\n        --------\n        **Single level columns**\n\n        >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=['weight', 'height'])\n\n        Stacking a dataframe with a single level column axis returns a Series:\n\n        >>> df_single_level_cols\n             weight height\n        cat       0      1\n        dog       2      3\n        >>> df_single_level_cols.stack()\n        cat  weight    0\n             height    1\n        dog  weight    2\n             height    3\n        dtype: int64\n\n        **Multi level columns: simple case**\n\n        >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('weight', 'pounds')])\n        >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol1)\n\n        Stacking a dataframe with a multi-level column axis:\n\n        >>> df_multi_level_cols1\n             weight\n                 kg    pounds\n        cat       1        2\n        dog       2        4\n        >>> df_multi_level_cols1.stack()\n                    weight\n        cat kg           1\n            pounds       2\n        dog kg           2\n            pounds       4\n\n        **Missing values**\n\n        >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('height', 'm')])\n        >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        It is common to have missing values when stacking a dataframe\n        with multi-level columns, as the stacked dataframe typically\n        has more values than the original dataframe. Missing values\n        are filled with NaNs:\n\n        >>> df_multi_level_cols2\n            weight height\n                kg      m\n        cat    1.0    2.0\n        dog    3.0    4.0\n        >>> df_multi_level_cols2.stack()\n                height  weight\n        cat kg     NaN     1.0\n            m      2.0     NaN\n        dog kg     NaN     3.0\n            m      4.0     NaN\n\n        **Prescribing the level(s) to be stacked**\n\n        The first parameter controls which level or levels are stacked:\n\n        >>> df_multi_level_cols2.stack(0)\n                     kg    m\n        cat height  NaN  2.0\n            weight  1.0  NaN\n        dog height  NaN  4.0\n            weight  3.0  NaN\n        >>> df_multi_level_cols2.stack([0, 1])\n        cat  height  m     2.0\n             weight  kg    1.0\n        dog  height  m     4.0\n             weight  kg    3.0\n        dtype: float64\n\n        **Dropping missing values**\n\n        >>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        Note that rows where all values are missing are dropped by\n        default but this behaviour can be controlled via the dropna\n        keyword parameter:\n\n        >>> df_multi_level_cols3\n            weight height\n                kg      m\n        cat    NaN    1.0\n        dog    2.0    3.0\n        >>> df_multi_level_cols3.stack(dropna=False)\n                height  weight\n        cat kg     NaN     NaN\n            m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        >>> df_multi_level_cols3.stack(dropna=True)\n                height  weight\n        cat m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        \"\"\"\n        from pandas.core.reshape.reshape import stack, stack_multiple\n        if isinstance(level, (tuple, list)):\n            return stack_multiple(self, level, dropna=dropna)\n        else:\n            return stack(self, level, dropna=dropna)\n\n    def unstack(self, level=-1, fill_value=None):\n        \"\"\"\n        Pivot a level of the (necessarily hierarchical) index labels, returning\n        a DataFrame having a new level of column labels whose inner-most level\n        consists of the pivoted index labels. If the index is not a MultiIndex,\n        the output will be a Series (the analogue of stack when the columns are\n        not a MultiIndex).\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, string, or list of these, default -1 (last level)\n            Level(s) of index to unstack, can pass level name\n        fill_value : replace NaN with this value if the unstack produces\n            missing values\n\n            .. versionadded:: 0.18.0\n\n        See also\n        --------\n        DataFrame.pivot : Pivot a table based on column values.\n        DataFrame.stack : Pivot a level of the column labels (inverse operation\n            from `unstack`).\n\n        Examples\n        --------\n        >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n        ...                                    ('two', 'a'), ('two', 'b')])\n        >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n        >>> s\n        one  a   1.0\n             b   2.0\n        two  a   3.0\n             b   4.0\n        dtype: float64\n\n        >>> s.unstack(level=-1)\n             a   b\n        one  1.0  2.0\n        two  3.0  4.0\n\n        >>> s.unstack(level=0)\n           one  two\n        a  1.0   3.0\n        b  2.0   4.0\n\n        >>> df = s.unstack(level=0)\n        >>> df.unstack()\n        one  a  1.0\n             b  2.0\n        two  a  3.0\n             b  4.0\n        dtype: float64\n\n        Returns\n        -------\n        unstacked : DataFrame or Series\n        \"\"\"\n        from pandas.core.reshape.reshape import unstack\n        return unstack(self, level, fill_value)\n    _shared_docs['melt'] = \"\"\"\n    \"Unpivots\" a DataFrame from wide format to long format, optionally\n    leaving identifier variables set.\n\n    This function is useful to massage a DataFrame into a format where one\n    or more columns are identifier variables (`id_vars`), while all other\n    columns, considered measured variables (`value_vars`), are \"unpivoted\" to\n    the row axis, leaving just two non-identifier columns, 'variable' and\n    'value'.\n\n    %(versionadded)s\n    Parameters\n    ----------\n    frame : DataFrame\n    id_vars : tuple, list, or ndarray, optional\n        Column(s) to use as identifier variables.\n    value_vars : tuple, list, or ndarray, optional\n        Column(s) to unpivot. If not specified, uses all columns that\n        are not set as `id_vars`.\n    var_name : scalar\n        Name to use for the 'variable' column. If None it uses\n        ``frame.columns.name`` or 'variable'.\n    value_name : scalar, default 'value'\n        Name to use for the 'value' column.\n    col_level : int or string, optional\n        If columns are a MultiIndex then use this level to melt.\n\n    See also\n    --------\n    %(other)s\n    pivot_table\n    DataFrame.pivot\n\n    Examples\n    --------\n    >>> import pandas as pd\n    >>> df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},\n    ...                    'B': {0: 1, 1: 3, 2: 5},\n    ...                    'C': {0: 2, 1: 4, 2: 6}})\n    >>> df\n       A  B  C\n    0  a  1  2\n    1  b  3  4\n    2  c  5  6\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B', 'C'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n    3  a        C      2\n    4  b        C      4\n    5  c        C      6\n\n    The names of 'variable' and 'value' columns can be customized:\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B'],\n    ...         var_name='myVarname', value_name='myValname')\n       A myVarname  myValname\n    0  a         B          1\n    1  b         B          3\n    2  c         B          5\n\n    If you have multi-index columns:\n\n    >>> df.columns = [list('ABC'), list('DEF')]\n    >>> df\n       A  B  C\n       D  E  F\n    0  a  1  2\n    1  b  3  4\n    2  c  5  6\n\n    >>> %(caller)scol_level=0, id_vars=['A'], value_vars=['B'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n\n    >>> %(caller)sid_vars=[('A', 'D')], value_vars=[('B', 'E')])\n      (A, D) variable_0 variable_1  value\n    0      a          B          E      1\n    1      b          B          E      3\n    2      c          B          E      5\n\n    \"\"\"\n\n    @Appender(_shared_docs['melt'] % dict(caller='df.melt(', versionadded=\n        \"\"\".. versionadded:: 0.20.0\n\"\"\", other='melt'))\n    def melt(self, id_vars=None, value_vars=None, var_name=None, value_name\n        ='value', col_level=None):\n        from pandas.core.reshape.melt import melt\n        return melt(self, id_vars=id_vars, value_vars=value_vars, var_name=\n            var_name, value_name=value_name, col_level=col_level)\n\n    def diff(self, periods=1, axis=0):\n        \"\"\"\n        First discrete difference of element.\n\n        Calculates the difference of a DataFrame element compared with another\n        element in the DataFrame (default is the element in the same column\n        of the previous row).\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for calculating difference, accepts negative\n            values.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Take difference over rows (0) or columns (1).\n\n            .. versionadded:: 0.16.1.\n\n        Returns\n        -------\n        diffed : DataFrame\n\n        See Also\n        --------\n        Series.diff: First discrete difference for a Series.\n        DataFrame.pct_change: Percent change over given number of periods.\n        DataFrame.shift: Shift index by desired number of periods with an\n            optional time freq.\n\n        Examples\n        --------\n        Difference with previous row\n\n        >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n        ...                    'b': [1, 1, 2, 3, 5, 8],\n        ...                    'c': [1, 4, 9, 16, 25, 36]})\n        >>> df\n           a  b   c\n        0  1  1   1\n        1  2  1   4\n        2  3  2   9\n        3  4  3  16\n        4  5  5  25\n        5  6  8  36\n\n        >>> df.diff()\n             a    b     c\n        0  NaN  NaN   NaN\n        1  1.0  0.0   3.0\n        2  1.0  1.0   5.0\n        3  1.0  1.0   7.0\n        4  1.0  2.0   9.0\n        5  1.0  3.0  11.0\n\n        Difference with previous column\n\n        >>> df.diff(axis=1)\n            a    b     c\n        0 NaN  0.0   0.0\n        1 NaN -1.0   3.0\n        2 NaN -1.0   7.0\n        3 NaN -1.0  13.0\n        4 NaN  0.0  20.0\n        5 NaN  2.0  28.0\n\n        Difference with 3rd previous row\n\n        >>> df.diff(periods=3)\n             a    b     c\n        0  NaN  NaN   NaN\n        1  NaN  NaN   NaN\n        2  NaN  NaN   NaN\n        3  3.0  2.0  15.0\n        4  3.0  4.0  21.0\n        5  3.0  6.0  27.0\n\n        Difference with following row\n\n        >>> df.diff(periods=-1)\n             a    b     c\n        0 -1.0  0.0  -3.0\n        1 -1.0 -1.0  -5.0\n        2 -1.0 -1.0  -7.0\n        3 -1.0 -2.0  -9.0\n        4 -1.0 -3.0 -11.0\n        5  NaN  NaN   NaN\n        \"\"\"\n        bm_axis = self._get_block_manager_axis(axis)\n        new_data = self._data.diff(n=periods, axis=bm_axis)\n        return self._constructor(new_data)\n\n    def _gotitem(self, key, ndim, subset=None):\n        \"\"\"\n        sub-classes to define\n        return a sliced object\n\n        Parameters\n        ----------\n        key : string / list of selections\n        ndim : 1,2\n            requested ndim of result\n        subset : object, default None\n            subset to act on\n        \"\"\"\n        if subset is None:\n            subset = self\n        elif subset.ndim == 1:\n            return subset\n        return subset[key]\n    _agg_doc = dedent(\n        \"\"\"\n    The aggregation operations are always performed over an axis, either the\n    index (default) or the column axis. This behavior is different from\n    `numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n    `var`), where the default is to compute the aggregation of the flattened\n    array, e.g., ``numpy.mean(arr_2d)`` as opposed to ``numpy.mean(arr_2d,\n    axis=0)``.\n\n    `agg` is an alias for `aggregate`. Use the alias.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2, 3],\n    ...                    [4, 5, 6],\n    ...                    [7, 8, 9],\n    ...                    [np.nan, np.nan, np.nan]],\n    ...                   columns=['A', 'B', 'C'])\n\n    Aggregate these functions over the rows.\n\n    >>> df.agg(['sum', 'min'])\n            A     B     C\n    sum  12.0  15.0  18.0\n    min   1.0   2.0   3.0\n\n    Different aggregations per column.\n\n    >>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n            A    B\n    max   NaN  8.0\n    min   1.0  2.0\n    sum  12.0  NaN\n\n    Aggregate over the columns.\n\n    >>> df.agg(\"mean\", axis=\"columns\")\n    0    2.0\n    1    5.0\n    2    8.0\n    3    NaN\n    dtype: float64\n\n    See also\n    --------\n    DataFrame.apply : Perform any type of operations.\n    DataFrame.transform : Perform transformation type operations.\n    pandas.core.groupby.GroupBy : Perform operations over groups.\n    pandas.core.resample.Resampler : Perform operations over resampled bins.\n    pandas.core.window.Rolling : Perform operations over rolling window.\n    pandas.core.window.Expanding : Perform operations over expanding window.\n    pandas.core.window.EWM : Perform operation over exponential weighted\n        window.\n    \"\"\"\n        )\n\n    @Appender(_agg_doc)\n    @Appender(_shared_docs['aggregate'] % dict(versionadded=\n        '.. versionadded:: 0.20.0', **_shared_doc_kwargs))\n    def aggregate(self, func, axis=0, *args, **kwargs):\n        axis = self._get_axis_number(axis)\n        result = None\n        if axis == 0:\n            try:\n                result, how = self._aggregate(func, *args, axis=0, **kwargs)\n            except TypeError:\n                pass\n        if result is None:\n            return self.apply(func, axis=axis, args=args, **kwargs)\n        return result\n    agg = aggregate\n\n    def apply(self, func, axis=0, broadcast=None, raw=False, reduce=None,\n        result_type=None, args=(), **kwds):\n        \"\"\"\n        Apply a function along an axis of the DataFrame.\n\n        Objects passed to the function are Series objects whose index is\n        either the DataFrame's index (``axis=0``) or the DataFrame's columns\n        (``axis=1``). By default (``result_type=None``), the final return type\n        is inferred from the return type of the applied function. Otherwise,\n        it depends on the `result_type` argument.\n\n        Parameters\n        ----------\n        func : function\n            Function to apply to each column or row.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis along which the function is applied:\n\n            * 0 or 'index': apply function to each column.\n            * 1 or 'columns': apply function to each row.\n        broadcast : bool, optional\n            Only relevant for aggregation functions:\n\n            * ``False`` or ``None`` : returns a Series whose length is the\n              length of the index or the number of columns (based on the\n              `axis` parameter)\n            * ``True`` : results will be broadcast to the original shape\n              of the frame, the original index and columns will be retained.\n\n            .. deprecated:: 0.23.0\n               This argument will be removed in a future version, replaced\n               by result_type='broadcast'.\n\n        raw : bool, default False\n            * ``False`` : passes each row or column as a Series to the\n              function.\n            * ``True`` : the passed function will receive ndarray objects\n              instead.\n              If you are just applying a NumPy reduction function this will\n              achieve much better performance.\n        reduce : bool or None, default None\n            Try to apply reduction procedures. If the DataFrame is empty,\n            `apply` will use `reduce` to determine whether the result\n            should be a Series or a DataFrame. If ``reduce=None`` (the\n            default), `apply`'s return value will be guessed by calling\n            `func` on an empty Series\n            (note: while guessing, exceptions raised by `func` will be\n            ignored).\n            If ``reduce=True`` a Series will always be returned, and if\n            ``reduce=False`` a DataFrame will always be returned.\n\n            .. deprecated:: 0.23.0\n               This argument will be removed in a future version, replaced\n               by ``result_type='reduce'``.\n\n        result_type : {'expand', 'reduce', 'broadcast', None}, default None\n            These only act when ``axis=1`` (columns):\n\n            * 'expand' : list-like results will be turned into columns.\n            * 'reduce' : returns a Series if possible rather than expanding\n              list-like results. This is the opposite of 'expand'.\n            * 'broadcast' : results will be broadcast to the original shape\n              of the DataFrame, the original index and columns will be\n              retained.\n\n            The default behaviour (None) depends on the return value of the\n            applied function: list-like results will be returned as a Series\n            of those. However if the apply function returns a Series these\n            are expanded to columns.\n\n            .. versionadded:: 0.23.0\n\n        args : tuple\n            Positional arguments to pass to `func` in addition to the\n            array/series.\n        **kwds\n            Additional keyword arguments to pass as keywords arguments to\n            `func`.\n\n        Notes\n        -----\n        In the current implementation apply calls `func` twice on the\n        first column/row to decide whether it can take a fast or slow\n        code path. This can lead to unexpected behavior if `func` has\n        side-effects, as they will take effect twice for the first\n        column/row.\n\n        See also\n        --------\n        DataFrame.applymap: For elementwise operations\n        DataFrame.aggregate: only perform aggregating type operations\n        DataFrame.transform: only perform transforming type operations\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[4, 9],] * 3, columns=['A', 'B'])\n        >>> df\n           A  B\n        0  4  9\n        1  4  9\n        2  4  9\n\n        Using a numpy universal function (in this case the same as\n        ``np.sqrt(df)``):\n\n        >>> df.apply(np.sqrt)\n             A    B\n        0  2.0  3.0\n        1  2.0  3.0\n        2  2.0  3.0\n\n        Using a reducing function on either axis\n\n        >>> df.apply(np.sum, axis=0)\n        A    12\n        B    27\n        dtype: int64\n\n        >>> df.apply(np.sum, axis=1)\n        0    13\n        1    13\n        2    13\n        dtype: int64\n\n        Retuning a list-like will result in a Series\n\n        >>> df.apply(lambda x: [1, 2], axis=1)\n        0    [1, 2]\n        1    [1, 2]\n        2    [1, 2]\n        dtype: object\n\n        Passing result_type='expand' will expand list-like results\n        to columns of a Dataframe\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n           0  1\n        0  1  2\n        1  1  2\n        2  1  2\n\n        Returning a Series inside the function is similar to passing\n        ``result_type='expand'``. The resulting column names\n        will be the Series index.\n\n        >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n           foo  bar\n        0    1    2\n        1    1    2\n        2    1    2\n\n        Passing ``result_type='broadcast'`` will ensure the same shape\n        result, whether list-like or scalar is returned by the function,\n        and broadcast it along the axis. The resulting column names will\n        be the originals.\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n           A  B\n        0  1  2\n        1  1  2\n        2  1  2\n\n        Returns\n        -------\n        applied : Series or DataFrame\n        \"\"\"\n        from pandas.core.apply import frame_apply\n        op = frame_apply(self, func=func, axis=axis, broadcast=broadcast,\n            raw=raw, reduce=reduce, result_type=result_type, args=args,\n            kwds=kwds)\n        return op.get_result()\n\n    def applymap(self, func):\n        \"\"\"\n        Apply a function to a Dataframe elementwise.\n\n        This method applies a function that accepts and returns a scalar\n        to every element of a DataFrame.\n\n        Parameters\n        ----------\n        func : callable\n            Python function, returns a single value from a single value.\n\n        Returns\n        -------\n        DataFrame\n            Transformed DataFrame.\n\n        See also\n        --------\n        DataFrame.apply : Apply a function along input axis of DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n        >>> df\n               0      1\n        0  1.000  2.120\n        1  3.356  4.567\n\n        >>> df.applymap(lambda x: len(str(x)))\n           0  1\n        0  3  4\n        1  5  5\n\n        Note that a vectorized version of `func` often exists, which will\n        be much faster. You could square each number elementwise.\n\n        >>> df.applymap(lambda x: x**2)\n                   0          1\n        0   1.000000   4.494400\n        1  11.262736  20.857489\n\n        But it's better to avoid applymap in that case.\n\n        >>> df ** 2\n                   0          1\n        0   1.000000   4.494400\n        1  11.262736  20.857489\n        \"\"\"\n\n        def infer(x):\n            if x.empty:\n                return lib.map_infer(x, func)\n            return lib.map_infer(x.astype(object).values, func)\n        return self.apply(infer)\n\n    def append(self, other, ignore_index=False, verify_integrity=False,\n        sort=None):\n        \"\"\"\n        Append rows of `other` to the end of this frame, returning a new\n        object. Columns not in this frame are added as new columns.\n\n        Parameters\n        ----------\n        other : DataFrame or Series/dict-like object, or list of these\n            The data to append.\n        ignore_index : boolean, default False\n            If True, do not use the index labels.\n        verify_integrity : boolean, default False\n            If True, raise ValueError on creating index with duplicates.\n        sort : boolean, default None\n            Sort columns if the columns of `self` and `other` are not aligned.\n            The default sorting is deprecated and will change to not-sorting\n            in a future version of pandas. Explicitly pass ``sort=True`` to\n            silence the warning and sort. Explicitly pass ``sort=False`` to\n            silence the warning and not sort.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        appended : DataFrame\n\n        Notes\n        -----\n        If a list of dict/series is passed and the keys are all contained in\n        the DataFrame's index, the order of the columns in the resulting\n        DataFrame will be unchanged.\n\n        Iteratively appending rows to a DataFrame can be more computationally\n        intensive than a single concatenate. A better solution is to append\n        those rows to a list and then concatenate the list with the original\n        DataFrame all at once.\n\n        See also\n        --------\n        pandas.concat : General function to concatenate DataFrame, Series\n            or Panel objects\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n        >>> df\n           A  B\n        0  1  2\n        1  3  4\n        >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n        >>> df.append(df2)\n           A  B\n        0  1  2\n        1  3  4\n        0  5  6\n        1  7  8\n\n        With `ignore_index` set to True:\n\n        >>> df.append(df2, ignore_index=True)\n           A  B\n        0  1  2\n        1  3  4\n        2  5  6\n        3  7  8\n\n        The following, while not recommended methods for generating DataFrames,\n        show two ways to generate a DataFrame from multiple data sources.\n\n        Less efficient:\n\n        >>> df = pd.DataFrame(columns=['A'])\n        >>> for i in range(5):\n        ...     df = df.append({'A': i}, ignore_index=True)\n        >>> df\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n\n        More efficient:\n\n        >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n        ...           ignore_index=True)\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n\n        \"\"\"\n        if isinstance(other, (Series, dict)):\n            if isinstance(other, dict):\n                other = Series(other)\n            if other.name is None and not ignore_index:\n                raise TypeError(\n                    'Can only append a Series if ignore_index=True or if the Series has a name'\n                    )\n            if other.name is None:\n                index = None\n            else:\n                index = Index([other.name], name=self.index.name)\n            idx_diff = other.index.difference(self.columns)\n            try:\n                combined_columns = self.columns.append(idx_diff)\n            except TypeError:\n                combined_columns = self.columns.astype(object).append(idx_diff)\n            other = other.reindex(combined_columns, copy=False)\n            other = DataFrame(other.values.reshape((1, len(other))), index=\n                index, columns=combined_columns)\n            other = other._convert(datetime=True, timedelta=True)\n            if not self.columns.equals(combined_columns):\n                self = self.reindex(columns=combined_columns)\n        elif isinstance(other, list) and not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.loc[:, self.columns]\n        from pandas.core.reshape.concat import concat\n        if isinstance(other, (list, tuple)):\n            to_concat = [self] + other\n        else:\n            to_concat = [self, other]\n        return concat(to_concat, ignore_index=ignore_index,\n            verify_integrity=verify_integrity, sort=sort)\n\n    def join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort\n        =False):\n        \"\"\"\n        Join columns with other DataFrame either on index or on a key\n        column. Efficiently Join multiple DataFrame objects by index at once by\n        passing a list.\n\n        Parameters\n        ----------\n        other : DataFrame, Series with name field set, or list of DataFrame\n            Index should be similar to one of the columns in this one. If a\n            Series is passed, its name attribute must be set, and that will be\n            used as the column name in the resulting joined DataFrame\n        on : name, tuple/list of names, or array-like\n            Column or index level name(s) in the caller to join on the index\n            in `other`, otherwise joins index-on-index. If multiple\n            values given, the `other` DataFrame must have a MultiIndex. Can\n            pass an array as the join key if it is not already contained in\n            the calling DataFrame. Like an Excel VLOOKUP operation\n        how : {'left', 'right', 'outer', 'inner'}, default: 'left'\n            How to handle the operation of the two objects.\n\n            * left: use calling frame's index (or column if on is specified)\n            * right: use other frame's index\n            * outer: form union of calling frame's index (or column if on is\n              specified) with other frame's index, and sort it\n              lexicographically\n            * inner: form intersection of calling frame's index (or column if\n              on is specified) with other frame's index, preserving the order\n              of the calling's one\n        lsuffix : string\n            Suffix to use from left frame's overlapping columns\n        rsuffix : string\n            Suffix to use from right frame's overlapping columns\n        sort : boolean, default False\n            Order result DataFrame lexicographically by the join key. If False,\n            the order of the join key depends on the join type (how keyword)\n\n        Notes\n        -----\n        on, lsuffix, and rsuffix options are not supported when passing a list\n        of DataFrame objects\n\n        Support for specifying index levels as the `on` parameter was added\n        in version 0.23.0\n\n        Examples\n        --------\n        >>> caller = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n        ...                        'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n        >>> caller\n            A key\n        0  A0  K0\n        1  A1  K1\n        2  A2  K2\n        3  A3  K3\n        4  A4  K4\n        5  A5  K5\n\n        >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n        ...                       'B': ['B0', 'B1', 'B2']})\n\n        >>> other\n            B key\n        0  B0  K0\n        1  B1  K1\n        2  B2  K2\n\n        Join DataFrames using their indexes.\n\n        >>> caller.join(other, lsuffix='_caller', rsuffix='_other')\n\n        >>>     A key_caller    B key_other\n            0  A0         K0   B0        K0\n            1  A1         K1   B1        K1\n            2  A2         K2   B2        K2\n            3  A3         K3  NaN       NaN\n            4  A4         K4  NaN       NaN\n            5  A5         K5  NaN       NaN\n\n\n        If we want to join using the key columns, we need to set key to be\n        the index in both caller and other. The joined DataFrame will have\n        key as its index.\n\n        >>> caller.set_index('key').join(other.set_index('key'))\n\n        >>>      A    B\n            key\n            K0   A0   B0\n            K1   A1   B1\n            K2   A2   B2\n            K3   A3  NaN\n            K4   A4  NaN\n            K5   A5  NaN\n\n        Another option to join using the key columns is to use the on\n        parameter. DataFrame.join always uses other's index but we can use any\n        column in the caller. This method preserves the original caller's\n        index in the result.\n\n        >>> caller.join(other.set_index('key'), on='key')\n\n        >>>     A key    B\n            0  A0  K0   B0\n            1  A1  K1   B1\n            2  A2  K2   B2\n            3  A3  K3  NaN\n            4  A4  K4  NaN\n            5  A5  K5  NaN\n\n\n        See also\n        --------\n        DataFrame.merge : For column(s)-on-columns(s) operations\n\n        Returns\n        -------\n        joined : DataFrame\n        \"\"\"\n        return self._join_compat(other, on=on, how=how, lsuffix=lsuffix,\n            rsuffix=rsuffix, sort=sort)\n\n    def _join_compat(self, other, on=None, how='left', lsuffix='', rsuffix=\n        '', sort=False):\n        from pandas.core.reshape.merge import merge\n        from pandas.core.reshape.concat import concat\n        if isinstance(other, Series):\n            if other.name is None:\n                raise ValueError('Other Series must have a name')\n            other = DataFrame({other.name: other})\n        if isinstance(other, DataFrame):\n            return merge(self, other, left_on=on, how=how, left_index=on is\n                None, right_index=True, suffixes=(lsuffix, rsuffix), sort=sort)\n        else:\n            if on is not None:\n                raise ValueError(\n                    'Joining multiple DataFrames only supported for joining on index'\n                    )\n            frames = [self] + list(other)\n            can_concat = all(df.index.is_unique for df in frames)\n            if can_concat:\n                if how == 'left':\n                    how = 'outer'\n                    join_axes = [self.index]\n                else:\n                    join_axes = None\n                return concat(frames, axis=1, join=how, join_axes=join_axes,\n                    verify_integrity=True)\n            joined = frames[0]\n            for frame in frames[1:]:\n                joined = merge(joined, frame, how=how, left_index=True,\n                    right_index=True)\n            return joined\n\n    @Substitution('')\n    @Appender(_merge_doc, indents=2)\n    def merge(self, right, how='inner', on=None, left_on=None, right_on=\n        None, left_index=False, right_index=False, sort=False, suffixes=(\n        '_x', '_y'), copy=True, indicator=False, validate=None):\n        from pandas.core.reshape.merge import merge\n        return merge(self, right, how=how, on=on, left_on=left_on, right_on\n            =right_on, left_index=left_index, right_index=right_index, sort\n            =sort, suffixes=suffixes, copy=copy, indicator=indicator,\n            validate=validate)\n\n    def round(self, decimals=0, *args, **kwargs):\n        \"\"\"\n        Round a DataFrame to a variable number of decimal places.\n\n        Parameters\n        ----------\n        decimals : int, dict, Series\n            Number of decimal places to round each column to. If an int is\n            given, round each column to the same number of places.\n            Otherwise dict and Series round to variable numbers of places.\n            Column names should be in the keys if `decimals` is a\n            dict-like, or in the index if `decimals` is a Series. Any\n            columns not included in `decimals` will be left as is. Elements\n            of `decimals` which are not columns of the input will be\n            ignored.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.random.random([3, 3]),\n        ...     columns=['A', 'B', 'C'], index=['first', 'second', 'third'])\n        >>> df\n                       A         B         C\n        first   0.028208  0.992815  0.173891\n        second  0.038683  0.645646  0.577595\n        third   0.877076  0.149370  0.491027\n        >>> df.round(2)\n                   A     B     C\n        first   0.03  0.99  0.17\n        second  0.04  0.65  0.58\n        third   0.88  0.15  0.49\n        >>> df.round({'A': 1, 'C': 2})\n                  A         B     C\n        first   0.0  0.992815  0.17\n        second  0.0  0.645646  0.58\n        third   0.9  0.149370  0.49\n        >>> decimals = pd.Series([1, 0, 2], index=['A', 'B', 'C'])\n        >>> df.round(decimals)\n                  A  B     C\n        first   0.0  1  0.17\n        second  0.0  1  0.58\n        third   0.9  0  0.49\n\n        Returns\n        -------\n        DataFrame object\n\n        See Also\n        --------\n        numpy.around\n        Series.round\n\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n\n        def _dict_round(df, decimals):\n            for col, vals in df.iteritems():\n                try:\n                    yield _series_round(vals, decimals[col])\n                except KeyError:\n                    yield vals\n\n        def _series_round(s, decimals):\n            if is_integer_dtype(s) or is_float_dtype(s):\n                return s.round(decimals)\n            return s\n        nv.validate_round(args, kwargs)\n        if isinstance(decimals, (dict, Series)):\n            if isinstance(decimals, Series):\n                if not decimals.index.is_unique:\n                    raise ValueError('Index of decimals must be unique')\n            new_cols = [col for col in _dict_round(self, decimals)]\n        elif is_integer(decimals):\n            new_cols = [_series_round(v, decimals) for _, v in self.iteritems()\n                ]\n        else:\n            raise TypeError(\n                'decimals must be an integer, a dict-like or a Series')\n        if len(new_cols) > 0:\n            return self._constructor(concat(new_cols, axis=1), index=self.\n                index, columns=self.columns)\n        else:\n            return self\n\n    def corr(self, method='pearson', min_periods=1):\n        \"\"\"\n        Compute pairwise correlation of columns, excluding NA/null values\n\n        Parameters\n        ----------\n        method : {'pearson', 'kendall', 'spearman'}\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result. Currently only available for pearson\n            and spearman correlation\n\n        Returns\n        -------\n        y : DataFrame\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.values\n        if method == 'pearson':\n            correl = libalgos.nancorr(_ensure_float64(mat), minp=min_periods)\n        elif method == 'spearman':\n            correl = libalgos.nancorr_spearman(_ensure_float64(mat), minp=\n                min_periods)\n        else:\n            if min_periods is None:\n                min_periods = 1\n            mat = _ensure_float64(mat).T\n            corrf = nanops.get_corr_func(method)\n            K = len(cols)\n            correl = np.empty((K, K), dtype=float)\n            mask = np.isfinite(mat)\n            for i, ac in enumerate(mat):\n                for j, bc in enumerate(mat):\n                    if i > j:\n                        continue\n                    valid = mask[i] & mask[j]\n                    if valid.sum() < min_periods:\n                        c = np.nan\n                    elif i == j:\n                        c = 1.0\n                    elif not valid.all():\n                        c = corrf(ac[valid], bc[valid])\n                    else:\n                        c = corrf(ac, bc)\n                    correl[i, j] = c\n                    correl[j, i] = c\n        return self._constructor(correl, index=idx, columns=cols)\n\n    def cov(self, min_periods=None):\n        \"\"\"\n        Compute pairwise covariance of columns, excluding NA/null values.\n\n        Compute the pairwise covariance among the series of a DataFrame.\n        The returned data frame is the `covariance matrix\n        <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\n        of the DataFrame.\n\n        Both NA and null values are automatically excluded from the\n        calculation. (See the note below about bias from missing values.)\n        A threshold can be set for the minimum number of\n        observations for each value created. Comparisons with observations\n        below this threshold will be returned as ``NaN``.\n\n        This method is generally used for the analysis of time series data to\n        understand the relationship between different measures\n        across time.\n\n        Parameters\n        ----------\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result.\n\n        Returns\n        -------\n        DataFrame\n            The covariance matrix of the series of the DataFrame.\n\n        See Also\n        --------\n        pandas.Series.cov : compute covariance with another Series\n        pandas.core.window.EWM.cov: exponential weighted sample covariance\n        pandas.core.window.Expanding.cov : expanding sample covariance\n        pandas.core.window.Rolling.cov : rolling sample covariance\n\n        Notes\n        -----\n        Returns the covariance matrix of the DataFrame's time series.\n        The covariance is normalized by N-1.\n\n        For DataFrames that have Series that are missing data (assuming that\n        data is `missing at random\n        <https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\n        the returned covariance matrix will be an unbiased estimate\n        of the variance and covariance between the member Series.\n\n        However, for many applications this estimate may not be acceptable\n        because the estimate covariance matrix is not guaranteed to be positive\n        semi-definite. This could lead to estimate correlations having\n        absolute values which are greater than one, and/or a non-invertible\n        covariance matrix. See `Estimation of covariance matrices\n        <http://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\n        matrices>`__ for more details.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n        ...                   columns=['dogs', 'cats'])\n        >>> df.cov()\n                  dogs      cats\n        dogs  0.666667 -1.000000\n        cats -1.000000  1.666667\n\n        >>> np.random.seed(42)\n        >>> df = pd.DataFrame(np.random.randn(1000, 5),\n        ...                   columns=['a', 'b', 'c', 'd', 'e'])\n        >>> df.cov()\n                  a         b         c         d         e\n        a  0.998438 -0.020161  0.059277 -0.008943  0.014144\n        b -0.020161  1.059352 -0.008543 -0.024738  0.009826\n        c  0.059277 -0.008543  1.010670 -0.001486 -0.000271\n        d -0.008943 -0.024738 -0.001486  0.921297 -0.013692\n        e  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n        **Minimum number of periods**\n\n        This method also supports an optional ``min_periods`` keyword\n        that specifies the required minimum number of non-NA observations for\n        each column pair in order to have a valid result:\n\n        >>> np.random.seed(42)\n        >>> df = pd.DataFrame(np.random.randn(20, 3),\n        ...                   columns=['a', 'b', 'c'])\n        >>> df.loc[df.index[:5], 'a'] = np.nan\n        >>> df.loc[df.index[5:10], 'b'] = np.nan\n        >>> df.cov(min_periods=12)\n                  a         b         c\n        a  0.316741       NaN -0.150812\n        b       NaN  1.248003  0.191417\n        c -0.150812  0.191417  0.895202\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.values\n        if notna(mat).all():\n            if min_periods is not None and min_periods > len(mat):\n                baseCov = np.empty((mat.shape[1], mat.shape[1]))\n                baseCov.fill(np.nan)\n            else:\n                baseCov = np.cov(mat.T)\n            baseCov = baseCov.reshape((len(cols), len(cols)))\n        else:\n            baseCov = libalgos.nancorr(_ensure_float64(mat), cov=True, minp\n                =min_periods)\n        return self._constructor(baseCov, index=idx, columns=cols)\n\n    def corrwith(self, other, axis=0, drop=False):\n        \"\"\"\n        Compute pairwise correlation between rows or columns of two DataFrame\n        objects.\n\n        Parameters\n        ----------\n        other : DataFrame, Series\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' to compute column-wise, 1 or 'columns' for row-wise\n        drop : boolean, default False\n            Drop missing indices from result, default returns union of all\n\n        Returns\n        -------\n        correls : Series\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        this = self._get_numeric_data()\n        if isinstance(other, Series):\n            return this.apply(other.corr, axis=axis)\n        other = other._get_numeric_data()\n        left, right = this.align(other, join='inner', copy=False)\n        left = left + right * 0\n        right = right + left * 0\n        if axis == 1:\n            left = left.T\n            right = right.T\n        ldem = left - left.mean()\n        rdem = right - right.mean()\n        num = (ldem * rdem).sum()\n        dom = (left.count() - 1) * left.std() * right.std()\n        correl = num / dom\n        if not drop:\n            raxis = 1 if axis == 0 else 0\n            result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n            correl = correl.reindex(result_index)\n        return correl\n\n    def count(self, axis=0, level=None, numeric_only=False):\n        \"\"\"\n        Count non-NA cells for each column or row.\n\n        The values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\n        on `pandas.options.mode.use_inf_as_na`) are considered NA.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            If 0 or 'index' counts are generated for each column.\n            If 1 or 'columns' counts are generated for each **row**.\n        level : int or str, optional\n            If the axis is a `MultiIndex` (hierarchical), count along a\n            particular `level`, collapsing into a `DataFrame`.\n            A `str` specifies the level name.\n        numeric_only : boolean, default False\n            Include only `float`, `int` or `boolean` data.\n\n        Returns\n        -------\n        Series or DataFrame\n            For each column/row the number of non-NA/null entries.\n            If `level` is specified returns a `DataFrame`.\n\n        See Also\n        --------\n        Series.count: number of non-NA elements in a Series\n        DataFrame.shape: number of DataFrame rows and columns (including NA\n            elements)\n        DataFrame.isna: boolean same-sized DataFrame showing places of NA\n            elements\n\n        Examples\n        --------\n        Constructing DataFrame from a dictionary:\n\n        >>> df = pd.DataFrame({\"Person\":\n        ...                    [\"John\", \"Myla\", None, \"John\", \"Myla\"],\n        ...                    \"Age\": [24., np.nan, 21., 33, 26],\n        ...                    \"Single\": [False, True, True, True, False]})\n        >>> df\n           Person   Age  Single\n        0    John  24.0   False\n        1    Myla   NaN    True\n        2    None  21.0    True\n        3    John  33.0    True\n        4    Myla  26.0   False\n\n        Notice the uncounted NA values:\n\n        >>> df.count()\n        Person    4\n        Age       4\n        Single    5\n        dtype: int64\n\n        Counts for each **row**:\n\n        >>> df.count(axis='columns')\n        0    3\n        1    2\n        2    2\n        3    3\n        4    3\n        dtype: int64\n\n        Counts for one level of a `MultiIndex`:\n\n        >>> df.set_index([\"Person\", \"Single\"]).count(level=\"Person\")\n                Age\n        Person\n        John      2\n        Myla      1\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if level is not None:\n            return self._count_level(level, axis=axis, numeric_only=\n                numeric_only)\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n        if len(frame._get_axis(axis)) == 0:\n            result = Series(0, index=frame._get_agg_axis(axis))\n        elif frame._is_mixed_type or frame._data.any_extension_types:\n            result = notna(frame).sum(axis=axis)\n        else:\n            series_counts = notna(frame).sum(axis=axis)\n            counts = series_counts.values\n            result = Series(counts, index=frame._get_agg_axis(axis))\n        return result.astype('int64')\n\n    def _count_level(self, level, axis=0, numeric_only=False):\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n        count_axis = frame._get_axis(axis)\n        agg_axis = frame._get_agg_axis(axis)\n        if not isinstance(count_axis, MultiIndex):\n            raise TypeError('Can only count levels on hierarchical {ax}.'.\n                format(ax=self._get_axis_name(axis)))\n        if frame._is_mixed_type:\n            mask = notna(frame).values\n        else:\n            mask = notna(frame.values)\n        if axis == 1:\n            mask = mask.T\n        if isinstance(level, compat.string_types):\n            level = count_axis._get_level_number(level)\n        level_index = count_axis.levels[level]\n        labels = _ensure_int64(count_axis.labels[level])\n        counts = lib.count_level_2d(mask, labels, len(level_index), axis=0)\n        result = DataFrame(counts, index=level_index, columns=agg_axis)\n        if axis == 1:\n            return result.T\n        else:\n            return result\n\n    def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None,\n        filter_type=None, **kwds):\n        axis = self._get_axis_number(axis)\n\n        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)\n        labels = self._get_agg_axis(axis)\n        if axis == 1 and self._is_mixed_type and self._is_datelike_mixed_type:\n            numeric_only = True\n        if numeric_only is None:\n            try:\n                values = self.values\n                result = f(values)\n            except Exception as e:\n                if filter_type is None and axis == 0:\n                    try:\n                        from pandas.core.apply import frame_apply\n                        opa = frame_apply(self, func=f, result_type=\n                            'expand', ignore_failures=True)\n                        result = opa.get_result()\n                        if result.ndim == self.ndim:\n                            result = result.iloc[0]\n                        return result\n                    except Exception:\n                        pass\n                if filter_type is None or filter_type == 'numeric':\n                    data = self._get_numeric_data()\n                elif filter_type == 'bool':\n                    data = self._get_bool_data()\n                else:\n                    e = NotImplementedError(\n                        'Handling exception with filter_type {f} notimplemented.'\n                        .format(f=filter_type))\n                    raise_with_traceback(e)\n                with np.errstate(all='ignore'):\n                    result = f(data.values)\n                labels = data._get_agg_axis(axis)\n        else:\n            if numeric_only:\n                if filter_type is None or filter_type == 'numeric':\n                    data = self._get_numeric_data()\n                elif filter_type == 'bool':\n                    data = self._get_bool_data()\n                else:\n                    msg = (\n                        'Generating numeric_only data with filter_type {f}not supported.'\n                        .format(f=filter_type))\n                    raise NotImplementedError(msg)\n                values = data.values\n                labels = data._get_agg_axis(axis)\n            else:\n                values = self.values\n            result = f(values)\n        if hasattr(result, 'dtype') and is_object_dtype(result.dtype):\n            try:\n                if filter_type is None or filter_type == 'numeric':\n                    result = result.astype(np.float64)\n                elif filter_type == 'bool' and notna(result).all():\n                    result = result.astype(np.bool_)\n            except (ValueError, TypeError):\n                if axis == 0:\n                    result = coerce_to_dtypes(result, self.dtypes)\n        return Series(result, index=labels)\n\n    def nunique(self, axis=0, dropna=True):\n        \"\"\"\n        Return Series with number of distinct observations over requested\n        axis.\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n        dropna : boolean, default True\n            Don't include NaN in the counts.\n\n        Returns\n        -------\n        nunique : Series\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n        >>> df.nunique()\n        A    3\n        B    1\n\n        >>> df.nunique(axis=1)\n        0    1\n        1    2\n        2    2\n        \"\"\"\n        return self.apply(Series.nunique, axis=axis, dropna=dropna)\n\n    def idxmin(self, axis=0, skipna=True):\n        \"\"\"\n        Return index of first occurrence of minimum over requested axis.\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        skipna : boolean, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        Returns\n        -------\n        idxmin : Series\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmin``.\n\n        See Also\n        --------\n        Series.idxmin\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmin(self.values, axis=axis, skipna=skipna)\n        index = self._get_axis(axis)\n        result = [(index[i] if i >= 0 else np.nan) for i in indices]\n        return Series(result, index=self._get_agg_axis(axis))\n\n    def idxmax(self, axis=0, skipna=True):\n        \"\"\"\n        Return index of first occurrence of maximum over requested axis.\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        skipna : boolean, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        Returns\n        -------\n        idxmax : Series\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmax``.\n\n        See Also\n        --------\n        Series.idxmax\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmax(self.values, axis=axis, skipna=skipna)\n        index = self._get_axis(axis)\n        result = [(index[i] if i >= 0 else np.nan) for i in indices]\n        return Series(result, index=self._get_agg_axis(axis))\n\n    def _get_agg_axis(self, axis_num):\n        \"\"\" let's be explicit about this \"\"\"\n        if axis_num == 0:\n            return self.columns\n        elif axis_num == 1:\n            return self.index\n        else:\n            raise ValueError('Axis must be 0 or 1 (got %r)' % axis_num)\n\n    def mode(self, axis=0, numeric_only=False, dropna=True):\n        \"\"\"\n        Gets the mode(s) of each element along the axis selected. Adds a row\n        for each mode per label, fills in gaps with nan.\n\n        Note that there could be multiple values returned for the selected\n        axis (when more than one item share the maximum frequency), which is\n        the reason why a dataframe is returned. If you want to impute missing\n        values with the mode in a dataframe ``df``, you can just do this:\n        ``df.fillna(df.mode().iloc[0])``\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            * 0 or 'index' : get mode of each column\n            * 1 or 'columns' : get mode of each row\n        numeric_only : boolean, default False\n            if True, only apply to numeric columns\n        dropna : boolean, default True\n            Don't consider counts of NaN/NaT.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        modes : DataFrame (sorted)\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 1, 2, 1, 2, 3]})\n        >>> df.mode()\n           A\n        0  1\n        1  2\n        \"\"\"\n        data = self if not numeric_only else self._get_numeric_data()\n\n        def f(s):\n            return s.mode(dropna=dropna)\n        return data.apply(f, axis=axis)\n\n    def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear'\n        ):\n        \"\"\"\n        Return values at the given quantile over requested axis, a la\n        numpy.percentile.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            0 <= q <= 1, the quantile(s) to compute\n        axis : {0, 1, 'index', 'columns'} (default 0)\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        numeric_only : boolean, default True\n            If False, the quantile of datetime and timedelta data will be\n            computed as well\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            .. versionadded:: 0.18.0\n\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n            * linear: `i + (j - i) * fraction`, where `fraction` is the\n              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2.\n\n        Returns\n        -------\n        quantiles : Series or DataFrame\n\n            - If ``q`` is an array, a DataFrame will be returned where the\n              index is ``q``, the columns are the columns of self, and the\n              values are the quantiles.\n            - If ``q`` is a float, a Series will be returned where the\n              index is the columns of self and the values are the quantiles.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n                              columns=['a', 'b'])\n        >>> df.quantile(.1)\n        a    1.3\n        b    3.7\n        dtype: float64\n        >>> df.quantile([.1, .5])\n               a     b\n        0.1  1.3   3.7\n        0.5  2.5  55.0\n\n        Specifying `numeric_only=False` will also compute the quantile of\n        datetime and timedelta data.\n\n        >>> df = pd.DataFrame({'A': [1, 2],\n                               'B': [pd.Timestamp('2010'),\n                                     pd.Timestamp('2011')],\n                               'C': [pd.Timedelta('1 days'),\n                                     pd.Timedelta('2 days')]})\n        >>> df.quantile(0.5, numeric_only=False)\n        A                    1.5\n        B    2010-07-02 12:00:00\n        C        1 days 12:00:00\n        Name: 0.5, dtype: object\n\n        See Also\n        --------\n        pandas.core.window.Rolling.quantile\n        \"\"\"\n        self._check_percentile(q)\n        data = self._get_numeric_data() if numeric_only else self\n        axis = self._get_axis_number(axis)\n        is_transposed = axis == 1\n        if is_transposed:\n            data = data.T\n        result = data._data.quantile(qs=q, axis=1, interpolation=\n            interpolation, transposed=is_transposed)\n        if result.ndim == 2:\n            result = self._constructor(result)\n        else:\n            result = self._constructor_sliced(result, name=q)\n        if is_transposed:\n            result = result.T\n        return result\n\n    def to_timestamp(self, freq=None, how='start', axis=0, copy=True):\n        \"\"\"\n        Cast to DatetimeIndex of timestamps, at *beginning* of period\n\n        Parameters\n        ----------\n        freq : string, default frequency of PeriodIndex\n            Desired frequency\n        how : {'s', 'e', 'start', 'end'}\n            Convention for converting period to timestamp; start of period\n            vs. end\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default)\n        copy : boolean, default True\n            If false then underlying input data is not copied\n\n        Returns\n        -------\n        df : DataFrame with DatetimeIndex\n        \"\"\"\n        new_data = self._data\n        if copy:\n            new_data = new_data.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            new_data.set_axis(1, self.index.to_timestamp(freq=freq, how=how))\n        elif axis == 1:\n            new_data.set_axis(0, self.columns.to_timestamp(freq=freq, how=how))\n        else:\n            raise AssertionError('Axis must be 0 or 1. Got {ax!s}'.format(\n                ax=axis))\n        return self._constructor(new_data)\n\n    def to_period(self, freq=None, axis=0, copy=True):\n        \"\"\"\n        Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n        frequency (inferred from index if not passed)\n\n        Parameters\n        ----------\n        freq : string, default\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default)\n        copy : boolean, default True\n            If False then underlying input data is not copied\n\n        Returns\n        -------\n        ts : TimeSeries with PeriodIndex\n        \"\"\"\n        new_data = self._data\n        if copy:\n            new_data = new_data.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            new_data.set_axis(1, self.index.to_period(freq=freq))\n        elif axis == 1:\n            new_data.set_axis(0, self.columns.to_period(freq=freq))\n        else:\n            raise AssertionError('Axis must be 0 or 1. Got {ax!s}'.format(\n                ax=axis))\n        return self._constructor(new_data)\n\n    def isin(self, values):\n        \"\"\"\n        Return boolean DataFrame showing whether each element in the\n        DataFrame is contained in values.\n\n        Parameters\n        ----------\n        values : iterable, Series, DataFrame or dictionary\n            The result will only be true at a location if all the\n            labels match. If `values` is a Series, that's the index. If\n            `values` is a dictionary, the keys must be the column names,\n            which must match. If `values` is a DataFrame,\n            then both the index and column labels must match.\n\n        Returns\n        -------\n\n        DataFrame of booleans\n\n        Examples\n        --------\n        When ``values`` is a list:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})\n        >>> df.isin([1, 3, 12, 'a'])\n               A      B\n        0   True   True\n        1  False  False\n        2   True  False\n\n        When ``values`` is a dict:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 4, 7]})\n        >>> df.isin({'A': [1, 3], 'B': [4, 7, 12]})\n               A      B\n        0   True  False  # Note that B didn't match the 1 here.\n        1  False   True\n        2   True   True\n\n        When ``values`` is a Series or DataFrame:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})\n        >>> df2 = pd.DataFrame({'A': [1, 3, 3, 2], 'B': ['e', 'f', 'f', 'e']})\n        >>> df.isin(df2)\n               A      B\n        0   True  False\n        1  False  False  # Column A in `df2` has a 3, but not at index 1.\n        2   True   True\n        \"\"\"\n        if isinstance(values, dict):\n            from pandas.core.reshape.concat import concat\n            values = collections.defaultdict(list, values)\n            return concat((self.iloc[:, [i]].isin(values[col]) for i, col in\n                enumerate(self.columns)), axis=1)\n        elif isinstance(values, Series):\n            if not values.index.is_unique:\n                raise ValueError('cannot compute isin with a duplicate axis.')\n            return self.eq(values.reindex_like(self), axis='index')\n        elif isinstance(values, DataFrame):\n            if not (values.columns.is_unique and values.index.is_unique):\n                raise ValueError('cannot compute isin with a duplicate axis.')\n            return self.eq(values.reindex_like(self))\n        else:\n            if not is_list_like(values):\n                raise TypeError(\n                    'only list-like or dict-like objects are allowed to be passed to DataFrame.isin(), you passed a {0!r}'\n                    .format(type(values).__name__))\n            return DataFrame(algorithms.isin(self.values.ravel(), values).\n                reshape(self.shape), self.index, self.columns)\n    plot = CachedAccessor('plot', gfx.FramePlotMethods)\n    hist = gfx.hist_frame\n    boxplot = gfx.boxplot_frame\n",
                        "belong_class_name": "DataFrame",
                        "belong_class_init": "def __init__(self, data=None, index=None, columns=None, dtype=None, copy=False\n    ):\n    if data is None:\n        data = {}\n    if dtype is not None:\n        dtype = self._validate_dtype(dtype)\n    if isinstance(data, DataFrame):\n        data = data._data\n    if isinstance(data, BlockManager):\n        mgr = self._init_mgr(data, axes=dict(index=index, columns=columns),\n            dtype=dtype, copy=copy)\n    elif isinstance(data, dict):\n        mgr = self._init_dict(data, index, columns, dtype=dtype)\n    elif isinstance(data, ma.MaskedArray):\n        import numpy.ma.mrecords as mrecords\n        if isinstance(data, mrecords.MaskedRecords):\n            mgr = _masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n        else:\n            mask = ma.getmaskarray(data)\n            if mask.any():\n                data, fill_value = maybe_upcast(data, copy=True)\n                data[mask] = fill_value\n            else:\n                data = data.copy()\n            mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                copy=copy)\n    elif isinstance(data, (np.ndarray, Series, Index)):\n        if data.dtype.names:\n            data_columns = list(data.dtype.names)\n            data = {k: data[k] for k in data_columns}\n            if columns is None:\n                columns = data_columns\n            mgr = self._init_dict(data, index, columns, dtype=dtype)\n        elif getattr(data, 'name', None) is not None:\n            mgr = self._init_dict({data.name: data}, index, columns, dtype=\n                dtype)\n        else:\n            mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                copy=copy)\n    elif isinstance(data, (list, types.GeneratorType)):\n        if isinstance(data, types.GeneratorType):\n            data = list(data)\n        if len(data) > 0:\n            if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                if is_named_tuple(data[0]) and columns is None:\n                    columns = data[0]._fields\n                arrays, columns = _to_arrays(data, columns, dtype=dtype)\n                columns = _ensure_index(columns)\n                if index is None:\n                    if isinstance(data[0], Series):\n                        index = _get_names_from_index(data)\n                    elif isinstance(data[0], Categorical):\n                        index = com._default_index(len(data[0]))\n                    else:\n                        index = com._default_index(len(data))\n                mgr = _arrays_to_mgr(arrays, columns, index, columns, dtype\n                    =dtype)\n            else:\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                    copy=copy)\n        else:\n            mgr = self._init_dict({}, index, columns, dtype=dtype)\n    elif isinstance(data, collections.Iterator):\n        raise TypeError(\"data argument can't be an iterator\")\n    else:\n        try:\n            arr = np.array(data, dtype=dtype, copy=copy)\n        except (ValueError, TypeError) as e:\n            exc = TypeError(\n                'DataFrame constructor called with incompatible data and dtype: {e}'\n                .format(e=e))\n            raise_with_traceback(exc)\n        if arr.ndim == 0 and index is not None and columns is not None:\n            values = cast_scalar_to_array((len(index), len(columns)), data,\n                dtype=dtype)\n            mgr = self._init_ndarray(values, index, columns, dtype=values.\n                dtype, copy=False)\n        else:\n            raise ValueError('DataFrame constructor not properly called!')\n    NDFrame.__init__(self, mgr, fastpath=True)\n",
                        "called_function_name": "rename",
                        "called_function_content": "@rewrite_axis_style_signature('mapper', [('copy', True), ('inplace', False),\n    ('level', None)])\ndef rename(self, *args, **kwargs):\n    \"\"\"Alter axes labels.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        mapper, index, columns : dict-like or function, optional\n            dict-like or functions transformations to apply to\n            that axis' values. Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index`` and\n            ``columns``.\n        axis : int or str, optional\n            Axis to target with ``mapper``. Can be either the axis name\n            ('index', 'columns') or number (0, 1). The default is 'index'.\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n            Whether to return a new DataFrame. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        renamed : DataFrame\n\n        See Also\n        --------\n        pandas.DataFrame.rename_axis\n\n        Examples\n        --------\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n        \"\"\"\n    axes = validate_axis_style_args(self, args, kwargs, 'mapper', 'rename')\n    kwargs.update(axes)\n    kwargs.pop('axis', None)\n    kwargs.pop('mapper', None)\n    return super(DataFrame, self).rename(**kwargs)\n",
                        "called_arguments": "(**kwargs)",
                        "called_function_parameter": "(self, *args, **kwargs)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "rename",
                        "function_content": "@Appender(_shared_docs['rename'] % dict(axes=\n    'axes keywords for this object', klass='NDFrame', optional_mapper='',\n    optional_axis=''))\ndef rename(self, *args, **kwargs):\n    axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n    copy = kwargs.pop('copy', True)\n    inplace = kwargs.pop('inplace', False)\n    level = kwargs.pop('level', None)\n    axis = kwargs.pop('axis', None)\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n    if kwargs:\n        raise TypeError('rename() got an unexpected keyword argument \"{0}\"'\n            .format(list(kwargs.keys())[0]))\n    if com._count_not_none(*axes.values()) == 0:\n        raise TypeError('must pass an index to rename')\n\n    def _get_rename_function(mapper):\n        if isinstance(mapper, (dict, ABCSeries)):\n\n            def f(x):\n                if x in mapper:\n                    return mapper[x]\n                else:\n                    return x\n        else:\n            f = mapper\n        return f\n    self._consolidate_inplace()\n    result = self if inplace else self.copy(deep=copy)\n    for axis in lrange(self._AXIS_LEN):\n        v = axes.get(self._AXIS_NAMES[axis])\n        if v is None:\n            continue\n        f = _get_rename_function(v)\n        baxis = self._get_block_manager_axis(axis)\n        if level is not None:\n            level = self.axes[axis]._get_level_number(level)\n        result._data = result._data.rename_axis(f, axis=baxis, copy=copy,\n            level=level)\n        result._clear_item_cache()\n    if inplace:\n        self._update_inplace(result._data)\n    else:\n        return result.__finalize__(self)\n",
                        "function_parameter": "(self, *args, **kwargs)",
                        "belong_class_content": "class NDFrame(PandasObject, SelectionMixin):\n    \"\"\"\n    N-dimensional analogue of DataFrame. Store multi-dimensional in a\n    size-mutable, labeled data structure\n\n    Parameters\n    ----------\n    data : BlockManager\n    axes : list\n    copy : boolean, default False\n    \"\"\"\n    _internal_names = ['_data', '_cacher', '_item_cache', '_cache',\n        '_is_copy', '_subtyp', '_name', '_index', '_default_kind',\n        '_default_fill_value', '_metadata', '__array_struct__',\n        '__array_interface__']\n    _internal_names_set = set(_internal_names)\n    _accessors = frozenset([])\n    _deprecations = frozenset(['as_blocks', 'blocks', 'consolidate',\n        'convert_objects', 'is_copy'])\n    _metadata = []\n    _is_copy = None\n\n    def __init__(self, data, axes=None, copy=False, dtype=None, fastpath=False\n        ):\n        if not fastpath:\n            if dtype is not None:\n                data = data.astype(dtype)\n            elif copy:\n                data = data.copy()\n            if axes is not None:\n                for i, ax in enumerate(axes):\n                    data = data.reindex_axis(ax, axis=i)\n        object.__setattr__(self, '_is_copy', None)\n        object.__setattr__(self, '_data', data)\n        object.__setattr__(self, '_item_cache', {})\n\n    @property\n    def is_copy(self):\n        warnings.warn(\n            \"Attribute 'is_copy' is deprecated and will be removed in a future version.\"\n            , FutureWarning, stacklevel=2)\n        return self._is_copy\n\n    @is_copy.setter\n    def is_copy(self, msg):\n        warnings.warn(\n            \"Attribute 'is_copy' is deprecated and will be removed in a future version.\"\n            , FutureWarning, stacklevel=2)\n        self._is_copy = msg\n\n    def _repr_data_resource_(self):\n        \"\"\"\n        Not a real Jupyter special repr method, but we use the same\n        naming convention.\n        \"\"\"\n        if config.get_option('display.html.table_schema'):\n            data = self.head(config.get_option('display.max_rows'))\n            payload = json.loads(data.to_json(orient='table'),\n                object_pairs_hook=collections.OrderedDict)\n            return payload\n\n    def _validate_dtype(self, dtype):\n        \"\"\" validate the passed dtype \"\"\"\n        if dtype is not None:\n            dtype = pandas_dtype(dtype)\n            if dtype.kind == 'V':\n                raise NotImplementedError(\n                    'compound dtypes are not implemented in the {0} constructor'\n                    .format(self.__class__.__name__))\n        return dtype\n\n    def _init_mgr(self, mgr, axes=None, dtype=None, copy=False):\n        \"\"\" passed a manager and a axes dict \"\"\"\n        for a, axe in axes.items():\n            if axe is not None:\n                mgr = mgr.reindex_axis(axe, axis=self.\n                    _get_block_manager_axis(a), copy=False)\n        if copy:\n            mgr = mgr.copy()\n        if dtype is not None:\n            if len(mgr.blocks) > 1 or mgr.blocks[0].values.dtype != dtype:\n                mgr = mgr.astype(dtype=dtype)\n        return mgr\n\n    @property\n    def _constructor(self):\n        \"\"\"Used when a manipulation result has the same dimensions as the\n        original.\n        \"\"\"\n        raise com.AbstractMethodError(self)\n\n    def __unicode__(self):\n        prepr = '[%s]' % ','.join(map(pprint_thing, self))\n        return '%s(%s)' % (self.__class__.__name__, prepr)\n\n    def _dir_additions(self):\n        \"\"\" add the string-like attributes from the info_axis.\n        If info_axis is a MultiIndex, it's first level values are used.\n        \"\"\"\n        additions = {c for c in self._info_axis.unique(level=0)[:100] if \n            isinstance(c, string_types) and isidentifier(c)}\n        return super(NDFrame, self)._dir_additions().union(additions)\n\n    @property\n    def _constructor_sliced(self):\n        \"\"\"Used when a manipulation result has one lower dimension(s) as the\n        original, such as DataFrame single columns slicing.\n        \"\"\"\n        raise com.AbstractMethodError(self)\n\n    @property\n    def _constructor_expanddim(self):\n        \"\"\"Used when a manipulation result has one higher dimension as the\n        original, such as Series.to_frame() and DataFrame.to_panel()\n        \"\"\"\n        raise NotImplementedError\n\n    @classmethod\n    def _setup_axes(cls, axes, info_axis=None, stat_axis=None, aliases=None,\n        slicers=None, axes_are_reversed=False, build_axes=True, ns=None,\n        docs=None):\n        \"\"\"Provide axes setup for the major PandasObjects.\n\n        Parameters\n        ----------\n        axes : the names of the axes in order (lowest to highest)\n        info_axis_num : the axis of the selector dimension (int)\n        stat_axis_num : the number of axis for the default stats (int)\n        aliases : other names for a single axis (dict)\n        slicers : how axes slice to others (dict)\n        axes_are_reversed : boolean whether to treat passed axes as\n            reversed (DataFrame)\n        build_axes : setup the axis properties (default True)\n        \"\"\"\n        cls._AXIS_ORDERS = axes\n        cls._AXIS_NUMBERS = {a: i for i, a in enumerate(axes)}\n        cls._AXIS_LEN = len(axes)\n        cls._AXIS_ALIASES = aliases or dict()\n        cls._AXIS_IALIASES = {v: k for k, v in cls._AXIS_ALIASES.items()}\n        cls._AXIS_NAMES = dict(enumerate(axes))\n        cls._AXIS_SLICEMAP = slicers or None\n        cls._AXIS_REVERSED = axes_are_reversed\n        setattr(cls, '_typ', cls.__name__.lower())\n        cls._ix = None\n        if info_axis is not None:\n            cls._info_axis_number = info_axis\n            cls._info_axis_name = axes[info_axis]\n        if stat_axis is not None:\n            cls._stat_axis_number = stat_axis\n            cls._stat_axis_name = axes[stat_axis]\n        if build_axes:\n\n            def set_axis(a, i):\n                setattr(cls, a, properties.AxisProperty(i, docs.get(a, a)))\n                cls._internal_names_set.add(a)\n            if axes_are_reversed:\n                m = cls._AXIS_LEN - 1\n                for i, a in cls._AXIS_NAMES.items():\n                    set_axis(a, m - i)\n            else:\n                for i, a in cls._AXIS_NAMES.items():\n                    set_axis(a, i)\n        if isinstance(ns, dict):\n            for k, v in ns.items():\n                setattr(cls, k, v)\n\n    def _construct_axes_dict(self, axes=None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = {a: self._get_axis(a) for a in axes or self._AXIS_ORDERS}\n        d.update(kwargs)\n        return d\n\n    @staticmethod\n    def _construct_axes_dict_from(self, axes, **kwargs):\n        \"\"\"Return an axes dictionary for the passed axes.\"\"\"\n        d = {a: ax for a, ax in zip(self._AXIS_ORDERS, axes)}\n        d.update(kwargs)\n        return d\n\n    def _construct_axes_dict_for_slice(self, axes=None, **kwargs):\n        \"\"\"Return an axes dictionary for myself.\"\"\"\n        d = {self._AXIS_SLICEMAP[a]: self._get_axis(a) for a in axes or\n            self._AXIS_ORDERS}\n        d.update(kwargs)\n        return d\n\n    def _construct_axes_from_arguments(self, args, kwargs, require_all=False):\n        \"\"\"Construct and returns axes if supplied in args/kwargs.\n\n        If require_all, raise if all axis arguments are not supplied\n        return a tuple of (axes, kwargs).\n        \"\"\"\n        args = list(args)\n        for a in self._AXIS_ORDERS:\n            alias = self._AXIS_IALIASES.get(a)\n            if alias is not None:\n                if a in kwargs:\n                    if alias in kwargs:\n                        raise TypeError(\n                            'arguments are mutually exclusive for [%s,%s]' %\n                            (a, alias))\n                    continue\n                if alias in kwargs:\n                    kwargs[a] = kwargs.pop(alias)\n                    continue\n            if a not in kwargs:\n                try:\n                    kwargs[a] = args.pop(0)\n                except IndexError:\n                    if require_all:\n                        raise TypeError(\n                            'not enough/duplicate arguments specified!')\n        axes = {a: kwargs.pop(a, None) for a in self._AXIS_ORDERS}\n        return axes, kwargs\n\n    @classmethod\n    def _from_axes(cls, data, axes, **kwargs):\n        if isinstance(data, BlockManager):\n            return cls(data, **kwargs)\n        else:\n            if cls._AXIS_REVERSED:\n                axes = axes[::-1]\n            d = cls._construct_axes_dict_from(cls, axes, copy=False)\n            d.update(kwargs)\n            return cls(data, **d)\n\n    def _get_axis_number(self, axis):\n        axis = self._AXIS_ALIASES.get(axis, axis)\n        if is_integer(axis):\n            if axis in self._AXIS_NAMES:\n                return axis\n        else:\n            try:\n                return self._AXIS_NUMBERS[axis]\n            except KeyError:\n                pass\n        raise ValueError('No axis named {0} for object type {1}'.format(\n            axis, type(self)))\n\n    def _get_axis_name(self, axis):\n        axis = self._AXIS_ALIASES.get(axis, axis)\n        if isinstance(axis, string_types):\n            if axis in self._AXIS_NUMBERS:\n                return axis\n        else:\n            try:\n                return self._AXIS_NAMES[axis]\n            except KeyError:\n                pass\n        raise ValueError('No axis named {0} for object type {1}'.format(\n            axis, type(self)))\n\n    def _get_axis(self, axis):\n        name = self._get_axis_name(axis)\n        return getattr(self, name)\n\n    def _get_block_manager_axis(self, axis):\n        \"\"\"Map the axis to the block_manager axis.\"\"\"\n        axis = self._get_axis_number(axis)\n        if self._AXIS_REVERSED:\n            m = self._AXIS_LEN - 1\n            return m - axis\n        return axis\n\n    def _get_axis_resolvers(self, axis):\n        axis_index = getattr(self, axis)\n        d = dict()\n        prefix = axis[0]\n        for i, name in enumerate(axis_index.names):\n            if name is not None:\n                key = level = name\n            else:\n                key = '{prefix}level_{i}'.format(prefix=prefix, i=i)\n                level = i\n            level_values = axis_index.get_level_values(level)\n            s = level_values.to_series()\n            s.index = axis_index\n            d[key] = s\n        if isinstance(axis_index, MultiIndex):\n            dindex = axis_index\n        else:\n            dindex = axis_index.to_series()\n        d[axis] = dindex\n        return d\n\n    def _get_index_resolvers(self):\n        d = {}\n        for axis_name in self._AXIS_ORDERS:\n            d.update(self._get_axis_resolvers(axis_name))\n        return d\n\n    @property\n    def _info_axis(self):\n        return getattr(self, self._info_axis_name)\n\n    @property\n    def _stat_axis(self):\n        return getattr(self, self._stat_axis_name)\n\n    @property\n    def shape(self):\n        \"\"\"Return a tuple of axis dimensions\"\"\"\n        return tuple(len(self._get_axis(a)) for a in self._AXIS_ORDERS)\n\n    @property\n    def axes(self):\n        \"\"\"Return index label(s) of the internal NDFrame\"\"\"\n        return [self._get_axis(a) for a in self._AXIS_ORDERS]\n\n    @property\n    def ndim(self):\n        \"\"\"\n        Return an int representing the number of axes / array dimensions.\n\n        Return 1 if Series. Otherwise return 2 if DataFrame.\n\n        See Also\n        --------\n        ndarray.ndim : Number of array dimensions.\n\n        Examples\n        --------\n        >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n        >>> s.ndim\n        1\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.ndim\n        2\n        \"\"\"\n        return self._data.ndim\n\n    @property\n    def size(self):\n        \"\"\"\n        Return an int representing the number of elements in this object.\n\n        Return the number of rows if Series. Otherwise return the number of\n        rows times number of columns if DataFrame.\n\n        See Also\n        --------\n        ndarray.size : Number of elements in the array.\n\n        Examples\n        --------\n        >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n        >>> s.size\n        3\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.size\n        4\n        \"\"\"\n        return np.prod(self.shape)\n\n    @property\n    def _selected_obj(self):\n        \"\"\" internal compat with SelectionMixin \"\"\"\n        return self\n\n    @property\n    def _obj_with_exclusions(self):\n        \"\"\" internal compat with SelectionMixin \"\"\"\n        return self\n\n    def _expand_axes(self, key):\n        new_axes = []\n        for k, ax in zip(key, self.axes):\n            if k not in ax:\n                if type(k) != ax.dtype.type:\n                    ax = ax.astype('O')\n                new_axes.append(ax.insert(len(ax), k))\n            else:\n                new_axes.append(ax)\n        return new_axes\n\n    def set_axis(self, labels, axis=0, inplace=None):\n        \"\"\"\n        Assign desired index to given axis.\n\n        Indexes for column or row labels can be changed by assigning\n        a list-like or Index.\n\n        .. versionchanged:: 0.21.0\n\n           The signature is now `labels` and `axis`, consistent with\n           the rest of pandas API. Previously, the `axis` and `labels`\n           arguments were respectively the first and second positional\n           arguments.\n\n        Parameters\n        ----------\n        labels : list-like, Index\n            The values for the new index.\n\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to update. The value 0 identifies the rows, and 1\n            identifies the columns.\n\n        inplace : boolean, default None\n            Whether to return a new %(klass)s instance.\n\n            .. warning::\n\n               ``inplace=None`` currently falls back to to True, but in a\n               future version, will default to False. Use inplace=True\n               explicitly rather than relying on the default.\n\n        Returns\n        -------\n        renamed : %(klass)s or None\n            An object of same type as caller if inplace=False, None otherwise.\n\n        See Also\n        --------\n        pandas.DataFrame.rename_axis : Alter the name of the index or columns.\n\n        Examples\n        --------\n        **Series**\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n\n        >>> s.set_axis(['a', 'b', 'c'], axis=0, inplace=False)\n        a    1\n        b    2\n        c    3\n        dtype: int64\n\n        The original object is not modified.\n\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n\n        **DataFrame**\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\n        Change the row labels.\n\n        >>> df.set_axis(['a', 'b', 'c'], axis='index', inplace=False)\n           A  B\n        a  1  4\n        b  2  5\n        c  3  6\n\n        Change the column labels.\n\n        >>> df.set_axis(['I', 'II'], axis='columns', inplace=False)\n           I  II\n        0  1   4\n        1  2   5\n        2  3   6\n\n        Now, update the labels inplace.\n\n        >>> df.set_axis(['i', 'ii'], axis='columns', inplace=True)\n        >>> df\n           i  ii\n        0  1   4\n        1  2   5\n        2  3   6\n        \"\"\"\n        if is_scalar(labels):\n            warnings.warn(\n                'set_axis now takes \"labels\" as first argument, and \"axis\" as named parameter. The old form, with \"axis\" as first parameter and \"labels\" as second, is still supported but will be deprecated in a future version of pandas.'\n                , FutureWarning, stacklevel=2)\n            labels, axis = axis, labels\n        if inplace is None:\n            warnings.warn(\n                \"\"\"set_axis currently defaults to operating inplace.\nThis will change in a future version of pandas, use inplace=True to avoid this warning.\"\"\"\n                , FutureWarning, stacklevel=2)\n            inplace = True\n        if inplace:\n            setattr(self, self._get_axis_name(axis), labels)\n        else:\n            obj = self.copy()\n            obj.set_axis(labels, axis=axis, inplace=True)\n            return obj\n\n    def _set_axis(self, axis, labels):\n        self._data.set_axis(axis, labels)\n        self._clear_item_cache()\n    _shared_docs['transpose'] = \"\"\"\n        Permute the dimensions of the %(klass)s\n\n        Parameters\n        ----------\n        args : %(args_transpose)s\n        copy : boolean, default False\n            Make a copy of the underlying data. Mixed-dtype data will\n            always result in a copy\n\n        Examples\n        --------\n        >>> p.transpose(2, 0, 1)\n        >>> p.transpose(2, 0, 1, copy=True)\n\n        Returns\n        -------\n        y : same as input\n        \"\"\"\n\n    @Appender(_shared_docs['transpose'] % _shared_doc_kwargs)\n    def transpose(self, *args, **kwargs):\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs,\n            require_all=True)\n        axes_names = tuple(self._get_axis_name(axes[a]) for a in self.\n            _AXIS_ORDERS)\n        axes_numbers = tuple(self._get_axis_number(axes[a]) for a in self.\n            _AXIS_ORDERS)\n        if len(axes) != len(set(axes)):\n            raise ValueError('Must specify %s unique axes' % self._AXIS_LEN)\n        new_axes = self._construct_axes_dict_from(self, [self._get_axis(x) for\n            x in axes_names])\n        new_values = self.values.transpose(axes_numbers)\n        if kwargs.pop('copy', None) or len(args) and args[-1]:\n            new_values = new_values.copy()\n        nv.validate_transpose_for_generic(self, kwargs)\n        return self._constructor(new_values, **new_axes).__finalize__(self)\n\n    def swapaxes(self, axis1, axis2, copy=True):\n        \"\"\"\n        Interchange axes and swap values axes appropriately\n\n        Returns\n        -------\n        y : same as input\n        \"\"\"\n        i = self._get_axis_number(axis1)\n        j = self._get_axis_number(axis2)\n        if i == j:\n            if copy:\n                return self.copy()\n            return self\n        mapping = {i: j, j: i}\n        new_axes = (self._get_axis(mapping.get(k, k)) for k in range(self.\n            _AXIS_LEN))\n        new_values = self.values.swapaxes(i, j)\n        if copy:\n            new_values = new_values.copy()\n        return self._constructor(new_values, *new_axes).__finalize__(self)\n\n    def pop(self, item):\n        \"\"\"\n        Return item and drop from frame. Raise KeyError if not found.\n\n        Parameters\n        ----------\n        item : str\n            Column label to be popped\n\n        Returns\n        -------\n        popped : Series\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('falcon', 'bird',    389.0),\n        ...                    ('parrot', 'bird',     24.0),\n        ...                    ('lion',   'mammal',   80.5),\n        ...                    ('monkey', 'mammal', np.nan)],\n        ...                   columns=('name', 'class', 'max_speed'))\n        >>> df\n             name   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        >>> df.pop('class')\n        0      bird\n        1      bird\n        2    mammal\n        3    mammal\n        Name: class, dtype: object\n\n        >>> df\n             name  max_speed\n        0  falcon      389.0\n        1  parrot       24.0\n        2    lion       80.5\n        3  monkey        NaN\n        \"\"\"\n        result = self[item]\n        del self[item]\n        try:\n            result._reset_cacher()\n        except AttributeError:\n            pass\n        return result\n\n    def squeeze(self, axis=None):\n        \"\"\"\n        Squeeze length 1 dimensions.\n\n        Parameters\n        ----------\n        axis : None, integer or string axis name, optional\n            The axis to squeeze if 1-sized.\n\n            .. versionadded:: 0.20.0\n\n        Returns\n        -------\n        scalar if 1-sized, else original object\n        \"\"\"\n        axis = self._AXIS_NAMES if axis is None else (self._get_axis_number\n            (axis),)\n        try:\n            return self.iloc[tuple(0 if i in axis and len(a) == 1 else\n                slice(None) for i, a in enumerate(self.axes))]\n        except Exception:\n            return self\n\n    def swaplevel(self, i=-2, j=-1, axis=0):\n        \"\"\"\n        Swap levels i and j in a MultiIndex on a particular axis\n\n        Parameters\n        ----------\n        i, j : int, string (can be mixed)\n            Level of index to be swapped. Can pass level name as string.\n\n        Returns\n        -------\n        swapped : type of caller (new object)\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        result = self.copy()\n        labels = result._data.axes[axis]\n        result._data.set_axis(axis, labels.swaplevel(i, j))\n        return result\n    _shared_docs['rename'] = \"\"\"\n        Alter axes input function or functions. Function / dict values must be\n        unique (1-to-1). Labels not contained in a dict / Series will be left\n        as-is. Extra labels listed don't throw an error. Alternatively, change\n        ``Series.name`` with a scalar value (Series only).\n\n        Parameters\n        ----------\n        %(optional_mapper)s\n        %(axes)s : scalar, list-like, dict-like or function, optional\n            Scalar or list-like will alter the ``Series.name`` attribute,\n            and raise on DataFrame or Panel.\n            dict-like or functions are transformations to apply to\n            that axis' values\n        %(optional_axis)s\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n            Whether to return a new %(klass)s. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        renamed : %(klass)s (new object)\n\n        See Also\n        --------\n        pandas.NDFrame.rename_axis\n\n        Examples\n        --------\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n        >>> s.rename(\"my_name\") # scalar, changes Series.name\n        0    1\n        1    2\n        2    3\n        Name: my_name, dtype: int64\n        >>> s.rename(lambda x: x ** 2)  # function, changes labels\n        0    1\n        1    2\n        4    3\n        dtype: int64\n        >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n        0    1\n        3    2\n        5    3\n        dtype: int64\n\n        Since ``DataFrame`` doesn't have a ``.name`` attribute,\n        only mapping-type arguments are allowed.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(2)\n        Traceback (most recent call last):\n        ...\n        TypeError: 'int' object is not callable\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n\n        See the :ref:`user guide <basics.rename>` for more.\n        \"\"\"\n\n    @Appender(_shared_docs['rename'] % dict(axes=\n        'axes keywords for this object', klass='NDFrame', optional_mapper=\n        '', optional_axis=''))\n    def rename(self, *args, **kwargs):\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        copy = kwargs.pop('copy', True)\n        inplace = kwargs.pop('inplace', False)\n        level = kwargs.pop('level', None)\n        axis = kwargs.pop('axis', None)\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n        if kwargs:\n            raise TypeError('rename() got an unexpected keyword argument \"{0}\"'\n                .format(list(kwargs.keys())[0]))\n        if com._count_not_none(*axes.values()) == 0:\n            raise TypeError('must pass an index to rename')\n\n        def _get_rename_function(mapper):\n            if isinstance(mapper, (dict, ABCSeries)):\n\n                def f(x):\n                    if x in mapper:\n                        return mapper[x]\n                    else:\n                        return x\n            else:\n                f = mapper\n            return f\n        self._consolidate_inplace()\n        result = self if inplace else self.copy(deep=copy)\n        for axis in lrange(self._AXIS_LEN):\n            v = axes.get(self._AXIS_NAMES[axis])\n            if v is None:\n                continue\n            f = _get_rename_function(v)\n            baxis = self._get_block_manager_axis(axis)\n            if level is not None:\n                level = self.axes[axis]._get_level_number(level)\n            result._data = result._data.rename_axis(f, axis=baxis, copy=\n                copy, level=level)\n            result._clear_item_cache()\n        if inplace:\n            self._update_inplace(result._data)\n        else:\n            return result.__finalize__(self)\n    rename.__doc__ = _shared_docs['rename']\n\n    def rename_axis(self, mapper, axis=0, copy=True, inplace=False):\n        \"\"\"\n        Alter the name of the index or columns.\n\n        Parameters\n        ----------\n        mapper : scalar, list-like, optional\n            Value to set as the axis name attribute.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The index or the name of the axis.\n        copy : boolean, default True\n            Also copy underlying data.\n        inplace : boolean, default False\n            Modifies the object directly, instead of creating a new Series\n            or DataFrame.\n\n        Returns\n        -------\n        renamed : Series, DataFrame, or None\n            The same type as the caller or None if `inplace` is True.\n\n        Notes\n        -----\n        Prior to version 0.21.0, ``rename_axis`` could also be used to change\n        the axis *labels* by passing a mapping or scalar. This behavior is\n        deprecated and will be removed in a future version. Use ``rename``\n        instead.\n\n        See Also\n        --------\n        pandas.Series.rename : Alter Series index labels or name\n        pandas.DataFrame.rename : Alter DataFrame index labels or name\n        pandas.Index.rename : Set new names on index\n\n        Examples\n        --------\n        **Series**\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s.rename_axis(\"foo\")\n        foo\n        0    1\n        1    2\n        2    3\n        dtype: int64\n\n        **DataFrame**\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename_axis(\"foo\")\n             A  B\n        foo\n        0    1  4\n        1    2  5\n        2    3  6\n\n        >>> df.rename_axis(\"bar\", axis=\"columns\")\n        bar  A  B\n        0    1  4\n        1    2  5\n        2    3  6\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        non_mapper = is_scalar(mapper) or is_list_like(mapper\n            ) and not is_dict_like(mapper)\n        if non_mapper:\n            return self._set_axis_name(mapper, axis=axis, inplace=inplace)\n        else:\n            msg = (\n                \"Using 'rename_axis' to alter labels is deprecated. Use '.rename' instead\"\n                )\n            warnings.warn(msg, FutureWarning, stacklevel=2)\n            axis = self._get_axis_name(axis)\n            d = {'copy': copy, 'inplace': inplace}\n            d[axis] = mapper\n            return self.rename(**d)\n\n    def _set_axis_name(self, name, axis=0, inplace=False):\n        \"\"\"\n        Alter the name or names of the axis.\n\n        Parameters\n        ----------\n        name : str or list of str\n            Name for the Index, or list of names for the MultiIndex\n        axis : int or str\n           0 or 'index' for the index; 1 or 'columns' for the columns\n        inplace : bool\n            whether to modify `self` directly or return a copy\n\n            .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        renamed : type of caller or None if inplace=True\n\n        See Also\n        --------\n        pandas.DataFrame.rename\n        pandas.Series.rename\n        pandas.Index.rename\n\n        Examples\n        --------\n        >>> df._set_axis_name(\"foo\")\n             A\n        foo\n        0    1\n        1    2\n        2    3\n        >>> df.index = pd.MultiIndex.from_product([['A'], ['a', 'b', 'c']])\n        >>> df._set_axis_name([\"bar\", \"baz\"])\n                 A\n        bar baz\n        A   a    1\n            b    2\n            c    3\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        idx = self._get_axis(axis).set_names(name)\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        renamed = self if inplace else self.copy()\n        renamed.set_axis(idx, axis=axis, inplace=True)\n        if not inplace:\n            return renamed\n\n    def _indexed_same(self, other):\n        return all(self._get_axis(a).equals(other._get_axis(a)) for a in\n            self._AXIS_ORDERS)\n\n    def __neg__(self):\n        values = com._values_from_object(self)\n        if is_bool_dtype(values):\n            arr = operator.inv(values)\n        elif is_numeric_dtype(values) or is_timedelta64_dtype(values):\n            arr = operator.neg(values)\n        else:\n            raise TypeError('Unary negative expects numeric dtype, not {}'.\n                format(values.dtype))\n        return self.__array_wrap__(arr)\n\n    def __pos__(self):\n        values = com._values_from_object(self)\n        if is_bool_dtype(values) or is_period_arraylike(values):\n            arr = values\n        elif is_numeric_dtype(values) or is_timedelta64_dtype(values):\n            arr = operator.pos(values)\n        else:\n            raise TypeError('Unary plus expects numeric dtype, not {}'.\n                format(values.dtype))\n        return self.__array_wrap__(arr)\n\n    def __invert__(self):\n        try:\n            arr = operator.inv(com._values_from_object(self))\n            return self.__array_wrap__(arr)\n        except Exception:\n            if not np.prod(self.shape):\n                return self\n            raise\n\n    def equals(self, other):\n        \"\"\"\n        Determines if two NDFrame objects contain the same elements. NaNs in\n        the same location are considered equal.\n        \"\"\"\n        if not isinstance(other, self._constructor):\n            return False\n        return self._data.equals(other._data)\n\n    def _is_level_reference(self, key, axis=0):\n        \"\"\"\n        Test whether a key is a level reference for a given axis.\n\n        To be considered a level reference, `key` must be a string that:\n          - (axis=0): Matches the name of an index level and does NOT match\n            a column label.\n          - (axis=1): Matches the name of a column level and does NOT match\n            an index label.\n\n        Parameters\n        ----------\n        key: str\n            Potential level name for the given axis\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        is_level: bool\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if self.ndim > 2:\n            raise NotImplementedError(\n                '_is_level_reference is not implemented for {type}'.format(\n                type=type(self)))\n        return key is not None and is_hashable(key) and key in self.axes[axis\n            ].names and not self._is_label_reference(key, axis=axis)\n\n    def _is_label_reference(self, key, axis=0):\n        \"\"\"\n        Test whether a key is a label reference for a given axis.\n\n        To be considered a label reference, `key` must be a string that:\n          - (axis=0): Matches a column label\n          - (axis=1): Matches an index label\n\n        Parameters\n        ----------\n        key: str\n            Potential label name\n        axis: int, default 0\n            Axis perpendicular to the axis that labels are associated with\n            (0 means search for column labels, 1 means search for index labels)\n\n        Returns\n        -------\n        is_label: bool\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n        if self.ndim > 2:\n            raise NotImplementedError(\n                '_is_label_reference is not implemented for {type}'.format(\n                type=type(self)))\n        return key is not None and is_hashable(key) and any(key in self.\n            axes[ax] for ax in other_axes)\n\n    def _is_label_or_level_reference(self, key, axis=0):\n        \"\"\"\n        Test whether a key is a label or level reference for a given axis.\n\n        To be considered either a label or a level reference, `key` must be a\n        string that:\n          - (axis=0): Matches a column label or an index level\n          - (axis=1): Matches an index label or a column level\n\n        Parameters\n        ----------\n        key: str\n            Potential label or level name\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        is_label_or_level: bool\n        \"\"\"\n        if self.ndim > 2:\n            raise NotImplementedError(\n                '_is_label_or_level_reference is not implemented for {type}'\n                .format(type=type(self)))\n        return self._is_level_reference(key, axis=axis\n            ) or self._is_label_reference(key, axis=axis)\n\n    def _check_label_or_level_ambiguity(self, key, axis=0, stacklevel=1):\n        \"\"\"\n        Check whether `key` matches both a level of the input `axis` and a\n        label of the other axis and raise a ``FutureWarning`` if this is the\n        case.\n\n        Note: This method will be altered to raise an ambiguity exception in\n        a future version.\n\n        Parameters\n        ----------\n        key: str or object\n            label or level name\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n        stacklevel: int, default 1\n            Stack level used when a FutureWarning is raised (see below).\n\n        Returns\n        -------\n        ambiguous: bool\n\n        Raises\n        ------\n        FutureWarning\n            if `key` is ambiguous. This will become an ambiguity error in a\n            future version\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n        if self.ndim > 2:\n            raise NotImplementedError(\n                '_check_label_or_level_ambiguity is not implemented for {type}'\n                .format(type=type(self)))\n        if key is not None and is_hashable(key) and key in self.axes[axis\n            ].names and any(key in self.axes[ax] for ax in other_axes):\n            level_article, level_type = ('an', 'index') if axis == 0 else ('a',\n                'column')\n            label_article, label_type = ('a', 'column') if axis == 0 else ('an'\n                , 'index')\n            msg = (\n                \"\"\"'{key}' is both {level_article} {level_type} level and {label_article} {label_type} label.\nDefaulting to {label_type}, but this will raise an ambiguity error in a future version\"\"\"\n                .format(key=key, level_article=level_article, level_type=\n                level_type, label_article=label_article, label_type=label_type)\n                )\n            warnings.warn(msg, FutureWarning, stacklevel=stacklevel + 1)\n            return True\n        else:\n            return False\n\n    def _get_label_or_level_values(self, key, axis=0, stacklevel=1):\n        \"\"\"\n        Return a 1-D array of values associated with `key`, a label or level\n        from the given `axis`.\n\n        Retrieval logic:\n          - (axis=0): Return column values if `key` matches a column label.\n            Otherwise return index level values if `key` matches an index\n            level.\n          - (axis=1): Return row values if `key` matches an index label.\n            Otherwise return column level values if 'key' matches a column\n            level\n\n        Parameters\n        ----------\n        key: str\n            Label or level name.\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n        stacklevel: int, default 1\n            Stack level used when a FutureWarning is raised (see below).\n\n        Returns\n        -------\n        values: np.ndarray\n\n        Raises\n        ------\n        KeyError\n            if `key` matches neither a label nor a level\n        ValueError\n            if `key` matches multiple labels\n        FutureWarning\n            if `key` is ambiguous. This will become an ambiguity error in a\n            future version\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n        if self.ndim > 2:\n            raise NotImplementedError(\n                '_get_label_or_level_values is not implemented for {type}'.\n                format(type=type(self)))\n        if self._is_label_reference(key, axis=axis):\n            self._check_label_or_level_ambiguity(key, axis=axis, stacklevel\n                =stacklevel + 1)\n            values = self.xs(key, axis=other_axes[0])._values\n        elif self._is_level_reference(key, axis=axis):\n            values = self.axes[axis].get_level_values(key)._values\n        else:\n            raise KeyError(key)\n        if values.ndim > 1:\n            if other_axes and isinstance(self._get_axis(other_axes[0]),\n                MultiIndex):\n                multi_message = \"\"\"\nFor a multi-index, the label must be a tuple with elements corresponding to each level.\"\"\"\n            else:\n                multi_message = ''\n            label_axis_name = 'column' if axis == 0 else 'index'\n            raise ValueError(\n                \"The {label_axis_name} label '{key}' is not unique.{multi_message}\"\n                .format(key=key, label_axis_name=label_axis_name,\n                multi_message=multi_message))\n        return values\n\n    def _drop_labels_or_levels(self, keys, axis=0):\n        \"\"\"\n        Drop labels and/or levels for the given `axis`.\n\n        For each key in `keys`:\n          - (axis=0): If key matches a column label then drop the column.\n            Otherwise if key matches an index level then drop the level.\n          - (axis=1): If key matches an index label then drop the row.\n            Otherwise if key matches a column level then drop the level.\n\n        Parameters\n        ----------\n        keys: str or list of str\n            labels or levels to drop\n        axis: int, default 0\n            Axis that levels are associated with (0 for index, 1 for columns)\n\n        Returns\n        -------\n        dropped: DataFrame\n\n        Raises\n        ------\n        ValueError\n            if any `keys` match neither a label nor a level\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if self.ndim > 2:\n            raise NotImplementedError(\n                '_drop_labels_or_levels is not implemented for {type}'.\n                format(type=type(self)))\n        keys = com._maybe_make_list(keys)\n        invalid_keys = [k for k in keys if not self.\n            _is_label_or_level_reference(k, axis=axis)]\n        if invalid_keys:\n            raise ValueError(\n                'The following keys are not valid labels or levels for axis {axis}: {invalid_keys}'\n                .format(axis=axis, invalid_keys=invalid_keys))\n        levels_to_drop = [k for k in keys if self._is_level_reference(k,\n            axis=axis)]\n        labels_to_drop = [k for k in keys if not self._is_level_reference(k,\n            axis=axis)]\n        dropped = self.copy()\n        if axis == 0:\n            if levels_to_drop:\n                dropped.reset_index(levels_to_drop, drop=True, inplace=True)\n            if labels_to_drop:\n                dropped.drop(labels_to_drop, axis=1, inplace=True)\n        else:\n            if levels_to_drop:\n                if isinstance(dropped.columns, MultiIndex):\n                    dropped.columns = dropped.columns.droplevel(levels_to_drop)\n                else:\n                    dropped.columns = RangeIndex(dropped.columns.size)\n            if labels_to_drop:\n                dropped.drop(labels_to_drop, axis=0, inplace=True)\n        return dropped\n\n    def __hash__(self):\n        raise TypeError('{0!r} objects are mutable, thus they cannot be hashed'\n            .format(self.__class__.__name__))\n\n    def __iter__(self):\n        \"\"\"Iterate over infor axis\"\"\"\n        return iter(self._info_axis)\n\n    def keys(self):\n        \"\"\"Get the 'info axis' (see Indexing for more)\n\n        This is index for Series, columns for DataFrame and major_axis for\n        Panel.\n        \"\"\"\n        return self._info_axis\n\n    def iteritems(self):\n        \"\"\"Iterate over (label, values) on info axis\n\n        This is index for Series, columns for DataFrame, major_axis for Panel,\n        and so on.\n        \"\"\"\n        for h in self._info_axis:\n            yield h, self[h]\n\n    def __len__(self):\n        \"\"\"Returns length of info axis\"\"\"\n        return len(self._info_axis)\n\n    def __contains__(self, key):\n        \"\"\"True if the key is in the info axis\"\"\"\n        return key in self._info_axis\n\n    @property\n    def empty(self):\n        \"\"\"\n        Indicator whether DataFrame is empty.\n\n        True if DataFrame is entirely empty (no items), meaning any of the\n        axes are of length 0.\n\n        Returns\n        -------\n        bool\n            If DataFrame is empty, return True, if not return False.\n\n        Notes\n        -----\n        If DataFrame contains only NaNs, it is still not considered empty. See\n        the example below.\n\n        Examples\n        --------\n        An example of an actual empty DataFrame. Notice the index is empty:\n\n        >>> df_empty = pd.DataFrame({'A' : []})\n        >>> df_empty\n        Empty DataFrame\n        Columns: [A]\n        Index: []\n        >>> df_empty.empty\n        True\n\n        If we only have NaNs in our DataFrame, it is not considered empty! We\n        will need to drop the NaNs to make the DataFrame empty:\n\n        >>> df = pd.DataFrame({'A' : [np.nan]})\n        >>> df\n            A\n        0 NaN\n        >>> df.empty\n        False\n        >>> df.dropna().empty\n        True\n\n        See also\n        --------\n        pandas.Series.dropna\n        pandas.DataFrame.dropna\n        \"\"\"\n        return any(len(self._get_axis(a)) == 0 for a in self._AXIS_ORDERS)\n\n    def __nonzero__(self):\n        raise ValueError(\n            'The truth value of a {0} is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().'\n            .format(self.__class__.__name__))\n    __bool__ = __nonzero__\n\n    def bool(self):\n        \"\"\"Return the bool of a single element PandasObject.\n\n        This must be a boolean scalar value, either True or False.  Raise a\n        ValueError if the PandasObject does not have exactly 1 element, or that\n        element is not boolean\n        \"\"\"\n        v = self.squeeze()\n        if isinstance(v, (bool, np.bool_)):\n            return bool(v)\n        elif is_scalar(v):\n            raise ValueError(\n                'bool cannot act on a non-boolean single element {0}'.\n                format(self.__class__.__name__))\n        self.__nonzero__()\n\n    def __abs__(self):\n        return self.abs()\n\n    def __round__(self, decimals=0):\n        return self.round(decimals)\n\n    def __array__(self, dtype=None):\n        return com._values_from_object(self)\n\n    def __array_wrap__(self, result, context=None):\n        d = self._construct_axes_dict(self._AXIS_ORDERS, copy=False)\n        return self._constructor(result, **d).__finalize__(self)\n\n    def to_dense(self):\n        \"\"\"Return dense representation of NDFrame (as opposed to sparse)\"\"\"\n        return self\n\n    def __getstate__(self):\n        meta = {k: getattr(self, k, None) for k in self._metadata}\n        return dict(_data=self._data, _typ=self._typ, _metadata=self.\n            _metadata, **meta)\n\n    def __setstate__(self, state):\n        if isinstance(state, BlockManager):\n            self._data = state\n        elif isinstance(state, dict):\n            typ = state.get('_typ')\n            if typ is not None:\n                meta = set(self._internal_names + self._metadata)\n                for k in list(meta):\n                    if k in state:\n                        v = state[k]\n                        object.__setattr__(self, k, v)\n                for k, v in state.items():\n                    if k not in meta:\n                        object.__setattr__(self, k, v)\n            else:\n                self._unpickle_series_compat(state)\n        elif isinstance(state[0], dict):\n            if len(state) == 5:\n                self._unpickle_sparse_frame_compat(state)\n            else:\n                self._unpickle_frame_compat(state)\n        elif len(state) == 4:\n            self._unpickle_panel_compat(state)\n        elif len(state) == 2:\n            self._unpickle_series_compat(state)\n        else:\n            self._unpickle_matrix_compat(state)\n        self._item_cache = {}\n\n    def _repr_latex_(self):\n        \"\"\"\n        Returns a LaTeX representation for a particular object.\n        Mainly for use with nbconvert (jupyter notebook conversion to pdf).\n        \"\"\"\n        if config.get_option('display.latex.repr'):\n            return self.to_latex()\n        else:\n            return None\n    _shared_docs['to_excel'] = \"\"\"\n    Write %(klass)s to an excel sheet\n    %(versionadded_to_excel)s\n\n    Parameters\n    ----------\n    excel_writer : string or ExcelWriter object\n        File path or existing ExcelWriter\n    sheet_name : string, default 'Sheet1'\n        Name of sheet which will contain DataFrame\n    na_rep : string, default ''\n        Missing data representation\n    float_format : string, default None\n        Format string for floating point numbers\n    columns : sequence, optional\n        Columns to write\n    header : boolean or list of string, default True\n        Write out the column names. If a list of strings is given it is\n        assumed to be aliases for the column names\n    index : boolean, default True\n        Write row names (index)\n    index_label : string or sequence, default None\n        Column label for index column(s) if desired. If None is given, and\n        `header` and `index` are True, then the index names are used. A\n        sequence should be given if the DataFrame uses MultiIndex.\n    startrow :\n        upper left cell row to dump data frame\n    startcol :\n        upper left cell column to dump data frame\n    engine : string, default None\n        write engine to use - you can also set this via the options\n        ``io.excel.xlsx.writer``, ``io.excel.xls.writer``, and\n        ``io.excel.xlsm.writer``.\n    merge_cells : boolean, default True\n        Write MultiIndex and Hierarchical Rows as merged cells.\n    encoding: string, default None\n        encoding of the resulting excel file. Only necessary for xlwt,\n        other writers support unicode natively.\n    inf_rep : string, default 'inf'\n        Representation for infinity (there is no native representation for\n        infinity in Excel)\n    freeze_panes : tuple of integer (length 2), default None\n        Specifies the one-based bottommost row and rightmost column that\n        is to be frozen\n\n        .. versionadded:: 0.20.0\n\n    Notes\n    -----\n    If passing an existing ExcelWriter object, then the sheet will be added\n    to the existing workbook.  This can be used to save different\n    DataFrames to one workbook:\n\n    >>> writer = pd.ExcelWriter('output.xlsx')\n    >>> df1.to_excel(writer,'Sheet1')\n    >>> df2.to_excel(writer,'Sheet2')\n    >>> writer.save()\n\n    For compatibility with to_csv, to_excel serializes lists and dicts to\n    strings before writing.\n    \"\"\"\n\n    def to_json(self, path_or_buf=None, orient=None, date_format=None,\n        double_precision=10, force_ascii=True, date_unit='ms',\n        default_handler=None, lines=False, compression=None, index=True):\n        \"\"\"\n        Convert the object to a JSON string.\n\n        Note NaN's and None will be converted to null and datetime objects\n        will be converted to UNIX timestamps.\n\n        Parameters\n        ----------\n        path_or_buf : string or file handle, optional\n            File path or object. If not specified, the result is returned as\n            a string.\n        orient : string\n            Indication of expected JSON string format.\n\n            * Series\n\n              - default is 'index'\n              - allowed values are: {'split','records','index'}\n\n            * DataFrame\n\n              - default is 'columns'\n              - allowed values are:\n                {'split','records','index','columns','values'}\n\n            * The format of the JSON string\n\n              - 'split' : dict like {'index' -> [index],\n                'columns' -> [columns], 'data' -> [values]}\n              - 'records' : list like\n                [{column -> value}, ... , {column -> value}]\n              - 'index' : dict like {index -> {column -> value}}\n              - 'columns' : dict like {column -> {index -> value}}\n              - 'values' : just the values array\n              - 'table' : dict like {'schema': {schema}, 'data': {data}}\n                describing the data, and the data component is\n                like ``orient='records'``.\n\n                .. versionchanged:: 0.20.0\n\n        date_format : {None, 'epoch', 'iso'}\n            Type of date conversion. 'epoch' = epoch milliseconds,\n            'iso' = ISO8601. The default depends on the `orient`. For\n            ``orient='table'``, the default is 'iso'. For all other orients,\n            the default is 'epoch'.\n        double_precision : int, default 10\n            The number of decimal places to use when encoding\n            floating point values.\n        force_ascii : boolean, default True\n            Force encoded string to be ASCII.\n        date_unit : string, default 'ms' (milliseconds)\n            The time unit to encode to, governs timestamp and ISO8601\n            precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n            microsecond, and nanosecond respectively.\n        default_handler : callable, default None\n            Handler to call if object cannot otherwise be converted to a\n            suitable format for JSON. Should receive a single argument which is\n            the object to convert and return a serialisable object.\n        lines : boolean, default False\n            If 'orient' is 'records' write out line delimited json format. Will\n            throw ValueError if incorrect 'orient' since others are not list\n            like.\n\n            .. versionadded:: 0.19.0\n\n        compression : {None, 'gzip', 'bz2', 'zip', 'xz'}\n            A string representing the compression to use in the output file,\n            only used when the first argument is a filename.\n\n            .. versionadded:: 0.21.0\n\n        index : boolean, default True\n            Whether to include the index values in the JSON string. Not\n            including the index (``index=False``) is only supported when\n            orient is 'split' or 'table'.\n\n            .. versionadded:: 0.23.0\n\n        See Also\n        --------\n        pandas.read_json\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n        ...                   index=['row 1', 'row 2'],\n        ...                   columns=['col 1', 'col 2'])\n        >>> df.to_json(orient='split')\n        '{\"columns\":[\"col 1\",\"col 2\"],\n          \"index\":[\"row 1\",\"row 2\"],\n          \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n        Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n        Note that index labels are not preserved with this encoding.\n\n        >>> df.to_json(orient='records')\n        '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n        Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n        >>> df.to_json(orient='index')\n        '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n        >>> df.to_json(orient='columns')\n        '{\"col 1\":{\"row 1\":\"a\",\"row 2\":\"c\"},\"col 2\":{\"row 1\":\"b\",\"row 2\":\"d\"}}'\n\n        Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n        >>> df.to_json(orient='values')\n        '[[\"a\",\"b\"],[\"c\",\"d\"]]'\n\n        Encoding with Table Schema\n\n        >>> df.to_json(orient='table')\n        '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                                {\"name\": \"col 1\", \"type\": \"string\"},\n                                {\"name\": \"col 2\", \"type\": \"string\"}],\n                     \"primaryKey\": \"index\",\n                     \"pandas_version\": \"0.20.0\"},\n          \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n                   {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n        \"\"\"\n        from pandas.io import json\n        if date_format is None and orient == 'table':\n            date_format = 'iso'\n        elif date_format is None:\n            date_format = 'epoch'\n        return json.to_json(path_or_buf=path_or_buf, obj=self, orient=\n            orient, date_format=date_format, double_precision=\n            double_precision, force_ascii=force_ascii, date_unit=date_unit,\n            default_handler=default_handler, lines=lines, compression=\n            compression, index=index)\n\n    def to_hdf(self, path_or_buf, key, **kwargs):\n        \"\"\"\n        Write the contained data to an HDF5 file using HDFStore.\n\n        Hierarchical Data Format (HDF) is self-describing, allowing an\n        application to interpret the structure and contents of a file with\n        no outside information. One HDF file can hold a mix of related objects\n        which can be accessed as a group or as individual objects.\n\n        In order to add another DataFrame or Series to an existing HDF file\n        please use append mode and a different a key.\n\n        For more information see the :ref:`user guide <io.hdf5>`.\n\n        Parameters\n        ----------\n        path_or_buf : str or pandas.HDFStore\n            File path or HDFStore object.\n        key : str\n            Identifier for the group in the store.\n        mode : {'a', 'w', 'r+'}, default 'a'\n            Mode to open file:\n\n            - 'w': write, a new file is created (an existing file with\n              the same name would be deleted).\n            - 'a': append, an existing file is opened for reading and\n              writing, and if the file does not exist it is created.\n            - 'r+': similar to 'a', but the file must already exist.\n        format : {'fixed', 'table'}, default 'fixed'\n            Possible values:\n\n            - 'fixed': Fixed format. Fast writing/reading. Not-appendable,\n              nor searchable.\n            - 'table': Table format. Write as a PyTables Table structure\n              which may perform worse but allow more flexible operations\n              like searching / selecting subsets of the data.\n        append : bool, default False\n            For Table formats, append the input data to the existing.\n        data_columns :  list of columns or True, optional\n            List of columns to create as indexed data columns for on-disk\n            queries, or True to use all columns. By default only the axes\n            of the object are indexed. See :ref:`io.hdf5-query-data-columns`.\n            Applicable only to format='table'.\n        complevel : {0-9}, optional\n            Specifies a compression level for data.\n            A value of 0 disables compression.\n        complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n            Specifies the compression library to be used.\n            As of v0.20.2 these additional compressors for Blosc are supported\n            (default if no compressor specified: 'blosc:blosclz'):\n            {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n            'blosc:zlib', 'blosc:zstd'}.\n            Specifying a compression library which is not available issues\n            a ValueError.\n        fletcher32 : bool, default False\n            If applying compression use the fletcher32 checksum.\n        dropna : bool, default False\n            If true, ALL nan rows will not be written to store.\n        errors : str, default 'strict'\n            Specifies how encoding and decoding errors are to be handled.\n            See the errors argument for :func:`open` for a full list\n            of options.\n\n        See Also\n        --------\n        DataFrame.read_hdf : Read from HDF file.\n        DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n        DataFrame.to_sql : Write to a sql table.\n        DataFrame.to_feather : Write out feather-format for DataFrames.\n        DataFrame.to_csv : Write out to a csv file.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},\n        ...                   index=['a', 'b', 'c'])\n        >>> df.to_hdf('data.h5', key='df', mode='w')\n\n        We can add another object to the same file:\n\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> s.to_hdf('data.h5', key='s')\n\n        Reading from HDF file:\n\n        >>> pd.read_hdf('data.h5', 'df')\n        A  B\n        a  1  4\n        b  2  5\n        c  3  6\n        >>> pd.read_hdf('data.h5', 's')\n        0    1\n        1    2\n        2    3\n        3    4\n        dtype: int64\n\n        Deleting file with data:\n\n        >>> import os\n        >>> os.remove('data.h5')\n\n        \"\"\"\n        from pandas.io import pytables\n        return pytables.to_hdf(path_or_buf, key, self, **kwargs)\n\n    def to_msgpack(self, path_or_buf=None, encoding='utf-8', **kwargs):\n        \"\"\"\n        msgpack (serialize) object to input file path\n\n        THIS IS AN EXPERIMENTAL LIBRARY and the storage format\n        may not be stable until a future release.\n\n        Parameters\n        ----------\n        path : string File path, buffer-like, or None\n            if None, return generated string\n        append : boolean whether to append to an existing msgpack\n            (default is False)\n        compress : type of compressor (zlib or blosc), default to None (no\n            compression)\n        \"\"\"\n        from pandas.io import packers\n        return packers.to_msgpack(path_or_buf, self, encoding=encoding, **\n            kwargs)\n\n    def to_sql(self, name, con, schema=None, if_exists='fail', index=True,\n        index_label=None, chunksize=None, dtype=None):\n        \"\"\"\n        Write records stored in a DataFrame to a SQL database.\n\n        Databases supported by SQLAlchemy [1]_ are supported. Tables can be\n        newly created, appended to, or overwritten.\n\n        Parameters\n        ----------\n        name : string\n            Name of SQL table.\n        con : sqlalchemy.engine.Engine or sqlite3.Connection\n            Using SQLAlchemy makes it possible to use any DB supported by that\n            library. Legacy support is provided for sqlite3.Connection objects.\n        schema : string, optional\n            Specify the schema (if database flavor supports this). If None, use\n            default schema.\n        if_exists : {'fail', 'replace', 'append'}, default 'fail'\n            How to behave if the table already exists.\n\n            * fail: Raise a ValueError.\n            * replace: Drop the table before inserting new values.\n            * append: Insert new values to the existing table.\n\n        index : boolean, default True\n            Write DataFrame index as a column. Uses `index_label` as the column\n            name in the table.\n        index_label : string or sequence, default None\n            Column label for index column(s). If None is given (default) and\n            `index` is True, then the index names are used.\n            A sequence should be given if the DataFrame uses MultiIndex.\n        chunksize : int, optional\n            Rows will be written in batches of this size at a time. By default,\n            all rows will be written at once.\n        dtype : dict, optional\n            Specifying the datatype for columns. The keys should be the column\n            names and the values should be the SQLAlchemy types or strings for\n            the sqlite3 legacy mode.\n\n        Raises\n        ------\n        ValueError\n            When the table already exists and `if_exists` is 'fail' (the\n            default).\n\n        See Also\n        --------\n        pandas.read_sql : read a DataFrame from a table\n\n        References\n        ----------\n        .. [1] http://docs.sqlalchemy.org\n        .. [2] https://www.python.org/dev/peps/pep-0249/\n\n        Examples\n        --------\n\n        Create an in-memory SQLite database.\n\n        >>> from sqlalchemy import create_engine\n        >>> engine = create_engine('sqlite://', echo=False)\n\n        Create a table from scratch with 3 rows.\n\n        >>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})\n        >>> df\n             name\n        0  User 1\n        1  User 2\n        2  User 3\n\n        >>> df.to_sql('users', con=engine)\n        >>> engine.execute(\"SELECT * FROM users\").fetchall()\n        [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]\n\n        >>> df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})\n        >>> df1.to_sql('users', con=engine, if_exists='append')\n        >>> engine.execute(\"SELECT * FROM users\").fetchall()\n        [(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),\n         (0, 'User 4'), (1, 'User 5')]\n\n        Overwrite the table with just ``df1``.\n\n        >>> df1.to_sql('users', con=engine, if_exists='replace',\n        ...            index_label='id')\n        >>> engine.execute(\"SELECT * FROM users\").fetchall()\n        [(0, 'User 4'), (1, 'User 5')]\n\n        Specify the dtype (especially useful for integers with missing values).\n        Notice that while pandas is forced to store the data as floating point,\n        the database supports nullable integers. When fetching the data with\n        Python, we get back integer scalars.\n\n        >>> df = pd.DataFrame({\"A\": [1, None, 2]})\n        >>> df\n             A\n        0  1.0\n        1  NaN\n        2  2.0\n\n        >>> from sqlalchemy.types import Integer\n        >>> df.to_sql('integers', con=engine, index=False,\n        ...           dtype={\"A\": Integer()})\n\n        >>> engine.execute(\"SELECT * FROM integers\").fetchall()\n        [(1,), (None,), (2,)]\n        \"\"\"\n        from pandas.io import sql\n        sql.to_sql(self, name, con, schema=schema, if_exists=if_exists,\n            index=index, index_label=index_label, chunksize=chunksize,\n            dtype=dtype)\n\n    def to_pickle(self, path, compression='infer', protocol=pkl.\n        HIGHEST_PROTOCOL):\n        \"\"\"\n        Pickle (serialize) object to file.\n\n        Parameters\n        ----------\n        path : str\n            File path where the pickled object will be stored.\n        compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None},         default 'infer'\n            A string representing the compression to use in the output file. By\n            default, infers from the file extension in specified path.\n\n            .. versionadded:: 0.20.0\n        protocol : int\n            Int which indicates which protocol should be used by the pickler,\n            default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible\n            values for this parameter depend on the version of Python. For\n            Python 2.x, possible values are 0, 1, 2. For Python>=3.0, 3 is a\n            valid value. For Python >= 3.4, 4 is a valid value. A negative\n            value for the protocol parameter is equivalent to setting its value\n            to HIGHEST_PROTOCOL.\n\n            .. [1] https://docs.python.org/3/library/pickle.html\n            .. versionadded:: 0.21.0\n\n        See Also\n        --------\n        read_pickle : Load pickled pandas object (or any object) from file.\n        DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n        DataFrame.to_sql : Write DataFrame to a SQL database.\n        DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n        Examples\n        --------\n        >>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n        >>> original_df\n           foo  bar\n        0    0    5\n        1    1    6\n        2    2    7\n        3    3    8\n        4    4    9\n        >>> original_df.to_pickle(\"./dummy.pkl\")\n\n        >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n        >>> unpickled_df\n           foo  bar\n        0    0    5\n        1    1    6\n        2    2    7\n        3    3    8\n        4    4    9\n\n        >>> import os\n        >>> os.remove(\"./dummy.pkl\")\n        \"\"\"\n        from pandas.io.pickle import to_pickle\n        return to_pickle(self, path, compression=compression, protocol=protocol\n            )\n\n    def to_clipboard(self, excel=True, sep=None, **kwargs):\n        \"\"\"\n        Copy object to the system clipboard.\n\n        Write a text representation of object to the system clipboard.\n        This can be pasted into Excel, for example.\n\n        Parameters\n        ----------\n        excel : bool, default True\n            - True, use the provided separator, writing in a csv format for\n              allowing easy pasting into excel.\n            - False, write a string representation of the object to the\n              clipboard.\n\n        sep : str, default ``'\\\\t'``\n            Field delimiter.\n        **kwargs\n            These parameters will be passed to DataFrame.to_csv.\n\n        See Also\n        --------\n        DataFrame.to_csv : Write a DataFrame to a comma-separated values\n            (csv) file.\n        read_clipboard : Read text from clipboard and pass to read_table.\n\n        Notes\n        -----\n        Requirements for your platform.\n\n          - Linux : `xclip`, or `xsel` (with `gtk` or `PyQt4` modules)\n          - Windows : none\n          - OS X : none\n\n        Examples\n        --------\n        Copy the contents of a DataFrame to the clipboard.\n\n        >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])\n        >>> df.to_clipboard(sep=',')\n        ... # Wrote the following to the system clipboard:\n        ... # ,A,B,C\n        ... # 0,1,2,3\n        ... # 1,4,5,6\n\n        We can omit the the index by passing the keyword `index` and setting\n        it to false.\n\n        >>> df.to_clipboard(sep=',', index=False)\n        ... # Wrote the following to the system clipboard:\n        ... # A,B,C\n        ... # 1,2,3\n        ... # 4,5,6\n        \"\"\"\n        from pandas.io import clipboards\n        clipboards.to_clipboard(self, excel=excel, sep=sep, **kwargs)\n\n    def to_xarray(self):\n        \"\"\"\n        Return an xarray object from the pandas object.\n\n        Returns\n        -------\n        a DataArray for a Series\n        a Dataset for a DataFrame\n        a DataArray for higher dims\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A' : [1, 1, 2],\n                               'B' : ['foo', 'bar', 'foo'],\n                               'C' : np.arange(4.,7)})\n        >>> df\n           A    B    C\n        0  1  foo  4.0\n        1  1  bar  5.0\n        2  2  foo  6.0\n\n        >>> df.to_xarray()\n        <xarray.Dataset>\n        Dimensions:  (index: 3)\n        Coordinates:\n          * index    (index) int64 0 1 2\n        Data variables:\n            A        (index) int64 1 1 2\n            B        (index) object 'foo' 'bar' 'foo'\n            C        (index) float64 4.0 5.0 6.0\n\n        >>> df = pd.DataFrame({'A' : [1, 1, 2],\n                               'B' : ['foo', 'bar', 'foo'],\n                               'C' : np.arange(4.,7)}\n                             ).set_index(['B','A'])\n        >>> df\n                 C\n        B   A\n        foo 1  4.0\n        bar 1  5.0\n        foo 2  6.0\n\n        >>> df.to_xarray()\n        <xarray.Dataset>\n        Dimensions:  (A: 2, B: 2)\n        Coordinates:\n          * B        (B) object 'bar' 'foo'\n          * A        (A) int64 1 2\n        Data variables:\n            C        (B, A) float64 5.0 nan 4.0 6.0\n\n        >>> p = pd.Panel(np.arange(24).reshape(4,3,2),\n                         items=list('ABCD'),\n                         major_axis=pd.date_range('20130101', periods=3),\n                         minor_axis=['first', 'second'])\n        >>> p\n        <class 'pandas.core.panel.Panel'>\n        Dimensions: 4 (items) x 3 (major_axis) x 2 (minor_axis)\n        Items axis: A to D\n        Major_axis axis: 2013-01-01 00:00:00 to 2013-01-03 00:00:00\n        Minor_axis axis: first to second\n\n        >>> p.to_xarray()\n        <xarray.DataArray (items: 4, major_axis: 3, minor_axis: 2)>\n        array([[[ 0,  1],\n                [ 2,  3],\n                [ 4,  5]],\n               [[ 6,  7],\n                [ 8,  9],\n                [10, 11]],\n               [[12, 13],\n                [14, 15],\n                [16, 17]],\n               [[18, 19],\n                [20, 21],\n                [22, 23]]])\n        Coordinates:\n          * items       (items) object 'A' 'B' 'C' 'D'\n          * major_axis  (major_axis) datetime64[ns] 2013-01-01 2013-01-02 2013-01-03  # noqa\n          * minor_axis  (minor_axis) object 'first' 'second'\n\n        Notes\n        -----\n        See the `xarray docs <http://xarray.pydata.org/en/stable/>`__\n        \"\"\"\n        try:\n            import xarray\n        except ImportError:\n            raise ImportError(\n                \"\"\"the xarray library is not installed\nyou can install via conda\nconda install xarray\nor via pip\npip install xarray\n\"\"\"\n                )\n        if self.ndim == 1:\n            return xarray.DataArray.from_series(self)\n        elif self.ndim == 2:\n            return xarray.Dataset.from_dataframe(self)\n        coords = [(a, self._get_axis(a)) for a in self._AXIS_ORDERS]\n        return xarray.DataArray(self, coords=coords)\n    _shared_docs['to_latex'] = \"\"\"\n        Render an object to a tabular environment table. You can splice\n        this into a LaTeX document. Requires \\\\\\\\usepackage{booktabs}.\n\n        .. versionchanged:: 0.20.2\n           Added to Series\n\n        `to_latex`-specific options:\n\n        bold_rows : boolean, default False\n            Make the row labels bold in the output\n        column_format : str, default None\n            The columns format as specified in `LaTeX table format\n            <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g 'rcl' for 3\n            columns\n        longtable : boolean, default will be read from the pandas config module\n            Default: False.\n            Use a longtable environment instead of tabular. Requires adding\n            a \\\\\\\\usepackage{longtable} to your LaTeX preamble.\n        escape : boolean, default will be read from the pandas config module\n            Default: True.\n            When set to False prevents from escaping latex special\n            characters in column names.\n        encoding : str, default None\n            A string representing the encoding to use in the output file,\n            defaults to 'ascii' on Python 2 and 'utf-8' on Python 3.\n        decimal : string, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe.\n\n            .. versionadded:: 0.18.0\n\n        multicolumn : boolean, default True\n            Use \\\\multicolumn to enhance MultiIndex columns.\n            The default will be read from the config module.\n\n            .. versionadded:: 0.20.0\n\n        multicolumn_format : str, default 'l'\n            The alignment for multicolumns, similar to `column_format`\n            The default will be read from the config module.\n\n            .. versionadded:: 0.20.0\n\n        multirow : boolean, default False\n            Use \\\\multirow to enhance MultiIndex rows.\n            Requires adding a \\\\\\\\usepackage{multirow} to your LaTeX preamble.\n            Will print centered labels (instead of top-aligned)\n            across the contained rows, separating groups via clines.\n            The default will be read from the pandas config module.\n\n            .. versionadded:: 0.20.0\n            \"\"\"\n\n    @Substitution(header=\n        'Write out the column names. If a list of strings is given, it is assumed to be aliases for the column names.'\n        )\n    @Appender(_shared_docs['to_latex'] % _shared_doc_kwargs)\n    def to_latex(self, buf=None, columns=None, col_space=None, header=True,\n        index=True, na_rep='NaN', formatters=None, float_format=None,\n        sparsify=None, index_names=True, bold_rows=False, column_format=\n        None, longtable=None, escape=None, encoding=None, decimal='.',\n        multicolumn=None, multicolumn_format=None, multirow=None):\n        if self.ndim == 1:\n            self = self.to_frame()\n        if longtable is None:\n            longtable = config.get_option('display.latex.longtable')\n        if escape is None:\n            escape = config.get_option('display.latex.escape')\n        if multicolumn is None:\n            multicolumn = config.get_option('display.latex.multicolumn')\n        if multicolumn_format is None:\n            multicolumn_format = config.get_option(\n                'display.latex.multicolumn_format')\n        if multirow is None:\n            multirow = config.get_option('display.latex.multirow')\n        formatter = DataFrameFormatter(self, buf=buf, columns=columns,\n            col_space=col_space, na_rep=na_rep, header=header, index=index,\n            formatters=formatters, float_format=float_format, bold_rows=\n            bold_rows, sparsify=sparsify, index_names=index_names, escape=\n            escape, decimal=decimal)\n        formatter.to_latex(column_format=column_format, longtable=longtable,\n            encoding=encoding, multicolumn=multicolumn, multicolumn_format=\n            multicolumn_format, multirow=multirow)\n        if buf is None:\n            return formatter.buf.getvalue()\n\n    @classmethod\n    def _create_indexer(cls, name, indexer):\n        \"\"\"Create an indexer like _name in the class.\"\"\"\n        if getattr(cls, name, None) is None:\n            _indexer = functools.partial(indexer, name)\n            setattr(cls, name, property(_indexer, doc=indexer.__doc__))\n\n    def get(self, key, default=None):\n        \"\"\"\n        Get item from object for given key (DataFrame column, Panel slice,\n        etc.). Returns default value if not found.\n\n        Parameters\n        ----------\n        key : object\n\n        Returns\n        -------\n        value : type of items contained in object\n        \"\"\"\n        try:\n            return self[key]\n        except (KeyError, ValueError, IndexError):\n            return default\n\n    def __getitem__(self, item):\n        return self._get_item_cache(item)\n\n    def _get_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n        cache = self._item_cache\n        res = cache.get(item)\n        if res is None:\n            values = self._data.get(item)\n            res = self._box_item_values(item, values)\n            cache[item] = res\n            res._set_as_cached(item, self)\n            res._is_copy = self._is_copy\n        return res\n\n    def _set_as_cached(self, item, cacher):\n        \"\"\"Set the _cacher attribute on the calling object with a weakref to\n        cacher.\n        \"\"\"\n        self._cacher = item, weakref.ref(cacher)\n\n    def _reset_cacher(self):\n        \"\"\"Reset the cacher.\"\"\"\n        if hasattr(self, '_cacher'):\n            del self._cacher\n\n    def _iget_item_cache(self, item):\n        \"\"\"Return the cached item, item represents a positional indexer.\"\"\"\n        ax = self._info_axis\n        if ax.is_unique:\n            lower = self._get_item_cache(ax[item])\n        else:\n            lower = self._take(item, axis=self._info_axis_number)\n        return lower\n\n    def _box_item_values(self, key, values):\n        raise com.AbstractMethodError(self)\n\n    def _maybe_cache_changed(self, item, value):\n        \"\"\"The object has called back to us saying maybe it has changed.\n        \"\"\"\n        self._data.set(item, value, check=False)\n\n    @property\n    def _is_cached(self):\n        \"\"\"Return boolean indicating if self is cached or not.\"\"\"\n        return getattr(self, '_cacher', None) is not None\n\n    def _get_cacher(self):\n        \"\"\"return my cacher or None\"\"\"\n        cacher = getattr(self, '_cacher', None)\n        if cacher is not None:\n            cacher = cacher[1]()\n        return cacher\n\n    @property\n    def _is_view(self):\n        \"\"\"Return boolean indicating if self is view of another array \"\"\"\n        return self._data.is_view\n\n    def _maybe_update_cacher(self, clear=False, verify_is_copy=True):\n        \"\"\"\n        See if we need to update our parent cacher if clear, then clear our\n        cache.\n\n        Parameters\n        ----------\n        clear : boolean, default False\n            clear the item cache\n        verify_is_copy : boolean, default True\n            provide is_copy checks\n\n        \"\"\"\n        cacher = getattr(self, '_cacher', None)\n        if cacher is not None:\n            ref = cacher[1]()\n            if ref is None:\n                del self._cacher\n            else:\n                try:\n                    ref._maybe_cache_changed(cacher[0], self)\n                except Exception:\n                    pass\n        if verify_is_copy:\n            self._check_setitem_copy(stacklevel=5, t='referant')\n        if clear:\n            self._clear_item_cache()\n\n    def _clear_item_cache(self, i=None):\n        if i is not None:\n            self._item_cache.pop(i, None)\n        else:\n            self._item_cache.clear()\n\n    def _slice(self, slobj, axis=0, kind=None):\n        \"\"\"\n        Construct a slice of this container.\n\n        kind parameter is maintained for compatibility with Series slicing.\n        \"\"\"\n        axis = self._get_block_manager_axis(axis)\n        result = self._constructor(self._data.get_slice(slobj, axis=axis))\n        result = result.__finalize__(self)\n        is_copy = axis != 0 or result._is_view\n        result._set_is_copy(self, copy=is_copy)\n        return result\n\n    def _set_item(self, key, value):\n        self._data.set(key, value)\n        self._clear_item_cache()\n\n    def _set_is_copy(self, ref=None, copy=True):\n        if not copy:\n            self._is_copy = None\n        elif ref is not None:\n            self._is_copy = weakref.ref(ref)\n        else:\n            self._is_copy = None\n\n    def _check_is_chained_assignment_possible(self):\n        \"\"\"\n        Check if we are a view, have a cacher, and are of mixed type.\n        If so, then force a setitem_copy check.\n\n        Should be called just near setting a value\n\n        Will return a boolean if it we are a view and are cached, but a\n        single-dtype meaning that the cacher should be updated following\n        setting.\n        \"\"\"\n        if self._is_view and self._is_cached:\n            ref = self._get_cacher()\n            if ref is not None and ref._is_mixed_type:\n                self._check_setitem_copy(stacklevel=4, t='referant', force=True\n                    )\n            return True\n        elif self._is_copy:\n            self._check_setitem_copy(stacklevel=4, t='referant')\n        return False\n\n    def _check_setitem_copy(self, stacklevel=4, t='setting', force=False):\n        \"\"\"\n\n        Parameters\n        ----------\n        stacklevel : integer, default 4\n           the level to show of the stack when the error is output\n        t : string, the type of setting error\n        force : boolean, default False\n           if True, then force showing an error\n\n        validate if we are doing a settitem on a chained copy.\n\n        If you call this function, be sure to set the stacklevel such that the\n        user will see the error *at the level of setting*\n\n        It is technically possible to figure out that we are setting on\n        a copy even WITH a multi-dtyped pandas object. In other words, some\n        blocks may be views while other are not. Currently _is_view will ALWAYS\n        return False for multi-blocks to avoid having to handle this case.\n\n        df = DataFrame(np.arange(0,9), columns=['count'])\n        df['group'] = 'b'\n\n        # This technically need not raise SettingWithCopy if both are view\n        # (which is not # generally guaranteed but is usually True.  However,\n        # this is in general not a good practice and we recommend using .loc.\n        df.iloc[0:5]['group'] = 'a'\n\n        \"\"\"\n        if force or self._is_copy:\n            value = config.get_option('mode.chained_assignment')\n            if value is None:\n                return\n            try:\n                gc.collect(2)\n                if not gc.get_referents(self._is_copy()):\n                    self._is_copy = None\n                    return\n            except Exception:\n                pass\n            try:\n                if self._is_copy().shape == self.shape:\n                    self._is_copy = None\n                    return\n            except Exception:\n                pass\n            if isinstance(self._is_copy, string_types):\n                t = self._is_copy\n            elif t == 'referant':\n                t = \"\"\"\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\"\"\"\n            else:\n                t = \"\"\"\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\"\"\"\n            if value == 'raise':\n                raise com.SettingWithCopyError(t)\n            elif value == 'warn':\n                warnings.warn(t, com.SettingWithCopyWarning, stacklevel=\n                    stacklevel)\n\n    def __delitem__(self, key):\n        \"\"\"\n        Delete item\n        \"\"\"\n        deleted = False\n        maybe_shortcut = False\n        if hasattr(self, 'columns') and isinstance(self.columns, MultiIndex):\n            try:\n                maybe_shortcut = key not in self.columns._engine\n            except TypeError:\n                pass\n        if maybe_shortcut:\n            if not isinstance(key, tuple):\n                key = key,\n            for col in self.columns:\n                if isinstance(col, tuple) and col[:len(key)] == key:\n                    del self[col]\n                    deleted = True\n        if not deleted:\n            self._data.delete(key)\n        try:\n            del self._item_cache[key]\n        except KeyError:\n            pass\n    _shared_docs['_take'] = \"\"\"\n        Return the elements in the given *positional* indices along an axis.\n\n        This means that we are not indexing according to actual values in\n        the index attribute of the object. We are indexing according to the\n        actual position of the element in the object.\n\n        This is the internal version of ``.take()`` and will contain a wider\n        selection of parameters useful for internal use but not as suitable\n        for public usage.\n\n        Parameters\n        ----------\n        indices : array-like\n            An array of ints indicating which positions to take.\n        axis : int, default 0\n            The axis on which to select elements. \"0\" means that we are\n            selecting rows, \"1\" means that we are selecting columns, etc.\n        is_copy : bool, default True\n            Whether to return a copy of the original object or not.\n\n        Returns\n        -------\n        taken : type of caller\n            An array-like containing the elements taken from the object.\n\n        See Also\n        --------\n        numpy.ndarray.take\n        numpy.take\n        \"\"\"\n\n    @Appender(_shared_docs['_take'])\n    def _take(self, indices, axis=0, is_copy=True):\n        self._consolidate_inplace()\n        new_data = self._data.take(indices, axis=self.\n            _get_block_manager_axis(axis), verify=True)\n        result = self._constructor(new_data).__finalize__(self)\n        if is_copy:\n            if not result._get_axis(axis).equals(self._get_axis(axis)):\n                result._set_is_copy(self)\n        return result\n    _shared_docs['take'] = \"\"\"\n        Return the elements in the given *positional* indices along an axis.\n\n        This means that we are not indexing according to actual values in\n        the index attribute of the object. We are indexing according to the\n        actual position of the element in the object.\n\n        Parameters\n        ----------\n        indices : array-like\n            An array of ints indicating which positions to take.\n        axis : {0 or 'index', 1 or 'columns', None}, default 0\n            The axis on which to select elements. ``0`` means that we are\n            selecting rows, ``1`` means that we are selecting columns.\n        convert : bool, default True\n            Whether to convert negative indices into positive ones.\n            For example, ``-1`` would map to the ``len(axis) - 1``.\n            The conversions are similar to the behavior of indexing a\n            regular Python list.\n\n            .. deprecated:: 0.21.0\n               In the future, negative indices will always be converted.\n\n        is_copy : bool, default True\n            Whether to return a copy of the original object or not.\n        **kwargs\n            For compatibility with :meth:`numpy.take`. Has no effect on the\n            output.\n\n        Returns\n        -------\n        taken : type of caller\n            An array-like containing the elements taken from the object.\n\n        See Also\n        --------\n        DataFrame.loc : Select a subset of a DataFrame by labels.\n        DataFrame.iloc : Select a subset of a DataFrame by positions.\n        numpy.take : Take elements from an array along an axis.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('falcon', 'bird',    389.0),\n        ...                    ('parrot', 'bird',     24.0),\n        ...                    ('lion',   'mammal',   80.5),\n        ...                    ('monkey', 'mammal', np.nan)],\n        ...                    columns=['name', 'class', 'max_speed'],\n        ...                    index=[0, 2, 3, 1])\n        >>> df\n             name   class  max_speed\n        0  falcon    bird      389.0\n        2  parrot    bird       24.0\n        3    lion  mammal       80.5\n        1  monkey  mammal        NaN\n\n        Take elements at positions 0 and 3 along the axis 0 (default).\n\n        Note how the actual indices selected (0 and 1) do not correspond to\n        our selected indices 0 and 3. That's because we are selecting the 0th\n        and 3rd rows, not rows whose indices equal 0 and 3.\n\n        >>> df.take([0, 3])\n             name   class  max_speed\n        0  falcon    bird      389.0\n        1  monkey  mammal        NaN\n\n        Take elements at indices 1 and 2 along the axis 1 (column selection).\n\n        >>> df.take([1, 2], axis=1)\n            class  max_speed\n        0    bird      389.0\n        2    bird       24.0\n        3  mammal       80.5\n        1  mammal        NaN\n\n        We may take elements using negative integers for positive indices,\n        starting from the end of the object, just like with Python lists.\n\n        >>> df.take([-1, -2])\n             name   class  max_speed\n        1  monkey  mammal        NaN\n        3    lion  mammal       80.5\n        \"\"\"\n\n    @Appender(_shared_docs['take'])\n    def take(self, indices, axis=0, convert=None, is_copy=True, **kwargs):\n        if convert is not None:\n            msg = (\n                \"The 'convert' parameter is deprecated and will be removed in a future version.\"\n                )\n            warnings.warn(msg, FutureWarning, stacklevel=2)\n        nv.validate_take(tuple(), kwargs)\n        return self._take(indices, axis=axis, is_copy=is_copy)\n\n    def xs(self, key, axis=0, level=None, drop_level=True):\n        \"\"\"\n        Returns a cross-section (row(s) or column(s)) from the\n        Series/DataFrame. Defaults to cross-section on the rows (axis=0).\n\n        Parameters\n        ----------\n        key : object\n            Some label contained in the index, or partially in a MultiIndex\n        axis : int, default 0\n            Axis to retrieve cross-section on\n        level : object, defaults to first n levels (n=1 or len(key))\n            In case of a key partially contained in a MultiIndex, indicate\n            which levels are used. Levels can be referred by label or position.\n        drop_level : boolean, default True\n            If False, returns object with same levels as self.\n\n        Examples\n        --------\n        >>> df\n           A  B  C\n        a  4  5  2\n        b  4  0  9\n        c  9  7  3\n        >>> df.xs('a')\n        A    4\n        B    5\n        C    2\n        Name: a\n        >>> df.xs('C', axis=1)\n        a    2\n        b    9\n        c    3\n        Name: C\n\n        >>> df\n                            A  B  C  D\n        first second third\n        bar   one    1      4  1  8  9\n              two    1      7  5  5  0\n        baz   one    1      6  6  8  0\n              three  2      5  3  5  3\n        >>> df.xs(('baz', 'three'))\n               A  B  C  D\n        third\n        2      5  3  5  3\n        >>> df.xs('one', level=1)\n                     A  B  C  D\n        first third\n        bar   1      4  1  8  9\n        baz   1      6  6  8  0\n        >>> df.xs(('baz', 2), level=[0, 'third'])\n                A  B  C  D\n        second\n        three   5  3  5  3\n\n        Returns\n        -------\n        xs : Series or DataFrame\n\n        Notes\n        -----\n        xs is only for getting, not setting values.\n\n        MultiIndex Slicers is a generic way to get/set values on any level or\n        levels.  It is a superset of xs functionality, see\n        :ref:`MultiIndex Slicers <advanced.mi_slicers>`\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n        if level is not None:\n            loc, new_ax = labels.get_loc_level(key, level=level, drop_level\n                =drop_level)\n            indexer = [slice(None)] * self.ndim\n            indexer[axis] = loc\n            indexer = tuple(indexer)\n            result = self.iloc[indexer]\n            setattr(result, result._get_axis_name(axis), new_ax)\n            return result\n        if axis == 1:\n            return self[key]\n        self._consolidate_inplace()\n        index = self.index\n        if isinstance(index, MultiIndex):\n            loc, new_index = self.index.get_loc_level(key, drop_level=\n                drop_level)\n        else:\n            loc = self.index.get_loc(key)\n            if isinstance(loc, np.ndarray):\n                if loc.dtype == np.bool_:\n                    inds, = loc.nonzero()\n                    return self._take(inds, axis=axis)\n                else:\n                    return self._take(loc, axis=axis)\n            if not is_scalar(loc):\n                new_index = self.index[loc]\n        if is_scalar(loc):\n            new_values = self._data.fast_xs(loc)\n            if not is_list_like(new_values) or self.ndim == 1:\n                return com._maybe_box_datetimelike(new_values)\n            result = self._constructor_sliced(new_values, index=self.\n                columns, name=self.index[loc], dtype=new_values.dtype)\n        else:\n            result = self.iloc[loc]\n            result.index = new_index\n        result._set_is_copy(self, copy=not result._is_view)\n        return result\n    _xs = xs\n\n    def select(self, crit, axis=0):\n        \"\"\"Return data corresponding to axis labels matching criteria\n\n        .. deprecated:: 0.21.0\n            Use df.loc[df.index.map(crit)] to select via labels\n\n        Parameters\n        ----------\n        crit : function\n            To be called on each index (label). Should return True or False\n        axis : int\n\n        Returns\n        -------\n        selection : type of caller\n        \"\"\"\n        warnings.warn(\n            \"'select' is deprecated and will be removed in a future release. You can use .loc[labels.map(crit)] as a replacement\"\n            , FutureWarning, stacklevel=2)\n        axis = self._get_axis_number(axis)\n        axis_name = self._get_axis_name(axis)\n        axis_values = self._get_axis(axis)\n        if len(axis_values) > 0:\n            new_axis = axis_values[np.asarray([bool(crit(label)) for label in\n                axis_values])]\n        else:\n            new_axis = axis_values\n        return self.reindex(**{axis_name: new_axis})\n\n    def reindex_like(self, other, method=None, copy=True, limit=None,\n        tolerance=None):\n        \"\"\"Return an object with matching indices to myself.\n\n        Parameters\n        ----------\n        other : Object\n        method : string or None\n        copy : boolean, default True\n        limit : int, default None\n            Maximum number of consecutive labels to fill for inexact matches.\n        tolerance : optional\n            Maximum distance between labels of the other object and this\n            object for inexact matches. Can be list-like.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Notes\n        -----\n        Like calling s.reindex(index=other.index, columns=other.columns,\n                               method=...)\n\n        Returns\n        -------\n        reindexed : same as input\n        \"\"\"\n        d = other._construct_axes_dict(axes=self._AXIS_ORDERS, method=\n            method, copy=copy, limit=limit, tolerance=tolerance)\n        return self.reindex(**d)\n\n    def drop(self, labels=None, axis=0, index=None, columns=None, level=\n        None, inplace=False, errors='raise'):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if labels is not None:\n            if index is not None or columns is not None:\n                raise ValueError(\n                    \"Cannot specify both 'labels' and 'index'/'columns'\")\n            axis_name = self._get_axis_name(axis)\n            axes = {axis_name: labels}\n        elif index is not None or columns is not None:\n            axes, _ = self._construct_axes_from_arguments((index, columns), {})\n        else:\n            raise ValueError(\n                \"Need to specify at least one of 'labels', 'index' or 'columns'\"\n                )\n        obj = self\n        for axis, labels in axes.items():\n            if labels is not None:\n                obj = obj._drop_axis(labels, axis, level=level, errors=errors)\n        if inplace:\n            self._update_inplace(obj)\n        else:\n            return obj\n\n    def _drop_axis(self, labels, axis, level=None, errors='raise'):\n        \"\"\"\n        Drop labels from specified axis. Used in the ``drop`` method\n        internally.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n        axis : int or axis name\n        level : int or level name, default None\n            For MultiIndex\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and existing labels are dropped.\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        axis_name = self._get_axis_name(axis)\n        axis = self._get_axis(axis)\n        if axis.is_unique:\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError('axis must be a MultiIndex')\n                new_axis = axis.drop(labels, level=level, errors=errors)\n            else:\n                new_axis = axis.drop(labels, errors=errors)\n            result = self.reindex(**{axis_name: new_axis})\n        else:\n            labels = _ensure_object(com._index_labels_to_array(labels))\n            if level is not None:\n                if not isinstance(axis, MultiIndex):\n                    raise AssertionError('axis must be a MultiIndex')\n                indexer = ~axis.get_level_values(level).isin(labels)\n                if errors == 'raise' and indexer.all():\n                    raise KeyError('{} not found in axis'.format(labels))\n            else:\n                indexer = ~axis.isin(labels)\n                labels_missing = (axis.get_indexer_for(labels) == -1).any()\n                if errors == 'raise' and labels_missing:\n                    raise KeyError('{} not found in axis'.format(labels))\n            slicer = [slice(None)] * self.ndim\n            slicer[self._get_axis_number(axis_name)] = indexer\n            result = self.loc[tuple(slicer)]\n        return result\n\n    def _update_inplace(self, result, verify_is_copy=True):\n        \"\"\"\n        Replace self internals with result.\n\n        Parameters\n        ----------\n        verify_is_copy : boolean, default True\n            provide is_copy checks\n\n        \"\"\"\n        self._reset_cache()\n        self._clear_item_cache()\n        self._data = getattr(result, '_data', result)\n        self._maybe_update_cacher(verify_is_copy=verify_is_copy)\n\n    def add_prefix(self, prefix):\n        \"\"\"\n        Prefix labels with string `prefix`.\n\n        For Series, the row labels are prefixed.\n        For DataFrame, the column labels are prefixed.\n\n        Parameters\n        ----------\n        prefix : str\n            The string to add before each label.\n\n        Returns\n        -------\n        Series or DataFrame\n            New Series or DataFrame with updated labels.\n\n        See Also\n        --------\n        Series.add_suffix: Suffix row labels with string `suffix`.\n        DataFrame.add_suffix: Suffix column labels with string `suffix`.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> s\n        0    1\n        1    2\n        2    3\n        3    4\n        dtype: int64\n\n        >>> s.add_prefix('item_')\n        item_0    1\n        item_1    2\n        item_2    3\n        item_3    4\n        dtype: int64\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3, 4],  'B': [3, 4, 5, 6]})\n        >>> df\n           A  B\n        0  1  3\n        1  2  4\n        2  3  5\n        3  4  6\n\n        >>> df.add_prefix('col_')\n             col_A  col_B\n        0       1       3\n        1       2       4\n        2       3       5\n        3       4       6\n        \"\"\"\n        new_data = self._data.add_prefix(prefix)\n        return self._constructor(new_data).__finalize__(self)\n\n    def add_suffix(self, suffix):\n        \"\"\"\n        Suffix labels with string `suffix`.\n\n        For Series, the row labels are suffixed.\n        For DataFrame, the column labels are suffixed.\n\n        Parameters\n        ----------\n        suffix : str\n            The string to add after each label.\n\n        Returns\n        -------\n        Series or DataFrame\n            New Series or DataFrame with updated labels.\n\n        See Also\n        --------\n        Series.add_prefix: Prefix row labels with string `prefix`.\n        DataFrame.add_prefix: Prefix column labels with string `prefix`.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> s\n        0    1\n        1    2\n        2    3\n        3    4\n        dtype: int64\n\n        >>> s.add_suffix('_item')\n        0_item    1\n        1_item    2\n        2_item    3\n        3_item    4\n        dtype: int64\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3, 4],  'B': [3, 4, 5, 6]})\n        >>> df\n           A  B\n        0  1  3\n        1  2  4\n        2  3  5\n        3  4  6\n\n        >>> df.add_suffix('_col')\n             A_col  B_col\n        0       1       3\n        1       2       4\n        2       3       5\n        3       4       6\n        \"\"\"\n        new_data = self._data.add_suffix(suffix)\n        return self._constructor(new_data).__finalize__(self)\n    _shared_docs['sort_values'] = \"\"\"\n        Sort by the values along either axis\n\n        Parameters\n        ----------%(optional_by)s\n        axis : %(axes_single_arg)s, default 0\n             Axis to be sorted\n        ascending : bool or list of bool, default True\n             Sort ascending vs. descending. Specify list for multiple sort\n             orders.  If this is a list of bools, must match the length of\n             the by.\n        inplace : bool, default False\n             if True, perform operation in-place\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n             Choice of sorting algorithm. See also ndarray.np.sort for more\n             information.  `mergesort` is the only stable algorithm. For\n             DataFrames, this option is only applied when sorting on a single\n             column or label.\n        na_position : {'first', 'last'}, default 'last'\n             `first` puts NaNs at the beginning, `last` puts NaNs at the end\n\n        Returns\n        -------\n        sorted_obj : %(klass)s\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\n        ...     'col1' : ['A', 'A', 'B', np.nan, 'D', 'C'],\n        ...     'col2' : [2, 1, 9, 8, 7, 4],\n        ...     'col3': [0, 1, 9, 4, 2, 3],\n        ... })\n        >>> df\n            col1 col2 col3\n        0   A    2    0\n        1   A    1    1\n        2   B    9    9\n        3   NaN  8    4\n        4   D    7    2\n        5   C    4    3\n\n        Sort by col1\n\n        >>> df.sort_values(by=['col1'])\n            col1 col2 col3\n        0   A    2    0\n        1   A    1    1\n        2   B    9    9\n        5   C    4    3\n        4   D    7    2\n        3   NaN  8    4\n\n        Sort by multiple columns\n\n        >>> df.sort_values(by=['col1', 'col2'])\n            col1 col2 col3\n        1   A    1    1\n        0   A    2    0\n        2   B    9    9\n        5   C    4    3\n        4   D    7    2\n        3   NaN  8    4\n\n        Sort Descending\n\n        >>> df.sort_values(by='col1', ascending=False)\n            col1 col2 col3\n        4   D    7    2\n        5   C    4    3\n        2   B    9    9\n        0   A    2    0\n        1   A    1    1\n        3   NaN  8    4\n\n        Putting NAs first\n\n        >>> df.sort_values(by='col1', ascending=False, na_position='first')\n            col1 col2 col3\n        3   NaN  8    4\n        4   D    7    2\n        5   C    4    3\n        2   B    9    9\n        0   A    2    0\n        1   A    1    1\n        \"\"\"\n\n    def sort_values(self, by=None, axis=0, ascending=True, inplace=False,\n        kind='quicksort', na_position='last'):\n        \"\"\"\n        NOT IMPLEMENTED: do not call this method, as sorting values is not\n        supported for Panel objects and will raise an error.\n        \"\"\"\n        raise NotImplementedError(\n            'sort_values has not been implemented on Panel or Panel4D objects.'\n            )\n    _shared_docs['sort_index'] = \"\"\"\n        Sort object by labels (along an axis)\n\n        Parameters\n        ----------\n        axis : %(axes)s to direct sorting\n        level : int or level name or list of ints or list of level names\n            if not None, sort on values in specified index level(s)\n        ascending : boolean, default True\n            Sort ascending vs. descending\n        inplace : bool, default False\n            if True, perform operation in-place\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n             Choice of sorting algorithm. See also ndarray.np.sort for more\n             information.  `mergesort` is the only stable algorithm. For\n             DataFrames, this option is only applied when sorting on a single\n             column or label.\n        na_position : {'first', 'last'}, default 'last'\n             `first` puts NaNs at the beginning, `last` puts NaNs at the end.\n             Not implemented for MultiIndex.\n        sort_remaining : bool, default True\n            if true and sorting by level and index is multilevel, sort by other\n            levels too (in order) after sorting by specified level\n\n        Returns\n        -------\n        sorted_obj : %(klass)s\n        \"\"\"\n\n    @Appender(_shared_docs['sort_index'] % dict(axes='axes', klass='NDFrame'))\n    def sort_index(self, axis=0, level=None, ascending=True, inplace=False,\n        kind='quicksort', na_position='last', sort_remaining=True):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n        axis_name = self._get_axis_name(axis)\n        labels = self._get_axis(axis)\n        if level is not None:\n            raise NotImplementedError('level is not implemented')\n        if inplace:\n            raise NotImplementedError('inplace is not implemented')\n        sort_index = labels.argsort()\n        if not ascending:\n            sort_index = sort_index[::-1]\n        new_axis = labels.take(sort_index)\n        return self.reindex(**{axis_name: new_axis})\n    _shared_docs['reindex'] = \"\"\"\n        Conform %(klass)s to new index with optional filling logic, placing\n        NA/NaN in locations having no value in the previous index. A new object\n        is produced unless the new index is equivalent to the current one and\n        copy=False\n\n        Parameters\n        ----------\n        %(optional_labels)s\n        %(axes)s : array-like, optional (should be specified using keywords)\n            New labels / index to conform to. Preferably an Index object to\n            avoid duplicating data\n        %(optional_axis)s\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}, optional\n            method to use for filling holes in reindexed DataFrame.\n            Please note: this is only applicable to DataFrames/Series with a\n            monotonically increasing/decreasing index.\n\n            * default: don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap\n\n        copy : boolean, default True\n            Return a new object, even if the passed indexes are the same\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Examples\n        --------\n\n        ``DataFrame.reindex`` supports two calling conventions\n\n        * ``(index=index_labels, columns=column_labels, ...)``\n        * ``(labels, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        Create a dataframe with some fictional data.\n\n        >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n        >>> df = pd.DataFrame({\n        ...      'http_status': [200,200,404,404,301],\n        ...      'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n        ...       index=index)\n        >>> df\n                   http_status  response_time\n        Firefox            200           0.04\n        Chrome             200           0.02\n        Safari             404           0.07\n        IE10               404           0.08\n        Konqueror          301           1.00\n\n        Create a new index and reindex the dataframe. By default\n        values in the new index that do not have corresponding\n        records in the dataframe are assigned ``NaN``.\n\n        >>> new_index= ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n        ...             'Chrome']\n        >>> df.reindex(new_index)\n                       http_status  response_time\n        Safari               404.0           0.07\n        Iceweasel              NaN            NaN\n        Comodo Dragon          NaN            NaN\n        IE10                 404.0           0.08\n        Chrome               200.0           0.02\n\n        We can fill in the missing values by passing a value to\n        the keyword ``fill_value``. Because the index is not monotonically\n        increasing or decreasing, we cannot use arguments to the keyword\n        ``method`` to fill the ``NaN`` values.\n\n        >>> df.reindex(new_index, fill_value=0)\n                       http_status  response_time\n        Safari                 404           0.07\n        Iceweasel                0           0.00\n        Comodo Dragon            0           0.00\n        IE10                   404           0.08\n        Chrome                 200           0.02\n\n        >>> df.reindex(new_index, fill_value='missing')\n                      http_status response_time\n        Safari                404          0.07\n        Iceweasel         missing       missing\n        Comodo Dragon     missing       missing\n        IE10                  404          0.08\n        Chrome                200          0.02\n\n        We can also reindex the columns.\n\n        >>> df.reindex(columns=['http_status', 'user_agent'])\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        Or we can use \"axis-style\" keyword arguments\n\n        >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n                   http_status  user_agent\n        Firefox            200         NaN\n        Chrome             200         NaN\n        Safari             404         NaN\n        IE10               404         NaN\n        Konqueror          301         NaN\n\n        To further illustrate the filling functionality in\n        ``reindex``, we will create a dataframe with a\n        monotonically increasing index (for example, a sequence\n        of dates).\n\n        >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n        >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n        ...                    index=date_index)\n        >>> df2\n                    prices\n        2010-01-01     100\n        2010-01-02     101\n        2010-01-03     NaN\n        2010-01-04     100\n        2010-01-05      89\n        2010-01-06      88\n\n        Suppose we decide to expand the dataframe to cover a wider\n        date range.\n\n        >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n        >>> df2.reindex(date_index2)\n                    prices\n        2009-12-29     NaN\n        2009-12-30     NaN\n        2009-12-31     NaN\n        2010-01-01     100\n        2010-01-02     101\n        2010-01-03     NaN\n        2010-01-04     100\n        2010-01-05      89\n        2010-01-06      88\n        2010-01-07     NaN\n\n        The index entries that did not have a value in the original data frame\n        (for example, '2009-12-29') are by default filled with ``NaN``.\n        If desired, we can fill in the missing values using one of several\n        options.\n\n        For example, to back-propagate the last valid value to fill the ``NaN``\n        values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n        >>> df2.reindex(date_index2, method='bfill')\n                    prices\n        2009-12-29     100\n        2009-12-30     100\n        2009-12-31     100\n        2010-01-01     100\n        2010-01-02     101\n        2010-01-03     NaN\n        2010-01-04     100\n        2010-01-05      89\n        2010-01-06      88\n        2010-01-07     NaN\n\n        Please note that the ``NaN`` value present in the original dataframe\n        (at index value 2010-01-03) will not be filled by any of the\n        value propagation schemes. This is because filling while reindexing\n        does not look at dataframe values, but only compares the original and\n        desired indexes. If you do want to fill in the ``NaN`` values present\n        in the original dataframe, use the ``fillna()`` method.\n\n        See the :ref:`user guide <basics.reindexing>` for more.\n\n        Returns\n        -------\n        reindexed : %(klass)s\n        \"\"\"\n\n    @Appender(_shared_docs['reindex'] % dict(axes='axes', klass='NDFrame',\n        optional_labels='', optional_axis=''))\n    def reindex(self, *args, **kwargs):\n        axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n        method = missing.clean_reindex_fill_method(kwargs.pop('method', None))\n        level = kwargs.pop('level', None)\n        copy = kwargs.pop('copy', True)\n        limit = kwargs.pop('limit', None)\n        tolerance = kwargs.pop('tolerance', None)\n        fill_value = kwargs.pop('fill_value', None)\n        kwargs.pop('axis', None)\n        if kwargs:\n            raise TypeError(\n                'reindex() got an unexpected keyword argument \"{0}\"'.format\n                (list(kwargs.keys())[0]))\n        self._consolidate_inplace()\n        if all(self._get_axis(axis).identical(ax) for axis, ax in axes.\n            items() if ax is not None):\n            if copy:\n                return self.copy()\n            return self\n        if self._needs_reindex_multi(axes, method, level):\n            try:\n                return self._reindex_multi(axes, copy, fill_value)\n            except Exception:\n                pass\n        return self._reindex_axes(axes, level, limit, tolerance, method,\n            fill_value, copy).__finalize__(self)\n\n    def _reindex_axes(self, axes, level, limit, tolerance, method,\n        fill_value, copy):\n        \"\"\"Perform the reindex for all the axes.\"\"\"\n        obj = self\n        for a in self._AXIS_ORDERS:\n            labels = axes[a]\n            if labels is None:\n                continue\n            ax = self._get_axis(a)\n            new_index, indexer = ax.reindex(labels, level=level, limit=\n                limit, tolerance=tolerance, method=method)\n            axis = self._get_axis_number(a)\n            obj = obj._reindex_with_indexers({axis: [new_index, indexer]},\n                fill_value=fill_value, copy=copy, allow_dups=False)\n        return obj\n\n    def _needs_reindex_multi(self, axes, method, level):\n        \"\"\"Check if we do need a multi reindex.\"\"\"\n        return (com._count_not_none(*axes.values()) == self._AXIS_LEN and \n            method is None and level is None and not self._is_mixed_type)\n\n    def _reindex_multi(self, axes, copy, fill_value):\n        return NotImplemented\n    _shared_docs['reindex_axis'] = \"\"\"Conform input object to new index with optional\n        filling logic, placing NA/NaN in locations having no value in the\n        previous index. A new object is produced unless the new index is\n        equivalent to the current one and copy=False\n\n        Parameters\n        ----------\n        labels : array-like\n            New labels / index to conform to. Preferably an Index object to\n            avoid duplicating data\n        axis : %(axes_single_arg)s\n        method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}, optional\n            Method to use for filling holes in reindexed DataFrame:\n\n            * default: don't fill gaps\n            * pad / ffill: propagate last valid observation forward to next\n              valid\n            * backfill / bfill: use next valid observation to fill gap\n            * nearest: use nearest valid observations to fill gap\n\n        copy : boolean, default True\n            Return a new object, even if the passed indexes are the same\n        level : int or name\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n        limit : int, default None\n            Maximum number of consecutive elements to forward or backward fill\n        tolerance : optional\n            Maximum distance between original and new labels for inexact\n            matches. The values of the index at the matching locations most\n            satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n            Tolerance may be a scalar value, which applies the same tolerance\n            to all values, or list-like, which applies variable tolerance per\n            element. List-like includes list, tuple, array, Series, and must be\n            the same size as the index and its dtype must exactly match the\n            index's type.\n\n            .. versionadded:: 0.21.0 (list-like tolerance)\n\n        Examples\n        --------\n        >>> df.reindex_axis(['A', 'B', 'C'], axis=1)\n\n        See Also\n        --------\n        reindex, reindex_like\n\n        Returns\n        -------\n        reindexed : %(klass)s\n        \"\"\"\n\n    @Appender(_shared_docs['reindex_axis'] % _shared_doc_kwargs)\n    def reindex_axis(self, labels, axis=0, method=None, level=None, copy=\n        True, limit=None, fill_value=None):\n        msg = (\n            \"'.reindex_axis' is deprecated and will be removed in a future version. Use '.reindex' instead.\"\n            )\n        self._consolidate_inplace()\n        axis_name = self._get_axis_name(axis)\n        axis_values = self._get_axis(axis_name)\n        method = missing.clean_reindex_fill_method(method)\n        warnings.warn(msg, FutureWarning, stacklevel=3)\n        new_index, indexer = axis_values.reindex(labels, method, level,\n            limit=limit)\n        return self._reindex_with_indexers({axis: [new_index, indexer]},\n            fill_value=fill_value, copy=copy)\n\n    def _reindex_with_indexers(self, reindexers, fill_value=None, copy=\n        False, allow_dups=False):\n        \"\"\"allow_dups indicates an internal call here \"\"\"\n        new_data = self._data\n        for axis in sorted(reindexers.keys()):\n            index, indexer = reindexers[axis]\n            baxis = self._get_block_manager_axis(axis)\n            if index is None:\n                continue\n            index = _ensure_index(index)\n            if indexer is not None:\n                indexer = _ensure_int64(indexer)\n            new_data = new_data.reindex_indexer(index, indexer, axis=baxis,\n                fill_value=fill_value, allow_dups=allow_dups, copy=copy)\n        if copy and new_data is self._data:\n            new_data = new_data.copy()\n        return self._constructor(new_data).__finalize__(self)\n\n    def _reindex_axis(self, new_index, fill_method, axis, copy):\n        new_data = self._data.reindex_axis(new_index, axis=axis, method=\n            fill_method, copy=copy)\n        if new_data is self._data and not copy:\n            return self\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def filter(self, items=None, like=None, regex=None, axis=None):\n        \"\"\"\n        Subset rows or columns of dataframe according to labels in\n        the specified index.\n\n        Note that this routine does not filter a dataframe on its\n        contents. The filter is applied to the labels of the index.\n\n        Parameters\n        ----------\n        items : list-like\n            List of info axis to restrict to (must not all be present)\n        like : string\n            Keep info axis where \"arg in col == True\"\n        regex : string (regular expression)\n            Keep info axis with re.search(regex, col) == True\n        axis : int or string axis name\n            The axis to filter on.  By default this is the info axis,\n            'index' for Series, 'columns' for DataFrame\n\n        Returns\n        -------\n        same type as input object\n\n        Examples\n        --------\n        >>> df\n        one  two  three\n        mouse     1    2      3\n        rabbit    4    5      6\n\n        >>> # select columns by name\n        >>> df.filter(items=['one', 'three'])\n        one  three\n        mouse     1      3\n        rabbit    4      6\n\n        >>> # select columns by regular expression\n        >>> df.filter(regex='e$', axis=1)\n        one  three\n        mouse     1      3\n        rabbit    4      6\n\n        >>> # select rows containing 'bbi'\n        >>> df.filter(like='bbi', axis=0)\n        one  two  three\n        rabbit    4    5      6\n\n        See Also\n        --------\n        pandas.DataFrame.loc\n\n        Notes\n        -----\n        The ``items``, ``like``, and ``regex`` parameters are\n        enforced to be mutually exclusive.\n\n        ``axis`` defaults to the info axis that is used when indexing\n        with ``[]``.\n        \"\"\"\n        import re\n        nkw = com._count_not_none(items, like, regex)\n        if nkw > 1:\n            raise TypeError(\n                'Keyword arguments `items`, `like`, or `regex` are mutually exclusive'\n                )\n        if axis is None:\n            axis = self._info_axis_name\n        labels = self._get_axis(axis)\n        if items is not None:\n            name = self._get_axis_name(axis)\n            return self.reindex(**{name: [r for r in items if r in labels]})\n        elif like:\n\n            def f(x):\n                return like in to_str(x)\n            values = labels.map(f)\n            return self.loc(axis=axis)[values]\n        elif regex:\n\n            def f(x):\n                return matcher.search(to_str(x)) is not None\n            matcher = re.compile(regex)\n            values = labels.map(f)\n            return self.loc(axis=axis)[values]\n        else:\n            raise TypeError('Must pass either `items`, `like`, or `regex`')\n\n    def head(self, n=5):\n        \"\"\"\n        Return the first `n` rows.\n\n        This function returns the first `n` rows for the object based\n        on position. It is useful for quickly testing if your object\n        has the right type of data in it.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Number of rows to select.\n\n        Returns\n        -------\n        obj_head : type of caller\n            The first `n` rows of the caller object.\n\n        See Also\n        --------\n        pandas.DataFrame.tail: Returns the last `n` rows.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'animal':['alligator', 'bee', 'falcon', 'lion',\n        ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n        >>> df\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n        5     parrot\n        6      shark\n        7      whale\n        8      zebra\n\n        Viewing the first 5 lines\n\n        >>> df.head()\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n\n        Viewing the first `n` lines (three in this case)\n\n        >>> df.head(3)\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        \"\"\"\n        return self.iloc[:n]\n\n    def tail(self, n=5):\n        \"\"\"\n        Return the last `n` rows.\n\n        This function returns last `n` rows from the object based on\n        position. It is useful for quickly verifying data, for example,\n        after sorting or appending rows.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Number of rows to select.\n\n        Returns\n        -------\n        type of caller\n            The last `n` rows of the caller object.\n\n        See Also\n        --------\n        pandas.DataFrame.head : The first `n` rows of the caller object.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'animal':['alligator', 'bee', 'falcon', 'lion',\n        ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n        >>> df\n              animal\n        0  alligator\n        1        bee\n        2     falcon\n        3       lion\n        4     monkey\n        5     parrot\n        6      shark\n        7      whale\n        8      zebra\n\n        Viewing the last 5 lines\n\n        >>> df.tail()\n           animal\n        4  monkey\n        5  parrot\n        6   shark\n        7   whale\n        8   zebra\n\n        Viewing the last `n` lines (three in this case)\n\n        >>> df.tail(3)\n          animal\n        6  shark\n        7  whale\n        8  zebra\n        \"\"\"\n        if n == 0:\n            return self.iloc[0:0]\n        return self.iloc[-n:]\n\n    def sample(self, n=None, frac=None, replace=False, weights=None,\n        random_state=None, axis=None):\n        \"\"\"\n        Return a random sample of items from an axis of object.\n\n        You can use `random_state` for reproducibility.\n\n        Parameters\n        ----------\n        n : int, optional\n            Number of items from axis to return. Cannot be used with `frac`.\n            Default = 1 if `frac` = None.\n        frac : float, optional\n            Fraction of axis items to return. Cannot be used with `n`.\n        replace : boolean, optional\n            Sample with or without replacement. Default = False.\n        weights : str or ndarray-like, optional\n            Default 'None' results in equal probability weighting.\n            If passed a Series, will align with target object on index. Index\n            values in weights not found in sampled object will be ignored and\n            index values in sampled object not in weights will be assigned\n            weights of zero.\n            If called on a DataFrame, will accept the name of a column\n            when axis = 0.\n            Unless weights are a Series, weights must be same length as axis\n            being sampled.\n            If weights do not sum to 1, they will be normalized to sum to 1.\n            Missing values in the weights column will be treated as zero.\n            inf and -inf values not allowed.\n        random_state : int or numpy.random.RandomState, optional\n            Seed for the random number generator (if int), or numpy RandomState\n            object.\n        axis : int or string, optional\n            Axis to sample. Accepts axis number or name. Default is stat axis\n            for given data type (0 for Series and DataFrames, 1 for Panels).\n\n        Returns\n        -------\n        A new object of same type as caller.\n\n        Examples\n        --------\n        Generate an example ``Series`` and ``DataFrame``:\n\n        >>> s = pd.Series(np.random.randn(50))\n        >>> s.head()\n        0   -0.038497\n        1    1.820773\n        2   -0.972766\n        3   -1.598270\n        4   -1.095526\n        dtype: float64\n        >>> df = pd.DataFrame(np.random.randn(50, 4), columns=list('ABCD'))\n        >>> df.head()\n                  A         B         C         D\n        0  0.016443 -2.318952 -0.566372 -1.028078\n        1 -1.051921  0.438836  0.658280 -0.175797\n        2 -1.243569 -0.364626 -0.215065  0.057736\n        3  1.768216  0.404512 -0.385604 -1.457834\n        4  1.072446 -1.137172  0.314194 -0.046661\n\n        Next extract a random sample from both of these objects...\n\n        3 random elements from the ``Series``:\n\n        >>> s.sample(n=3)\n        27   -0.994689\n        55   -1.049016\n        67   -0.224565\n        dtype: float64\n\n        And a random 10% of the ``DataFrame`` with replacement:\n\n        >>> df.sample(frac=0.1, replace=True)\n                   A         B         C         D\n        35  1.981780  0.142106  1.817165 -0.290805\n        49 -1.336199 -0.448634 -0.789640  0.217116\n        40  0.823173 -0.078816  1.009536  1.015108\n        15  1.421154 -0.055301 -1.922594 -0.019696\n        6  -0.148339  0.832938  1.787600 -1.383767\n\n        You can use `random state` for reproducibility:\n\n        >>> df.sample(random_state=1)\n        A         B         C         D\n        37 -2.027662  0.103611  0.237496 -0.165867\n        43 -0.259323 -0.583426  1.516140 -0.479118\n        12 -1.686325 -0.579510  0.985195 -0.460286\n        8   1.167946  0.429082  1.215742 -1.636041\n        9   1.197475 -0.864188  1.554031 -1.505264\n        \"\"\"\n        if axis is None:\n            axis = self._stat_axis_number\n        axis = self._get_axis_number(axis)\n        axis_length = self.shape[axis]\n        rs = com._random_state(random_state)\n        if weights is not None:\n            if isinstance(weights, pd.Series):\n                weights = weights.reindex(self.axes[axis])\n            if isinstance(weights, string_types):\n                if isinstance(self, pd.DataFrame):\n                    if axis == 0:\n                        try:\n                            weights = self[weights]\n                        except KeyError:\n                            raise KeyError(\n                                'String passed to weights not a valid column')\n                    else:\n                        raise ValueError(\n                            'Strings can only be passed to weights when sampling from rows on a DataFrame'\n                            )\n                else:\n                    raise ValueError(\n                        'Strings cannot be passed as weights when sampling from a Series or Panel.'\n                        )\n            weights = pd.Series(weights, dtype='float64')\n            if len(weights) != axis_length:\n                raise ValueError(\n                    'Weights and axis to be sampled must be of same length')\n            if (weights == np.inf).any() or (weights == -np.inf).any():\n                raise ValueError('weight vector may not include `inf` values')\n            if (weights < 0).any():\n                raise ValueError(\n                    'weight vector many not include negative values')\n            weights = weights.fillna(0)\n            if weights.sum() != 1:\n                if weights.sum() != 0:\n                    weights = weights / weights.sum()\n                else:\n                    raise ValueError('Invalid weights: weights sum to zero')\n            weights = weights.values\n        if n is None and frac is None:\n            n = 1\n        elif n is not None and frac is None and n % 1 != 0:\n            raise ValueError('Only integers accepted as `n` values')\n        elif n is None and frac is not None:\n            n = int(round(frac * axis_length))\n        elif n is not None and frac is not None:\n            raise ValueError('Please enter a value for `frac` OR `n`, not both'\n                )\n        if n < 0:\n            raise ValueError(\n                'A negative number of rows requested. Please provide positive value.'\n                )\n        locs = rs.choice(axis_length, size=n, replace=replace, p=weights)\n        return self.take(locs, axis=axis, is_copy=False)\n    _shared_docs['pipe'] = \"\"\"\n        Apply func(self, \\\\*args, \\\\*\\\\*kwargs)\n\n        Parameters\n        ----------\n        func : function\n            function to apply to the %(klass)s.\n            ``args``, and ``kwargs`` are passed into ``func``.\n            Alternatively a ``(callable, data_keyword)`` tuple where\n            ``data_keyword`` is a string indicating the keyword of\n            ``callable`` that expects the %(klass)s.\n        args : iterable, optional\n            positional arguments passed into ``func``.\n        kwargs : mapping, optional\n            a dictionary of keyword arguments passed into ``func``.\n\n        Returns\n        -------\n        object : the return type of ``func``.\n\n        Notes\n        -----\n\n        Use ``.pipe`` when chaining together functions that expect\n        Series, DataFrames or GroupBy objects. Instead of writing\n\n        >>> f(g(h(df), arg1=a), arg2=b, arg3=c)\n\n        You can write\n\n        >>> (df.pipe(h)\n        ...    .pipe(g, arg1=a)\n        ...    .pipe(f, arg2=b, arg3=c)\n        ... )\n\n        If you have a function that takes the data as (say) the second\n        argument, pass a tuple indicating which keyword expects the\n        data. For example, suppose ``f`` takes its data as ``arg2``:\n\n        >>> (df.pipe(h)\n        ...    .pipe(g, arg1=a)\n        ...    .pipe((f, 'arg2'), arg1=a, arg3=c)\n        ...  )\n\n        See Also\n        --------\n        pandas.DataFrame.apply\n        pandas.DataFrame.applymap\n        pandas.Series.map\n    \"\"\"\n\n    @Appender(_shared_docs['pipe'] % _shared_doc_kwargs)\n    def pipe(self, func, *args, **kwargs):\n        return com._pipe(self, func, *args, **kwargs)\n    _shared_docs['aggregate'] = \"\"\"\n    Aggregate using one or more operations over the specified axis.\n\n    %(versionadded)s\n\n    Parameters\n    ----------\n    func : function, string, dictionary, or list of string/functions\n        Function to use for aggregating the data. If a function, must either\n        work when passed a %(klass)s or when passed to %(klass)s.apply. For\n        a DataFrame, can pass a dict, if the keys are DataFrame column names.\n\n        Accepted combinations are:\n\n        - string function name.\n        - function.\n        - list of functions.\n        - dict of column names -> functions (or list of functions).\n\n    %(axis)s\n    *args\n        Positional arguments to pass to `func`.\n    **kwargs\n        Keyword arguments to pass to `func`.\n\n    Returns\n    -------\n    aggregated : %(klass)s\n\n    Notes\n    -----\n    `agg` is an alias for `aggregate`. Use the alias.\n\n    A passed user-defined-function will be passed a Series for evaluation.\n    \"\"\"\n    _shared_docs['transform'] = \"\"\"\n    Call function producing a like-indexed %(klass)s\n    and return a %(klass)s with the transformed values\n\n    .. versionadded:: 0.20.0\n\n    Parameters\n    ----------\n    func : callable, string, dictionary, or list of string/callables\n        To apply to column\n\n        Accepted Combinations are:\n\n        - string function name\n        - function\n        - list of functions\n        - dict of column names -> functions (or list of functions)\n\n    Returns\n    -------\n    transformed : %(klass)s\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'],\n    ...                   index=pd.date_range('1/1/2000', periods=10))\n    df.iloc[3:7] = np.nan\n\n    >>> df.transform(lambda x: (x - x.mean()) / x.std())\n                       A         B         C\n    2000-01-01  0.579457  1.236184  0.123424\n    2000-01-02  0.370357 -0.605875 -1.231325\n    2000-01-03  1.455756 -0.277446  0.288967\n    2000-01-04       NaN       NaN       NaN\n    2000-01-05       NaN       NaN       NaN\n    2000-01-06       NaN       NaN       NaN\n    2000-01-07       NaN       NaN       NaN\n    2000-01-08 -0.498658  1.274522  1.642524\n    2000-01-09 -0.540524 -1.012676 -0.828968\n    2000-01-10 -1.366388 -0.614710  0.005378\n\n    See also\n    --------\n    pandas.%(klass)s.aggregate\n    pandas.%(klass)s.apply\n    \"\"\"\n\n    def __finalize__(self, other, method=None, **kwargs):\n        \"\"\"\n        Propagate metadata from other to self.\n\n        Parameters\n        ----------\n        other : the object from which to get the attributes that we are going\n            to propagate\n        method : optional, a passed method name ; possibly to take different\n            types of propagation actions based on this\n\n        \"\"\"\n        if isinstance(other, NDFrame):\n            for name in self._metadata:\n                object.__setattr__(self, name, getattr(other, name, None))\n        return self\n\n    def __getattr__(self, name):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        if (name in self._internal_names_set or name in self._metadata or \n            name in self._accessors):\n            return object.__getattribute__(self, name)\n        else:\n            if self._info_axis._can_hold_identifiers_and_holds_name(name):\n                return self[name]\n            return object.__getattribute__(self, name)\n\n    def __setattr__(self, name, value):\n        \"\"\"After regular attribute access, try setting the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n        try:\n            object.__getattribute__(self, name)\n            return object.__setattr__(self, name, value)\n        except AttributeError:\n            pass\n        if name in self._internal_names_set:\n            object.__setattr__(self, name, value)\n        elif name in self._metadata:\n            object.__setattr__(self, name, value)\n        else:\n            try:\n                existing = getattr(self, name)\n                if isinstance(existing, Index):\n                    object.__setattr__(self, name, value)\n                elif name in self._info_axis:\n                    self[name] = value\n                else:\n                    object.__setattr__(self, name, value)\n            except (AttributeError, TypeError):\n                if isinstance(self, ABCDataFrame) and is_list_like(value):\n                    warnings.warn(\n                        \"Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\"\n                        , stacklevel=2)\n                object.__setattr__(self, name, value)\n\n    def _protect_consolidate(self, f):\n        \"\"\"Consolidate _data -- if the blocks have changed, then clear the\n        cache\n        \"\"\"\n        blocks_before = len(self._data.blocks)\n        result = f()\n        if len(self._data.blocks) != blocks_before:\n            self._clear_item_cache()\n        return result\n\n    def _consolidate_inplace(self):\n        \"\"\"Consolidate data in place and return None\"\"\"\n\n        def f():\n            self._data = self._data.consolidate()\n        self._protect_consolidate(f)\n\n    def _consolidate(self, inplace=False):\n        \"\"\"\n        Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n\n        Parameters\n        ----------\n        inplace : boolean, default False\n            If False return new object, otherwise modify existing object\n\n        Returns\n        -------\n        consolidated : type of caller\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if inplace:\n            self._consolidate_inplace()\n        else:\n            f = lambda : self._data.consolidate()\n            cons_data = self._protect_consolidate(f)\n            return self._constructor(cons_data).__finalize__(self)\n\n    def consolidate(self, inplace=False):\n        \"\"\"Compute NDFrame with \"consolidated\" internals (data of each dtype\n        grouped together in a single ndarray).\n\n        .. deprecated:: 0.20.0\n            Consolidate will be an internal implementation only.\n        \"\"\"\n        warnings.warn(\n            'consolidate is deprecated and will be removed in a future release.'\n            , FutureWarning, stacklevel=2)\n        return self._consolidate(inplace)\n\n    @property\n    def _is_mixed_type(self):\n        f = lambda : self._data.is_mixed_type\n        return self._protect_consolidate(f)\n\n    @property\n    def _is_numeric_mixed_type(self):\n        f = lambda : self._data.is_numeric_mixed_type\n        return self._protect_consolidate(f)\n\n    @property\n    def _is_datelike_mixed_type(self):\n        f = lambda : self._data.is_datelike_mixed_type\n        return self._protect_consolidate(f)\n\n    def _check_inplace_setting(self, value):\n        \"\"\" check whether we allow in-place setting with this type of value \"\"\"\n        if self._is_mixed_type:\n            if not self._is_numeric_mixed_type:\n                try:\n                    if np.isnan(value):\n                        return True\n                except Exception:\n                    pass\n                raise TypeError(\n                    'Cannot do inplace boolean setting on mixed-types with a non np.nan value'\n                    )\n        return True\n\n    def _get_numeric_data(self):\n        return self._constructor(self._data.get_numeric_data()).__finalize__(\n            self)\n\n    def _get_bool_data(self):\n        return self._constructor(self._data.get_bool_data()).__finalize__(self)\n\n    def as_matrix(self, columns=None):\n        \"\"\"Convert the frame to its Numpy-array representation.\n\n        .. deprecated:: 0.23.0\n            Use :meth:`DataFrame.values` instead.\n\n        Parameters\n        ----------\n        columns: list, optional, default:None\n            If None, return all columns, otherwise, returns specified columns.\n\n        Returns\n        -------\n        values : ndarray\n            If the caller is heterogeneous and contains booleans or objects,\n            the result will be of dtype=object. See Notes.\n\n\n        Notes\n        -----\n        Return is NOT a Numpy-matrix, rather, a Numpy-array.\n\n        The dtype will be a lower-common-denominator dtype (implicit\n        upcasting); that is to say if the dtypes (even of numeric types)\n        are mixed, the one that accommodates all will be chosen. Use this\n        with care if you are not dealing with the blocks.\n\n        e.g. If the dtypes are float16 and float32, dtype will be upcast to\n        float32.  If dtypes are int32 and uint8, dtype will be upcase to\n        int32. By numpy.find_common_type convention, mixing int64 and uint64\n        will result in a float64 dtype.\n\n        This method is provided for backwards compatibility. Generally,\n        it is recommended to use '.values'.\n\n        See Also\n        --------\n        pandas.DataFrame.values\n        \"\"\"\n        warnings.warn(\n            'Method .as_matrix will be removed in a future version. Use .values instead.'\n            , FutureWarning, stacklevel=2)\n        self._consolidate_inplace()\n        return self._data.as_array(transpose=self._AXIS_REVERSED, items=columns\n            )\n\n    @property\n    def values(self):\n        \"\"\"\n        Return a Numpy representation of the DataFrame.\n\n        Only the values in the DataFrame will be returned, the axes labels\n        will be removed.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values of the DataFrame.\n\n        Examples\n        --------\n        A DataFrame where all columns are the same type (e.g., int64) results\n        in an array of the same type.\n\n        >>> df = pd.DataFrame({'age':    [ 3,  29],\n        ...                    'height': [94, 170],\n        ...                    'weight': [31, 115]})\n        >>> df\n           age  height  weight\n        0    3      94      31\n        1   29     170     115\n        >>> df.dtypes\n        age       int64\n        height    int64\n        weight    int64\n        dtype: object\n        >>> df.values\n        array([[  3,  94,  31],\n               [ 29, 170, 115]], dtype=int64)\n\n        A DataFrame with mixed type columns(e.g., str/object, int64, float32)\n        results in an ndarray of the broadest type that accommodates these\n        mixed types (e.g., object).\n\n        >>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n        ...                     ('lion',     80.5, 1),\n        ...                     ('monkey', np.nan, None)],\n        ...                   columns=('name', 'max_speed', 'rank'))\n        >>> df2.dtypes\n        name          object\n        max_speed    float64\n        rank          object\n        dtype: object\n        >>> df2.values\n        array([['parrot', 24.0, 'second'],\n               ['lion', 80.5, 1],\n               ['monkey', nan, None]], dtype=object)\n\n        Notes\n        -----\n        The dtype will be a lower-common-denominator dtype (implicit\n        upcasting); that is to say if the dtypes (even of numeric types)\n        are mixed, the one that accommodates all will be chosen. Use this\n        with care if you are not dealing with the blocks.\n\n        e.g. If the dtypes are float16 and float32, dtype will be upcast to\n        float32.  If dtypes are int32 and uint8, dtype will be upcast to\n        int32. By :func:`numpy.find_common_type` convention, mixing int64\n        and uint64 will result in a float64 dtype.\n\n        See Also\n        --------\n        pandas.DataFrame.index : Retrieve the index labels\n        pandas.DataFrame.columns : Retrieving the column names\n        \"\"\"\n        self._consolidate_inplace()\n        return self._data.as_array(transpose=self._AXIS_REVERSED)\n\n    @property\n    def _values(self):\n        \"\"\"internal implementation\"\"\"\n        return self.values\n\n    @property\n    def _get_values(self):\n        return self.values\n\n    def get_values(self):\n        \"\"\"\n        Return an ndarray after converting sparse values to dense.\n\n        This is the same as ``.values`` for non-sparse data. For sparse\n        data contained in a `pandas.SparseArray`, the data are first\n        converted to a dense representation.\n\n        Returns\n        -------\n        numpy.ndarray\n            Numpy representation of DataFrame\n\n        See Also\n        --------\n        values : Numpy representation of DataFrame.\n        pandas.SparseArray : Container for sparse data.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 2], 'b': [True, False],\n        ...                    'c': [1.0, 2.0]})\n        >>> df\n           a      b    c\n        0  1   True  1.0\n        1  2  False  2.0\n\n        >>> df.get_values()\n        array([[1, True, 1.0], [2, False, 2.0]], dtype=object)\n\n        >>> df = pd.DataFrame({\"a\": pd.SparseArray([1, None, None]),\n        ...                    \"c\": [1.0, 2.0, 3.0]})\n        >>> df\n             a    c\n        0  1.0  1.0\n        1  NaN  2.0\n        2  NaN  3.0\n\n        >>> df.get_values()\n        array([[ 1.,  1.],\n               [nan,  2.],\n               [nan,  3.]])\n        \"\"\"\n        return self.values\n\n    def get_dtype_counts(self):\n        \"\"\"\n        Return counts of unique dtypes in this object.\n\n        Returns\n        -------\n        dtype : Series\n            Series with the count of columns with each dtype.\n\n        See Also\n        --------\n        dtypes : Return the dtypes in this object.\n\n        Examples\n        --------\n        >>> a = [['a', 1, 1.0], ['b', 2, 2.0], ['c', 3, 3.0]]\n        >>> df = pd.DataFrame(a, columns=['str', 'int', 'float'])\n        >>> df\n          str  int  float\n        0   a    1    1.0\n        1   b    2    2.0\n        2   c    3    3.0\n\n        >>> df.get_dtype_counts()\n        float64    1\n        int64      1\n        object     1\n        dtype: int64\n        \"\"\"\n        from pandas import Series\n        return Series(self._data.get_dtype_counts())\n\n    def get_ftype_counts(self):\n        \"\"\"\n        Return counts of unique ftypes in this object.\n\n        .. deprecated:: 0.23.0\n\n        This is useful for SparseDataFrame or for DataFrames containing\n        sparse arrays.\n\n        Returns\n        -------\n        dtype : Series\n            Series with the count of columns with each type and\n            sparsity (dense/sparse)\n\n        See Also\n        --------\n        ftypes : Return ftypes (indication of sparse/dense and dtype) in\n            this object.\n\n        Examples\n        --------\n        >>> a = [['a', 1, 1.0], ['b', 2, 2.0], ['c', 3, 3.0]]\n        >>> df = pd.DataFrame(a, columns=['str', 'int', 'float'])\n        >>> df\n          str  int  float\n        0   a    1    1.0\n        1   b    2    2.0\n        2   c    3    3.0\n\n        >>> df.get_ftype_counts()\n        float64:dense    1\n        int64:dense      1\n        object:dense     1\n        dtype: int64\n        \"\"\"\n        warnings.warn(\n            'get_ftype_counts is deprecated and will be removed in a future version'\n            , FutureWarning, stacklevel=2)\n        from pandas import Series\n        return Series(self._data.get_ftype_counts())\n\n    @property\n    def dtypes(self):\n        \"\"\"\n        Return the dtypes in the DataFrame.\n\n        This returns a Series with the data type of each column.\n        The result's index is the original DataFrame's columns. Columns\n        with mixed types are stored with the ``object`` dtype. See\n        :ref:`the User Guide <basics.dtypes>` for more.\n\n        Returns\n        -------\n        pandas.Series\n            The data type of each column.\n\n        See Also\n        --------\n        pandas.DataFrame.ftypes : dtype and sparsity information.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'float': [1.0],\n        ...                    'int': [1],\n        ...                    'datetime': [pd.Timestamp('20180310')],\n        ...                    'string': ['foo']})\n        >>> df.dtypes\n        float              float64\n        int                  int64\n        datetime    datetime64[ns]\n        string              object\n        dtype: object\n        \"\"\"\n        from pandas import Series\n        return Series(self._data.get_dtypes(), index=self._info_axis, dtype\n            =np.object_)\n\n    @property\n    def ftypes(self):\n        \"\"\"\n        Return the ftypes (indication of sparse/dense and dtype) in DataFrame.\n\n        This returns a Series with the data type of each column.\n        The result's index is the original DataFrame's columns. Columns\n        with mixed types are stored with the ``object`` dtype.  See\n        :ref:`the User Guide <basics.dtypes>` for more.\n\n        Returns\n        -------\n        pandas.Series\n            The data type and indication of sparse/dense of each column.\n\n        See Also\n        --------\n        pandas.DataFrame.dtypes: Series with just dtype information.\n        pandas.SparseDataFrame : Container for sparse tabular data.\n\n        Notes\n        -----\n        Sparse data should have the same dtypes as its dense representation.\n\n        Examples\n        --------\n        >>> import numpy as np\n        >>> arr = np.random.RandomState(0).randn(100, 4)\n        >>> arr[arr < .8] = np.nan\n        >>> pd.DataFrame(arr).ftypes\n        0    float64:dense\n        1    float64:dense\n        2    float64:dense\n        3    float64:dense\n        dtype: object\n\n        >>> pd.SparseDataFrame(arr).ftypes\n        0    float64:sparse\n        1    float64:sparse\n        2    float64:sparse\n        3    float64:sparse\n        dtype: object\n        \"\"\"\n        from pandas import Series\n        return Series(self._data.get_ftypes(), index=self._info_axis, dtype\n            =np.object_)\n\n    def as_blocks(self, copy=True):\n        \"\"\"\n        Convert the frame to a dict of dtype -> Constructor Types that each has\n        a homogeneous dtype.\n\n        .. deprecated:: 0.21.0\n\n        NOTE: the dtypes of the blocks WILL BE PRESERVED HERE (unlike in\n              as_matrix)\n\n        Parameters\n        ----------\n        copy : boolean, default True\n\n        Returns\n        -------\n        values : a dict of dtype -> Constructor Types\n        \"\"\"\n        warnings.warn(\n            'as_blocks is deprecated and will be removed in a future version',\n            FutureWarning, stacklevel=2)\n        return self._to_dict_of_blocks(copy=copy)\n\n    @property\n    def blocks(self):\n        \"\"\"\n        Internal property, property synonym for as_blocks()\n\n        .. deprecated:: 0.21.0\n        \"\"\"\n        return self.as_blocks()\n\n    def _to_dict_of_blocks(self, copy=True):\n        \"\"\"\n        Return a dict of dtype -> Constructor Types that\n        each is a homogeneous dtype.\n\n        Internal ONLY\n        \"\"\"\n        return {k: self._constructor(v).__finalize__(self) for k, v in self\n            ._data.to_dict(copy=copy).items()}\n\n    @deprecate_kwarg(old_arg_name='raise_on_error', new_arg_name='errors',\n        mapping={(True): 'raise', (False): 'ignore'})\n    def astype(self, dtype, copy=True, errors='raise', **kwargs):\n        \"\"\"\n        Cast a pandas object to a specified dtype ``dtype``.\n\n        Parameters\n        ----------\n        dtype : data type, or dict of column name -> data type\n            Use a numpy.dtype or Python type to cast entire pandas object to\n            the same type. Alternatively, use {col: dtype, ...}, where col is a\n            column label and dtype is a numpy.dtype or Python type to cast one\n            or more of the DataFrame's columns to column-specific types.\n        copy : bool, default True.\n            Return a copy when ``copy=True`` (be very careful setting\n            ``copy=False`` as changes to values then may propagate to other\n            pandas objects).\n        errors : {'raise', 'ignore'}, default 'raise'.\n            Control raising of exceptions on invalid data for provided dtype.\n\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object\n\n            .. versionadded:: 0.20.0\n\n        raise_on_error : raise on invalid input\n            .. deprecated:: 0.20.0\n               Use ``errors`` instead\n        kwargs : keyword arguments to pass on to the constructor\n\n        Returns\n        -------\n        casted : type of caller\n\n        Examples\n        --------\n        >>> ser = pd.Series([1, 2], dtype='int32')\n        >>> ser\n        0    1\n        1    2\n        dtype: int32\n        >>> ser.astype('int64')\n        0    1\n        1    2\n        dtype: int64\n\n        Convert to categorical type:\n\n        >>> ser.astype('category')\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [1, 2]\n\n        Convert to ordered categorical type with custom ordering:\n\n        >>> ser.astype('category', ordered=True, categories=[2, 1])\n        0    1\n        1    2\n        dtype: category\n        Categories (2, int64): [2 < 1]\n\n        Note that using ``copy=False`` and changing data on a new\n        pandas object may propagate changes:\n\n        >>> s1 = pd.Series([1,2])\n        >>> s2 = s1.astype('int64', copy=False)\n        >>> s2[0] = 10\n        >>> s1  # note that s1[0] has changed too\n        0    10\n        1     2\n        dtype: int64\n\n        See also\n        --------\n        pandas.to_datetime : Convert argument to datetime.\n        pandas.to_timedelta : Convert argument to timedelta.\n        pandas.to_numeric : Convert argument to a numeric type.\n        numpy.ndarray.astype : Cast a numpy array to a specified type.\n        \"\"\"\n        if is_dict_like(dtype):\n            if self.ndim == 1:\n                if len(dtype) > 1 or self.name not in dtype:\n                    raise KeyError(\n                        'Only the Series name can be used for the key in Series dtype mappings.'\n                        )\n                new_type = dtype[self.name]\n                return self.astype(new_type, copy, errors, **kwargs)\n            elif self.ndim > 2:\n                raise NotImplementedError(\n                    'astype() only accepts a dtype arg of type dict when invoked on Series and DataFrames. A single dtype must be specified when invoked on a Panel.'\n                    )\n            for col_name in dtype.keys():\n                if col_name not in self:\n                    raise KeyError(\n                        'Only a column name can be used for the key in a dtype mappings argument.'\n                        )\n            results = []\n            for col_name, col in self.iteritems():\n                if col_name in dtype:\n                    results.append(col.astype(dtype[col_name], copy=copy))\n                else:\n                    results.append(results.append(col.copy() if copy else col))\n        elif is_categorical_dtype(dtype) and self.ndim > 1:\n            results = (self[col].astype(dtype, copy=copy) for col in self)\n        else:\n            new_data = self._data.astype(dtype=dtype, copy=copy, errors=\n                errors, **kwargs)\n            return self._constructor(new_data).__finalize__(self)\n        result = pd.concat(results, axis=1, copy=False)\n        result.columns = self.columns\n        return result\n\n    def copy(self, deep=True):\n        \"\"\"\n        Make a copy of this object's indices and data.\n\n        When ``deep=True`` (default), a new object will be created with a\n        copy of the calling object's data and indices. Modifications to\n        the data or indices of the copy will not be reflected in the\n        original object (see notes below).\n\n        When ``deep=False``, a new object will be created without copying\n        the calling object's data or index (only references to the data\n        and index are copied). Any changes to the data of the original\n        will be reflected in the shallow copy (and vice versa).\n\n        Parameters\n        ----------\n        deep : bool, default True\n            Make a deep copy, including a copy of the data and the indices.\n            With ``deep=False`` neither the indices nor the data are copied.\n\n        Returns\n        -------\n        copy : Series, DataFrame or Panel\n            Object type matches caller.\n\n        Notes\n        -----\n        When ``deep=True``, data is copied but actual Python objects\n        will not be copied recursively, only the reference to the object.\n        This is in contrast to `copy.deepcopy` in the Standard Library,\n        which recursively copies object data (see examples below).\n\n        While ``Index`` objects are copied when ``deep=True``, the underlying\n        numpy array is not copied for performance reasons. Since ``Index`` is\n        immutable, the underlying data can be safely shared and a copy\n        is not needed.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> s\n        a    1\n        b    2\n        dtype: int64\n\n        >>> s_copy = s.copy()\n        >>> s_copy\n        a    1\n        b    2\n        dtype: int64\n\n        **Shallow copy versus default (deep) copy:**\n\n        >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n        >>> deep = s.copy()\n        >>> shallow = s.copy(deep=False)\n\n        Shallow copy shares data and index with original.\n\n        >>> s is shallow\n        False\n        >>> s.values is shallow.values and s.index is shallow.index\n        True\n\n        Deep copy has own copy of data and index.\n\n        >>> s is deep\n        False\n        >>> s.values is deep.values or s.index is deep.index\n        False\n\n        Updates to the data shared by shallow copy and original is reflected\n        in both; deep copy remains unchanged.\n\n        >>> s[0] = 3\n        >>> shallow[1] = 4\n        >>> s\n        a    3\n        b    4\n        dtype: int64\n        >>> shallow\n        a    3\n        b    4\n        dtype: int64\n        >>> deep\n        a    1\n        b    2\n        dtype: int64\n\n        Note that when copying an object containing Python objects, a deep copy\n        will copy the data, but will not do so recursively. Updating a nested\n        data object will be reflected in the deep copy.\n\n        >>> s = pd.Series([[1, 2], [3, 4]])\n        >>> deep = s.copy()\n        >>> s[0][0] = 10\n        >>> s\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        >>> deep\n        0    [10, 2]\n        1     [3, 4]\n        dtype: object\n        \"\"\"\n        data = self._data.copy(deep=deep)\n        return self._constructor(data).__finalize__(self)\n\n    def __copy__(self, deep=True):\n        return self.copy(deep=deep)\n\n    def __deepcopy__(self, memo=None):\n        if memo is None:\n            memo = {}\n        return self.copy(deep=True)\n\n    def _convert(self, datetime=False, numeric=False, timedelta=False,\n        coerce=False, copy=True):\n        \"\"\"\n        Attempt to infer better dtype for object columns\n\n        Parameters\n        ----------\n        datetime : boolean, default False\n            If True, convert to date where possible.\n        numeric : boolean, default False\n            If True, attempt to convert to numbers (including strings), with\n            unconvertible values becoming NaN.\n        timedelta : boolean, default False\n            If True, convert to timedelta where possible.\n        coerce : boolean, default False\n            If True, force conversion with unconvertible values converted to\n            nulls (NaN or NaT)\n        copy : boolean, default True\n            If True, return a copy even if no copy is necessary (e.g. no\n            conversion was done). Note: This is meant for internal use, and\n            should not be confused with inplace.\n\n        Returns\n        -------\n        converted : same as input object\n        \"\"\"\n        return self._constructor(self._data.convert(datetime=datetime,\n            numeric=numeric, timedelta=timedelta, coerce=coerce, copy=copy)\n            ).__finalize__(self)\n\n    def convert_objects(self, convert_dates=True, convert_numeric=False,\n        convert_timedeltas=True, copy=True):\n        \"\"\"Attempt to infer better dtype for object columns.\n\n        .. deprecated:: 0.21.0\n\n        Parameters\n        ----------\n        convert_dates : boolean, default True\n            If True, convert to date where possible. If 'coerce', force\n            conversion, with unconvertible values becoming NaT.\n        convert_numeric : boolean, default False\n            If True, attempt to coerce to numbers (including strings), with\n            unconvertible values becoming NaN.\n        convert_timedeltas : boolean, default True\n            If True, convert to timedelta where possible. If 'coerce', force\n            conversion, with unconvertible values becoming NaT.\n        copy : boolean, default True\n            If True, return a copy even if no copy is necessary (e.g. no\n            conversion was done). Note: This is meant for internal use, and\n            should not be confused with inplace.\n\n        See Also\n        --------\n        pandas.to_datetime : Convert argument to datetime.\n        pandas.to_timedelta : Convert argument to timedelta.\n        pandas.to_numeric : Convert argument to numeric type.\n\n        Returns\n        -------\n        converted : same as input object\n        \"\"\"\n        msg = (\n            \"\"\"convert_objects is deprecated.  To re-infer data dtypes for object columns, use {klass}.infer_objects()\nFor all other conversions use the data-type specific converters pd.to_datetime, pd.to_timedelta and pd.to_numeric.\"\"\"\n            .format(klass=self.__class__.__name__))\n        warnings.warn(msg, FutureWarning, stacklevel=2)\n        return self._constructor(self._data.convert(convert_dates=\n            convert_dates, convert_numeric=convert_numeric,\n            convert_timedeltas=convert_timedeltas, copy=copy)).__finalize__(\n            self)\n\n    def infer_objects(self):\n        \"\"\"\n        Attempt to infer better dtypes for object columns.\n\n        Attempts soft conversion of object-dtyped\n        columns, leaving non-object and unconvertible\n        columns unchanged. The inference rules are the\n        same as during normal Series/DataFrame construction.\n\n        .. versionadded:: 0.21.0\n\n        See Also\n        --------\n        pandas.to_datetime : Convert argument to datetime.\n        pandas.to_timedelta : Convert argument to timedelta.\n        pandas.to_numeric : Convert argument to numeric type.\n\n        Returns\n        -------\n        converted : same type as input object\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n        >>> df = df.iloc[1:]\n        >>> df\n           A\n        1  1\n        2  2\n        3  3\n\n        >>> df.dtypes\n        A    object\n        dtype: object\n\n        >>> df.infer_objects().dtypes\n        A    int64\n        dtype: object\n        \"\"\"\n        return self._constructor(self._data.convert(datetime=True, numeric=\n            False, timedelta=True, coerce=False, copy=True)).__finalize__(self)\n\n    def fillna(self, value=None, method=None, axis=None, inplace=False,\n        limit=None, downcast=None):\n        \"\"\"\n        Fill NA/NaN values using the specified method\n\n        Parameters\n        ----------\n        value : scalar, dict, Series, or DataFrame\n            Value to use to fill holes (e.g. 0), alternately a\n            dict/Series/DataFrame of values specifying which value to use for\n            each index (for a Series) or column (for a DataFrame). (values not\n            in the dict/Series/DataFrame will not be filled). This value cannot\n            be a list.\n        method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n            Method to use for filling holes in reindexed Series\n            pad / ffill: propagate last valid observation forward to next valid\n            backfill / bfill: use NEXT valid observation to fill gap\n        axis : %(axes_single_arg)s\n        inplace : boolean, default False\n            If True, fill in place. Note: this will modify any\n            other views on this object, (e.g. a no-copy slice for a column in a\n            DataFrame).\n        limit : int, default None\n            If method is specified, this is the maximum number of consecutive\n            NaN values to forward/backward fill. In other words, if there is\n            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled. Must be greater than 0 if not None.\n        downcast : dict, default is None\n            a dict of item->dtype of what to downcast if possible,\n            or the string 'infer' which will try to downcast to an appropriate\n            equal type (e.g. float64 to int64 if possible)\n\n        See Also\n        --------\n        interpolate : Fill NaN values using interpolation.\n        reindex, asfreq\n\n        Returns\n        -------\n        filled : %(klass)s\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n        ...                    [3, 4, np.nan, 1],\n        ...                    [np.nan, np.nan, np.nan, 5],\n        ...                    [np.nan, 3, np.nan, 4]],\n        ...                    columns=list('ABCD'))\n        >>> df\n             A    B   C  D\n        0  NaN  2.0 NaN  0\n        1  3.0  4.0 NaN  1\n        2  NaN  NaN NaN  5\n        3  NaN  3.0 NaN  4\n\n        Replace all NaN elements with 0s.\n\n        >>> df.fillna(0)\n            A   B   C   D\n        0   0.0 2.0 0.0 0\n        1   3.0 4.0 0.0 1\n        2   0.0 0.0 0.0 5\n        3   0.0 3.0 0.0 4\n\n        We can also propagate non-null values forward or backward.\n\n        >>> df.fillna(method='ffill')\n            A   B   C   D\n        0   NaN 2.0 NaN 0\n        1   3.0 4.0 NaN 1\n        2   3.0 4.0 NaN 5\n        3   3.0 3.0 NaN 4\n\n        Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n        2, and 3 respectively.\n\n        >>> values = {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n        >>> df.fillna(value=values)\n            A   B   C   D\n        0   0.0 2.0 2.0 0\n        1   3.0 4.0 2.0 1\n        2   0.0 1.0 2.0 5\n        3   0.0 3.0 2.0 4\n\n        Only replace the first NaN element.\n\n        >>> df.fillna(value=values, limit=1)\n            A   B   C   D\n        0   0.0 2.0 2.0 0\n        1   3.0 4.0 NaN 1\n        2   NaN 1.0 NaN 5\n        3   NaN 3.0 NaN 4\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        value, method = validate_fillna_kwargs(value, method)\n        self._consolidate_inplace()\n        if axis is None:\n            axis = 0\n        axis = self._get_axis_number(axis)\n        from pandas import DataFrame\n        if value is None:\n            if self._is_mixed_type and axis == 1:\n                if inplace:\n                    raise NotImplementedError()\n                result = self.T.fillna(method=method, limit=limit).T\n                result._data = result._data.downcast()\n                return result\n            if self.ndim > 3:\n                raise NotImplementedError(\n                    'Cannot fillna with a method for > 3dims')\n            elif self.ndim == 3:\n                result = {col: s.fillna(method=method, value=value) for col,\n                    s in self.iteritems()}\n                new_obj = self._constructor.from_dict(result).__finalize__(self\n                    )\n                new_data = new_obj._data\n            else:\n                new_data = self._data.interpolate(method=method, axis=axis,\n                    limit=limit, inplace=inplace, coerce=True, downcast=\n                    downcast)\n        else:\n            if len(self._get_axis(axis)) == 0:\n                return self\n            if self.ndim == 1:\n                if isinstance(value, (dict, ABCSeries)):\n                    from pandas import Series\n                    value = Series(value)\n                elif not is_list_like(value):\n                    pass\n                else:\n                    raise TypeError(\n                        '\"value\" parameter must be a scalar, dict or Series, but you passed a \"{0}\"'\n                        .format(type(value).__name__))\n                new_data = self._data.fillna(value=value, limit=limit,\n                    inplace=inplace, downcast=downcast)\n            elif isinstance(value, (dict, ABCSeries)):\n                if axis == 1:\n                    raise NotImplementedError(\n                        'Currently only can fill with dict/Series column by column'\n                        )\n                result = self if inplace else self.copy()\n                for k, v in compat.iteritems(value):\n                    if k not in result:\n                        continue\n                    obj = result[k]\n                    obj.fillna(v, limit=limit, inplace=True, downcast=downcast)\n                return result if not inplace else None\n            elif not is_list_like(value):\n                new_data = self._data.fillna(value=value, limit=limit,\n                    inplace=inplace, downcast=downcast)\n            elif isinstance(value, DataFrame) and self.ndim == 2:\n                new_data = self.where(self.notna(), value)\n            else:\n                raise ValueError('invalid fill value with a %s' % type(value))\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def ffill(self, axis=None, inplace=False, limit=None, downcast=None):\n        \"\"\"\n        Synonym for :meth:`DataFrame.fillna(method='ffill') <DataFrame.fillna>`\n        \"\"\"\n        return self.fillna(method='ffill', axis=axis, inplace=inplace,\n            limit=limit, downcast=downcast)\n\n    def bfill(self, axis=None, inplace=False, limit=None, downcast=None):\n        \"\"\"\n        Synonym for :meth:`DataFrame.fillna(method='bfill') <DataFrame.fillna>`\n        \"\"\"\n        return self.fillna(method='bfill', axis=axis, inplace=inplace,\n            limit=limit, downcast=downcast)\n    _shared_docs['replace'] = \"\"\"\n        Replace values given in `to_replace` with `value`.\n\n        Values of the %(klass)s are replaced with other values dynamically.\n        This differs from updating with ``.loc`` or ``.iloc``, which require\n        you to specify a location to update with some value.\n\n        Parameters\n        ----------\n        to_replace : str, regex, list, dict, Series, int, float, or None\n            How to find the values that will be replaced.\n\n            * numeric, str or regex:\n\n                - numeric: numeric values equal to `to_replace` will be\n                  replaced with `value`\n                - str: string exactly matching `to_replace` will be replaced\n                  with `value`\n                - regex: regexs matching `to_replace` will be replaced with\n                  `value`\n\n            * list of str, regex, or numeric:\n\n                - First, if `to_replace` and `value` are both lists, they\n                  **must** be the same length.\n                - Second, if ``regex=True`` then all of the strings in **both**\n                  lists will be interpreted as regexs otherwise they will match\n                  directly. This doesn't matter much for `value` since there\n                  are only a few possible substitution regexes you can use.\n                - str, regex and numeric rules apply as above.\n\n            * dict:\n\n                - Dicts can be used to specify different replacement values\n                  for different existing values. For example,\n                  ``{'a': 'b', 'y': 'z'}`` replaces the value 'a' with 'b' and\n                  'y' with 'z'. To use a dict in this way the `value`\n                  parameter should be `None`.\n                - For a DataFrame a dict can specify that different values\n                  should be replaced in different columns. For example,\n                  ``{'a': 1, 'b': 'z'}`` looks for the value 1 in column 'a'\n                  and the value 'z' in column 'b' and replaces these values\n                  with whatever is specified in `value`. The `value` parameter\n                  should not be ``None`` in this case. You can treat this as a\n                  special case of passing two lists except that you are\n                  specifying the column to search in.\n                - For a DataFrame nested dictionaries, e.g.,\n                  ``{'a': {'b': np.nan}}``, are read as follows: look in column\n                  'a' for the value 'b' and replace it with NaN. The `value`\n                  parameter should be ``None`` to use a nested dict in this\n                  way. You can nest regular expressions as well. Note that\n                  column names (the top-level dictionary keys in a nested\n                  dictionary) **cannot** be regular expressions.\n\n            * None:\n\n                - This means that the `regex` argument must be a string,\n                  compiled regular expression, or list, dict, ndarray or\n                  Series of such elements. If `value` is also ``None`` then\n                  this **must** be a nested dictionary or Series.\n\n            See the examples section for examples of each of these.\n        value : scalar, dict, list, str, regex, default None\n            Value to replace any values matching `to_replace` with.\n            For a DataFrame a dict of values can be used to specify which\n            value to use for each column (columns not in the dict will not be\n            filled). Regular expressions, strings and lists or dicts of such\n            objects are also allowed.\n        inplace : boolean, default False\n            If True, in place. Note: this will modify any\n            other views on this object (e.g. a column from a DataFrame).\n            Returns the caller if this is True.\n        limit : int, default None\n            Maximum size gap to forward or backward fill.\n        regex : bool or same types as `to_replace`, default False\n            Whether to interpret `to_replace` and/or `value` as regular\n            expressions. If this is ``True`` then `to_replace` *must* be a\n            string. Alternatively, this could be a regular expression or a\n            list, dict, or array of regular expressions in which case\n            `to_replace` must be ``None``.\n        method : {'pad', 'ffill', 'bfill', `None`}\n            The method to use when for replacement, when `to_replace` is a\n            scalar, list or tuple and `value` is ``None``.\n\n            .. versionchanged:: 0.23.0\n                Added to DataFrame.\n\n        See Also\n        --------\n        %(klass)s.fillna : Fill NA values\n        %(klass)s.where : Replace values based on boolean condition\n        Series.str.replace : Simple string replacement.\n\n        Returns\n        -------\n        %(klass)s\n            Object after replacement.\n\n        Raises\n        ------\n        AssertionError\n            * If `regex` is not a ``bool`` and `to_replace` is not\n              ``None``.\n        TypeError\n            * If `to_replace` is a ``dict`` and `value` is not a ``list``,\n              ``dict``, ``ndarray``, or ``Series``\n            * If `to_replace` is ``None`` and `regex` is not compilable\n              into a regular expression or is a list, dict, ndarray, or\n              Series.\n            * When replacing multiple ``bool`` or ``datetime64`` objects and\n              the arguments to `to_replace` does not match the type of the\n              value being replaced\n        ValueError\n            * If a ``list`` or an ``ndarray`` is passed to `to_replace` and\n              `value` but they are not the same length.\n\n        Notes\n        -----\n        * Regex substitution is performed under the hood with ``re.sub``. The\n          rules for substitution for ``re.sub`` are the same.\n        * Regular expressions will only substitute on strings, meaning you\n          cannot provide, for example, a regular expression matching floating\n          point numbers and expect the columns in your frame that have a\n          numeric dtype to be matched. However, if those floating point\n          numbers *are* strings, then you can do this.\n        * This method has *a lot* of options. You are encouraged to experiment\n          and play with this method to gain intuition about how it works.\n        * When dict is used as the `to_replace` value, it is like\n          key(s) in the dict are the to_replace part and\n          value(s) in the dict are the value parameter.\n\n        Examples\n        --------\n\n        **Scalar `to_replace` and `value`**\n\n        >>> s = pd.Series([0, 1, 2, 3, 4])\n        >>> s.replace(0, 5)\n        0    5\n        1    1\n        2    2\n        3    3\n        4    4\n        dtype: int64\n\n        >>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n        ...                    'B': [5, 6, 7, 8, 9],\n        ...                    'C': ['a', 'b', 'c', 'd', 'e']})\n        >>> df.replace(0, 5)\n           A  B  C\n        0  5  5  a\n        1  1  6  b\n        2  2  7  c\n        3  3  8  d\n        4  4  9  e\n\n        **List-like `to_replace`**\n\n        >>> df.replace([0, 1, 2, 3], 4)\n           A  B  C\n        0  4  5  a\n        1  4  6  b\n        2  4  7  c\n        3  4  8  d\n        4  4  9  e\n\n        >>> df.replace([0, 1, 2, 3], [4, 3, 2, 1])\n           A  B  C\n        0  4  5  a\n        1  3  6  b\n        2  2  7  c\n        3  1  8  d\n        4  4  9  e\n\n        >>> s.replace([1, 2], method='bfill')\n        0    0\n        1    3\n        2    3\n        3    3\n        4    4\n        dtype: int64\n\n        **dict-like `to_replace`**\n\n        >>> df.replace({0: 10, 1: 100})\n             A  B  C\n        0   10  5  a\n        1  100  6  b\n        2    2  7  c\n        3    3  8  d\n        4    4  9  e\n\n        >>> df.replace({'A': 0, 'B': 5}, 100)\n             A    B  C\n        0  100  100  a\n        1    1    6  b\n        2    2    7  c\n        3    3    8  d\n        4    4    9  e\n\n        >>> df.replace({'A': {0: 100, 4: 400}})\n             A  B  C\n        0  100  5  a\n        1    1  6  b\n        2    2  7  c\n        3    3  8  d\n        4  400  9  e\n\n        **Regular expression `to_replace`**\n\n        >>> df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],\n        ...                    'B': ['abc', 'bar', 'xyz']})\n        >>> df.replace(to_replace=r'^ba.$', value='new', regex=True)\n              A    B\n        0   new  abc\n        1   foo  new\n        2  bait  xyz\n\n        >>> df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)\n              A    B\n        0   new  abc\n        1   foo  bar\n        2  bait  xyz\n\n        >>> df.replace(regex=r'^ba.$', value='new')\n              A    B\n        0   new  abc\n        1   foo  new\n        2  bait  xyz\n\n        >>> df.replace(regex={r'^ba.$':'new', 'foo':'xyz'})\n              A    B\n        0   new  abc\n        1   xyz  new\n        2  bait  xyz\n\n        >>> df.replace(regex=[r'^ba.$', 'foo'], value='new')\n              A    B\n        0   new  abc\n        1   new  new\n        2  bait  xyz\n\n        Note that when replacing multiple ``bool`` or ``datetime64`` objects,\n        the data types in the `to_replace` parameter must match the data\n        type of the value being replaced:\n\n        >>> df = pd.DataFrame({'A': [True, False, True],\n        ...                    'B': [False, True, False]})\n        >>> df.replace({'a string': 'new value', True: False})  # raises\n        Traceback (most recent call last):\n            ...\n        TypeError: Cannot compare types 'ndarray(dtype=bool)' and 'str'\n\n        This raises a ``TypeError`` because one of the ``dict`` keys is not of\n        the correct type for replacement.\n\n        Compare the behavior of ``s.replace({'a': None})`` and\n        ``s.replace('a', None)`` to understand the peculiarities\n        of the `to_replace` parameter:\n\n        >>> s = pd.Series([10, 'a', 'a', 'b', 'a'])\n\n        When one uses a dict as the `to_replace` value, it is like the\n        value(s) in the dict are equal to the `value` parameter.\n        ``s.replace({'a': None})`` is equivalent to\n        ``s.replace(to_replace={'a': None}, value=None, method=None)``:\n\n        >>> s.replace({'a': None})\n        0      10\n        1    None\n        2    None\n        3       b\n        4    None\n        dtype: object\n\n        When ``value=None`` and `to_replace` is a scalar, list or\n        tuple, `replace` uses the method parameter (default 'pad') to do the\n        replacement. So this is why the 'a' values are being replaced by 10\n        in rows 1 and 2 and 'b' in row 4 in this case.\n        The command ``s.replace('a', None)`` is actually equivalent to\n        ``s.replace(to_replace='a', value=None, method='pad')``:\n\n        >>> s.replace('a', None)\n        0    10\n        1    10\n        2    10\n        3     b\n        4     b\n        dtype: object\n    \"\"\"\n\n    @Appender(_shared_docs['replace'] % _shared_doc_kwargs)\n    def replace(self, to_replace=None, value=None, inplace=False, limit=\n        None, regex=False, method='pad'):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not is_bool(regex) and to_replace is not None:\n            raise AssertionError(\n                \"'to_replace' must be 'None' if 'regex' is not a bool\")\n        self._consolidate_inplace()\n        if value is None:\n            if not is_dict_like(to_replace) and not is_dict_like(regex):\n                to_replace = [to_replace]\n            if isinstance(to_replace, (tuple, list)):\n                if isinstance(self, pd.DataFrame):\n                    return self.apply(_single_replace, args=(to_replace,\n                        method, inplace, limit))\n                return _single_replace(self, to_replace, method, inplace, limit\n                    )\n            if not is_dict_like(to_replace):\n                if not is_dict_like(regex):\n                    raise TypeError(\n                        'If \"to_replace\" and \"value\" are both None and \"to_replace\" is not a list, then regex must be a mapping'\n                        )\n                to_replace = regex\n                regex = True\n            items = list(compat.iteritems(to_replace))\n            keys, values = lzip(*items) or ([], [])\n            are_mappings = [is_dict_like(v) for v in values]\n            if any(are_mappings):\n                if not all(are_mappings):\n                    raise TypeError(\n                        'If a nested mapping is passed, all values of the top level mapping must be mappings'\n                        )\n                to_rep_dict = {}\n                value_dict = {}\n                for k, v in items:\n                    keys, values = lzip(*v.items()) or ([], [])\n                    if set(keys) & set(values):\n                        raise ValueError(\n                            'Replacement not allowed with overlapping keys and values'\n                            )\n                    to_rep_dict[k] = list(keys)\n                    value_dict[k] = list(values)\n                to_replace, value = to_rep_dict, value_dict\n            else:\n                to_replace, value = keys, values\n            return self.replace(to_replace, value, inplace=inplace, limit=\n                limit, regex=regex)\n        else:\n            for a in self._AXIS_ORDERS:\n                if not len(self._get_axis(a)):\n                    return self\n            new_data = self._data\n            if is_dict_like(to_replace):\n                if is_dict_like(value):\n                    res = self if inplace else self.copy()\n                    for c, src in compat.iteritems(to_replace):\n                        if c in value and c in self:\n                            res[c] = res[c].replace(to_replace=src, value=\n                                value[c], inplace=False, regex=regex)\n                    return None if inplace else res\n                elif not is_list_like(value):\n                    keys = [(k, src) for k, src in compat.iteritems(\n                        to_replace) if k in self]\n                    keys_len = len(keys) - 1\n                    for i, (k, src) in enumerate(keys):\n                        convert = i == keys_len\n                        new_data = new_data.replace(to_replace=src, value=\n                            value, filter=[k], inplace=inplace, regex=regex,\n                            convert=convert)\n                else:\n                    raise TypeError(\n                        'value argument must be scalar, dict, or Series')\n            elif is_list_like(to_replace):\n                if is_list_like(value):\n                    if len(to_replace) != len(value):\n                        raise ValueError(\n                            'Replacement lists must match in length. Expecting %d got %d '\n                             % (len(to_replace), len(value)))\n                    new_data = self._data.replace_list(src_list=to_replace,\n                        dest_list=value, inplace=inplace, regex=regex)\n                else:\n                    new_data = self._data.replace(to_replace=to_replace,\n                        value=value, inplace=inplace, regex=regex)\n            elif to_replace is None:\n                if not (is_re_compilable(regex) or is_list_like(regex) or\n                    is_dict_like(regex)):\n                    raise TypeError(\n                        \"'regex' must be a string or a compiled regular expression or a list or dict of strings or regular expressions, you passed a {0!r}\"\n                        .format(type(regex).__name__))\n                return self.replace(regex, value, inplace=inplace, limit=\n                    limit, regex=True)\n            elif is_dict_like(value):\n                new_data = self._data\n                for k, v in compat.iteritems(value):\n                    if k in self:\n                        new_data = new_data.replace(to_replace=to_replace,\n                            value=v, filter=[k], inplace=inplace, regex=regex)\n            elif not is_list_like(value):\n                new_data = self._data.replace(to_replace=to_replace, value=\n                    value, inplace=inplace, regex=regex)\n            else:\n                msg = 'Invalid \"to_replace\" type: {0!r}'.format(type(\n                    to_replace).__name__)\n                raise TypeError(msg)\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n    _shared_docs['interpolate'] = \"\"\"\n        Please note that only ``method='linear'`` is supported for\n        DataFrames/Series with a MultiIndex.\n\n        Parameters\n        ----------\n        method : {'linear', 'time', 'index', 'values', 'nearest', 'zero',\n                  'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh',\n                  'polynomial', 'spline', 'piecewise_polynomial',\n                  'from_derivatives', 'pchip', 'akima'}\n\n            * 'linear': ignore the index and treat the values as equally\n              spaced. This is the only method supported on MultiIndexes.\n              default\n            * 'time': interpolation works on daily and higher resolution\n              data to interpolate given length of interval\n            * 'index', 'values': use the actual numerical values of the index\n            * 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',\n              'barycentric', 'polynomial' is passed to\n              ``scipy.interpolate.interp1d``. Both 'polynomial' and 'spline'\n              require that you also specify an `order` (int),\n              e.g. df.interpolate(method='polynomial', order=4).\n              These use the actual numerical values of the index.\n            * 'krogh', 'piecewise_polynomial', 'spline', 'pchip' and 'akima'\n              are all wrappers around the scipy interpolation methods of\n              similar names. These use the actual numerical values of the\n              index. For more information on their behavior, see the\n              `scipy documentation\n              <http://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__\n              and `tutorial documentation\n              <http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html>`__\n            * 'from_derivatives' refers to BPoly.from_derivatives which\n              replaces 'piecewise_polynomial' interpolation method in\n              scipy 0.18\n\n            .. versionadded:: 0.18.1\n\n               Added support for the 'akima' method\n               Added interpolate method 'from_derivatives' which replaces\n               'piecewise_polynomial' in scipy 0.18; backwards-compatible with\n               scipy < 0.18\n\n        axis : {0, 1}, default 0\n            * 0: fill column-by-column\n            * 1: fill row-by-row\n        limit : int, default None.\n            Maximum number of consecutive NaNs to fill. Must be greater than 0.\n        limit_direction : {'forward', 'backward', 'both'}, default 'forward'\n        limit_area : {'inside', 'outside'}, default None\n            * None: (default) no fill restriction\n            * 'inside' Only fill NaNs surrounded by valid values (interpolate).\n            * 'outside' Only fill NaNs outside valid values (extrapolate).\n\n            If limit is specified, consecutive NaNs will be filled in this\n            direction.\n\n            .. versionadded:: 0.21.0\n        inplace : bool, default False\n            Update the NDFrame in place if possible.\n        downcast : optional, 'infer' or None, defaults to None\n            Downcast dtypes if possible.\n        kwargs : keyword arguments to pass on to the interpolating function.\n\n        Returns\n        -------\n        Series or DataFrame of same shape interpolated at the NaNs\n\n        See Also\n        --------\n        reindex, replace, fillna\n\n        Examples\n        --------\n\n        Filling in NaNs\n\n        >>> s = pd.Series([0, 1, np.nan, 3])\n        >>> s.interpolate()\n        0    0\n        1    1\n        2    2\n        3    3\n        dtype: float64\n\n        \"\"\"\n\n    @Appender(_shared_docs['interpolate'] % _shared_doc_kwargs)\n    def interpolate(self, method='linear', axis=0, limit=None, inplace=\n        False, limit_direction='forward', limit_area=None, downcast=None,\n        **kwargs):\n        \"\"\"\n        Interpolate values according to different methods.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if self.ndim > 2:\n            raise NotImplementedError(\n                'Interpolate has not been implemented on Panel and Panel 4D objects.'\n                )\n        if axis == 0:\n            ax = self._info_axis_name\n            _maybe_transposed_self = self\n        elif axis == 1:\n            _maybe_transposed_self = self.T\n            ax = 1\n        else:\n            _maybe_transposed_self = self\n        ax = _maybe_transposed_self._get_axis_number(ax)\n        if _maybe_transposed_self.ndim == 2:\n            alt_ax = 1 - ax\n        else:\n            alt_ax = ax\n        if isinstance(_maybe_transposed_self.index, MultiIndex\n            ) and method != 'linear':\n            raise ValueError(\n                'Only `method=linear` interpolation is supported on MultiIndexes.'\n                )\n        if _maybe_transposed_self._data.get_dtype_counts().get('object'\n            ) == len(_maybe_transposed_self.T):\n            raise TypeError('Cannot interpolate with all NaNs.')\n        if method == 'linear':\n            index = np.arange(len(_maybe_transposed_self._get_axis(alt_ax)))\n        else:\n            index = _maybe_transposed_self._get_axis(alt_ax)\n        if isna(index).any():\n            raise NotImplementedError(\n                'Interpolation with NaNs in the index has not been implemented. Try filling those NaNs before interpolating.'\n                )\n        data = _maybe_transposed_self._data\n        new_data = data.interpolate(method=method, axis=ax, index=index,\n            values=_maybe_transposed_self, limit=limit, limit_direction=\n            limit_direction, limit_area=limit_area, inplace=inplace,\n            downcast=downcast, **kwargs)\n        if inplace:\n            if axis == 1:\n                new_data = self._constructor(new_data).T._data\n            self._update_inplace(new_data)\n        else:\n            res = self._constructor(new_data).__finalize__(self)\n            if axis == 1:\n                res = res.T\n            return res\n\n    def asof(self, where, subset=None):\n        \"\"\"\n        The last row without any NaN is taken (or the last row without\n        NaN considering only the subset of columns in the case of a DataFrame)\n\n        .. versionadded:: 0.19.0 For DataFrame\n\n        If there is no good value, NaN is returned for a Series\n        a Series of NaN values for a DataFrame\n\n        Parameters\n        ----------\n        where : date or array of dates\n        subset : string or list of strings, default None\n           if not None use these columns for NaN propagation\n\n        Notes\n        -----\n        Dates are assumed to be sorted\n        Raises if this is not the case\n\n        Returns\n        -------\n        where is scalar\n\n          - value or NaN if input is Series\n          - Series if input is DataFrame\n\n        where is Index: same shape object as input\n\n        See Also\n        --------\n        merge_asof\n\n        \"\"\"\n        if isinstance(where, compat.string_types):\n            from pandas import to_datetime\n            where = to_datetime(where)\n        if not self.index.is_monotonic:\n            raise ValueError('asof requires a sorted index')\n        is_series = isinstance(self, ABCSeries)\n        if is_series:\n            if subset is not None:\n                raise ValueError('subset is not valid for Series')\n        elif self.ndim > 2:\n            raise NotImplementedError('asof is not implemented for {type}'.\n                format(type=type(self)))\n        else:\n            if subset is None:\n                subset = self.columns\n            if not is_list_like(subset):\n                subset = [subset]\n        is_list = is_list_like(where)\n        if not is_list:\n            start = self.index[0]\n            if isinstance(self.index, PeriodIndex):\n                where = Period(where, freq=self.index.freq).ordinal\n                start = start.ordinal\n            if where < start:\n                if not is_series:\n                    from pandas import Series\n                    return Series(index=self.columns, name=where)\n                return np.nan\n            if is_series:\n                loc = self.index.searchsorted(where, side='right')\n                if loc > 0:\n                    loc -= 1\n                values = self._values\n                while loc > 0 and isna(values[loc]):\n                    loc -= 1\n                return values[loc]\n        if not isinstance(where, Index):\n            where = Index(where) if is_list else Index([where])\n        nulls = self.isna() if is_series else self[subset].isna().any(1)\n        if nulls.all():\n            if is_series:\n                return self._constructor(np.nan, index=where, name=self.name)\n            elif is_list:\n                from pandas import DataFrame\n                return DataFrame(np.nan, index=where, columns=self.columns)\n            else:\n                from pandas import Series\n                return Series(np.nan, index=self.columns, name=where[0])\n        locs = self.index.asof_locs(where, ~nulls.values)\n        missing = locs == -1\n        data = self.take(locs, is_copy=False)\n        data.index = where\n        data.loc[missing] = np.nan\n        return data if is_list else data.iloc[-1]\n    _shared_docs['isna'] = \"\"\"\n        Detect missing values.\n\n        Return a boolean same-sized object indicating if the values are NA.\n        NA values, such as None or :attr:`numpy.NaN`, gets mapped to True\n        values.\n        Everything else gets mapped to False values. Characters such as empty\n        strings ``''`` or :attr:`numpy.inf` are not considered NA values\n        (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n\n        Returns\n        -------\n        %(klass)s\n            Mask of bool values for each element in %(klass)s that\n            indicates whether an element is not an NA value.\n\n        See Also\n        --------\n        %(klass)s.isnull : alias of isna\n        %(klass)s.notna : boolean inverse of isna\n        %(klass)s.dropna : omit axes labels with missing values\n        isna : top-level isna\n\n        Examples\n        --------\n        Show which entries in a DataFrame are NA.\n\n        >>> df = pd.DataFrame({'age': [5, 6, np.NaN],\n        ...                    'born': [pd.NaT, pd.Timestamp('1939-05-27'),\n        ...                             pd.Timestamp('1940-04-25')],\n        ...                    'name': ['Alfred', 'Batman', ''],\n        ...                    'toy': [None, 'Batmobile', 'Joker']})\n        >>> df\n           age       born    name        toy\n        0  5.0        NaT  Alfred       None\n        1  6.0 1939-05-27  Batman  Batmobile\n        2  NaN 1940-04-25              Joker\n\n        >>> df.isna()\n             age   born   name    toy\n        0  False   True  False   True\n        1  False  False  False  False\n        2   True  False  False  False\n\n        Show which entries in a Series are NA.\n\n        >>> ser = pd.Series([5, 6, np.NaN])\n        >>> ser\n        0    5.0\n        1    6.0\n        2    NaN\n        dtype: float64\n\n        >>> ser.isna()\n        0    False\n        1    False\n        2     True\n        dtype: bool\n        \"\"\"\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isna(self):\n        return isna(self).__finalize__(self)\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isnull(self):\n        return isna(self).__finalize__(self)\n    _shared_docs['notna'] = \"\"\"\n        Detect existing (non-missing) values.\n\n        Return a boolean same-sized object indicating if the values are not NA.\n        Non-missing values get mapped to True. Characters such as empty\n        strings ``''`` or :attr:`numpy.inf` are not considered NA values\n        (unless you set ``pandas.options.mode.use_inf_as_na = True``).\n        NA values, such as None or :attr:`numpy.NaN`, get mapped to False\n        values.\n\n        Returns\n        -------\n        %(klass)s\n            Mask of bool values for each element in %(klass)s that\n            indicates whether an element is not an NA value.\n\n        See Also\n        --------\n        %(klass)s.notnull : alias of notna\n        %(klass)s.isna : boolean inverse of notna\n        %(klass)s.dropna : omit axes labels with missing values\n        notna : top-level notna\n\n        Examples\n        --------\n        Show which entries in a DataFrame are not NA.\n\n        >>> df = pd.DataFrame({'age': [5, 6, np.NaN],\n        ...                    'born': [pd.NaT, pd.Timestamp('1939-05-27'),\n        ...                             pd.Timestamp('1940-04-25')],\n        ...                    'name': ['Alfred', 'Batman', ''],\n        ...                    'toy': [None, 'Batmobile', 'Joker']})\n        >>> df\n           age       born    name        toy\n        0  5.0        NaT  Alfred       None\n        1  6.0 1939-05-27  Batman  Batmobile\n        2  NaN 1940-04-25              Joker\n\n        >>> df.notna()\n             age   born  name    toy\n        0   True  False  True  False\n        1   True   True  True   True\n        2  False   True  True   True\n\n        Show which entries in a Series are not NA.\n\n        >>> ser = pd.Series([5, 6, np.NaN])\n        >>> ser\n        0    5.0\n        1    6.0\n        2    NaN\n        dtype: float64\n\n        >>> ser.notna()\n        0     True\n        1     True\n        2    False\n        dtype: bool\n        \"\"\"\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notna(self):\n        return notna(self).__finalize__(self)\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notnull(self):\n        return notna(self).__finalize__(self)\n\n    def _clip_with_scalar(self, lower, upper, inplace=False):\n        if lower is not None and np.any(isna(lower)\n            ) or upper is not None and np.any(isna(upper)):\n            raise ValueError('Cannot use an NA value as a clip threshold')\n        result = self.values\n        mask = isna(result)\n        with np.errstate(all='ignore'):\n            if upper is not None:\n                result = np.where(result >= upper, upper, result)\n            if lower is not None:\n                result = np.where(result <= lower, lower, result)\n        if np.any(mask):\n            result[mask] = np.nan\n        axes_dict = self._construct_axes_dict()\n        result = self._constructor(result, **axes_dict).__finalize__(self)\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result\n\n    def _clip_with_one_bound(self, threshold, method, axis, inplace):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n        if is_scalar(threshold) and is_number(threshold):\n            if method.__name__ == 'le':\n                return self._clip_with_scalar(None, threshold, inplace=inplace)\n            return self._clip_with_scalar(threshold, None, inplace=inplace)\n        subset = method(threshold, axis=axis) | isna(self)\n        if not isinstance(threshold, ABCSeries) and is_list_like(threshold):\n            if isinstance(self, ABCSeries):\n                threshold = pd.Series(threshold, index=self.index)\n            else:\n                threshold = _align_method_FRAME(self, np.asarray(threshold),\n                    axis)\n        return self.where(subset, threshold, axis=axis, inplace=inplace)\n\n    def clip(self, lower=None, upper=None, axis=None, inplace=False, *args,\n        **kwargs):\n        \"\"\"\n        Trim values at input threshold(s).\n\n        Assigns values outside boundary to boundary values. Thresholds\n        can be singular values or array like, and in the latter case\n        the clipping is performed element-wise in the specified axis.\n\n        Parameters\n        ----------\n        lower : float or array_like, default None\n            Minimum threshold value. All values below this\n            threshold will be set to it.\n        upper : float or array_like, default None\n            Maximum threshold value. All values above this\n            threshold will be set to it.\n        axis : int or string axis name, optional\n            Align object with lower and upper along the given axis.\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data.\n\n            .. versionadded:: 0.21.0\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted\n            for compatibility with numpy.\n\n        See Also\n        --------\n        clip_lower : Clip values below specified threshold(s).\n        clip_upper : Clip values above specified threshold(s).\n\n        Returns\n        -------\n        Series or DataFrame\n            Same type as calling object with the values outside the\n            clip boundaries replaced\n\n        Examples\n        --------\n        >>> data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}\n        >>> df = pd.DataFrame(data)\n        >>> df\n           col_0  col_1\n        0      9     -2\n        1     -3     -7\n        2      0      6\n        3     -1      8\n        4      5     -5\n\n        Clips per column using lower and upper thresholds:\n\n        >>> df.clip(-4, 6)\n           col_0  col_1\n        0      6     -2\n        1     -3     -4\n        2      0      6\n        3     -1      6\n        4      5     -4\n\n        Clips using specific lower and upper thresholds per column element:\n\n        >>> t = pd.Series([2, -4, -1, 6, 3])\n        >>> t\n        0    2\n        1   -4\n        2   -1\n        3    6\n        4    3\n        dtype: int64\n\n        >>> df.clip(t, t + 4, axis=0)\n           col_0  col_1\n        0      6      2\n        1     -3     -4\n        2      0      3\n        3      6      8\n        4      5      3\n        \"\"\"\n        if isinstance(self, ABCPanel):\n            raise NotImplementedError('clip is not supported yet for panels')\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = nv.validate_clip_with_axis(axis, args, kwargs)\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n        if np.any(pd.isnull(lower)):\n            lower = None\n        if np.any(pd.isnull(upper)):\n            upper = None\n        if lower is not None and upper is not None:\n            if is_scalar(lower) and is_scalar(upper):\n                lower, upper = min(lower, upper), max(lower, upper)\n        if (lower is None or is_scalar(lower) and is_number(lower)) and (\n            upper is None or is_scalar(upper) and is_number(upper)):\n            return self._clip_with_scalar(lower, upper, inplace=inplace)\n        result = self\n        if lower is not None:\n            result = result.clip_lower(lower, axis, inplace=inplace)\n        if upper is not None:\n            if inplace:\n                result = self\n            result = result.clip_upper(upper, axis, inplace=inplace)\n        return result\n\n    def clip_upper(self, threshold, axis=None, inplace=False):\n        \"\"\"\n        Return copy of input with values above given value(s) truncated.\n\n        Parameters\n        ----------\n        threshold : float or array_like\n        axis : int or string axis name, optional\n            Align object with threshold along the given axis.\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n\n            .. versionadded:: 0.21.0\n\n        See Also\n        --------\n        clip\n\n        Returns\n        -------\n        clipped : same type as input\n        \"\"\"\n        return self._clip_with_one_bound(threshold, method=self.le, axis=\n            axis, inplace=inplace)\n\n    def clip_lower(self, threshold, axis=None, inplace=False):\n        \"\"\"\n        Return copy of the input with values below a threshold truncated.\n\n        Parameters\n        ----------\n        threshold : numeric or array-like\n            Minimum value allowed. All values below threshold will be set to\n            this value.\n\n            * float : every value is compared to `threshold`.\n            * array-like : The shape of `threshold` should match the object\n              it's compared to. When `self` is a Series, `threshold` should be\n              the length. When `self` is a DataFrame, `threshold` should 2-D\n              and the same shape as `self` for ``axis=None``, or 1-D and the\n              same length as the axis being compared.\n\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Align `self` with `threshold` along the given axis.\n\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data.\n\n            .. versionadded:: 0.21.0\n\n        See Also\n        --------\n        Series.clip : Return copy of input with values below and above\n            thresholds truncated.\n        Series.clip_upper : Return copy of input with values above\n            threshold truncated.\n\n        Returns\n        -------\n        clipped : same type as input\n\n        Examples\n        --------\n        Series single threshold clipping:\n\n        >>> s = pd.Series([5, 6, 7, 8, 9])\n        >>> s.clip_lower(8)\n        0    8\n        1    8\n        2    8\n        3    8\n        4    9\n        dtype: int64\n\n        Series clipping element-wise using an array of thresholds. `threshold`\n        should be the same length as the Series.\n\n        >>> elemwise_thresholds = [4, 8, 7, 2, 5]\n        >>> s.clip_lower(elemwise_thresholds)\n        0    5\n        1    8\n        2    7\n        3    8\n        4    9\n        dtype: int64\n\n        DataFrames can be compared to a scalar.\n\n        >>> df = pd.DataFrame({\"A\": [1, 3, 5], \"B\": [2, 4, 6]})\n        >>> df\n           A  B\n        0  1  2\n        1  3  4\n        2  5  6\n\n        >>> df.clip_lower(3)\n           A  B\n        0  3  3\n        1  3  4\n        2  5  6\n\n        Or to an array of values. By default, `threshold` should be the same\n        shape as the DataFrame.\n\n        >>> df.clip_lower(np.array([[3, 4], [2, 2], [6, 2]]))\n           A  B\n        0  3  4\n        1  3  4\n        2  6  6\n\n        Control how `threshold` is broadcast with `axis`. In this case\n        `threshold` should be the same length as the axis specified by\n        `axis`.\n\n        >>> df.clip_lower(np.array([3, 3, 5]), axis='index')\n           A  B\n        0  3  3\n        1  3  4\n        2  5  6\n\n        >>> df.clip_lower(np.array([4, 5]), axis='columns')\n           A  B\n        0  4  5\n        1  4  5\n        2  5  6\n        \"\"\"\n        return self._clip_with_one_bound(threshold, method=self.ge, axis=\n            axis, inplace=inplace)\n\n    def groupby(self, by=None, axis=0, level=None, as_index=True, sort=True,\n        group_keys=True, squeeze=False, observed=False, **kwargs):\n        \"\"\"\n        Group series using mapper (dict or key function, apply given function\n        to group, return result as series) or by a series of columns.\n\n        Parameters\n        ----------\n        by : mapping, function, label, or list of labels\n            Used to determine the groups for the groupby.\n            If ``by`` is a function, it's called on each value of the object's\n            index. If a dict or Series is passed, the Series or dict VALUES\n            will be used to determine the groups (the Series' values are first\n            aligned; see ``.align()`` method). If an ndarray is passed, the\n            values are used as-is determine the groups. A label or list of\n            labels may be passed to group by the columns in ``self``. Notice\n            that a tuple is interpreted a (single) key.\n        axis : int, default 0\n        level : int, level name, or sequence of such, default None\n            If the axis is a MultiIndex (hierarchical), group by a particular\n            level or levels\n        as_index : boolean, default True\n            For aggregated output, return object with group labels as the\n            index. Only relevant for DataFrame input. as_index=False is\n            effectively \"SQL-style\" grouped output\n        sort : boolean, default True\n            Sort group keys. Get better performance by turning this off.\n            Note this does not influence the order of observations within each\n            group.  groupby preserves the order of rows within each group.\n        group_keys : boolean, default True\n            When calling apply, add group keys to index to identify pieces\n        squeeze : boolean, default False\n            reduce the dimensionality of the return type if possible,\n            otherwise return a consistent type\n        observed : boolean, default False\n            This only applies if any of the groupers are Categoricals\n            If True: only show observed values for categorical groupers.\n            If False: show all values for categorical groupers.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        GroupBy object\n\n        Examples\n        --------\n        DataFrame results\n\n        >>> data.groupby(func, axis=0).mean()\n        >>> data.groupby(['col1', 'col2'])['col3'].mean()\n\n        DataFrame with hierarchical index\n\n        >>> data.groupby(['col1', 'col2']).mean()\n\n        Notes\n        -----\n        See the `user guide\n        <http://pandas.pydata.org/pandas-docs/stable/groupby.html>`_ for more.\n\n        See also\n        --------\n        resample : Convenience method for frequency conversion and resampling\n            of time series.\n        \"\"\"\n        from pandas.core.groupby.groupby import groupby\n        if level is None and by is None:\n            raise TypeError(\"You have to supply one of 'by' and 'level'\")\n        axis = self._get_axis_number(axis)\n        return groupby(self, by=by, axis=axis, level=level, as_index=\n            as_index, sort=sort, group_keys=group_keys, squeeze=squeeze,\n            observed=observed, **kwargs)\n\n    def asfreq(self, freq, method=None, how=None, normalize=False,\n        fill_value=None):\n        \"\"\"\n        Convert TimeSeries to specified frequency.\n\n        Optionally provide filling method to pad/backfill missing values.\n\n        Returns the original data conformed to a new index with the specified\n        frequency. ``resample`` is more appropriate if an operation, such as\n        summarization, is necessary to represent the data at the new frequency.\n\n        Parameters\n        ----------\n        freq : DateOffset object, or string\n        method : {'backfill'/'bfill', 'pad'/'ffill'}, default None\n            Method to use for filling holes in reindexed Series (note this\n            does not fill NaNs that already were present):\n\n            * 'pad' / 'ffill': propagate last valid observation forward to next\n              valid\n            * 'backfill' / 'bfill': use NEXT valid observation to fill\n        how : {'start', 'end'}, default end\n            For PeriodIndex only, see PeriodIndex.asfreq\n        normalize : bool, default False\n            Whether to reset output index to midnight\n        fill_value: scalar, optional\n            Value to use for missing values, applied during upsampling (note\n            this does not fill NaNs that already were present).\n\n            .. versionadded:: 0.20.0\n\n        Returns\n        -------\n        converted : type of caller\n\n        Examples\n        --------\n\n        Start by creating a series with 4 one minute timestamps.\n\n        >>> index = pd.date_range('1/1/2000', periods=4, freq='T')\n        >>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n        >>> df = pd.DataFrame({'s':series})\n        >>> df\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:03:00    3.0\n\n        Upsample the series into 30 second bins.\n\n        >>> df.asfreq(freq='30S')\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    NaN\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    NaN\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    NaN\n        2000-01-01 00:03:00    3.0\n\n        Upsample again, providing a ``fill value``.\n\n        >>> df.asfreq(freq='30S', fill_value=9.0)\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    9.0\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    9.0\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    9.0\n        2000-01-01 00:03:00    3.0\n\n        Upsample again, providing a ``method``.\n\n        >>> df.asfreq(freq='30S', method='bfill')\n                               s\n        2000-01-01 00:00:00    0.0\n        2000-01-01 00:00:30    NaN\n        2000-01-01 00:01:00    NaN\n        2000-01-01 00:01:30    2.0\n        2000-01-01 00:02:00    2.0\n        2000-01-01 00:02:30    3.0\n        2000-01-01 00:03:00    3.0\n\n        See Also\n        --------\n        reindex\n\n        Notes\n        -----\n        To learn more about the frequency strings, please see `this link\n        <http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases>`__.\n        \"\"\"\n        from pandas.core.resample import asfreq\n        return asfreq(self, freq, method=method, how=how, normalize=\n            normalize, fill_value=fill_value)\n\n    def at_time(self, time, asof=False):\n        \"\"\"\n        Select values at particular time of day (e.g. 9:30AM).\n\n        Raises\n        ------\n        TypeError\n            If the index is not  a :class:`DatetimeIndex`\n\n        Parameters\n        ----------\n        time : datetime.time or string\n\n        Returns\n        -------\n        values_at_time : type of caller\n\n        Examples\n        --------\n        >>> i = pd.date_range('2018-04-09', periods=4, freq='12H')\n        >>> ts = pd.DataFrame({'A': [1,2,3,4]}, index=i)\n        >>> ts\n                             A\n        2018-04-09 00:00:00  1\n        2018-04-09 12:00:00  2\n        2018-04-10 00:00:00  3\n        2018-04-10 12:00:00  4\n\n        >>> ts.at_time('12:00')\n                             A\n        2018-04-09 12:00:00  2\n        2018-04-10 12:00:00  4\n\n        See Also\n        --------\n        between_time : Select values between particular times of the day\n        first : Select initial periods of time series based on a date offset\n        last : Select final periods of time series based on a date offset\n        DatetimeIndex.indexer_at_time : Get just the index locations for\n            values at particular time of the day\n        \"\"\"\n        try:\n            indexer = self.index.indexer_at_time(time, asof=asof)\n            return self._take(indexer)\n        except AttributeError:\n            raise TypeError('Index must be DatetimeIndex')\n\n    def between_time(self, start_time, end_time, include_start=True,\n        include_end=True):\n        \"\"\"\n        Select values between particular times of the day (e.g., 9:00-9:30 AM).\n\n        By setting ``start_time`` to be later than ``end_time``,\n        you can get the times that are *not* between the two times.\n\n        Raises\n        ------\n        TypeError\n            If the index is not  a :class:`DatetimeIndex`\n\n        Parameters\n        ----------\n        start_time : datetime.time or string\n        end_time : datetime.time or string\n        include_start : boolean, default True\n        include_end : boolean, default True\n\n        Returns\n        -------\n        values_between_time : type of caller\n\n        Examples\n        --------\n        >>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')\n        >>> ts = pd.DataFrame({'A': [1,2,3,4]}, index=i)\n        >>> ts\n                             A\n        2018-04-09 00:00:00  1\n        2018-04-10 00:20:00  2\n        2018-04-11 00:40:00  3\n        2018-04-12 01:00:00  4\n\n        >>> ts.between_time('0:15', '0:45')\n                             A\n        2018-04-10 00:20:00  2\n        2018-04-11 00:40:00  3\n\n        You get the times that are *not* between two times by setting\n        ``start_time`` later than ``end_time``:\n\n        >>> ts.between_time('0:45', '0:15')\n                             A\n        2018-04-09 00:00:00  1\n        2018-04-12 01:00:00  4\n\n        See Also\n        --------\n        at_time : Select values at a particular time of the day\n        first : Select initial periods of time series based on a date offset\n        last : Select final periods of time series based on a date offset\n        DatetimeIndex.indexer_between_time : Get just the index locations for\n            values between particular times of the day\n        \"\"\"\n        try:\n            indexer = self.index.indexer_between_time(start_time, end_time,\n                include_start=include_start, include_end=include_end)\n            return self._take(indexer)\n        except AttributeError:\n            raise TypeError('Index must be DatetimeIndex')\n\n    def resample(self, rule, how=None, axis=0, fill_method=None, closed=\n        None, label=None, convention='start', kind=None, loffset=None,\n        limit=None, base=0, on=None, level=None):\n        \"\"\"\n        Convenience method for frequency conversion and resampling of time\n        series.  Object must have a datetime-like index (DatetimeIndex,\n        PeriodIndex, or TimedeltaIndex), or pass datetime-like values\n        to the on or level keyword.\n\n        Parameters\n        ----------\n        rule : string\n            the offset string or object representing target conversion\n        axis : int, optional, default 0\n        closed : {'right', 'left'}\n            Which side of bin interval is closed. The default is 'left'\n            for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n            'BA', 'BQ', and 'W' which all have a default of 'right'.\n        label : {'right', 'left'}\n            Which bin edge label to label bucket with. The default is 'left'\n            for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n            'BA', 'BQ', and 'W' which all have a default of 'right'.\n        convention : {'start', 'end', 's', 'e'}\n            For PeriodIndex only, controls whether to use the start or end of\n            `rule`\n        kind: {'timestamp', 'period'}, optional\n            Pass 'timestamp' to convert the resulting index to a\n            ``DateTimeIndex`` or 'period' to convert it to a ``PeriodIndex``.\n            By default the input representation is retained.\n        loffset : timedelta\n            Adjust the resampled time labels\n        base : int, default 0\n            For frequencies that evenly subdivide 1 day, the \"origin\" of the\n            aggregated intervals. For example, for '5min' frequency, base could\n            range from 0 through 4. Defaults to 0\n        on : string, optional\n            For a DataFrame, column to use instead of index for resampling.\n            Column must be datetime-like.\n\n            .. versionadded:: 0.19.0\n\n        level : string or int, optional\n            For a MultiIndex, level (name or number) to use for\n            resampling.  Level must be datetime-like.\n\n            .. versionadded:: 0.19.0\n\n        Returns\n        -------\n        Resampler object\n\n        Notes\n        -----\n        See the `user guide\n        <http://pandas.pydata.org/pandas-docs/stable/timeseries.html#resampling>`_\n        for more.\n\n        To learn more about the offset strings, please see `this link\n        <http://pandas.pydata.org/pandas-docs/stable/timeseries.html#offset-aliases>`__.\n\n        Examples\n        --------\n\n        Start by creating a series with 9 one minute timestamps.\n\n        >>> index = pd.date_range('1/1/2000', periods=9, freq='T')\n        >>> series = pd.Series(range(9), index=index)\n        >>> series\n        2000-01-01 00:00:00    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:02:00    2\n        2000-01-01 00:03:00    3\n        2000-01-01 00:04:00    4\n        2000-01-01 00:05:00    5\n        2000-01-01 00:06:00    6\n        2000-01-01 00:07:00    7\n        2000-01-01 00:08:00    8\n        Freq: T, dtype: int64\n\n        Downsample the series into 3 minute bins and sum the values\n        of the timestamps falling into a bin.\n\n        >>> series.resample('3T').sum()\n        2000-01-01 00:00:00     3\n        2000-01-01 00:03:00    12\n        2000-01-01 00:06:00    21\n        Freq: 3T, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but label each\n        bin using the right edge instead of the left. Please note that the\n        value in the bucket used as the label is not included in the bucket,\n        which it labels. For example, in the original series the\n        bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\n        value in the resampled bucket with the label ``2000-01-01 00:03:00``\n        does not include 3 (if it did, the summed value would be 6, not 3).\n        To include this value close the right side of the bin interval as\n        illustrated in the example below this one.\n\n        >>> series.resample('3T', label='right').sum()\n        2000-01-01 00:03:00     3\n        2000-01-01 00:06:00    12\n        2000-01-01 00:09:00    21\n        Freq: 3T, dtype: int64\n\n        Downsample the series into 3 minute bins as above, but close the right\n        side of the bin interval.\n\n        >>> series.resample('3T', label='right', closed='right').sum()\n        2000-01-01 00:00:00     0\n        2000-01-01 00:03:00     6\n        2000-01-01 00:06:00    15\n        2000-01-01 00:09:00    15\n        Freq: 3T, dtype: int64\n\n        Upsample the series into 30 second bins.\n\n        >>> series.resample('30S').asfreq()[0:5] #select first 5 rows\n        2000-01-01 00:00:00   0.0\n        2000-01-01 00:00:30   NaN\n        2000-01-01 00:01:00   1.0\n        2000-01-01 00:01:30   NaN\n        2000-01-01 00:02:00   2.0\n        Freq: 30S, dtype: float64\n\n        Upsample the series into 30 second bins and fill the ``NaN``\n        values using the ``pad`` method.\n\n        >>> series.resample('30S').pad()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    0\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    1\n        2000-01-01 00:02:00    2\n        Freq: 30S, dtype: int64\n\n        Upsample the series into 30 second bins and fill the\n        ``NaN`` values using the ``bfill`` method.\n\n        >>> series.resample('30S').bfill()[0:5]\n        2000-01-01 00:00:00    0\n        2000-01-01 00:00:30    1\n        2000-01-01 00:01:00    1\n        2000-01-01 00:01:30    2\n        2000-01-01 00:02:00    2\n        Freq: 30S, dtype: int64\n\n        Pass a custom function via ``apply``\n\n        >>> def custom_resampler(array_like):\n        ...     return np.sum(array_like)+5\n\n        >>> series.resample('3T').apply(custom_resampler)\n        2000-01-01 00:00:00     8\n        2000-01-01 00:03:00    17\n        2000-01-01 00:06:00    26\n        Freq: 3T, dtype: int64\n\n        For a Series with a PeriodIndex, the keyword `convention` can be\n        used to control whether to use the start or end of `rule`.\n\n        >>> s = pd.Series([1, 2], index=pd.period_range('2012-01-01',\n                                                        freq='A',\n                                                        periods=2))\n        >>> s\n        2012    1\n        2013    2\n        Freq: A-DEC, dtype: int64\n\n        Resample by month using 'start' `convention`. Values are assigned to\n        the first month of the period.\n\n        >>> s.resample('M', convention='start').asfreq().head()\n        2012-01    1.0\n        2012-02    NaN\n        2012-03    NaN\n        2012-04    NaN\n        2012-05    NaN\n        Freq: M, dtype: float64\n\n        Resample by month using 'end' `convention`. Values are assigned to\n        the last month of the period.\n\n        >>> s.resample('M', convention='end').asfreq()\n        2012-12    1.0\n        2013-01    NaN\n        2013-02    NaN\n        2013-03    NaN\n        2013-04    NaN\n        2013-05    NaN\n        2013-06    NaN\n        2013-07    NaN\n        2013-08    NaN\n        2013-09    NaN\n        2013-10    NaN\n        2013-11    NaN\n        2013-12    2.0\n        Freq: M, dtype: float64\n\n        For DataFrame objects, the keyword ``on`` can be used to specify the\n        column instead of the index for resampling.\n\n        >>> df = pd.DataFrame(data=9*[range(4)], columns=['a', 'b', 'c', 'd'])\n        >>> df['time'] = pd.date_range('1/1/2000', periods=9, freq='T')\n        >>> df.resample('3T', on='time').sum()\n                             a  b  c  d\n        time\n        2000-01-01 00:00:00  0  3  6  9\n        2000-01-01 00:03:00  0  3  6  9\n        2000-01-01 00:06:00  0  3  6  9\n\n        For a DataFrame with MultiIndex, the keyword ``level`` can be used to\n        specify on level the resampling needs to take place.\n\n        >>> time = pd.date_range('1/1/2000', periods=5, freq='T')\n        >>> df2 = pd.DataFrame(data=10*[range(4)],\n                               columns=['a', 'b', 'c', 'd'],\n                               index=pd.MultiIndex.from_product([time, [1, 2]])\n                               )\n        >>> df2.resample('3T', level=0).sum()\n                             a  b   c   d\n        2000-01-01 00:00:00  0  6  12  18\n        2000-01-01 00:03:00  0  4   8  12\n\n        See also\n        --------\n        groupby : Group by mapping, function, label, or list of labels.\n        \"\"\"\n        from pandas.core.resample import resample, _maybe_process_deprecations\n        axis = self._get_axis_number(axis)\n        r = resample(self, freq=rule, label=label, closed=closed, axis=axis,\n            kind=kind, loffset=loffset, convention=convention, base=base,\n            key=on, level=level)\n        return _maybe_process_deprecations(r, how=how, fill_method=\n            fill_method, limit=limit)\n\n    def first(self, offset):\n        \"\"\"\n        Convenience method for subsetting initial periods of time series data\n        based on a date offset.\n\n        Raises\n        ------\n        TypeError\n            If the index is not  a :class:`DatetimeIndex`\n\n        Parameters\n        ----------\n        offset : string, DateOffset, dateutil.relativedelta\n\n        Examples\n        --------\n        >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n        >>> ts = pd.DataFrame({'A': [1,2,3,4]}, index=i)\n        >>> ts\n                    A\n        2018-04-09  1\n        2018-04-11  2\n        2018-04-13  3\n        2018-04-15  4\n\n        Get the rows for the first 3 days:\n\n        >>> ts.first('3D')\n                    A\n        2018-04-09  1\n        2018-04-11  2\n\n        Notice the data for 3 first calender days were returned, not the first\n        3 days observed in the dataset, and therefore data for 2018-04-13 was\n        not returned.\n\n        Returns\n        -------\n        subset : type of caller\n\n        See Also\n        --------\n        last : Select final periods of time series based on a date offset\n        at_time : Select values at a particular time of the day\n        between_time : Select values between particular times of the day\n        \"\"\"\n        from pandas.tseries.frequencies import to_offset\n        if not isinstance(self.index, DatetimeIndex):\n            raise TypeError(\"'first' only supports a DatetimeIndex index\")\n        if len(self.index) == 0:\n            return self\n        offset = to_offset(offset)\n        end_date = end = self.index[0] + offset\n        if not offset.isAnchored() and hasattr(offset, '_inc'):\n            if end_date in self.index:\n                end = self.index.searchsorted(end_date, side='left')\n                return self.iloc[:end]\n        return self.loc[:end]\n\n    def last(self, offset):\n        \"\"\"\n        Convenience method for subsetting final periods of time series data\n        based on a date offset.\n\n        Raises\n        ------\n        TypeError\n            If the index is not  a :class:`DatetimeIndex`\n\n        Parameters\n        ----------\n        offset : string, DateOffset, dateutil.relativedelta\n\n        Examples\n        --------\n        >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n        >>> ts = pd.DataFrame({'A': [1,2,3,4]}, index=i)\n        >>> ts\n                    A\n        2018-04-09  1\n        2018-04-11  2\n        2018-04-13  3\n        2018-04-15  4\n\n        Get the rows for the last 3 days:\n\n        >>> ts.last('3D')\n                    A\n        2018-04-13  3\n        2018-04-15  4\n\n        Notice the data for 3 last calender days were returned, not the last\n        3 observed days in the dataset, and therefore data for 2018-04-11 was\n        not returned.\n\n        Returns\n        -------\n        subset : type of caller\n\n        See Also\n        --------\n        first : Select initial periods of time series based on a date offset\n        at_time : Select values at a particular time of the day\n        between_time : Select values between particular times of the day\n        \"\"\"\n        from pandas.tseries.frequencies import to_offset\n        if not isinstance(self.index, DatetimeIndex):\n            raise TypeError(\"'last' only supports a DatetimeIndex index\")\n        if len(self.index) == 0:\n            return self\n        offset = to_offset(offset)\n        start_date = self.index[-1] - offset\n        start = self.index.searchsorted(start_date, side='right')\n        return self.iloc[start:]\n\n    def rank(self, axis=0, method='average', numeric_only=None, na_option=\n        'keep', ascending=True, pct=False):\n        \"\"\"\n        Compute numerical data ranks (1 through n) along axis. Equal values are\n        assigned a rank that is the average of the ranks of those values\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            index to direct ranking\n        method : {'average', 'min', 'max', 'first', 'dense'}\n            * average: average rank of group\n            * min: lowest rank in group\n            * max: highest rank in group\n            * first: ranks assigned in order they appear in the array\n            * dense: like 'min', but rank always increases by 1 between groups\n        numeric_only : boolean, default None\n            Include only float, int, boolean data. Valid only for DataFrame or\n            Panel objects\n        na_option : {'keep', 'top', 'bottom'}\n            * keep: leave NA values where they are\n            * top: smallest rank if ascending\n            * bottom: smallest rank if descending\n        ascending : boolean, default True\n            False for ranks by high (1) to low (N)\n        pct : boolean, default False\n            Computes percentage rank of data\n\n        Returns\n        -------\n        ranks : same type as caller\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if self.ndim > 2:\n            msg = 'rank does not make sense when ndim > 2'\n            raise NotImplementedError(msg)\n\n        def ranker(data):\n            ranks = algos.rank(data.values, axis=axis, method=method,\n                ascending=ascending, na_option=na_option, pct=pct)\n            ranks = self._constructor(ranks, **data._construct_axes_dict())\n            return ranks.__finalize__(self)\n        if numeric_only is None:\n            try:\n                return ranker(self)\n            except TypeError:\n                numeric_only = True\n        if numeric_only:\n            data = self._get_numeric_data()\n        else:\n            data = self\n        return ranker(data)\n    _shared_docs['align'] = \"\"\"\n        Align two objects on their axes with the\n        specified join method for each axis Index\n\n        Parameters\n        ----------\n        other : DataFrame or Series\n        join : {'outer', 'inner', 'left', 'right'}, default 'outer'\n        axis : allowed axis of the other object, default None\n            Align on index (0), columns (1), or both (None)\n        level : int or level name, default None\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n        copy : boolean, default True\n            Always returns new objects. If copy=False and no reindexing is\n            required then original objects are returned.\n        fill_value : scalar, default np.NaN\n            Value to use for missing values. Defaults to NaN, but can be any\n            \"compatible\" value\n        method : str, default None\n        limit : int, default None\n        fill_axis : %(axes_single_arg)s, default 0\n            Filling axis, method and limit\n        broadcast_axis : %(axes_single_arg)s, default None\n            Broadcast values along this axis, if aligning two objects of\n            different dimensions\n\n        Returns\n        -------\n        (left, right) : (%(klass)s, type of other)\n            Aligned objects\n        \"\"\"\n\n    @Appender(_shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n        fill_value=None, method=None, limit=None, fill_axis=0,\n        broadcast_axis=None):\n        from pandas import DataFrame, Series\n        method = missing.clean_fill_method(method)\n        if broadcast_axis == 1 and self.ndim != other.ndim:\n            if isinstance(self, Series):\n                cons = self._constructor_expanddim\n                df = cons({c: self for c in other.columns}, **other.\n                    _construct_axes_dict())\n                return df._align_frame(other, join=join, axis=axis, level=\n                    level, copy=copy, fill_value=fill_value, method=method,\n                    limit=limit, fill_axis=fill_axis)\n            elif isinstance(other, Series):\n                cons = other._constructor_expanddim\n                df = cons({c: other for c in self.columns}, **self.\n                    _construct_axes_dict())\n                return self._align_frame(df, join=join, axis=axis, level=\n                    level, copy=copy, fill_value=fill_value, method=method,\n                    limit=limit, fill_axis=fill_axis)\n        if axis is not None:\n            axis = self._get_axis_number(axis)\n        if isinstance(other, DataFrame):\n            return self._align_frame(other, join=join, axis=axis, level=\n                level, copy=copy, fill_value=fill_value, method=method,\n                limit=limit, fill_axis=fill_axis)\n        elif isinstance(other, Series):\n            return self._align_series(other, join=join, axis=axis, level=\n                level, copy=copy, fill_value=fill_value, method=method,\n                limit=limit, fill_axis=fill_axis)\n        else:\n            raise TypeError('unsupported type: %s' % type(other))\n\n    def _align_frame(self, other, join='outer', axis=None, level=None, copy\n        =True, fill_value=None, method=None, limit=None, fill_axis=0):\n        join_index, join_columns = None, None\n        ilidx, iridx = None, None\n        clidx, cridx = None, None\n        is_series = isinstance(self, ABCSeries)\n        if axis is None or axis == 0:\n            if not self.index.equals(other.index):\n                join_index, ilidx, iridx = self.index.join(other.index, how\n                    =join, level=level, return_indexers=True)\n        if axis is None or axis == 1:\n            if not is_series and not self.columns.equals(other.columns):\n                join_columns, clidx, cridx = self.columns.join(other.\n                    columns, how=join, level=level, return_indexers=True)\n        if is_series:\n            reindexers = {(0): [join_index, ilidx]}\n        else:\n            reindexers = {(0): [join_index, ilidx], (1): [join_columns, clidx]}\n        left = self._reindex_with_indexers(reindexers, copy=copy,\n            fill_value=fill_value, allow_dups=True)\n        right = other._reindex_with_indexers({(0): [join_index, iridx], (1):\n            [join_columns, cridx]}, copy=copy, fill_value=fill_value,\n            allow_dups=True)\n        if method is not None:\n            left = left.fillna(axis=fill_axis, method=method, limit=limit)\n            right = right.fillna(axis=fill_axis, method=method, limit=limit)\n        if is_datetime64tz_dtype(left.index):\n            if left.index.tz != right.index.tz:\n                if join_index is not None:\n                    left.index = join_index\n                    right.index = join_index\n        return left.__finalize__(self), right.__finalize__(other)\n\n    def _align_series(self, other, join='outer', axis=None, level=None,\n        copy=True, fill_value=None, method=None, limit=None, fill_axis=0):\n        is_series = isinstance(self, ABCSeries)\n        if is_series:\n            if axis:\n                raise ValueError(\n                    'cannot align series to a series other than axis 0')\n            if self.index.equals(other.index):\n                join_index, lidx, ridx = None, None, None\n            else:\n                join_index, lidx, ridx = self.index.join(other.index, how=\n                    join, level=level, return_indexers=True)\n            left = self._reindex_indexer(join_index, lidx, copy)\n            right = other._reindex_indexer(join_index, ridx, copy)\n        else:\n            fdata = self._data\n            if axis == 0:\n                join_index = self.index\n                lidx, ridx = None, None\n                if not self.index.equals(other.index):\n                    join_index, lidx, ridx = self.index.join(other.index,\n                        how=join, level=level, return_indexers=True)\n                if lidx is not None:\n                    fdata = fdata.reindex_indexer(join_index, lidx, axis=1)\n            elif axis == 1:\n                join_index = self.columns\n                lidx, ridx = None, None\n                if not self.columns.equals(other.index):\n                    join_index, lidx, ridx = self.columns.join(other.index,\n                        how=join, level=level, return_indexers=True)\n                if lidx is not None:\n                    fdata = fdata.reindex_indexer(join_index, lidx, axis=0)\n            else:\n                raise ValueError('Must specify axis=0 or 1')\n            if copy and fdata is self._data:\n                fdata = fdata.copy()\n            left = self._constructor(fdata)\n            if ridx is None:\n                right = other\n            else:\n                right = other.reindex(join_index, level=level)\n        fill_na = notna(fill_value) or method is not None\n        if fill_na:\n            left = left.fillna(fill_value, method=method, limit=limit, axis\n                =fill_axis)\n            right = right.fillna(fill_value, method=method, limit=limit)\n        if is_series or not is_series and axis == 0:\n            if is_datetime64tz_dtype(left.index):\n                if left.index.tz != right.index.tz:\n                    if join_index is not None:\n                        left.index = join_index\n                        right.index = join_index\n        return left.__finalize__(self), right.__finalize__(other)\n\n    def _where(self, cond, other=np.nan, inplace=False, axis=None, level=\n        None, errors='raise', try_cast=False):\n        \"\"\"\n        Equivalent to public method `where`, except that `other` is not\n        applied as a function even if callable. Used in __setitem__.\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        cond = com._apply_if_callable(cond, self)\n        if isinstance(cond, NDFrame):\n            cond, _ = cond.align(self, join='right', broadcast_axis=1)\n        else:\n            if not hasattr(cond, 'shape'):\n                cond = np.asanyarray(cond)\n            if cond.shape != self.shape:\n                raise ValueError('Array conditional must be same shape as self'\n                    )\n            cond = self._constructor(cond, **self._construct_axes_dict())\n        fill_value = True if inplace else False\n        cond = cond.fillna(fill_value)\n        msg = 'Boolean array expected for the condition, not {dtype}'\n        if not isinstance(cond, pd.DataFrame):\n            if not is_bool_dtype(cond):\n                raise ValueError(msg.format(dtype=cond.dtype))\n        else:\n            for dt in cond.dtypes:\n                if not is_bool_dtype(dt):\n                    raise ValueError(msg.format(dtype=dt))\n        cond = -cond if inplace else cond\n        try_quick = True\n        if hasattr(other, 'align'):\n            if other.ndim <= self.ndim:\n                _, other = self.align(other, join='left', axis=axis, level=\n                    level, fill_value=np.nan)\n                if axis is None and not all(other._get_axis(i).equals(ax) for\n                    i, ax in enumerate(self.axes)):\n                    raise InvalidIndexError\n            else:\n                raise NotImplementedError(\n                    'cannot align with a higher dimensional NDFrame')\n        if isinstance(other, np.ndarray):\n            if other.shape != self.shape:\n                if self.ndim == 1:\n                    icond = cond.values\n                    if len(other) == 1:\n                        other = np.array(other[0])\n                    elif len(cond[icond]) == len(other):\n                        if try_quick:\n                            try:\n                                new_other = com._values_from_object(self)\n                                new_other = new_other.copy()\n                                new_other[icond] = other\n                                other = new_other\n                            except Exception:\n                                try_quick = False\n                        if not try_quick:\n                            dtype, fill_value = maybe_promote(other.dtype)\n                            new_other = np.empty(len(icond), dtype=dtype)\n                            new_other.fill(fill_value)\n                            maybe_upcast_putmask(new_other, icond, other)\n                            other = new_other\n                    else:\n                        raise ValueError(\n                            'Length of replacements must equal series length')\n                else:\n                    raise ValueError(\n                        'other must be the same shape as self when an ndarray')\n            else:\n                other = self._constructor(other, **self._construct_axes_dict())\n        if axis is None:\n            axis = 0\n        if self.ndim == getattr(other, 'ndim', 0):\n            align = True\n        else:\n            align = self._get_axis_number(axis) == 1\n        block_axis = self._get_block_manager_axis(axis)\n        if inplace:\n            self._check_inplace_setting(other)\n            new_data = self._data.putmask(mask=cond, new=other, align=align,\n                inplace=True, axis=block_axis, transpose=self._AXIS_REVERSED)\n            self._update_inplace(new_data)\n        else:\n            new_data = self._data.where(other=other, cond=cond, align=align,\n                errors=errors, try_cast=try_cast, axis=block_axis,\n                transpose=self._AXIS_REVERSED)\n            return self._constructor(new_data).__finalize__(self)\n    _shared_docs['where'] = \"\"\"\n        Return an object of same shape as self and whose corresponding\n        entries are from self where `cond` is %(cond)s and otherwise are from\n        `other`.\n\n        Parameters\n        ----------\n        cond : boolean %(klass)s, array-like, or callable\n            Where `cond` is %(cond)s, keep the original value. Where\n            %(cond_rev)s, replace with corresponding value from `other`.\n            If `cond` is callable, it is computed on the %(klass)s and\n            should return boolean %(klass)s or array. The callable must\n            not change input %(klass)s (though pandas doesn't check it).\n\n            .. versionadded:: 0.18.1\n                A callable can be used as cond.\n\n        other : scalar, %(klass)s, or callable\n            Entries where `cond` is %(cond_rev)s are replaced with\n            corresponding value from `other`.\n            If other is callable, it is computed on the %(klass)s and\n            should return scalar or %(klass)s. The callable must not\n            change input %(klass)s (though pandas doesn't check it).\n\n            .. versionadded:: 0.18.1\n                A callable can be used as other.\n\n        inplace : boolean, default False\n            Whether to perform the operation in place on the data\n        axis : alignment axis if needed, default None\n        level : alignment level if needed, default None\n        errors : str, {'raise', 'ignore'}, default 'raise'\n            - ``raise`` : allow exceptions to be raised\n            - ``ignore`` : suppress exceptions. On error return original object\n\n            Note that currently this parameter won't affect\n            the results and will always coerce to a suitable dtype.\n\n        try_cast : boolean, default False\n            try to cast the result back to the input type (if possible),\n        raise_on_error : boolean, default True\n            Whether to raise on invalid data types (e.g. trying to where on\n            strings)\n\n            .. deprecated:: 0.21.0\n\n        Returns\n        -------\n        wh : same type as caller\n\n        Notes\n        -----\n        The %(name)s method is an application of the if-then idiom. For each\n        element in the calling DataFrame, if ``cond`` is ``%(cond)s`` the\n        element is used; otherwise the corresponding element from the DataFrame\n        ``other`` is used.\n\n        The signature for :func:`DataFrame.where` differs from\n        :func:`numpy.where`. Roughly ``df1.where(m, df2)`` is equivalent to\n        ``np.where(m, df1, df2)``.\n\n        For further details and examples see the ``%(name)s`` documentation in\n        :ref:`indexing <indexing.where_mask>`.\n\n        Examples\n        --------\n        >>> s = pd.Series(range(5))\n        >>> s.where(s > 0)\n        0    NaN\n        1    1.0\n        2    2.0\n        3    3.0\n        4    4.0\n\n        >>> s.mask(s > 0)\n        0    0.0\n        1    NaN\n        2    NaN\n        3    NaN\n        4    NaN\n\n        >>> s.where(s > 1, 10)\n        0    10.0\n        1    10.0\n        2    2.0\n        3    3.0\n        4    4.0\n\n        >>> df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['A', 'B'])\n        >>> m = df %% 3 == 0\n        >>> df.where(m, -df)\n           A  B\n        0  0 -1\n        1 -2  3\n        2 -4 -5\n        3  6 -7\n        4 -8  9\n        >>> df.where(m, -df) == np.where(m, df, -df)\n              A     B\n        0  True  True\n        1  True  True\n        2  True  True\n        3  True  True\n        4  True  True\n        >>> df.where(m, -df) == df.mask(~m, -df)\n              A     B\n        0  True  True\n        1  True  True\n        2  True  True\n        3  True  True\n        4  True  True\n\n        See Also\n        --------\n        :func:`DataFrame.%(name_other)s`\n        \"\"\"\n\n    @Appender(_shared_docs['where'] % dict(_shared_doc_kwargs, cond='True',\n        cond_rev='False', name='where', name_other='mask'))\n    def where(self, cond, other=np.nan, inplace=False, axis=None, level=\n        None, errors='raise', try_cast=False, raise_on_error=None):\n        if raise_on_error is not None:\n            warnings.warn(\n                \"raise_on_error is deprecated in favor of errors='raise|ignore'\"\n                , FutureWarning, stacklevel=2)\n            if raise_on_error:\n                errors = 'raise'\n            else:\n                errors = 'ignore'\n        other = com._apply_if_callable(other, self)\n        return self._where(cond, other, inplace, axis, level, errors=errors,\n            try_cast=try_cast)\n\n    @Appender(_shared_docs['where'] % dict(_shared_doc_kwargs, cond='False',\n        cond_rev='True', name='mask', name_other='where'))\n    def mask(self, cond, other=np.nan, inplace=False, axis=None, level=None,\n        errors='raise', try_cast=False, raise_on_error=None):\n        if raise_on_error is not None:\n            warnings.warn(\n                \"raise_on_error is deprecated in favor of errors='raise|ignore'\"\n                , FutureWarning, stacklevel=2)\n            if raise_on_error:\n                errors = 'raise'\n            else:\n                errors = 'ignore'\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        cond = com._apply_if_callable(cond, self)\n        return self.where(~cond, other=other, inplace=inplace, axis=axis,\n            level=level, try_cast=try_cast, errors=errors)\n    _shared_docs['shift'] = \"\"\"\n        Shift index by desired number of periods with an optional time freq\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n        freq : DateOffset, timedelta, or time rule string, optional\n            Increment to use from the tseries module or time rule (e.g. 'EOM').\n            See Notes.\n        axis : %(axes_single_arg)s\n\n        Notes\n        -----\n        If freq is specified then the index values are shifted but the data\n        is not realigned. That is, use freq if you would like to extend the\n        index when shifting and preserve the original data.\n\n        Returns\n        -------\n        shifted : %(klass)s\n    \"\"\"\n\n    @Appender(_shared_docs['shift'] % _shared_doc_kwargs)\n    def shift(self, periods=1, freq=None, axis=0):\n        if periods == 0:\n            return self\n        block_axis = self._get_block_manager_axis(axis)\n        if freq is None:\n            new_data = self._data.shift(periods=periods, axis=block_axis)\n        else:\n            return self.tshift(periods, freq)\n        return self._constructor(new_data).__finalize__(self)\n\n    def slice_shift(self, periods=1, axis=0):\n        \"\"\"\n        Equivalent to `shift` without copying data. The shifted data will\n        not include the dropped periods and the shifted axis will be smaller\n        than the original.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n\n        Notes\n        -----\n        While the `slice_shift` is faster than `shift`, you may pay for it\n        later during alignment.\n\n        Returns\n        -------\n        shifted : same type as caller\n        \"\"\"\n        if periods == 0:\n            return self\n        if periods > 0:\n            vslicer = slice(None, -periods)\n            islicer = slice(periods, None)\n        else:\n            vslicer = slice(-periods, None)\n            islicer = slice(None, periods)\n        new_obj = self._slice(vslicer, axis=axis)\n        shifted_axis = self._get_axis(axis)[islicer]\n        new_obj.set_axis(shifted_axis, axis=axis, inplace=True)\n        return new_obj.__finalize__(self)\n\n    def tshift(self, periods=1, freq=None, axis=0):\n        \"\"\"\n        Shift the time index, using the index's frequency if available.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n        freq : DateOffset, timedelta, or time rule string, default None\n            Increment to use from the tseries module or time rule (e.g. 'EOM')\n        axis : int or basestring\n            Corresponds to the axis that contains the Index\n\n        Notes\n        -----\n        If freq is not specified then tries to use the freq or inferred_freq\n        attributes of the index. If neither of those attributes exist, a\n        ValueError is thrown\n\n        Returns\n        -------\n        shifted : NDFrame\n        \"\"\"\n        index = self._get_axis(axis)\n        if freq is None:\n            freq = getattr(index, 'freq', None)\n        if freq is None:\n            freq = getattr(index, 'inferred_freq', None)\n        if freq is None:\n            msg = 'Freq was not given and was not set in the index'\n            raise ValueError(msg)\n        if periods == 0:\n            return self\n        if isinstance(freq, string_types):\n            freq = to_offset(freq)\n        block_axis = self._get_block_manager_axis(axis)\n        if isinstance(index, PeriodIndex):\n            orig_freq = to_offset(index.freq)\n            if freq == orig_freq:\n                new_data = self._data.copy()\n                new_data.axes[block_axis] = index.shift(periods)\n            else:\n                msg = 'Given freq %s does not match PeriodIndex freq %s' % (\n                    freq.rule_code, orig_freq.rule_code)\n                raise ValueError(msg)\n        else:\n            new_data = self._data.copy()\n            new_data.axes[block_axis] = index.shift(periods, freq)\n        return self._constructor(new_data).__finalize__(self)\n\n    def truncate(self, before=None, after=None, axis=None, copy=True):\n        \"\"\"\n        Truncate a Series or DataFrame before and after some index value.\n\n        This is a useful shorthand for boolean indexing based on index\n        values above or below certain thresholds.\n\n        Parameters\n        ----------\n        before : date, string, int\n            Truncate all rows before this index value.\n        after : date, string, int\n            Truncate all rows after this index value.\n        axis : {0 or 'index', 1 or 'columns'}, optional\n            Axis to truncate. Truncates the index (rows) by default.\n        copy : boolean, default is True,\n            Return a copy of the truncated section.\n\n        Returns\n        -------\n        type of caller\n            The truncated Series or DataFrame.\n\n        See Also\n        --------\n        DataFrame.loc : Select a subset of a DataFrame by label.\n        DataFrame.iloc : Select a subset of a DataFrame by position.\n\n        Notes\n        -----\n        If the index being truncated contains only datetime values,\n        `before` and `after` may be specified as strings instead of\n        Timestamps.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n        ...                    'B': ['f', 'g', 'h', 'i', 'j'],\n        ...                    'C': ['k', 'l', 'm', 'n', 'o']},\n        ...                    index=[1, 2, 3, 4, 5])\n        >>> df\n           A  B  C\n        1  a  f  k\n        2  b  g  l\n        3  c  h  m\n        4  d  i  n\n        5  e  j  o\n\n        >>> df.truncate(before=2, after=4)\n           A  B  C\n        2  b  g  l\n        3  c  h  m\n        4  d  i  n\n\n        The columns of a DataFrame can be truncated.\n\n        >>> df.truncate(before=\"A\", after=\"B\", axis=\"columns\")\n           A  B\n        1  a  f\n        2  b  g\n        3  c  h\n        4  d  i\n        5  e  j\n\n        For Series, only rows can be truncated.\n\n        >>> df['A'].truncate(before=2, after=4)\n        2    b\n        3    c\n        4    d\n        Name: A, dtype: object\n\n        The index values in ``truncate`` can be datetimes or string\n        dates.\n\n        >>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')\n        >>> df = pd.DataFrame(index=dates, data={'A': 1})\n        >>> df.tail()\n                             A\n        2016-01-31 23:59:56  1\n        2016-01-31 23:59:57  1\n        2016-01-31 23:59:58  1\n        2016-01-31 23:59:59  1\n        2016-02-01 00:00:00  1\n\n        >>> df.truncate(before=pd.Timestamp('2016-01-05'),\n        ...             after=pd.Timestamp('2016-01-10')).tail()\n                             A\n        2016-01-09 23:59:56  1\n        2016-01-09 23:59:57  1\n        2016-01-09 23:59:58  1\n        2016-01-09 23:59:59  1\n        2016-01-10 00:00:00  1\n\n        Because the index is a DatetimeIndex containing only dates, we can\n        specify `before` and `after` as strings. They will be coerced to\n        Timestamps before truncation.\n\n        >>> df.truncate('2016-01-05', '2016-01-10').tail()\n                             A\n        2016-01-09 23:59:56  1\n        2016-01-09 23:59:57  1\n        2016-01-09 23:59:58  1\n        2016-01-09 23:59:59  1\n        2016-01-10 00:00:00  1\n\n        Note that ``truncate`` assumes a 0 value for any unspecified time\n        component (midnight). This differs from partial string slicing, which\n        returns any partially matching dates.\n\n        >>> df.loc['2016-01-05':'2016-01-10', :].tail()\n                             A\n        2016-01-10 23:59:55  1\n        2016-01-10 23:59:56  1\n        2016-01-10 23:59:57  1\n        2016-01-10 23:59:58  1\n        2016-01-10 23:59:59  1\n        \"\"\"\n        if axis is None:\n            axis = self._stat_axis_number\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n        if not ax.is_monotonic_increasing and not ax.is_monotonic_decreasing:\n            raise ValueError('truncate requires a sorted index')\n        if ax.is_all_dates:\n            from pandas.core.tools.datetimes import to_datetime\n            before = to_datetime(before)\n            after = to_datetime(after)\n        if before is not None and after is not None:\n            if before > after:\n                raise ValueError('Truncate: %s must be after %s' % (after,\n                    before))\n        slicer = [slice(None, None)] * self._AXIS_LEN\n        slicer[axis] = slice(before, after)\n        result = self.loc[tuple(slicer)]\n        if isinstance(ax, MultiIndex):\n            setattr(result, self._get_axis_name(axis), ax.truncate(before,\n                after))\n        if copy:\n            result = result.copy()\n        return result\n\n    def tz_convert(self, tz, axis=0, level=None, copy=True):\n        \"\"\"\n        Convert tz-aware axis to target time zone.\n\n        Parameters\n        ----------\n        tz : string or pytz.timezone object\n        axis : the axis to convert\n        level : int, str, default None\n            If axis ia a MultiIndex, convert a specific level. Otherwise\n            must be None\n        copy : boolean, default True\n            Also make a copy of the underlying data\n\n        Returns\n        -------\n\n        Raises\n        ------\n        TypeError\n            If the axis is tz-naive.\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        def _tz_convert(ax, tz):\n            if not hasattr(ax, 'tz_convert'):\n                if len(ax) > 0:\n                    ax_name = self._get_axis_name(axis)\n                    raise TypeError(\n                        '%s is not a valid DatetimeIndex or PeriodIndex' %\n                        ax_name)\n                else:\n                    ax = DatetimeIndex([], tz=tz)\n            else:\n                ax = ax.tz_convert(tz)\n            return ax\n        if isinstance(ax, MultiIndex):\n            level = ax._get_level_number(level)\n            new_level = _tz_convert(ax.levels[level], tz)\n            ax = ax.set_levels(new_level, level=level)\n        else:\n            if level not in (None, 0, ax.name):\n                raise ValueError('The level {0} is not valid'.format(level))\n            ax = _tz_convert(ax, tz)\n        result = self._constructor(self._data, copy=copy)\n        result.set_axis(ax, axis=axis, inplace=True)\n        return result.__finalize__(self)\n\n    def tz_localize(self, tz, axis=0, level=None, copy=True, ambiguous='raise'\n        ):\n        \"\"\"\n        Localize tz-naive TimeSeries to target time zone.\n\n        Parameters\n        ----------\n        tz : string or pytz.timezone object\n        axis : the axis to localize\n        level : int, str, default None\n            If axis ia a MultiIndex, localize a specific level. Otherwise\n            must be None\n        copy : boolean, default True\n            Also make a copy of the underlying data\n        ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n            - 'infer' will attempt to infer fall dst-transition hours based on\n              order\n            - bool-ndarray where True signifies a DST time, False designates\n              a non-DST time (note that this flag is only applicable for\n              ambiguous times)\n            - 'NaT' will return NaT where there are ambiguous times\n            - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n              times\n\n        Returns\n        -------\n\n        Raises\n        ------\n        TypeError\n            If the TimeSeries is tz-aware and tz is not None.\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        ax = self._get_axis(axis)\n\n        def _tz_localize(ax, tz, ambiguous):\n            if not hasattr(ax, 'tz_localize'):\n                if len(ax) > 0:\n                    ax_name = self._get_axis_name(axis)\n                    raise TypeError(\n                        '%s is not a valid DatetimeIndex or PeriodIndex' %\n                        ax_name)\n                else:\n                    ax = DatetimeIndex([], tz=tz)\n            else:\n                ax = ax.tz_localize(tz, ambiguous=ambiguous)\n            return ax\n        if isinstance(ax, MultiIndex):\n            level = ax._get_level_number(level)\n            new_level = _tz_localize(ax.levels[level], tz, ambiguous)\n            ax = ax.set_levels(new_level, level=level)\n        else:\n            if level not in (None, 0, ax.name):\n                raise ValueError('The level {0} is not valid'.format(level))\n            ax = _tz_localize(ax, tz, ambiguous)\n        result = self._constructor(self._data, copy=copy)\n        result.set_axis(ax, axis=axis, inplace=True)\n        return result.__finalize__(self)\n\n    def abs(self):\n        \"\"\"\n        Return a Series/DataFrame with absolute numeric value of each element.\n\n        This function only applies to elements that are all numeric.\n\n        Returns\n        -------\n        abs\n            Series/DataFrame containing the absolute value of each element.\n\n        Notes\n        -----\n        For ``complex`` inputs, ``1.2 + 1j``, the absolute value is\n        :math:`\\\\sqrt{ a^2 + b^2 }`.\n\n        Examples\n        --------\n        Absolute numeric values in a Series.\n\n        >>> s = pd.Series([-1.10, 2, -3.33, 4])\n        >>> s.abs()\n        0    1.10\n        1    2.00\n        2    3.33\n        3    4.00\n        dtype: float64\n\n        Absolute numeric values in a Series with complex numbers.\n\n        >>> s = pd.Series([1.2 + 1j])\n        >>> s.abs()\n        0    1.56205\n        dtype: float64\n\n        Absolute numeric values in a Series with a Timedelta element.\n\n        >>> s = pd.Series([pd.Timedelta('1 days')])\n        >>> s.abs()\n        0   1 days\n        dtype: timedelta64[ns]\n\n        Select rows with data closest to certain value using argsort (from\n        `StackOverflow <https://stackoverflow.com/a/17758115>`__).\n\n        >>> df = pd.DataFrame({\n        ...     'a': [4, 5, 6, 7],\n        ...     'b': [10, 20, 30, 40],\n        ...     'c': [100, 50, -30, -50]\n        ... })\n        >>> df\n             a    b    c\n        0    4   10  100\n        1    5   20   50\n        2    6   30  -30\n        3    7   40  -50\n        >>> df.loc[(df.c - 43).abs().argsort()]\n             a    b    c\n        1    5   20   50\n        0    4   10  100\n        2    6   30  -30\n        3    7   40  -50\n\n        See Also\n        --------\n        numpy.absolute : calculate the absolute value element-wise.\n        \"\"\"\n        return np.abs(self)\n\n    def describe(self, percentiles=None, include=None, exclude=None):\n        \"\"\"\n        Generates descriptive statistics that summarize the central tendency,\n        dispersion and shape of a dataset's distribution, excluding\n        ``NaN`` values.\n\n        Analyzes both numeric and object series, as well\n        as ``DataFrame`` column sets of mixed data types. The output\n        will vary depending on what is provided. Refer to the notes\n        below for more detail.\n\n        Parameters\n        ----------\n        percentiles : list-like of numbers, optional\n            The percentiles to include in the output. All should\n            fall between 0 and 1. The default is\n            ``[.25, .5, .75]``, which returns the 25th, 50th, and\n            75th percentiles.\n        include : 'all', list-like of dtypes or None (default), optional\n            A white list of data types to include in the result. Ignored\n            for ``Series``. Here are the options:\n\n            - 'all' : All columns of the input will be included in the output.\n            - A list-like of dtypes : Limits the results to the\n              provided data types.\n              To limit the result to numeric types submit\n              ``numpy.number``. To limit it instead to object columns submit\n              the ``numpy.object`` data type. Strings\n              can also be used in the style of\n              ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n              select pandas categorical columns, use ``'category'``\n            - None (default) : The result will include all numeric columns.\n        exclude : list-like of dtypes or None (default), optional,\n            A black list of data types to omit from the result. Ignored\n            for ``Series``. Here are the options:\n\n            - A list-like of dtypes : Excludes the provided data types\n              from the result. To exclude numeric types submit\n              ``numpy.number``. To exclude object columns submit the data\n              type ``numpy.object``. Strings can also be used in the style of\n              ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n              exclude pandas categorical columns, use ``'category'``\n            - None (default) : The result will exclude nothing.\n\n        Returns\n        -------\n        summary:  Series/DataFrame of summary statistics\n\n        Notes\n        -----\n        For numeric data, the result's index will include ``count``,\n        ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\n        upper percentiles. By default the lower percentile is ``25`` and the\n        upper percentile is ``75``. The ``50`` percentile is the\n        same as the median.\n\n        For object data (e.g. strings or timestamps), the result's index\n        will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\n        is the most common value. The ``freq`` is the most common value's\n        frequency. Timestamps also include the ``first`` and ``last`` items.\n\n        If multiple object values have the highest count, then the\n        ``count`` and ``top`` results will be arbitrarily chosen from\n        among those with the highest count.\n\n        For mixed data types provided via a ``DataFrame``, the default is to\n        return only an analysis of numeric columns. If the dataframe consists\n        only of object and categorical data without any numeric columns, the\n        default is to return an analysis of both the object and categorical\n        columns. If ``include='all'`` is provided as an option, the result\n        will include a union of attributes of each type.\n\n        The `include` and `exclude` parameters can be used to limit\n        which columns in a ``DataFrame`` are analyzed for the output.\n        The parameters are ignored when analyzing a ``Series``.\n\n        Examples\n        --------\n        Describing a numeric ``Series``.\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s.describe()\n        count    3.0\n        mean     2.0\n        std      1.0\n        min      1.0\n        25%      1.5\n        50%      2.0\n        75%      2.5\n        max      3.0\n\n        Describing a categorical ``Series``.\n\n        >>> s = pd.Series(['a', 'a', 'b', 'c'])\n        >>> s.describe()\n        count     4\n        unique    3\n        top       a\n        freq      2\n        dtype: object\n\n        Describing a timestamp ``Series``.\n\n        >>> s = pd.Series([\n        ...   np.datetime64(\"2000-01-01\"),\n        ...   np.datetime64(\"2010-01-01\"),\n        ...   np.datetime64(\"2010-01-01\")\n        ... ])\n        >>> s.describe()\n        count                       3\n        unique                      2\n        top       2010-01-01 00:00:00\n        freq                        2\n        first     2000-01-01 00:00:00\n        last      2010-01-01 00:00:00\n        dtype: object\n\n        Describing a ``DataFrame``. By default only numeric fields\n        are returned.\n\n        >>> df = pd.DataFrame({ 'object': ['a', 'b', 'c'],\n        ...                     'numeric': [1, 2, 3],\n        ...                     'categorical': pd.Categorical(['d','e','f'])\n        ...                   })\n        >>> df.describe()\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        Describing all columns of a ``DataFrame`` regardless of data type.\n\n        >>> df.describe(include='all')\n                categorical  numeric object\n        count            3      3.0      3\n        unique           3      NaN      3\n        top              f      NaN      c\n        freq             1      NaN      1\n        mean           NaN      2.0    NaN\n        std            NaN      1.0    NaN\n        min            NaN      1.0    NaN\n        25%            NaN      1.5    NaN\n        50%            NaN      2.0    NaN\n        75%            NaN      2.5    NaN\n        max            NaN      3.0    NaN\n\n        Describing a column from a ``DataFrame`` by accessing it as\n        an attribute.\n\n        >>> df.numeric.describe()\n        count    3.0\n        mean     2.0\n        std      1.0\n        min      1.0\n        25%      1.5\n        50%      2.0\n        75%      2.5\n        max      3.0\n        Name: numeric, dtype: float64\n\n        Including only numeric columns in a ``DataFrame`` description.\n\n        >>> df.describe(include=[np.number])\n               numeric\n        count      3.0\n        mean       2.0\n        std        1.0\n        min        1.0\n        25%        1.5\n        50%        2.0\n        75%        2.5\n        max        3.0\n\n        Including only string columns in a ``DataFrame`` description.\n\n        >>> df.describe(include=[np.object])\n               object\n        count       3\n        unique      3\n        top         c\n        freq        1\n\n        Including only categorical columns from a ``DataFrame`` description.\n\n        >>> df.describe(include=['category'])\n               categorical\n        count            3\n        unique           3\n        top              f\n        freq             1\n\n        Excluding numeric columns from a ``DataFrame`` description.\n\n        >>> df.describe(exclude=[np.number])\n               categorical object\n        count            3      3\n        unique           3      3\n        top              f      c\n        freq             1      1\n\n        Excluding object columns from a ``DataFrame`` description.\n\n        >>> df.describe(exclude=[np.object])\n                categorical  numeric\n        count            3      3.0\n        unique           3      NaN\n        top              f      NaN\n        freq             1      NaN\n        mean           NaN      2.0\n        std            NaN      1.0\n        min            NaN      1.0\n        25%            NaN      1.5\n        50%            NaN      2.0\n        75%            NaN      2.5\n        max            NaN      3.0\n\n        See Also\n        --------\n        DataFrame.count\n        DataFrame.max\n        DataFrame.min\n        DataFrame.mean\n        DataFrame.std\n        DataFrame.select_dtypes\n        \"\"\"\n        if self.ndim >= 3:\n            msg = 'describe is not implemented on Panel objects.'\n            raise NotImplementedError(msg)\n        elif self.ndim == 2 and self.columns.size == 0:\n            raise ValueError('Cannot describe a DataFrame without columns')\n        if percentiles is not None:\n            percentiles = list(percentiles)\n            self._check_percentile(percentiles)\n            if 0.5 not in percentiles:\n                percentiles.append(0.5)\n            percentiles = np.asarray(percentiles)\n        else:\n            percentiles = np.array([0.25, 0.5, 0.75])\n        unique_pcts = np.unique(percentiles)\n        if len(unique_pcts) < len(percentiles):\n            raise ValueError('percentiles cannot contain duplicates')\n        percentiles = unique_pcts\n        formatted_percentiles = format_percentiles(percentiles)\n\n        def describe_numeric_1d(series):\n            stat_index = ['count', 'mean', 'std', 'min'\n                ] + formatted_percentiles + ['max']\n            d = [series.count(), series.mean(), series.std(), series.min()\n                ] + series.quantile(percentiles).tolist() + [series.max()]\n            return pd.Series(d, index=stat_index, name=series.name)\n\n        def describe_categorical_1d(data):\n            names = ['count', 'unique']\n            objcounts = data.value_counts()\n            count_unique = len(objcounts[objcounts != 0])\n            result = [data.count(), count_unique]\n            if result[1] > 0:\n                top, freq = objcounts.index[0], objcounts.iloc[0]\n                if is_datetime64_dtype(data):\n                    asint = data.dropna().values.view('i8')\n                    names += ['top', 'freq', 'first', 'last']\n                    result += [tslib.Timestamp(top), freq, tslib.Timestamp(\n                        asint.min()), tslib.Timestamp(asint.max())]\n                else:\n                    names += ['top', 'freq']\n                    result += [top, freq]\n            return pd.Series(result, index=names, name=data.name)\n\n        def describe_1d(data):\n            if is_bool_dtype(data):\n                return describe_categorical_1d(data)\n            elif is_numeric_dtype(data):\n                return describe_numeric_1d(data)\n            elif is_timedelta64_dtype(data):\n                return describe_numeric_1d(data)\n            else:\n                return describe_categorical_1d(data)\n        if self.ndim == 1:\n            return describe_1d(self)\n        elif include is None and exclude is None:\n            data = self.select_dtypes(include=[np.number])\n            if len(data.columns) == 0:\n                data = self\n        elif include == 'all':\n            if exclude is not None:\n                msg = \"exclude must be None when include is 'all'\"\n                raise ValueError(msg)\n            data = self\n        else:\n            data = self.select_dtypes(include=include, exclude=exclude)\n        ldesc = [describe_1d(s) for _, s in data.iteritems()]\n        names = []\n        ldesc_indexes = sorted([x.index for x in ldesc], key=len)\n        for idxnames in ldesc_indexes:\n            for name in idxnames:\n                if name not in names:\n                    names.append(name)\n        d = pd.concat(ldesc, join_axes=pd.Index([names]), axis=1)\n        d.columns = data.columns.copy()\n        return d\n\n    def _check_percentile(self, q):\n        \"\"\"Validate percentiles (used by describe and quantile).\"\"\"\n        msg = (\n            'percentiles should all be in the interval [0, 1]. Try {0} instead.'\n            )\n        q = np.asarray(q)\n        if q.ndim == 0:\n            if not 0 <= q <= 1:\n                raise ValueError(msg.format(q / 100.0))\n        elif not all(0 <= qs <= 1 for qs in q):\n            raise ValueError(msg.format(q / 100.0))\n        return q\n    _shared_docs['pct_change'] = \"\"\"\n        Percentage change between the current and a prior element.\n\n        Computes the percentage change from the immediately previous row by\n        default. This is useful in comparing the percentage of change in a time\n        series of elements.\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for forming percent change.\n        fill_method : str, default 'pad'\n            How to handle NAs before computing percent changes.\n        limit : int, default None\n            The number of consecutive NAs to fill before stopping.\n        freq : DateOffset, timedelta, or offset alias string, optional\n            Increment to use from time series API (e.g. 'M' or BDay()).\n        **kwargs\n            Additional keyword arguments are passed into\n            `DataFrame.shift` or `Series.shift`.\n\n        Returns\n        -------\n        chg : Series or DataFrame\n            The same type as the calling object.\n\n        See Also\n        --------\n        Series.diff : Compute the difference of two elements in a Series.\n        DataFrame.diff : Compute the difference of two elements in a DataFrame.\n        Series.shift : Shift the index by some number of periods.\n        DataFrame.shift : Shift the index by some number of periods.\n\n        Examples\n        --------\n        **Series**\n\n        >>> s = pd.Series([90, 91, 85])\n        >>> s\n        0    90\n        1    91\n        2    85\n        dtype: int64\n\n        >>> s.pct_change()\n        0         NaN\n        1    0.011111\n        2   -0.065934\n        dtype: float64\n\n        >>> s.pct_change(periods=2)\n        0         NaN\n        1         NaN\n        2   -0.055556\n        dtype: float64\n\n        See the percentage change in a Series where filling NAs with last\n        valid observation forward to next valid.\n\n        >>> s = pd.Series([90, 91, None, 85])\n        >>> s\n        0    90.0\n        1    91.0\n        2     NaN\n        3    85.0\n        dtype: float64\n\n        >>> s.pct_change(fill_method='ffill')\n        0         NaN\n        1    0.011111\n        2    0.000000\n        3   -0.065934\n        dtype: float64\n\n        **DataFrame**\n\n        Percentage change in French franc, Deutsche Mark, and Italian lira from\n        1980-01-01 to 1980-03-01.\n\n        >>> df = pd.DataFrame({\n        ...     'FR': [4.0405, 4.0963, 4.3149],\n        ...     'GR': [1.7246, 1.7482, 1.8519],\n        ...     'IT': [804.74, 810.01, 860.13]},\n        ...     index=['1980-01-01', '1980-02-01', '1980-03-01'])\n        >>> df\n                        FR      GR      IT\n        1980-01-01  4.0405  1.7246  804.74\n        1980-02-01  4.0963  1.7482  810.01\n        1980-03-01  4.3149  1.8519  860.13\n\n        >>> df.pct_change()\n                          FR        GR        IT\n        1980-01-01       NaN       NaN       NaN\n        1980-02-01  0.013810  0.013684  0.006549\n        1980-03-01  0.053365  0.059318  0.061876\n\n        Percentage of change in GOOG and APPL stock volume. Shows computing\n        the percentage change between columns.\n\n        >>> df = pd.DataFrame({\n        ...     '2016': [1769950, 30586265],\n        ...     '2015': [1500923, 40912316],\n        ...     '2014': [1371819, 41403351]},\n        ...     index=['GOOG', 'APPL'])\n        >>> df\n                  2016      2015      2014\n        GOOG   1769950   1500923   1371819\n        APPL  30586265  40912316  41403351\n\n        >>> df.pct_change(axis='columns')\n              2016      2015      2014\n        GOOG   NaN -0.151997 -0.086016\n        APPL   NaN  0.337604  0.012002\n        \"\"\"\n\n    @Appender(_shared_docs['pct_change'] % _shared_doc_kwargs)\n    def pct_change(self, periods=1, fill_method='pad', limit=None, freq=\n        None, **kwargs):\n        axis = self._get_axis_number(kwargs.pop('axis', self._stat_axis_name))\n        if fill_method is None:\n            data = self\n        else:\n            data = self.fillna(method=fill_method, limit=limit, axis=axis)\n        rs = data.div(data.shift(periods=periods, freq=freq, axis=axis, **\n            kwargs)) - 1\n        rs = rs.reindex_like(data)\n        if freq is None:\n            mask = isna(com._values_from_object(data))\n            np.putmask(rs.values, mask, np.nan)\n        return rs\n\n    def _agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs):\n        grouped = self.groupby(level=level, axis=axis, sort=False)\n        if hasattr(grouped, name) and skipna:\n            return getattr(grouped, name)(**kwargs)\n        axis = self._get_axis_number(axis)\n        method = getattr(type(self), name)\n        applyf = lambda x: method(x, axis=axis, skipna=skipna, **kwargs)\n        return grouped.aggregate(applyf)\n\n    @classmethod\n    def _add_numeric_operations(cls):\n        \"\"\"Add the operations to the cls; evaluate the doc strings again\"\"\"\n        axis_descr, name, name2 = _doc_parms(cls)\n        cls.any = _make_logical_function(cls, 'any', name, name2,\n            axis_descr, _any_desc, nanops.nanany, _any_examples, _any_see_also)\n        cls.all = _make_logical_function(cls, 'all', name, name2,\n            axis_descr, _all_doc, nanops.nanall, _all_examples, _all_see_also)\n\n        @Substitution(outname='mad', desc=\n            'Return the mean absolute deviation of the values for the requested axis'\n            , name1=name, name2=name2, axis_descr=axis_descr, min_count='',\n            examples='')\n        @Appender(_num_doc)\n        def mad(self, axis=None, skipna=None, level=None):\n            if skipna is None:\n                skipna = True\n            if axis is None:\n                axis = self._stat_axis_number\n            if level is not None:\n                return self._agg_by_level('mad', axis=axis, level=level,\n                    skipna=skipna)\n            data = self._get_numeric_data()\n            if axis == 0:\n                demeaned = data - data.mean(axis=0)\n            else:\n                demeaned = data.sub(data.mean(axis=1), axis=0)\n            return np.abs(demeaned).mean(axis=axis, skipna=skipna)\n        cls.mad = mad\n        cls.sem = _make_stat_function_ddof(cls, 'sem', name, name2,\n            axis_descr,\n            \"\"\"Return unbiased standard error of the mean over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument\"\"\"\n            , nanops.nansem)\n        cls.var = _make_stat_function_ddof(cls, 'var', name, name2,\n            axis_descr,\n            \"\"\"Return unbiased variance over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument\"\"\"\n            , nanops.nanvar)\n        cls.std = _make_stat_function_ddof(cls, 'std', name, name2,\n            axis_descr,\n            \"\"\"Return sample standard deviation over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument\"\"\"\n            , nanops.nanstd)\n\n        @Substitution(outname='compounded', desc=\n            'Return the compound percentage of the values for the requested axis'\n            , name1=name, name2=name2, axis_descr=axis_descr, min_count='',\n            examples='')\n        @Appender(_num_doc)\n        def compound(self, axis=None, skipna=None, level=None):\n            if skipna is None:\n                skipna = True\n            return (1 + self).prod(axis=axis, skipna=skipna, level=level) - 1\n        cls.compound = compound\n        cls.cummin = _make_cum_function(cls, 'cummin', name, name2,\n            axis_descr, 'minimum', lambda y, axis: np.minimum.accumulate(y,\n            axis), 'min', np.inf, np.nan, _cummin_examples)\n        cls.cumsum = _make_cum_function(cls, 'cumsum', name, name2,\n            axis_descr, 'sum', lambda y, axis: y.cumsum(axis), 'sum', 0.0,\n            np.nan, _cumsum_examples)\n        cls.cumprod = _make_cum_function(cls, 'cumprod', name, name2,\n            axis_descr, 'product', lambda y, axis: y.cumprod(axis), 'prod',\n            1.0, np.nan, _cumprod_examples)\n        cls.cummax = _make_cum_function(cls, 'cummax', name, name2,\n            axis_descr, 'maximum', lambda y, axis: np.maximum.accumulate(y,\n            axis), 'max', -np.inf, np.nan, _cummax_examples)\n        cls.sum = _make_min_count_stat_function(cls, 'sum', name, name2,\n            axis_descr,\n            'Return the sum of the values for the requested axis', nanops.\n            nansum, _sum_examples)\n        cls.mean = _make_stat_function(cls, 'mean', name, name2, axis_descr,\n            'Return the mean of the values for the requested axis', nanops.\n            nanmean)\n        cls.skew = _make_stat_function(cls, 'skew', name, name2, axis_descr,\n            \"\"\"Return unbiased skew over requested axis\nNormalized by N-1\"\"\",\n            nanops.nanskew)\n        cls.kurt = _make_stat_function(cls, 'kurt', name, name2, axis_descr,\n            \"\"\"Return unbiased kurtosis over requested axis using Fisher's definition of\nkurtosis (kurtosis of normal == 0.0). Normalized by N-1\n\"\"\"\n            , nanops.nankurt)\n        cls.kurtosis = cls.kurt\n        cls.prod = _make_min_count_stat_function(cls, 'prod', name, name2,\n            axis_descr,\n            'Return the product of the values for the requested axis',\n            nanops.nanprod, _prod_examples)\n        cls.product = cls.prod\n        cls.median = _make_stat_function(cls, 'median', name, name2,\n            axis_descr,\n            'Return the median of the values for the requested axis',\n            nanops.nanmedian)\n        cls.max = _make_stat_function(cls, 'max', name, name2, axis_descr,\n            \"\"\"This method returns the maximum of the values in the object.\n            If you want the *index* of the maximum, use ``idxmax``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmax``.\"\"\"\n            , nanops.nanmax)\n        cls.min = _make_stat_function(cls, 'min', name, name2, axis_descr,\n            \"\"\"This method returns the minimum of the values in the object.\n            If you want the *index* of the minimum, use ``idxmin``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmin``.\"\"\"\n            , nanops.nanmin)\n\n    @classmethod\n    def _add_series_only_operations(cls):\n        \"\"\"Add the series only operations to the cls; evaluate the doc\n        strings again.\n        \"\"\"\n        axis_descr, name, name2 = _doc_parms(cls)\n\n        def nanptp(values, axis=0, skipna=True):\n            nmax = nanops.nanmax(values, axis, skipna)\n            nmin = nanops.nanmin(values, axis, skipna)\n            return nmax - nmin\n        cls.ptp = _make_stat_function(cls, 'ptp', name, name2, axis_descr,\n            \"\"\"Returns the difference between the maximum value and the\n            minimum value in the object. This is the equivalent of the\n            ``numpy.ndarray`` method ``ptp``.\"\"\"\n            , nanptp)\n\n    @classmethod\n    def _add_series_or_dataframe_operations(cls):\n        \"\"\"Add the series or dataframe only operations to the cls; evaluate\n        the doc strings again.\n        \"\"\"\n        from pandas.core import window as rwindow\n\n        @Appender(rwindow.rolling.__doc__)\n        def rolling(self, window, min_periods=None, center=False, win_type=\n            None, on=None, axis=0, closed=None):\n            axis = self._get_axis_number(axis)\n            return rwindow.rolling(self, window=window, min_periods=\n                min_periods, center=center, win_type=win_type, on=on, axis=\n                axis, closed=closed)\n        cls.rolling = rolling\n\n        @Appender(rwindow.expanding.__doc__)\n        def expanding(self, min_periods=1, center=False, axis=0):\n            axis = self._get_axis_number(axis)\n            return rwindow.expanding(self, min_periods=min_periods, center=\n                center, axis=axis)\n        cls.expanding = expanding\n\n        @Appender(rwindow.ewm.__doc__)\n        def ewm(self, com=None, span=None, halflife=None, alpha=None,\n            min_periods=0, adjust=True, ignore_na=False, axis=0):\n            axis = self._get_axis_number(axis)\n            return rwindow.ewm(self, com=com, span=span, halflife=halflife,\n                alpha=alpha, min_periods=min_periods, adjust=adjust,\n                ignore_na=ignore_na, axis=axis)\n        cls.ewm = ewm\n\n        @Appender(_shared_docs['transform'] % _shared_doc_kwargs)\n        def transform(self, func, *args, **kwargs):\n            result = self.agg(func, *args, **kwargs)\n            if is_scalar(result) or len(result) != len(self):\n                raise ValueError('transforms cannot produce aggregated results'\n                    )\n            return result\n        cls.transform = transform\n    _shared_docs['valid_index'] = \"\"\"\n        Return index for %(position)s non-NA/null value.\n\n        Notes\n        --------\n        If all elements are non-NA/null, returns None.\n        Also returns None for empty %(klass)s.\n\n        Returns\n        --------\n        scalar : type of index\n        \"\"\"\n\n    def _find_valid_index(self, how):\n        \"\"\"Retrieves the index of the first valid value.\n\n        Parameters\n        ----------\n        how : {'first', 'last'}\n            Use this parameter to change between the first or last valid index.\n\n        Returns\n        -------\n        idx_first_valid : type of index\n        \"\"\"\n        assert how in ['first', 'last']\n        if len(self) == 0:\n            return None\n        is_valid = ~self.isna()\n        if self.ndim == 2:\n            is_valid = is_valid.any(1)\n        if how == 'first':\n            idxpos = is_valid.values[:].argmax()\n        if how == 'last':\n            idxpos = len(self) - 1 - is_valid.values[::-1].argmax()\n        chk_notna = is_valid.iat[idxpos]\n        idx = self.index[idxpos]\n        if not chk_notna:\n            return None\n        return idx\n\n    @Appender(_shared_docs['valid_index'] % {'position': 'first', 'klass':\n        'NDFrame'})\n    def first_valid_index(self):\n        return self._find_valid_index('first')\n\n    @Appender(_shared_docs['valid_index'] % {'position': 'last', 'klass':\n        'NDFrame'})\n    def last_valid_index(self):\n        return self._find_valid_index('last')\n",
                        "belong_class_name": "NDFrame",
                        "belong_class_init": "def __init__(self, data, axes=None, copy=False, dtype=None, fastpath=False):\n    if not fastpath:\n        if dtype is not None:\n            data = data.astype(dtype)\n        elif copy:\n            data = data.copy()\n        if axes is not None:\n            for i, ax in enumerate(axes):\n                data = data.reindex_axis(ax, axis=i)\n    object.__setattr__(self, '_is_copy', None)\n    object.__setattr__(self, '_data', data)\n    object.__setattr__(self, '_item_cache', {})\n",
                        "called_function_name": "rename_axis",
                        "called_function_content": "@Appender(_shared_docs['rename'] % dict(axes=\n    'axes keywords for this object', klass='NDFrame', optional_mapper='',\n    optional_axis=''))\ndef rename(self, *args, **kwargs):\n    axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n    copy = kwargs.pop('copy', True)\n    inplace = kwargs.pop('inplace', False)\n    level = kwargs.pop('level', None)\n    axis = kwargs.pop('axis', None)\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n    if kwargs:\n        raise TypeError('rename() got an unexpected keyword argument \"{0}\"'\n            .format(list(kwargs.keys())[0]))\n    if com._count_not_none(*axes.values()) == 0:\n        raise TypeError('must pass an index to rename')\n\n    def _get_rename_function(mapper):\n        if isinstance(mapper, (dict, ABCSeries)):\n\n            def f(x):\n                if x in mapper:\n                    return mapper[x]\n                else:\n                    return x\n        else:\n            f = mapper\n        return f\n    self._consolidate_inplace()\n    result = self if inplace else self.copy(deep=copy)\n    for axis in lrange(self._AXIS_LEN):\n        v = axes.get(self._AXIS_NAMES[axis])\n        if v is None:\n            continue\n        f = _get_rename_function(v)\n        baxis = self._get_block_manager_axis(axis)\n        if level is not None:\n            level = self.axes[axis]._get_level_number(level)\n        result._data = result._data.rename_axis(f, axis=baxis, copy=copy,\n            level=level)\n",
                        "called_arguments": "(f, axis=baxis, copy=copy,\n            level=level)",
                        "called_function_parameter": "(self, mapper, axis, copy=True, level=None)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "rename_axis",
                        "function_content": "def rename_axis(self, mapper, axis, copy=True, level=None):\n    \"\"\"\n        Rename one of axes.\n\n        Parameters\n        ----------\n        mapper : unary callable\n        axis : int\n        copy : boolean, default True\n        level : int, default None\n\n        \"\"\"\n    obj = self.copy(deep=copy)\n    obj.set_axis(axis, _transform_index(self.axes[axis], mapper, level))\n    return obj\n",
                        "function_parameter": "(self, mapper, axis, copy=True, level=None)",
                        "belong_class_content": "class BlockManager(PandasObject):\n    \"\"\"\n    Core internal data structure to implement DataFrame, Series, Panel, etc.\n\n    Manage a bunch of labeled 2D mixed-type ndarrays. Essentially it's a\n    lightweight blocked set of labeled data to be manipulated by the DataFrame\n    public API class\n\n    Attributes\n    ----------\n    shape\n    ndim\n    axes\n    values\n    items\n\n    Methods\n    -------\n    set_axis(axis, new_labels)\n    copy(deep=True)\n\n    get_dtype_counts\n    get_ftype_counts\n    get_dtypes\n    get_ftypes\n\n    apply(func, axes, block_filter_fn)\n\n    get_bool_data\n    get_numeric_data\n\n    get_slice(slice_like, axis)\n    get(label)\n    iget(loc)\n    get_scalar(label_tup)\n\n    take(indexer, axis)\n    reindex_axis(new_labels, axis)\n    reindex_indexer(new_labels, indexer, axis)\n\n    delete(label)\n    insert(loc, label, value)\n    set(label, value)\n\n    Parameters\n    ----------\n\n\n    Notes\n    -----\n    This is *not* a public API class\n    \"\"\"\n    __slots__ = ['axes', 'blocks', '_ndim', '_shape', '_known_consolidated',\n        '_is_consolidated', '_blknos', '_blklocs']\n\n    def __init__(self, blocks, axes, do_integrity_check=True):\n        self.axes = [_ensure_index(ax) for ax in axes]\n        self.blocks = tuple(blocks)\n        for block in blocks:\n            if block.is_sparse:\n                if len(block.mgr_locs) != 1:\n                    raise AssertionError(\n                        'Sparse block refers to multiple items')\n            elif self.ndim != block.ndim:\n                raise AssertionError(\n                    'Number of Block dimensions ({block}) must equal number of axes ({self})'\n                    .format(block=block.ndim, self=self.ndim))\n        if do_integrity_check:\n            self._verify_integrity()\n        self._consolidate_check()\n        self._rebuild_blknos_and_blklocs()\n\n    def make_empty(self, axes=None):\n        \"\"\" return an empty BlockManager with the items axis of len 0 \"\"\"\n        if axes is None:\n            axes = [_ensure_index([])] + [_ensure_index(a) for a in self.\n                axes[1:]]\n        if self.ndim == 1:\n            blocks = np.array([], dtype=self.array_dtype)\n        else:\n            blocks = []\n        return self.__class__(blocks, axes)\n\n    def __nonzero__(self):\n        return True\n    __bool__ = __nonzero__\n\n    @property\n    def shape(self):\n        return tuple(len(ax) for ax in self.axes)\n\n    @property\n    def ndim(self):\n        return len(self.axes)\n\n    def set_axis(self, axis, new_labels):\n        new_labels = _ensure_index(new_labels)\n        old_len = len(self.axes[axis])\n        new_len = len(new_labels)\n        if new_len != old_len:\n            raise ValueError(\n                'Length mismatch: Expected axis has {old} elements, new values have {new} elements'\n                .format(old=old_len, new=new_len))\n        self.axes[axis] = new_labels\n\n    def rename_axis(self, mapper, axis, copy=True, level=None):\n        \"\"\"\n        Rename one of axes.\n\n        Parameters\n        ----------\n        mapper : unary callable\n        axis : int\n        copy : boolean, default True\n        level : int, default None\n\n        \"\"\"\n        obj = self.copy(deep=copy)\n        obj.set_axis(axis, _transform_index(self.axes[axis], mapper, level))\n        return obj\n\n    def add_prefix(self, prefix):\n        f = partial('{prefix}{}'.format, prefix=prefix)\n        return self.rename_axis(f, axis=0)\n\n    def add_suffix(self, suffix):\n        f = partial('{}{suffix}'.format, suffix=suffix)\n        return self.rename_axis(f, axis=0)\n\n    @property\n    def _is_single_block(self):\n        if self.ndim == 1:\n            return True\n        if len(self.blocks) != 1:\n            return False\n        blk = self.blocks[0]\n        return blk.mgr_locs.is_slice_like and blk.mgr_locs.as_slice == slice(\n            0, len(self), 1)\n\n    def _rebuild_blknos_and_blklocs(self):\n        \"\"\"\n        Update mgr._blknos / mgr._blklocs.\n        \"\"\"\n        new_blknos = np.empty(self.shape[0], dtype=np.int64)\n        new_blklocs = np.empty(self.shape[0], dtype=np.int64)\n        new_blknos.fill(-1)\n        new_blklocs.fill(-1)\n        for blkno, blk in enumerate(self.blocks):\n            rl = blk.mgr_locs\n            new_blknos[rl.indexer] = blkno\n            new_blklocs[rl.indexer] = np.arange(len(rl))\n        if (new_blknos == -1).any():\n            raise AssertionError('Gaps in blk ref_locs')\n        self._blknos = new_blknos\n        self._blklocs = new_blklocs\n\n    def _get_items(self):\n        return self.axes[0]\n    items = property(fget=_get_items)\n\n    def _get_counts(self, f):\n        \"\"\" return a dict of the counts of the function in BlockManager \"\"\"\n        self._consolidate_inplace()\n        counts = dict()\n        for b in self.blocks:\n            v = f(b)\n            counts[v] = counts.get(v, 0) + b.shape[0]\n        return counts\n\n    def get_dtype_counts(self):\n        return self._get_counts(lambda b: b.dtype.name)\n\n    def get_ftype_counts(self):\n        return self._get_counts(lambda b: b.ftype)\n\n    def get_dtypes(self):\n        dtypes = np.array([blk.dtype for blk in self.blocks])\n        return algos.take_1d(dtypes, self._blknos, allow_fill=False)\n\n    def get_ftypes(self):\n        ftypes = np.array([blk.ftype for blk in self.blocks])\n        return algos.take_1d(ftypes, self._blknos, allow_fill=False)\n\n    def __getstate__(self):\n        block_values = [b.values for b in self.blocks]\n        block_items = [self.items[b.mgr_locs.indexer] for b in self.blocks]\n        axes_array = [ax for ax in self.axes]\n        extra_state = {'0.14.1': {'axes': axes_array, 'blocks': [dict(\n            values=b.values, mgr_locs=b.mgr_locs.indexer) for b in self.\n            blocks]}}\n        return axes_array, block_values, block_items, extra_state\n\n    def __setstate__(self, state):\n\n        def unpickle_block(values, mgr_locs):\n            if values.dtype == 'M8[us]':\n                values = values.astype('M8[ns]')\n            return make_block(values, placement=mgr_locs)\n        if isinstance(state, tuple) and len(state) >= 4 and '0.14.1' in state[3\n            ]:\n            state = state[3]['0.14.1']\n            self.axes = [_ensure_index(ax) for ax in state['axes']]\n            self.blocks = tuple(unpickle_block(b['values'], b['mgr_locs']) for\n                b in state['blocks'])\n        else:\n            ax_arrays, bvalues, bitems = state[:3]\n            self.axes = [_ensure_index(ax) for ax in ax_arrays]\n            if len(bitems) == 1 and self.axes[0].equals(bitems[0]):\n                all_mgr_locs = [slice(0, len(bitems[0]))]\n            else:\n                all_mgr_locs = [self.axes[0].get_indexer(blk_items) for\n                    blk_items in bitems]\n            self.blocks = tuple(unpickle_block(values, mgr_locs) for values,\n                mgr_locs in zip(bvalues, all_mgr_locs))\n        self._post_setstate()\n\n    def _post_setstate(self):\n        self._is_consolidated = False\n        self._known_consolidated = False\n        self._rebuild_blknos_and_blklocs()\n\n    def __len__(self):\n        return len(self.items)\n\n    def __unicode__(self):\n        output = pprint_thing(self.__class__.__name__)\n        for i, ax in enumerate(self.axes):\n            if i == 0:\n                output += u('\\nItems: {ax}'.format(ax=ax))\n            else:\n                output += u('\\nAxis {i}: {ax}'.format(i=i, ax=ax))\n        for block in self.blocks:\n            output += u('\\n{block}'.format(block=pprint_thing(block)))\n        return output\n\n    def _verify_integrity(self):\n        mgr_shape = self.shape\n        tot_items = sum(len(x.mgr_locs) for x in self.blocks)\n        for block in self.blocks:\n            if block._verify_integrity and block.shape[1:] != mgr_shape[1:]:\n                construction_error(tot_items, block.shape[1:], self.axes)\n        if len(self.items) != tot_items:\n            raise AssertionError(\n                \"\"\"Number of manager items must equal union of block items\n# manager items: {0}, # tot_items: {1}\"\"\"\n                .format(len(self.items), tot_items))\n\n    def apply(self, f, axes=None, filter=None, do_integrity_check=False,\n        consolidate=True, **kwargs):\n        \"\"\"\n        iterate over the blocks, collect and create a new block manager\n\n        Parameters\n        ----------\n        f : the callable or function name to operate on at the block level\n        axes : optional (if not supplied, use self.axes)\n        filter : list, if supplied, only call the block if the filter is in\n                 the block\n        do_integrity_check : boolean, default False. Do the block manager\n            integrity check\n        consolidate: boolean, default True. Join together blocks having same\n            dtype\n\n        Returns\n        -------\n        Block Manager (new object)\n\n        \"\"\"\n        result_blocks = []\n        if filter is not None:\n            filter_locs = set(self.items.get_indexer_for(filter))\n            if len(filter_locs) == len(self.items):\n                filter = None\n            else:\n                kwargs['filter'] = filter_locs\n        if consolidate:\n            self._consolidate_inplace()\n        if f == 'where':\n            align_copy = True\n            if kwargs.get('align', True):\n                align_keys = ['other', 'cond']\n            else:\n                align_keys = ['cond']\n        elif f == 'putmask':\n            align_copy = False\n            if kwargs.get('align', True):\n                align_keys = ['new', 'mask']\n            else:\n                align_keys = ['mask']\n        elif f == 'eval':\n            align_copy = False\n            align_keys = ['other']\n        elif f == 'fillna':\n            align_copy = False\n            align_keys = ['value']\n        else:\n            align_keys = []\n        aligned_args = dict((k, kwargs[k]) for k in align_keys if hasattr(\n            kwargs[k], 'values') and not isinstance(kwargs[k],\n            ABCExtensionArray))\n        for b in self.blocks:\n            if filter is not None:\n                if not b.mgr_locs.isin(filter_locs).any():\n                    result_blocks.append(b)\n                    continue\n            if aligned_args:\n                b_items = self.items[b.mgr_locs.indexer]\n                for k, obj in aligned_args.items():\n                    axis = getattr(obj, '_info_axis_number', 0)\n                    kwargs[k] = obj.reindex(b_items, axis=axis, copy=align_copy\n                        )\n            kwargs['mgr'] = self\n            applied = getattr(b, f)(**kwargs)\n            result_blocks = _extend_blocks(applied, result_blocks)\n        if len(result_blocks) == 0:\n            return self.make_empty(axes or self.axes)\n        bm = self.__class__(result_blocks, axes or self.axes,\n            do_integrity_check=do_integrity_check)\n        bm._consolidate_inplace()\n        return bm\n\n    def reduction(self, f, axis=0, consolidate=True, transposed=False, **kwargs\n        ):\n        \"\"\"\n        iterate over the blocks, collect and create a new block manager.\n        This routine is intended for reduction type operations and\n        will do inference on the generated blocks.\n\n        Parameters\n        ----------\n        f: the callable or function name to operate on at the block level\n        axis: reduction axis, default 0\n        consolidate: boolean, default True. Join together blocks having same\n            dtype\n        transposed: boolean, default False\n            we are holding transposed data\n\n        Returns\n        -------\n        Block Manager (new object)\n\n        \"\"\"\n        if consolidate:\n            self._consolidate_inplace()\n        axes, blocks = [], []\n        for b in self.blocks:\n            kwargs['mgr'] = self\n            axe, block = getattr(b, f)(axis=axis, **kwargs)\n            axes.append(axe)\n            blocks.append(block)\n        ndim = {b.ndim for b in blocks}\n        if 2 in ndim:\n            new_axes = list(self.axes)\n            if len(blocks) > 1:\n                new_axes[1] = axes[0]\n                for b, sb in zip(blocks, self.blocks):\n                    b.mgr_locs = sb.mgr_locs\n            else:\n                new_axes[axis] = Index(np.concatenate([ax.values for ax in\n                    axes]))\n            if transposed:\n                new_axes = new_axes[::-1]\n                blocks = [b.make_block(b.values.T, placement=np.arange(b.\n                    shape[1])) for b in blocks]\n            return self.__class__(blocks, new_axes)\n        if 0 in ndim and 1 not in ndim:\n            values = np.array([b.values for b in blocks])\n            if len(values) == 1:\n                return values.item()\n            blocks = [make_block(values, ndim=1)]\n            axes = Index([ax[0] for ax in axes])\n        values = _concat._concat_compat([b.values for b in blocks])\n        if len(self.blocks) > 1:\n            indexer = np.empty(len(self.axes[0]), dtype=np.intp)\n            i = 0\n            for b in self.blocks:\n                for j in b.mgr_locs:\n                    indexer[j] = i\n                    i = i + 1\n            values = values.take(indexer)\n        return SingleBlockManager([make_block(values, ndim=1, placement=np.\n            arange(len(values)))], axes[0])\n\n    def isna(self, func, **kwargs):\n        return self.apply('apply', func=func, **kwargs)\n\n    def where(self, **kwargs):\n        return self.apply('where', **kwargs)\n\n    def eval(self, **kwargs):\n        return self.apply('eval', **kwargs)\n\n    def quantile(self, **kwargs):\n        return self.reduction('quantile', **kwargs)\n\n    def setitem(self, **kwargs):\n        return self.apply('setitem', **kwargs)\n\n    def putmask(self, **kwargs):\n        return self.apply('putmask', **kwargs)\n\n    def diff(self, **kwargs):\n        return self.apply('diff', **kwargs)\n\n    def interpolate(self, **kwargs):\n        return self.apply('interpolate', **kwargs)\n\n    def shift(self, **kwargs):\n        return self.apply('shift', **kwargs)\n\n    def fillna(self, **kwargs):\n        return self.apply('fillna', **kwargs)\n\n    def downcast(self, **kwargs):\n        return self.apply('downcast', **kwargs)\n\n    def astype(self, dtype, **kwargs):\n        return self.apply('astype', dtype=dtype, **kwargs)\n\n    def convert(self, **kwargs):\n        return self.apply('convert', **kwargs)\n\n    def replace(self, **kwargs):\n        return self.apply('replace', **kwargs)\n\n    def replace_list(self, src_list, dest_list, inplace=False, regex=False,\n        mgr=None):\n        \"\"\" do a list replace \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if mgr is None:\n            mgr = self\n        values = self.as_array()\n\n        def comp(s):\n            if isna(s):\n                return isna(values)\n            return _maybe_compare(values, getattr(s, 'asm8', s), operator.eq)\n        masks = [comp(s) for i, s in enumerate(src_list)]\n        result_blocks = []\n        src_len = len(src_list) - 1\n        for blk in self.blocks:\n            rb = [blk if inplace else blk.copy()]\n            for i, (s, d) in enumerate(zip(src_list, dest_list)):\n                new_rb = []\n                for b in rb:\n                    if b.dtype == np.object_:\n                        convert = i == src_len\n                        result = b.replace(s, d, inplace=inplace, regex=\n                            regex, mgr=mgr, convert=convert)\n                        new_rb = _extend_blocks(result, new_rb)\n                    else:\n                        m = masks[i][b.mgr_locs.indexer]\n                        if m.any():\n                            b = b.coerce_to_target_dtype(d)\n                            new_rb.extend(b.putmask(m, d, inplace=True))\n                        else:\n                            new_rb.append(b)\n                rb = new_rb\n            result_blocks.extend(rb)\n        bm = self.__class__(result_blocks, self.axes)\n        bm._consolidate_inplace()\n        return bm\n\n    def reshape_nd(self, axes, **kwargs):\n        \"\"\" a 2d-nd reshape operation on a BlockManager \"\"\"\n        return self.apply('reshape_nd', axes=axes, **kwargs)\n\n    def is_consolidated(self):\n        \"\"\"\n        Return True if more than one block with the same dtype\n        \"\"\"\n        if not self._known_consolidated:\n            self._consolidate_check()\n        return self._is_consolidated\n\n    def _consolidate_check(self):\n        ftypes = [blk.ftype for blk in self.blocks]\n        self._is_consolidated = len(ftypes) == len(set(ftypes))\n        self._known_consolidated = True\n\n    @property\n    def is_mixed_type(self):\n        self._consolidate_inplace()\n        return len(self.blocks) > 1\n\n    @property\n    def is_numeric_mixed_type(self):\n        self._consolidate_inplace()\n        return all(block.is_numeric for block in self.blocks)\n\n    @property\n    def is_datelike_mixed_type(self):\n        self._consolidate_inplace()\n        return any(block.is_datelike for block in self.blocks)\n\n    @property\n    def any_extension_types(self):\n        \"\"\"Whether any of the blocks in this manager are extension blocks\"\"\"\n        return any(block.is_extension for block in self.blocks)\n\n    @property\n    def is_view(self):\n        \"\"\" return a boolean if we are a single block and are a view \"\"\"\n        if len(self.blocks) == 1:\n            return self.blocks[0].is_view\n        return False\n\n    def get_bool_data(self, copy=False):\n        \"\"\"\n        Parameters\n        ----------\n        copy : boolean, default False\n            Whether to copy the blocks\n        \"\"\"\n        self._consolidate_inplace()\n        return self.combine([b for b in self.blocks if b.is_bool], copy)\n\n    def get_numeric_data(self, copy=False):\n        \"\"\"\n        Parameters\n        ----------\n        copy : boolean, default False\n            Whether to copy the blocks\n        \"\"\"\n        self._consolidate_inplace()\n        return self.combine([b for b in self.blocks if b.is_numeric], copy)\n\n    def combine(self, blocks, copy=True):\n        \"\"\" return a new manager with the blocks \"\"\"\n        if len(blocks) == 0:\n            return self.make_empty()\n        indexer = np.sort(np.concatenate([b.mgr_locs.as_array for b in blocks])\n            )\n        inv_indexer = lib.get_reverse_indexer(indexer, self.shape[0])\n        new_blocks = []\n        for b in blocks:\n            b = b.copy(deep=copy)\n            b.mgr_locs = algos.take_1d(inv_indexer, b.mgr_locs.as_array,\n                axis=0, allow_fill=False)\n            new_blocks.append(b)\n        axes = list(self.axes)\n        axes[0] = self.items.take(indexer)\n        return self.__class__(new_blocks, axes, do_integrity_check=False)\n\n    def get_slice(self, slobj, axis=0):\n        if axis >= self.ndim:\n            raise IndexError('Requested axis not found in manager')\n        if axis == 0:\n            new_blocks = self._slice_take_blocks_ax0(slobj)\n        else:\n            slicer = [slice(None)] * (axis + 1)\n            slicer[axis] = slobj\n            slicer = tuple(slicer)\n            new_blocks = [blk.getitem_block(slicer) for blk in self.blocks]\n        new_axes = list(self.axes)\n        new_axes[axis] = new_axes[axis][slobj]\n        bm = self.__class__(new_blocks, new_axes, do_integrity_check=False)\n        bm._consolidate_inplace()\n        return bm\n\n    def __contains__(self, item):\n        return item in self.items\n\n    @property\n    def nblocks(self):\n        return len(self.blocks)\n\n    def copy(self, deep=True, mgr=None):\n        \"\"\"\n        Make deep or shallow copy of BlockManager\n\n        Parameters\n        ----------\n        deep : boolean o rstring, default True\n            If False, return shallow copy (do not copy data)\n            If 'all', copy data and a deep copy of the index\n\n        Returns\n        -------\n        copy : BlockManager\n        \"\"\"\n        if deep:\n            if deep == 'all':\n                copy = lambda ax: ax.copy(deep=True)\n            else:\n                copy = lambda ax: ax.view()\n            new_axes = [copy(ax) for ax in self.axes]\n        else:\n            new_axes = list(self.axes)\n        return self.apply('copy', axes=new_axes, deep=deep,\n            do_integrity_check=False)\n\n    def as_array(self, transpose=False, items=None):\n        \"\"\"Convert the blockmanager data into an numpy array.\n\n        Parameters\n        ----------\n        transpose : boolean, default False\n            If True, transpose the return array\n        items : list of strings or None\n            Names of block items that will be included in the returned\n            array. ``None`` means that all block items will be used\n\n        Returns\n        -------\n        arr : ndarray\n        \"\"\"\n        if len(self.blocks) == 0:\n            arr = np.empty(self.shape, dtype=float)\n            return arr.transpose() if transpose else arr\n        if items is not None:\n            mgr = self.reindex_axis(items, axis=0)\n        else:\n            mgr = self\n        if self._is_single_block or not self.is_mixed_type:\n            arr = mgr.blocks[0].get_values()\n        else:\n            arr = mgr._interleave()\n        return arr.transpose() if transpose else arr\n\n    def _interleave(self):\n        \"\"\"\n        Return ndarray from blocks with specified item order\n        Items must be contained in the blocks\n        \"\"\"\n        dtype = _interleaved_dtype(self.blocks)\n        result = np.empty(self.shape, dtype=dtype)\n        if result.shape[0] == 0:\n            return result\n        itemmask = np.zeros(self.shape[0])\n        for blk in self.blocks:\n            rl = blk.mgr_locs\n            result[rl.indexer] = blk.get_values(dtype)\n            itemmask[rl.indexer] = 1\n        if not itemmask.all():\n            raise AssertionError('Some items were not contained in blocks')\n        return result\n\n    def to_dict(self, copy=True):\n        \"\"\"\n        Return a dict of str(dtype) -> BlockManager\n\n        Parameters\n        ----------\n        copy : boolean, default True\n\n        Returns\n        -------\n        values : a dict of dtype -> BlockManager\n\n        Notes\n        -----\n        This consolidates based on str(dtype)\n        \"\"\"\n        self._consolidate_inplace()\n        bd = {}\n        for b in self.blocks:\n            bd.setdefault(str(b.dtype), []).append(b)\n        return {dtype: self.combine(blocks, copy=copy) for dtype, blocks in\n            bd.items()}\n\n    def xs(self, key, axis=1, copy=True, takeable=False):\n        if axis < 1:\n            raise AssertionError('Can only take xs across axis >= 1, got {ax}'\n                .format(ax=axis))\n        if takeable:\n            loc = key\n        else:\n            loc = self.axes[axis].get_loc(key)\n        slicer = [slice(None, None) for _ in range(self.ndim)]\n        slicer[axis] = loc\n        slicer = tuple(slicer)\n        new_axes = list(self.axes)\n        if isinstance(loc, (slice, np.ndarray)):\n            new_axes[axis] = new_axes[axis][loc]\n        else:\n            new_axes.pop(axis)\n        new_blocks = []\n        if len(self.blocks) > 1:\n            for blk in self.blocks:\n                newb = make_block(values=blk.values[slicer], klass=blk.\n                    __class__, placement=blk.mgr_locs)\n                new_blocks.append(newb)\n        elif len(self.blocks) == 1:\n            block = self.blocks[0]\n            vals = block.values[slicer]\n            if copy:\n                vals = vals.copy()\n            new_blocks = [make_block(values=vals, placement=block.mgr_locs,\n                klass=block.__class__)]\n        return self.__class__(new_blocks, new_axes)\n\n    def fast_xs(self, loc):\n        \"\"\"\n        get a cross sectional for a given location in the\n        items ; handle dups\n\n        return the result, is *could* be a view in the case of a\n        single block\n        \"\"\"\n        if len(self.blocks) == 1:\n            return self.blocks[0].iget((slice(None), loc))\n        items = self.items\n        if not items.is_unique:\n            result = self._interleave()\n            if self.ndim == 2:\n                result = result.T\n            return result[loc]\n        dtype = _interleaved_dtype(self.blocks)\n        n = len(items)\n        result = np.empty(n, dtype=dtype)\n        for blk in self.blocks:\n            for i, rl in enumerate(blk.mgr_locs):\n                result[rl] = blk._try_coerce_result(blk.iget((i, loc)))\n        return result\n\n    def consolidate(self):\n        \"\"\"\n        Join together blocks having same dtype\n\n        Returns\n        -------\n        y : BlockManager\n        \"\"\"\n        if self.is_consolidated():\n            return self\n        bm = self.__class__(self.blocks, self.axes)\n        bm._is_consolidated = False\n        bm._consolidate_inplace()\n        return bm\n\n    def _consolidate_inplace(self):\n        if not self.is_consolidated():\n            self.blocks = tuple(_consolidate(self.blocks))\n            self._is_consolidated = True\n            self._known_consolidated = True\n            self._rebuild_blknos_and_blklocs()\n\n    def get(self, item, fastpath=True):\n        \"\"\"\n        Return values for selected item (ndarray or BlockManager).\n        \"\"\"\n        if self.items.is_unique:\n            if not isna(item):\n                loc = self.items.get_loc(item)\n            else:\n                indexer = np.arange(len(self.items))[isna(self.items)]\n                if not is_scalar(indexer):\n                    if len(indexer) == 1:\n                        loc = indexer.item()\n                    else:\n                        raise ValueError('cannot label index with a null key')\n            return self.iget(loc, fastpath=fastpath)\n        else:\n            if isna(item):\n                raise TypeError('cannot label index with a null key')\n            indexer = self.items.get_indexer_for([item])\n            return self.reindex_indexer(new_axis=self.items[indexer],\n                indexer=indexer, axis=0, allow_dups=True)\n\n    def iget(self, i, fastpath=True):\n        \"\"\"\n        Return the data as a SingleBlockManager if fastpath=True and possible\n\n        Otherwise return as a ndarray\n        \"\"\"\n        block = self.blocks[self._blknos[i]]\n        values = block.iget(self._blklocs[i])\n        if not fastpath or not block._box_to_block_values or values.ndim != 1:\n            return values\n        return SingleBlockManager([block.make_block_same_class(values,\n            placement=slice(0, len(values)), ndim=1)], self.axes[1])\n\n    def get_scalar(self, tup):\n        \"\"\"\n        Retrieve single item\n        \"\"\"\n        full_loc = [ax.get_loc(x) for ax, x in zip(self.axes, tup)]\n        blk = self.blocks[self._blknos[full_loc[0]]]\n        values = blk.values\n        if values.ndim == 1:\n            return values[full_loc[1]]\n        full_loc[0] = self._blklocs[full_loc[0]]\n        return values[tuple(full_loc)]\n\n    def delete(self, item):\n        \"\"\"\n        Delete selected item (items if non-unique) in-place.\n        \"\"\"\n        indexer = self.items.get_loc(item)\n        is_deleted = np.zeros(self.shape[0], dtype=np.bool_)\n        is_deleted[indexer] = True\n        ref_loc_offset = -is_deleted.cumsum()\n        is_blk_deleted = [False] * len(self.blocks)\n        if isinstance(indexer, int):\n            affected_start = indexer\n        else:\n            affected_start = is_deleted.nonzero()[0][0]\n        for blkno, _ in _fast_count_smallints(self._blknos[affected_start:]):\n            blk = self.blocks[blkno]\n            bml = blk.mgr_locs\n            blk_del = is_deleted[bml.indexer].nonzero()[0]\n            if len(blk_del) == len(bml):\n                is_blk_deleted[blkno] = True\n                continue\n            elif len(blk_del) != 0:\n                blk.delete(blk_del)\n                bml = blk.mgr_locs\n            blk.mgr_locs = bml.add(ref_loc_offset[bml.indexer])\n        self.axes[0] = self.items[~is_deleted]\n        self.blocks = tuple(b for blkno, b in enumerate(self.blocks) if not\n            is_blk_deleted[blkno])\n        self._shape = None\n        self._rebuild_blknos_and_blklocs()\n\n    def set(self, item, value, check=False):\n        \"\"\"\n        Set new item in-place. Does not consolidate. Adds new Block if not\n        contained in the current set of items\n        if check, then validate that we are not setting the same data in-place\n        \"\"\"\n        value_is_extension_type = is_extension_type(value\n            ) or is_extension_array_dtype(value)\n        if value_is_extension_type:\n\n            def value_getitem(placement):\n                return value\n        else:\n            if value.ndim == self.ndim - 1:\n                value = _safe_reshape(value, (1,) + value.shape)\n\n                def value_getitem(placement):\n                    return value\n            else:\n\n                def value_getitem(placement):\n                    return value[placement.indexer]\n            if value.shape[1:] != self.shape[1:]:\n                raise AssertionError(\n                    'Shape of new values must be compatible with manager shape'\n                    )\n        try:\n            loc = self.items.get_loc(item)\n        except KeyError:\n            self.insert(len(self.items), item, value)\n            return\n        if isinstance(loc, int):\n            loc = [loc]\n        blknos = self._blknos[loc]\n        blklocs = self._blklocs[loc].copy()\n        unfit_mgr_locs = []\n        unfit_val_locs = []\n        removed_blknos = []\n        for blkno, val_locs in _get_blkno_placements(blknos, len(self.\n            blocks), group=True):\n            blk = self.blocks[blkno]\n            blk_locs = blklocs[val_locs.indexer]\n            if blk.should_store(value):\n                blk.set(blk_locs, value_getitem(val_locs), check=check)\n            else:\n                unfit_mgr_locs.append(blk.mgr_locs.as_array[blk_locs])\n                unfit_val_locs.append(val_locs)\n                if len(val_locs) == len(blk.mgr_locs):\n                    removed_blknos.append(blkno)\n                else:\n                    self._blklocs[blk.mgr_locs.indexer] = -1\n                    blk.delete(blk_locs)\n                    self._blklocs[blk.mgr_locs.indexer] = np.arange(len(blk))\n        if len(removed_blknos):\n            is_deleted = np.zeros(self.nblocks, dtype=np.bool_)\n            is_deleted[removed_blknos] = True\n            new_blknos = np.empty(self.nblocks, dtype=np.int64)\n            new_blknos.fill(-1)\n            new_blknos[~is_deleted] = np.arange(self.nblocks - len(\n                removed_blknos))\n            self._blknos = algos.take_1d(new_blknos, self._blknos, axis=0,\n                allow_fill=False)\n            self.blocks = tuple(blk for i, blk in enumerate(self.blocks) if\n                i not in set(removed_blknos))\n        if unfit_val_locs:\n            unfit_mgr_locs = np.concatenate(unfit_mgr_locs)\n            unfit_count = len(unfit_mgr_locs)\n            new_blocks = []\n            if value_is_extension_type:\n                new_blocks.extend(make_block(values=value.copy(), ndim=self\n                    .ndim, placement=slice(mgr_loc, mgr_loc + 1)) for\n                    mgr_loc in unfit_mgr_locs)\n                self._blknos[unfit_mgr_locs] = np.arange(unfit_count) + len(\n                    self.blocks)\n                self._blklocs[unfit_mgr_locs] = 0\n            else:\n                unfit_val_items = unfit_val_locs[0].append(unfit_val_locs[1:])\n                new_blocks.append(make_block(values=value_getitem(\n                    unfit_val_items), ndim=self.ndim, placement=unfit_mgr_locs)\n                    )\n                self._blknos[unfit_mgr_locs] = len(self.blocks)\n                self._blklocs[unfit_mgr_locs] = np.arange(unfit_count)\n            self.blocks += tuple(new_blocks)\n            self._known_consolidated = False\n\n    def insert(self, loc, item, value, allow_duplicates=False):\n        \"\"\"\n        Insert item at selected position.\n\n        Parameters\n        ----------\n        loc : int\n        item : hashable\n        value : array_like\n        allow_duplicates: bool\n            If False, trying to insert non-unique item will raise\n\n        \"\"\"\n        if not allow_duplicates and item in self.items:\n            raise ValueError('cannot insert {}, already exists'.format(item))\n        if not isinstance(loc, int):\n            raise TypeError('loc must be int')\n        new_axis = self.items.insert(loc, item)\n        block = make_block(values=value, ndim=self.ndim, placement=slice(\n            loc, loc + 1))\n        for blkno, count in _fast_count_smallints(self._blknos[loc:]):\n            blk = self.blocks[blkno]\n            if count == len(blk.mgr_locs):\n                blk.mgr_locs = blk.mgr_locs.add(1)\n            else:\n                new_mgr_locs = blk.mgr_locs.as_array.copy()\n                new_mgr_locs[new_mgr_locs >= loc] += 1\n                blk.mgr_locs = new_mgr_locs\n        if loc == self._blklocs.shape[0]:\n            self._blklocs = np.append(self._blklocs, 0)\n            self._blknos = np.append(self._blknos, len(self.blocks))\n        else:\n            self._blklocs = np.insert(self._blklocs, loc, 0)\n            self._blknos = np.insert(self._blknos, loc, len(self.blocks))\n        self.axes[0] = new_axis\n        self.blocks += block,\n        self._shape = None\n        self._known_consolidated = False\n        if len(self.blocks) > 100:\n            self._consolidate_inplace()\n\n    def reindex_axis(self, new_index, axis, method=None, limit=None,\n        fill_value=None, copy=True):\n        \"\"\"\n        Conform block manager to new index.\n        \"\"\"\n        new_index = _ensure_index(new_index)\n        new_index, indexer = self.axes[axis].reindex(new_index, method=\n            method, limit=limit)\n        return self.reindex_indexer(new_index, indexer, axis=axis,\n            fill_value=fill_value, copy=copy)\n\n    def reindex_indexer(self, new_axis, indexer, axis, fill_value=None,\n        allow_dups=False, copy=True):\n        \"\"\"\n        Parameters\n        ----------\n        new_axis : Index\n        indexer : ndarray of int64 or None\n        axis : int\n        fill_value : object\n        allow_dups : bool\n\n        pandas-indexer with -1's only.\n        \"\"\"\n        if indexer is None:\n            if new_axis is self.axes[axis] and not copy:\n                return self\n            result = self.copy(deep=copy)\n            result.axes = list(self.axes)\n            result.axes[axis] = new_axis\n            return result\n        self._consolidate_inplace()\n        if not allow_dups:\n            self.axes[axis]._can_reindex(indexer)\n        if axis >= self.ndim:\n            raise IndexError('Requested axis not found in manager')\n        if axis == 0:\n            new_blocks = self._slice_take_blocks_ax0(indexer, fill_tuple=(\n                fill_value,))\n        else:\n            new_blocks = [blk.take_nd(indexer, axis=axis, fill_tuple=(\n                fill_value if fill_value is not None else blk.fill_value,)) for\n                blk in self.blocks]\n        new_axes = list(self.axes)\n        new_axes[axis] = new_axis\n        return self.__class__(new_blocks, new_axes)\n\n    def _slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None):\n        \"\"\"\n        Slice/take blocks along axis=0.\n\n        Overloaded for SingleBlock\n\n        Returns\n        -------\n        new_blocks : list of Block\n\n        \"\"\"\n        allow_fill = fill_tuple is not None\n        sl_type, slobj, sllen = _preprocess_slice_or_indexer(slice_or_indexer,\n            self.shape[0], allow_fill=allow_fill)\n        if self._is_single_block:\n            blk = self.blocks[0]\n            if sl_type in ('slice', 'mask'):\n                return [blk.getitem_block(slobj, new_mgr_locs=slice(0, sllen))]\n            elif not allow_fill or self.ndim == 1:\n                if allow_fill and fill_tuple[0] is None:\n                    _, fill_value = maybe_promote(blk.dtype)\n                    fill_tuple = fill_value,\n                return [blk.take_nd(slobj, axis=0, new_mgr_locs=slice(0,\n                    sllen), fill_tuple=fill_tuple)]\n        if sl_type in ('slice', 'mask'):\n            blknos = self._blknos[slobj]\n            blklocs = self._blklocs[slobj]\n        else:\n            blknos = algos.take_1d(self._blknos, slobj, fill_value=-1,\n                allow_fill=allow_fill)\n            blklocs = algos.take_1d(self._blklocs, slobj, fill_value=-1,\n                allow_fill=allow_fill)\n        blocks = []\n        for blkno, mgr_locs in _get_blkno_placements(blknos, len(self.\n            blocks), group=True):\n            if blkno == -1:\n                fill_value = fill_tuple[0]\n                blocks.append(self._make_na_block(placement=mgr_locs,\n                    fill_value=fill_value))\n            else:\n                blk = self.blocks[blkno]\n                if not blk._can_consolidate:\n                    for mgr_loc in mgr_locs:\n                        newblk = blk.copy(deep=True)\n                        newblk.mgr_locs = slice(mgr_loc, mgr_loc + 1)\n                        blocks.append(newblk)\n                else:\n                    blocks.append(blk.take_nd(blklocs[mgr_locs.indexer],\n                        axis=0, new_mgr_locs=mgr_locs, fill_tuple=None))\n        return blocks\n\n    def _make_na_block(self, placement, fill_value=None):\n        if fill_value is None:\n            fill_value = np.nan\n        block_shape = list(self.shape)\n        block_shape[0] = len(placement)\n        dtype, fill_value = infer_dtype_from_scalar(fill_value)\n        block_values = np.empty(block_shape, dtype=dtype)\n        block_values.fill(fill_value)\n        return make_block(block_values, placement=placement)\n\n    def take(self, indexer, axis=1, verify=True, convert=True):\n        \"\"\"\n        Take items along any axis.\n        \"\"\"\n        self._consolidate_inplace()\n        indexer = np.arange(indexer.start, indexer.stop, indexer.step,\n            dtype='int64') if isinstance(indexer, slice) else np.asanyarray(\n            indexer, dtype='int64')\n        n = self.shape[axis]\n        if convert:\n            indexer = maybe_convert_indices(indexer, n)\n        if verify:\n            if ((indexer == -1) | (indexer >= n)).any():\n                raise Exception(\n                    'Indices must be nonzero and less than the axis length')\n        new_labels = self.axes[axis].take(indexer)\n        return self.reindex_indexer(new_axis=new_labels, indexer=indexer,\n            axis=axis, allow_dups=True)\n\n    def merge(self, other, lsuffix='', rsuffix=''):\n        if not self._is_indexed_like(other):\n            raise AssertionError('Must have same axes to merge managers')\n        l, r = items_overlap_with_suffix(left=self.items, lsuffix=lsuffix,\n            right=other.items, rsuffix=rsuffix)\n        new_items = _concat_indexes([l, r])\n        new_blocks = [blk.copy(deep=False) for blk in self.blocks]\n        offset = self.shape[0]\n        for blk in other.blocks:\n            blk = blk.copy(deep=False)\n            blk.mgr_locs = blk.mgr_locs.add(offset)\n            new_blocks.append(blk)\n        new_axes = list(self.axes)\n        new_axes[0] = new_items\n        return self.__class__(_consolidate(new_blocks), new_axes)\n\n    def _is_indexed_like(self, other):\n        \"\"\"\n        Check all axes except items\n        \"\"\"\n        if self.ndim != other.ndim:\n            raise AssertionError(\n                'Number of dimensions must agree got {ndim} and {oth_ndim}'\n                .format(ndim=self.ndim, oth_ndim=other.ndim))\n        for ax, oax in zip(self.axes[1:], other.axes[1:]):\n            if not ax.equals(oax):\n                return False\n        return True\n\n    def equals(self, other):\n        self_axes, other_axes = self.axes, other.axes\n        if len(self_axes) != len(other_axes):\n            return False\n        if not all(ax1.equals(ax2) for ax1, ax2 in zip(self_axes, other_axes)):\n            return False\n        self._consolidate_inplace()\n        other._consolidate_inplace()\n        if len(self.blocks) != len(other.blocks):\n            return False\n\n        def canonicalize(block):\n            return block.dtype.name, block.mgr_locs.as_array.tolist()\n        self_blocks = sorted(self.blocks, key=canonicalize)\n        other_blocks = sorted(other.blocks, key=canonicalize)\n        return all(block.equals(oblock) for block, oblock in zip(\n            self_blocks, other_blocks))\n\n    def unstack(self, unstacker_func):\n        \"\"\"Return a blockmanager with all blocks unstacked.\n\n        Parameters\n        ----------\n        unstacker_func : callable\n            A (partially-applied) ``pd.core.reshape._Unstacker`` class.\n\n        Returns\n        -------\n        unstacked : BlockManager\n        \"\"\"\n        dummy = unstacker_func(np.empty((0, 0)), value_columns=self.items)\n        new_columns = dummy.get_new_columns()\n        new_index = dummy.get_new_index()\n        new_blocks = []\n        columns_mask = []\n        for blk in self.blocks:\n            blocks, mask = blk._unstack(partial(unstacker_func,\n                value_columns=self.items[blk.mgr_locs.indexer]), new_columns)\n            new_blocks.extend(blocks)\n            columns_mask.extend(mask)\n        new_columns = new_columns[columns_mask]\n        bm = BlockManager(new_blocks, [new_columns, new_index])\n        return bm\n",
                        "belong_class_name": "BlockManager",
                        "belong_class_init": "def __init__(self, blocks, axes, do_integrity_check=True):\n    self.axes = [_ensure_index(ax) for ax in axes]\n    self.blocks = tuple(blocks)\n    for block in blocks:\n        if block.is_sparse:\n            if len(block.mgr_locs) != 1:\n                raise AssertionError('Sparse block refers to multiple items')\n        elif self.ndim != block.ndim:\n            raise AssertionError(\n                'Number of Block dimensions ({block}) must equal number of axes ({self})'\n                .format(block=block.ndim, self=self.ndim))\n    if do_integrity_check:\n        self._verify_integrity()\n    self._consolidate_check()\n    self._rebuild_blknos_and_blklocs()\n",
                        "called_function_name": "_transform_index",
                        "called_function_content": "def rename_axis(self, mapper, axis, copy=True, level=None):\n    \"\"\"\n        Rename one of axes.\n\n        Parameters\n        ----------\n        mapper : unary callable\n        axis : int\n        copy : boolean, default True\n        level : int, default None\n\n        \"\"\"\n    obj = self.copy(deep=copy)\n    obj.set_axis(axis, _transform_index(self.axes[axis], mapper, level)\n",
                        "called_arguments": "(self.axes[axis], mapper, level)",
                        "called_function_parameter": "(index, func, level=None)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_transform_index",
                        "function_content": "def _transform_index(index, func, level=None):\n    \"\"\"\n    Apply function to all values found in index.\n\n    This includes transforming multiindex entries separately.\n    Only apply function to one level of the MultiIndex if level is specified.\n\n    \"\"\"\n    if isinstance(index, MultiIndex):\n        if level is not None:\n            items = [tuple(func(y) if i == level else y for i, y in\n                enumerate(x)) for x in index]\n        else:\n            items = [tuple(func(y) for y in x) for x in index]\n        return MultiIndex.from_tuples(items, names=index.names)\n    else:\n        items = [func(x) for x in index]\n        return Index(items, name=index.name, tupleize_cols=False)\n",
                        "function_parameter": "(index, func, level=None)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "json_normalize",
                        "called_function_content": "def _transform_index(index, func, level=None):\n    \"\"\"\n    Apply function to all values found in index.\n\n    This includes transforming multiindex entries separately.\n    Only apply function to one level of the MultiIndex if level is specified.\n\n    \"\"\"\n    if isinstance(index, MultiIndex):\n        if level is not None:\n            items = [tuple(func(y) if i == level else y for i, y in\n                enumerate(x)) for x in index]\n        else:\n            items = [tuple(func(y) for y in x) for x in index]\n        return MultiIndex.from_tuples(items, names=index.names)\n    else:\n        items = [func(x) for x in index]\n        return Index(items, name=index.name, tupleize_cols=False)\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(data, record_path=None, meta=None, meta_prefix=None,\n    record_prefix=None, errors='raise', sep='.')",
                        "split_result": "failure"
                    },
                    {
                        "function_name": "json_normalize",
                        "function_content": "def json_normalize(data, record_path=None, meta=None, meta_prefix=None,\n    record_prefix=None, errors='raise', sep='.'):\n    \"\"\"\n    \"Normalize\" semi-structured JSON data into a flat table\n\n    Parameters\n    ----------\n    data : dict or list of dicts\n        Unserialized JSON objects\n    record_path : string or list of strings, default None\n        Path in each object to list of records. If not passed, data will be\n        assumed to be an array of records\n    meta : list of paths (string or list of strings), default None\n        Fields to use as metadata for each record in resulting table\n    record_prefix : string, default None\n        If True, prefix records with dotted (?) path, e.g. foo.bar.field if\n        path to records is ['foo', 'bar']\n    meta_prefix : string, default None\n    errors : {'raise', 'ignore'}, default 'raise'\n\n        * 'ignore' : will ignore KeyError if keys listed in meta are not\n          always present\n        * 'raise' : will raise KeyError if keys listed in meta are not\n          always present\n\n        .. versionadded:: 0.20.0\n\n    sep : string, default '.'\n        Nested records will generate names separated by sep,\n        e.g., for sep='.', { 'foo' : { 'bar' : 0 } } -> foo.bar\n\n        .. versionadded:: 0.20.0\n\n\n    Returns\n    -------\n    frame : DataFrame\n\n    Examples\n    --------\n\n    >>> from pandas.io.json import json_normalize\n    >>> data = [{'id': 1, 'name': {'first': 'Coleen', 'last': 'Volk'}},\n    ...         {'name': {'given': 'Mose', 'family': 'Regner'}},\n    ...         {'id': 2, 'name': 'Faye Raker'}]\n    >>> json_normalize(data)\n        id        name name.family name.first name.given name.last\n    0  1.0         NaN         NaN     Coleen        NaN      Volk\n    1  NaN         NaN      Regner        NaN       Mose       NaN\n    2  2.0  Faye Raker         NaN        NaN        NaN       NaN\n\n    >>> data = [{'state': 'Florida',\n    ...          'shortname': 'FL',\n    ...          'info': {\n    ...               'governor': 'Rick Scott'\n    ...          },\n    ...          'counties': [{'name': 'Dade', 'population': 12345},\n    ...                      {'name': 'Broward', 'population': 40000},\n    ...                      {'name': 'Palm Beach', 'population': 60000}]},\n    ...         {'state': 'Ohio',\n    ...          'shortname': 'OH',\n    ...          'info': {\n    ...               'governor': 'John Kasich'\n    ...          },\n    ...          'counties': [{'name': 'Summit', 'population': 1234},\n    ...                       {'name': 'Cuyahoga', 'population': 1337}]}]\n    >>> result = json_normalize(data, 'counties', ['state', 'shortname',\n    ...                                           ['info', 'governor']])\n    >>> result\n             name  population info.governor    state shortname\n    0        Dade       12345    Rick Scott  Florida        FL\n    1     Broward       40000    Rick Scott  Florida        FL\n    2  Palm Beach       60000    Rick Scott  Florida        FL\n    3      Summit        1234   John Kasich     Ohio        OH\n    4    Cuyahoga        1337   John Kasich     Ohio        OH\n\n    \"\"\"\n\n    def _pull_field(js, spec):\n        result = js\n        if isinstance(spec, list):\n            for field in spec:\n                result = result[field]\n        else:\n            result = result[spec]\n        return result\n    if isinstance(data, list) and not data:\n        return DataFrame()\n    if isinstance(data, dict):\n        data = [data]\n    if record_path is None:\n        if any([[isinstance(x, dict) for x in compat.itervalues(y)] for y in\n            data]):\n            data = nested_to_record(data, sep=sep)\n        return DataFrame(data)\n    elif not isinstance(record_path, list):\n        record_path = [record_path]\n    if meta is None:\n        meta = []\n    elif not isinstance(meta, list):\n        meta = [meta]\n    meta = [(m if isinstance(m, list) else [m]) for m in meta]\n    records = []\n    lengths = []\n    meta_vals = defaultdict(list)\n    if not isinstance(sep, compat.string_types):\n        sep = str(sep)\n    meta_keys = [sep.join(val) for val in meta]\n\n    def _recursive_extract(data, path, seen_meta, level=0):\n        if len(path) > 1:\n            for obj in data:\n                for val, key in zip(meta, meta_keys):\n                    if level + 1 == len(val):\n                        seen_meta[key] = _pull_field(obj, val[-1])\n                _recursive_extract(obj[path[0]], path[1:], seen_meta, level\n                    =level + 1)\n        else:\n            for obj in data:\n                recs = _pull_field(obj, path[0])\n                lengths.append(len(recs))\n                for val, key in zip(meta, meta_keys):\n                    if level + 1 > len(val):\n                        meta_val = seen_meta[key]\n                    else:\n                        try:\n                            meta_val = _pull_field(obj, val[level:])\n                        except KeyError as e:\n                            if errors == 'ignore':\n                                meta_val = np.nan\n                            else:\n                                raise KeyError(\n                                    \"Try running with errors='ignore' as key {err} is not always present\"\n                                    .format(err=e))\n                    meta_vals[key].append(meta_val)\n                records.extend(recs)\n    _recursive_extract(data, record_path, {}, level=0)\n    result = DataFrame(records)\n    if record_prefix is not None:\n        result.rename(columns=lambda x: record_prefix + x, inplace=True)\n    for k, v in compat.iteritems(meta_vals):\n        if meta_prefix is not None:\n            k = meta_prefix + k\n        if k in result:\n            raise ValueError(\n                'Conflicting metadata name {name}, need distinguishing prefix '\n                .format(name=k))\n        result[k] = np.array(v).repeat(lengths)\n    return result\n",
                        "function_parameter": "(data, record_path=None, meta=None, meta_prefix=None,\n    record_prefix=None, errors='raise', sep='.')",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ]
            ]
        },
        "pandas-22072_categorical": {
            "pytest pandas/tests/indexes/multi/test_constructor.py::test_from_tuples_with_tuple_label": [
                [
                    {
                        "function_name": "test_from_tuples_with_tuple_label",
                        "function_content": "def test_from_tuples_with_tuple_label():\n    expected = pd.DataFrame([[2, 1, 2], [4, (1, 2), 3]], columns=['a', 'b',\n        'c']).set_index(['a', 'b'])\n    idx = pd.MultiIndex.from_tuples([(2, 1), (4, (1, 2))], names=('a', 'b'))\n    result = pd.DataFrame([2, 3], columns=['c'], index=idx)\n    tm.assert_frame_equal(expected, result)\n",
                        "function_parameter": "()",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    },
                    {
                        "function_name": "set_index",
                        "function_content": "def set_index(self, keys, drop=True, append=False, inplace=False,\n    verify_integrity=False):\n    \"\"\"\n        Set the DataFrame index (row labels) using one or more existing\n        columns. By default yields a new object.\n\n        Parameters\n        ----------\n        keys : column label or list of column labels / arrays\n        drop : boolean, default True\n            Delete columns to be used as the new index\n        append : boolean, default False\n            Whether to append columns to existing index\n        inplace : boolean, default False\n            Modify the DataFrame in place (do not create a new object)\n        verify_integrity : boolean, default False\n            Check the new index for duplicates. Otherwise defer the check until\n            necessary. Setting to False will improve the performance of this\n            method\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n        ...                    'year': [2012, 2014, 2013, 2014],\n        ...                    'sale':[55, 40, 84, 31]})\n           month  sale  year\n        0  1      55    2012\n        1  4      40    2014\n        2  7      84    2013\n        3  10     31    2014\n\n        Set the index to become the 'month' column:\n\n        >>> df.set_index('month')\n               sale  year\n        month\n        1      55    2012\n        4      40    2014\n        7      84    2013\n        10     31    2014\n\n        Create a multi-index using columns 'year' and 'month':\n\n        >>> df.set_index(['year', 'month'])\n                    sale\n        year  month\n        2012  1     55\n        2014  4     40\n        2013  7     84\n        2014  10    31\n\n        Create a multi-index using a set of values and a column:\n\n        >>> df.set_index([[1, 2, 3, 4], 'year'])\n                 month  sale\n           year\n        1  2012  1      55\n        2  2014  4      40\n        3  2013  7      84\n        4  2014  10     31\n\n        Returns\n        -------\n        dataframe : DataFrame\n        \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not isinstance(keys, list):\n        keys = [keys]\n    if inplace:\n        frame = self\n    else:\n        frame = self.copy()\n    arrays = []\n    names = []\n    if append:\n        names = [x for x in self.index.names]\n        if isinstance(self.index, MultiIndex):\n            for i in range(self.index.nlevels):\n                arrays.append(self.index._get_level_values(i))\n        else:\n            arrays.append(self.index)\n    to_remove = []\n    for col in keys:\n        if isinstance(col, MultiIndex):\n            for n in range(col.nlevels - 1):\n                arrays.append(col._get_level_values(n))\n            level = col._get_level_values(col.nlevels - 1)\n            names.extend(col.names)\n        elif isinstance(col, Series):\n            level = col._values\n            names.append(col.name)\n        elif isinstance(col, Index):\n            level = col\n            names.append(col.name)\n        elif isinstance(col, (list, np.ndarray, Index)):\n            level = col\n            names.append(None)\n        else:\n            level = frame[col]._values\n            names.append(col)\n            if drop:\n                to_remove.append(col)\n        arrays.append(level)\n    index = ensure_index_from_sequences(arrays, names)\n    if verify_integrity and not index.is_unique:\n        duplicates = index[index.duplicated()].unique()\n        raise ValueError('Index has duplicate keys: {dup}'.format(dup=\n            duplicates))\n    for c in to_remove:\n        del frame[c]\n    index._cleanup()\n    frame.index = index\n    if not inplace:\n        return frame\n",
                        "function_parameter": "(self, keys, drop=True, append=False, inplace=False,\n    verify_integrity=False)",
                        "belong_class_content": "class DataFrame(NDFrame):\n    \"\"\" Two-dimensional size-mutable, potentially heterogeneous tabular data\n    structure with labeled axes (rows and columns). Arithmetic operations\n    align on both row and column labels. Can be thought of as a dict-like\n    container for Series objects. The primary pandas data structure.\n\n    Parameters\n    ----------\n    data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n        Dict can contain Series, arrays, constants, or list-like objects\n\n        .. versionchanged :: 0.23.0\n           If data is a dict, argument order is maintained for Python 3.6\n           and later.\n\n    index : Index or array-like\n        Index to use for resulting frame. Will default to RangeIndex if\n        no indexing information part of input data and no index provided\n    columns : Index or array-like\n        Column labels to use for resulting frame. Will default to\n        RangeIndex (0, 1, 2, ..., n) if no column labels are provided\n    dtype : dtype, default None\n        Data type to force. Only a single dtype is allowed. If None, infer\n    copy : boolean, default False\n        Copy data from inputs. Only affects DataFrame / 2d ndarray input\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary.\n\n    >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df = pd.DataFrame(data=d)\n    >>> df\n       col1  col2\n    0     1     3\n    1     2     4\n\n    Notice that the inferred dtype is int64.\n\n    >>> df.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n\n    To enforce a single dtype:\n\n    >>> df = pd.DataFrame(data=d, dtype=np.int8)\n    >>> df.dtypes\n    col1    int8\n    col2    int8\n    dtype: object\n\n    Constructing DataFrame from numpy ndarray:\n\n    >>> df2 = pd.DataFrame(np.random.randint(low=0, high=10, size=(5, 5)),\n    ...                    columns=['a', 'b', 'c', 'd', 'e'])\n    >>> df2\n        a   b   c   d   e\n    0   2   8   8   3   4\n    1   4   2   9   0   9\n    2   1   0   7   8   0\n    3   5   1   7   1   3\n    4   6   0   2   4   2\n\n    See also\n    --------\n    DataFrame.from_records : constructor from tuples, also record arrays\n    DataFrame.from_dict : from dicts of Series, arrays, or dicts\n    DataFrame.from_items : from sequence of (key, value) pairs\n    pandas.read_csv, pandas.read_table, pandas.read_clipboard\n    \"\"\"\n\n    @property\n    def _constructor(self):\n        return DataFrame\n    _constructor_sliced = Series\n    _deprecations = NDFrame._deprecations | frozenset(['sortlevel',\n        'get_value', 'set_value', 'from_csv', 'from_items'])\n    _accessors = set()\n\n    @property\n    def _constructor_expanddim(self):\n        from pandas.core.panel import Panel\n        return Panel\n\n    def __init__(self, data=None, index=None, columns=None, dtype=None,\n        copy=False):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n        if isinstance(data, DataFrame):\n            data = data._data\n        if isinstance(data, BlockManager):\n            mgr = self._init_mgr(data, axes=dict(index=index, columns=\n                columns), dtype=dtype, copy=copy)\n        elif isinstance(data, dict):\n            mgr = self._init_dict(data, index, columns, dtype=dtype)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = _masked_rec_array_to_mgr(data, index, columns, dtype,\n                    copy)\n            else:\n                mask = ma.getmaskarray(data)\n                if mask.any():\n                    data, fill_value = maybe_upcast(data, copy=True)\n                    data[mask] = fill_value\n                else:\n                    data = data.copy()\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                    copy=copy)\n        elif isinstance(data, (np.ndarray, Series, Index)):\n            if data.dtype.names:\n                data_columns = list(data.dtype.names)\n                data = {k: data[k] for k in data_columns}\n                if columns is None:\n                    columns = data_columns\n                mgr = self._init_dict(data, index, columns, dtype=dtype)\n            elif getattr(data, 'name', None) is not None:\n                mgr = self._init_dict({data.name: data}, index, columns,\n                    dtype=dtype)\n            else:\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                    copy=copy)\n        elif isinstance(data, collections.Iterable) and not isinstance(data,\n            string_and_binary_types):\n            if not isinstance(data, collections.Sequence):\n                data = list(data)\n            if len(data) > 0:\n                if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                    if is_named_tuple(data[0]) and columns is None:\n                        columns = data[0]._fields\n                    arrays, columns = _to_arrays(data, columns, dtype=dtype)\n                    columns = ensure_index(columns)\n                    if index is None:\n                        if isinstance(data[0], Series):\n                            index = _get_names_from_index(data)\n                        elif isinstance(data[0], Categorical):\n                            index = ibase.default_index(len(data[0]))\n                        else:\n                            index = ibase.default_index(len(data))\n                    mgr = _arrays_to_mgr(arrays, columns, index, columns,\n                        dtype=dtype)\n                else:\n                    mgr = self._init_ndarray(data, index, columns, dtype=\n                        dtype, copy=copy)\n            else:\n                mgr = self._init_dict({}, index, columns, dtype=dtype)\n        else:\n            try:\n                arr = np.array(data, dtype=dtype, copy=copy)\n            except (ValueError, TypeError) as e:\n                exc = TypeError(\n                    'DataFrame constructor called with incompatible data and dtype: {e}'\n                    .format(e=e))\n                raise_with_traceback(exc)\n            if arr.ndim == 0 and index is not None and columns is not None:\n                values = cast_scalar_to_array((len(index), len(columns)),\n                    data, dtype=dtype)\n                mgr = self._init_ndarray(values, index, columns, dtype=\n                    values.dtype, copy=False)\n            else:\n                raise ValueError('DataFrame constructor not properly called!')\n        NDFrame.__init__(self, mgr, fastpath=True)\n\n    def _init_dict(self, data, index, columns, dtype=None):\n        \"\"\"\n        Segregate Series based on type and coerce into matrices.\n        Needs to handle a lot of exceptional cases.\n        \"\"\"\n        if columns is not None:\n            arrays = Series(data, index=columns, dtype=object)\n            data_names = arrays.index\n            missing = arrays.isnull()\n            if index is None:\n                index = extract_index(arrays[~missing])\n            else:\n                index = ensure_index(index)\n            if missing.any() and not is_integer_dtype(dtype):\n                if dtype is None or np.issubdtype(dtype, np.flexible):\n                    nan_dtype = object\n                else:\n                    nan_dtype = dtype\n                v = construct_1d_arraylike_from_scalar(np.nan, len(index),\n                    nan_dtype)\n                arrays.loc[missing] = [v] * missing.sum()\n        else:\n            keys = com.dict_keys_to_ordered_list(data)\n            columns = data_names = Index(keys)\n            arrays = [data[k] for k in keys]\n        return _arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)\n\n    def _init_ndarray(self, values, index, columns, dtype=None, copy=False):\n        if isinstance(values, Series):\n            if columns is None:\n                if values.name is not None:\n                    columns = [values.name]\n            if index is None:\n                index = values.index\n            else:\n                values = values.reindex(index)\n            if not len(values) and columns is not None and len(columns):\n                values = np.empty((0, 1), dtype=object)\n\n        def _get_axes(N, K, index=index, columns=columns):\n            if index is None:\n                index = ibase.default_index(N)\n            else:\n                index = ensure_index(index)\n            if columns is None:\n                columns = ibase.default_index(K)\n            else:\n                columns = ensure_index(columns)\n            return index, columns\n        if is_categorical_dtype(getattr(values, 'dtype', None)\n            ) or is_categorical_dtype(dtype):\n            if not hasattr(values, 'dtype'):\n                values = _prep_ndarray(values, copy=copy)\n                values = values.ravel()\n            elif copy:\n                values = values.copy()\n            index, columns = _get_axes(len(values), 1)\n            return _arrays_to_mgr([values], columns, index, columns, dtype=\n                dtype)\n        elif is_datetimetz(values) or is_extension_array_dtype(values):\n            if columns is None:\n                columns = [0]\n            return _arrays_to_mgr([values], columns, index, columns, dtype=\n                dtype)\n        values = _prep_ndarray(values, copy=copy)\n        if dtype is not None:\n            if not is_dtype_equal(values.dtype, dtype):\n                try:\n                    values = values.astype(dtype)\n                except Exception as orig:\n                    e = ValueError(\n                        \"failed to cast to '{dtype}' (Exception was: {orig})\"\n                        .format(dtype=dtype, orig=orig))\n                    raise_with_traceback(e)\n        index, columns = _get_axes(*values.shape)\n        values = values.T\n        if dtype is None and is_object_dtype(values):\n            values = maybe_infer_to_datetimelike(values)\n        return create_block_manager_from_blocks([values], [columns, index])\n\n    @property\n    def axes(self):\n        \"\"\"\n        Return a list representing the axes of the DataFrame.\n\n        It has the row axis labels and column axis labels as the only members.\n        They are returned in that order.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.axes\n        [RangeIndex(start=0, stop=2, step=1), Index(['coll', 'col2'],\n        dtype='object')]\n        \"\"\"\n        return [self.index, self.columns]\n\n    @property\n    def shape(self):\n        \"\"\"\n        Return a tuple representing the dimensionality of the DataFrame.\n\n        See Also\n        --------\n        ndarray.shape\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.shape\n        (2, 2)\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n        ...                    'col3': [5, 6]})\n        >>> df.shape\n        (2, 3)\n        \"\"\"\n        return len(self.index), len(self.columns)\n\n    def _repr_fits_vertical_(self):\n        \"\"\"\n        Check length against max_rows.\n        \"\"\"\n        max_rows = get_option('display.max_rows')\n        return len(self) <= max_rows\n\n    def _repr_fits_horizontal_(self, ignore_width=False):\n        \"\"\"\n        Check if full repr fits in horizontal boundaries imposed by the display\n        options width and max_columns. In case off non-interactive session, no\n        boundaries apply.\n\n        ignore_width is here so ipnb+HTML output can behave the way\n        users expect. display.max_columns remains in effect.\n        GH3541, GH3573\n        \"\"\"\n        width, height = console.get_console_size()\n        max_columns = get_option('display.max_columns')\n        nb_columns = len(self.columns)\n        if (max_columns and nb_columns > max_columns or not ignore_width and\n            width and nb_columns > width // 2):\n            return False\n        if ignore_width or not console.in_interactive_session():\n            return True\n        if get_option('display.width'\n            ) is not None or console.in_ipython_frontend():\n            max_rows = 1\n        else:\n            max_rows = get_option('display.max_rows')\n        buf = StringIO()\n        d = self\n        if not max_rows is None:\n            d = d.iloc[:min(max_rows, len(d))]\n        else:\n            return True\n        d.to_string(buf=buf)\n        value = buf.getvalue()\n        repr_width = max(len(l) for l in value.split('\\n'))\n        return repr_width < width\n\n    def _info_repr(self):\n        \"\"\"True if the repr should show the info view.\"\"\"\n        info_repr_option = get_option('display.large_repr') == 'info'\n        return info_repr_option and not (self._repr_fits_horizontal_() and\n            self._repr_fits_vertical_())\n\n    def __unicode__(self):\n        \"\"\"\n        Return a string representation for a particular DataFrame\n\n        Invoked by unicode(df) in py2 only. Yields a Unicode String in both\n        py2/py3.\n        \"\"\"\n        buf = StringIO(u(''))\n        if self._info_repr():\n            self.info(buf=buf)\n            return buf.getvalue()\n        max_rows = get_option('display.max_rows')\n        max_cols = get_option('display.max_columns')\n        show_dimensions = get_option('display.show_dimensions')\n        if get_option('display.expand_frame_repr'):\n            width, _ = console.get_console_size()\n        else:\n            width = None\n        self.to_string(buf=buf, max_rows=max_rows, max_cols=max_cols,\n            line_width=width, show_dimensions=show_dimensions)\n        return buf.getvalue()\n\n    def _repr_html_(self):\n        \"\"\"\n        Return a html representation for a particular DataFrame.\n        Mainly for IPython notebook.\n        \"\"\"\n        if console.in_qtconsole():\n            return None\n        if self._info_repr():\n            buf = StringIO(u(''))\n            self.info(buf=buf)\n            val = buf.getvalue().replace('<', '&lt;', 1)\n            val = val.replace('>', '&gt;', 1)\n            return '<pre>' + val + '</pre>'\n        if get_option('display.notebook_repr_html'):\n            max_rows = get_option('display.max_rows')\n            max_cols = get_option('display.max_columns')\n            show_dimensions = get_option('display.show_dimensions')\n            return self.to_html(max_rows=max_rows, max_cols=max_cols,\n                show_dimensions=show_dimensions, notebook=True)\n        else:\n            return None\n\n    @property\n    def style(self):\n        \"\"\"\n        Property returning a Styler object containing methods for\n        building a styled HTML representation fo the DataFrame.\n\n        See Also\n        --------\n        pandas.io.formats.style.Styler\n        \"\"\"\n        from pandas.io.formats.style import Styler\n        return Styler(self)\n\n    def iteritems(self):\n        \"\"\"\n        Iterator over (column name, Series) pairs.\n\n        See also\n        --------\n        iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n        itertuples : Iterate over DataFrame rows as namedtuples of the values.\n\n        \"\"\"\n        if self.columns.is_unique and hasattr(self, '_item_cache'):\n            for k in self.columns:\n                yield k, self._get_item_cache(k)\n        else:\n            for i, k in enumerate(self.columns):\n                yield k, self._ixs(i, axis=1)\n\n    def iterrows(self):\n        \"\"\"\n        Iterate over DataFrame rows as (index, Series) pairs.\n\n        Notes\n        -----\n\n        1. Because ``iterrows`` returns a Series for each row,\n           it does **not** preserve dtypes across the rows (dtypes are\n           preserved across columns for DataFrames). For example,\n\n           >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n           >>> row = next(df.iterrows())[1]\n           >>> row\n           int      1.0\n           float    1.5\n           Name: 0, dtype: float64\n           >>> print(row['int'].dtype)\n           float64\n           >>> print(df['int'].dtype)\n           int64\n\n           To preserve dtypes while iterating over the rows, it is better\n           to use :meth:`itertuples` which returns namedtuples of the values\n           and which is generally faster than ``iterrows``.\n\n        2. You should **never modify** something you are iterating over.\n           This is not guaranteed to work in all cases. Depending on the\n           data types, the iterator returns a copy and not a view, and writing\n           to it will have no effect.\n\n        Returns\n        -------\n        it : generator\n            A generator that iterates over the rows of the frame.\n\n        See also\n        --------\n        itertuples : Iterate over DataFrame rows as namedtuples of the values.\n        iteritems : Iterate over (column name, Series) pairs.\n\n        \"\"\"\n        columns = self.columns\n        klass = self._constructor_sliced\n        for k, v in zip(self.index, self.values):\n            s = klass(v, index=columns, name=k)\n            yield k, s\n\n    def itertuples(self, index=True, name='Pandas'):\n        \"\"\"\n        Iterate over DataFrame rows as namedtuples, with index value as first\n        element of the tuple.\n\n        Parameters\n        ----------\n        index : boolean, default True\n            If True, return the index as the first element of the tuple.\n        name : string, default \"Pandas\"\n            The name of the returned namedtuples or None to return regular\n            tuples.\n\n        Notes\n        -----\n        The column names will be renamed to positional names if they are\n        invalid Python identifiers, repeated, or start with an underscore.\n        With a large number of columns (>255), regular tuples are returned.\n\n        See also\n        --------\n        iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n        iteritems : Iterate over (column name, Series) pairs.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [0.1, 0.2]},\n                              index=['a', 'b'])\n        >>> df\n           col1  col2\n        a     1   0.1\n        b     2   0.2\n        >>> for row in df.itertuples():\n        ...     print(row)\n        ...\n        Pandas(Index='a', col1=1, col2=0.10000000000000001)\n        Pandas(Index='b', col1=2, col2=0.20000000000000001)\n\n        \"\"\"\n        arrays = []\n        fields = []\n        if index:\n            arrays.append(self.index)\n            fields.append('Index')\n        arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))\n        if name is not None and len(self.columns) + index < 256:\n            try:\n                itertuple = collections.namedtuple(name, fields + list(self\n                    .columns), rename=True)\n                return map(itertuple._make, zip(*arrays))\n            except Exception:\n                pass\n        return zip(*arrays)\n    items = iteritems\n\n    def __len__(self):\n        \"\"\"Returns length of info axis, but here we use the index \"\"\"\n        return len(self.index)\n\n    def dot(self, other):\n        \"\"\"\n        Matrix multiplication with DataFrame or Series objects.  Can also be\n        called using `self @ other` in Python >= 3.5.\n\n        Parameters\n        ----------\n        other : DataFrame or Series\n\n        Returns\n        -------\n        dot_product : DataFrame or Series\n        \"\"\"\n        if isinstance(other, (Series, DataFrame)):\n            common = self.columns.union(other.index)\n            if len(common) > len(self.columns) or len(common) > len(other.index\n                ):\n                raise ValueError('matrices are not aligned')\n            left = self.reindex(columns=common, copy=False)\n            right = other.reindex(index=common, copy=False)\n            lvals = left.values\n            rvals = right.values\n        else:\n            left = self\n            lvals = self.values\n            rvals = np.asarray(other)\n            if lvals.shape[1] != rvals.shape[0]:\n                raise ValueError('Dot product shape mismatch, {l} vs {r}'.\n                    format(l=lvals.shape, r=rvals.shape))\n        if isinstance(other, DataFrame):\n            return self._constructor(np.dot(lvals, rvals), index=left.index,\n                columns=other.columns)\n        elif isinstance(other, Series):\n            return Series(np.dot(lvals, rvals), index=left.index)\n        elif isinstance(rvals, (np.ndarray, Index)):\n            result = np.dot(lvals, rvals)\n            if result.ndim == 2:\n                return self._constructor(result, index=left.index)\n            else:\n                return Series(result, index=left.index)\n        else:\n            raise TypeError('unsupported type: {oth}'.format(oth=type(other)))\n\n    def __matmul__(self, other):\n        \"\"\" Matrix multiplication using binary `@` operator in Python>=3.5 \"\"\"\n        return self.dot(other)\n\n    def __rmatmul__(self, other):\n        \"\"\" Matrix multiplication using binary `@` operator in Python>=3.5 \"\"\"\n        return self.T.dot(np.transpose(other)).T\n\n    @classmethod\n    def from_dict(cls, data, orient='columns', dtype=None, columns=None):\n        \"\"\"\n        Construct DataFrame from dict of array-like or dicts.\n\n        Creates DataFrame object from dictionary by columns or by index\n        allowing dtype specification.\n\n        Parameters\n        ----------\n        data : dict\n            Of the form {field : array-like} or {field : dict}.\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the passed dict\n            should be the columns of the resulting DataFrame, pass 'columns'\n            (default). Otherwise if the keys should be rows, pass 'index'.\n        dtype : dtype, default None\n            Data type to force, otherwise infer.\n        columns : list, default None\n            Column labels to use when ``orient='index'``. Raises a ValueError\n            if used with ``orient='columns'``.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        pandas.DataFrame\n\n        See Also\n        --------\n        DataFrame.from_records : DataFrame from ndarray (structured\n            dtype), list of tuples, dict, or DataFrame\n        DataFrame : DataFrame object creation using constructor\n\n        Examples\n        --------\n        By default the keys of the dict become the DataFrame columns:\n\n        >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data)\n           col_1 col_2\n        0      3     a\n        1      2     b\n        2      1     c\n        3      0     d\n\n        Specify ``orient='index'`` to create the DataFrame using dictionary\n        keys as rows:\n\n        >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data, orient='index')\n               0  1  2  3\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n\n        When using the 'index' orientation, the column names can be\n        specified manually:\n\n        >>> pd.DataFrame.from_dict(data, orient='index',\n        ...                        columns=['A', 'B', 'C', 'D'])\n               A  B  C  D\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n        \"\"\"\n        index = None\n        orient = orient.lower()\n        if orient == 'index':\n            if len(data) > 0:\n                if isinstance(list(data.values())[0], (Series, dict)):\n                    data = _from_nested_dict(data)\n                else:\n                    data, index = list(data.values()), list(data.keys())\n        elif orient == 'columns':\n            if columns is not None:\n                raise ValueError(\n                    \"cannot use columns parameter with orient='columns'\")\n        else:\n            raise ValueError('only recognize index or columns for orient')\n        return cls(data, index=index, columns=columns, dtype=dtype)\n\n    def to_dict(self, orient='dict', into=dict):\n        \"\"\"\n        Convert the DataFrame to a dictionary.\n\n        The type of the key-value pairs can be customized with the parameters\n        (see below).\n\n        Parameters\n        ----------\n        orient : str {'dict', 'list', 'series', 'split', 'records', 'index'}\n            Determines the type of the values of the dictionary.\n\n            - 'dict' (default) : dict like {column -> {index -> value}}\n            - 'list' : dict like {column -> [values]}\n            - 'series' : dict like {column -> Series(values)}\n            - 'split' : dict like\n              {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}\n            - 'records' : list like\n              [{column -> value}, ... , {column -> value}]\n            - 'index' : dict like {index -> {column -> value}}\n\n            Abbreviations are allowed. `s` indicates `series` and `sp`\n            indicates `split`.\n\n        into : class, default dict\n            The collections.Mapping subclass used for all Mappings\n            in the return value.  Can be the actual class or an empty\n            instance of the mapping type you want.  If you want a\n            collections.defaultdict, you must pass it initialized.\n\n            .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        result : collections.Mapping like {column -> {index -> value}}\n\n        See Also\n        --------\n        DataFrame.from_dict: create a DataFrame from a dictionary\n        DataFrame.to_json: convert a DataFrame to JSON format\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2],\n        ...                    'col2': [0.5, 0.75]},\n        ...                   index=['a', 'b'])\n        >>> df\n           col1  col2\n        a     1   0.50\n        b     2   0.75\n        >>> df.to_dict()\n        {'col1': {'a': 1, 'b': 2}, 'col2': {'a': 0.5, 'b': 0.75}}\n\n        You can specify the return orientation.\n\n        >>> df.to_dict('series')\n        {'col1': a    1\n                 b    2\n                 Name: col1, dtype: int64,\n         'col2': a    0.50\n                 b    0.75\n                 Name: col2, dtype: float64}\n\n        >>> df.to_dict('split')\n        {'index': ['a', 'b'], 'columns': ['col1', 'col2'],\n         'data': [[1.0, 0.5], [2.0, 0.75]]}\n\n        >>> df.to_dict('records')\n        [{'col1': 1.0, 'col2': 0.5}, {'col1': 2.0, 'col2': 0.75}]\n\n        >>> df.to_dict('index')\n        {'a': {'col1': 1.0, 'col2': 0.5}, 'b': {'col1': 2.0, 'col2': 0.75}}\n\n        You can also specify the mapping type.\n\n        >>> from collections import OrderedDict, defaultdict\n        >>> df.to_dict(into=OrderedDict)\n        OrderedDict([('col1', OrderedDict([('a', 1), ('b', 2)])),\n                     ('col2', OrderedDict([('a', 0.5), ('b', 0.75)]))])\n\n        If you want a `defaultdict`, you need to initialize it:\n\n        >>> dd = defaultdict(list)\n        >>> df.to_dict('records', into=dd)\n        [defaultdict(<class 'list'>, {'col1': 1.0, 'col2': 0.5}),\n         defaultdict(<class 'list'>, {'col1': 2.0, 'col2': 0.75})]\n        \"\"\"\n        if not self.columns.is_unique:\n            warnings.warn(\n                'DataFrame columns are not unique, some columns will be omitted.'\n                , UserWarning, stacklevel=2)\n        into_c = com.standardize_mapping(into)\n        if orient.lower().startswith('d'):\n            return into_c((k, v.to_dict(into)) for k, v in compat.iteritems\n                (self))\n        elif orient.lower().startswith('l'):\n            return into_c((k, v.tolist()) for k, v in compat.iteritems(self))\n        elif orient.lower().startswith('sp'):\n            return into_c((('index', self.index.tolist()), ('columns', self\n                .columns.tolist()), ('data', lib.map_infer(self.values.\n                ravel(), com.maybe_box_datetimelike).reshape(self.values.\n                shape).tolist())))\n        elif orient.lower().startswith('s'):\n            return into_c((k, com.maybe_box_datetimelike(v)) for k, v in\n                compat.iteritems(self))\n        elif orient.lower().startswith('r'):\n            return [into_c((k, com.maybe_box_datetimelike(v)) for k, v in\n                zip(self.columns, np.atleast_1d(row))) for row in self.values]\n        elif orient.lower().startswith('i'):\n            return into_c((t[0], dict(zip(self.columns, t[1:]))) for t in\n                self.itertuples())\n        else:\n            raise ValueError(\"orient '{o}' not understood\".format(o=orient))\n\n    def to_gbq(self, destination_table, project_id=None, chunksize=None,\n        reauth=False, if_exists='fail', private_key=None,\n        auth_local_webserver=False, table_schema=None, location=None,\n        progress_bar=True, verbose=None):\n        \"\"\"\n        Write a DataFrame to a Google BigQuery table.\n\n        This function requires the `pandas-gbq package\n        <https://pandas-gbq.readthedocs.io>`__.\n\n        See the `How to authenticate with Google BigQuery\n        <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\n        guide for authentication instructions.\n\n        Parameters\n        ----------\n        destination_table : str\n            Name of table to be written, in the form ``dataset.tablename``.\n        project_id : str, optional\n            Google BigQuery Account project ID. Optional when available from\n            the environment.\n        chunksize : int, optional\n            Number of rows to be inserted in each chunk from the dataframe.\n            Set to ``None`` to load the whole dataframe at once.\n        reauth : bool, default False\n            Force Google BigQuery to re-authenticate the user. This is useful\n            if multiple accounts are used.\n        if_exists : str, default 'fail'\n            Behavior when the destination table exists. Value can be one of:\n\n            ``'fail'``\n                If table exists, do nothing.\n            ``'replace'``\n                If table exists, drop it, recreate it, and insert data.\n            ``'append'``\n                If table exists, insert data. Create if does not exist.\n        private_key : str, optional\n            Service account private key in JSON format. Can be file path\n            or string contents. This is useful for remote server\n            authentication (eg. Jupyter/IPython notebook on remote host).\n        auth_local_webserver : bool, default False\n            Use the `local webserver flow`_ instead of the `console flow`_\n            when getting user credentials.\n\n            .. _local webserver flow:\n                http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n            .. _console flow:\n                http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n            *New in version 0.2.0 of pandas-gbq*.\n        table_schema : list of dicts, optional\n            List of BigQuery table fields to which according DataFrame\n            columns conform to, e.g. ``[{'name': 'col1', 'type':\n            'STRING'},...]``. If schema is not provided, it will be\n            generated according to dtypes of DataFrame columns. See\n            BigQuery API documentation on available names of a field.\n\n            *New in version 0.3.1 of pandas-gbq*.\n        location : str, optional\n            Location where the load job should run. See the `BigQuery locations\n            documentation\n            <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n            list of available locations. The location must match that of the\n            target dataset.\n\n            *New in version 0.5.0 of pandas-gbq*.\n        progress_bar : bool, default True\n            Use the library `tqdm` to show the progress bar for the upload,\n            chunk by chunk.\n\n            *New in version 0.5.0 of pandas-gbq*.\n        verbose : bool, deprecated\n            Deprecated in Pandas-GBQ 0.4.0. Use the `logging module\n            to adjust verbosity instead\n            <https://pandas-gbq.readthedocs.io/en/latest/intro.html#logging>`__.\n\n        See Also\n        --------\n        pandas_gbq.to_gbq : This function in the pandas-gbq library.\n        pandas.read_gbq : Read a DataFrame from Google BigQuery.\n        \"\"\"\n        from pandas.io import gbq\n        return gbq.to_gbq(self, destination_table, project_id=project_id,\n            chunksize=chunksize, reauth=reauth, if_exists=if_exists,\n            private_key=private_key, auth_local_webserver=\n            auth_local_webserver, table_schema=table_schema, location=\n            location, progress_bar=progress_bar, verbose=verbose)\n\n    @classmethod\n    def from_records(cls, data, index=None, exclude=None, columns=None,\n        coerce_float=False, nrows=None):\n        \"\"\"\n        Convert structured or record ndarray to DataFrame\n\n        Parameters\n        ----------\n        data : ndarray (structured dtype), list of tuples, dict, or DataFrame\n        index : string, list of fields, array-like\n            Field of array to use as the index, alternately a specific set of\n            input labels to use\n        exclude : sequence, default None\n            Columns or fields to exclude\n        columns : sequence, default None\n            Column names to use. If the passed data do not have names\n            associated with them, this argument provides names for the\n            columns. Otherwise this argument indicates the order of the columns\n            in the result (any names not found in the data will become all-NA\n            columns)\n        coerce_float : boolean, default False\n            Attempt to convert values of non-string, non-numeric objects (like\n            decimal.Decimal) to floating point, useful for SQL result sets\n        nrows : int, default None\n            Number of rows to read if data is an iterator\n\n        Returns\n        -------\n        df : DataFrame\n        \"\"\"\n        if columns is not None:\n            columns = ensure_index(columns)\n        if is_iterator(data):\n            if nrows == 0:\n                return cls()\n            try:\n                first_row = next(data)\n            except StopIteration:\n                return cls(index=index, columns=columns)\n            dtype = None\n            if hasattr(first_row, 'dtype') and first_row.dtype.names:\n                dtype = first_row.dtype\n            values = [first_row]\n            if nrows is None:\n                values += data\n            else:\n                values.extend(itertools.islice(data, nrows - 1))\n            if dtype is not None:\n                data = np.array(values, dtype=dtype)\n            else:\n                data = values\n        if isinstance(data, dict):\n            if columns is None:\n                columns = arr_columns = ensure_index(sorted(data))\n                arrays = [data[k] for k in columns]\n            else:\n                arrays = []\n                arr_columns = []\n                for k, v in compat.iteritems(data):\n                    if k in columns:\n                        arr_columns.append(k)\n                        arrays.append(v)\n                arrays, arr_columns = _reorder_arrays(arrays, arr_columns,\n                    columns)\n        elif isinstance(data, (np.ndarray, DataFrame)):\n            arrays, columns = _to_arrays(data, columns)\n            if columns is not None:\n                columns = ensure_index(columns)\n            arr_columns = columns\n        else:\n            arrays, arr_columns = _to_arrays(data, columns, coerce_float=\n                coerce_float)\n            arr_columns = ensure_index(arr_columns)\n            if columns is not None:\n                columns = ensure_index(columns)\n            else:\n                columns = arr_columns\n        if exclude is None:\n            exclude = set()\n        else:\n            exclude = set(exclude)\n        result_index = None\n        if index is not None:\n            if isinstance(index, compat.string_types) or not hasattr(index,\n                '__iter__'):\n                i = columns.get_loc(index)\n                exclude.add(index)\n                if len(arrays) > 0:\n                    result_index = Index(arrays[i], name=index)\n                else:\n                    result_index = Index([], name=index)\n            else:\n                try:\n                    to_remove = [arr_columns.get_loc(field) for field in index]\n                    index_data = [arrays[i] for i in to_remove]\n                    result_index = ensure_index_from_sequences(index_data,\n                        names=index)\n                    exclude.update(index)\n                except Exception:\n                    result_index = index\n        if any(exclude):\n            arr_exclude = [x for x in exclude if x in arr_columns]\n            to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n            arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n            arr_columns = arr_columns.drop(arr_exclude)\n            columns = columns.drop(exclude)\n        mgr = _arrays_to_mgr(arrays, arr_columns, result_index, columns)\n        return cls(mgr)\n\n    def to_records(self, index=True, convert_datetime64=None):\n        \"\"\"\n        Convert DataFrame to a NumPy record array.\n\n        Index will be put in the 'index' field of the record array if\n        requested.\n\n        Parameters\n        ----------\n        index : boolean, default True\n            Include index in resulting record array, stored in 'index' field.\n        convert_datetime64 : boolean, default None\n            .. deprecated:: 0.23.0\n\n            Whether to convert the index to datetime.datetime if it is a\n            DatetimeIndex.\n\n        Returns\n        -------\n        y : numpy.recarray\n\n        See Also\n        --------\n        DataFrame.from_records: convert structured or record ndarray\n            to DataFrame.\n        numpy.recarray: ndarray that allows field access using\n            attributes, analogous to typed columns in a\n            spreadsheet.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n        ...                   index=['a', 'b'])\n        >>> df\n           A     B\n        a  1  0.50\n        b  2  0.75\n        >>> df.to_records()\n        rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n                  dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n        The index can be excluded from the record array:\n\n        >>> df.to_records(index=False)\n        rec.array([(1, 0.5 ), (2, 0.75)],\n                  dtype=[('A', '<i8'), ('B', '<f8')])\n\n        By default, timestamps are converted to `datetime.datetime`:\n\n        >>> df.index = pd.date_range('2018-01-01 09:00', periods=2, freq='min')\n        >>> df\n                             A     B\n        2018-01-01 09:00:00  1  0.50\n        2018-01-01 09:01:00  2  0.75\n        >>> df.to_records()\n        rec.array([(datetime.datetime(2018, 1, 1, 9, 0), 1, 0.5 ),\n                   (datetime.datetime(2018, 1, 1, 9, 1), 2, 0.75)],\n                  dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n        The timestamp conversion can be disabled so NumPy's datetime64\n        data type is used instead:\n\n        >>> df.to_records(convert_datetime64=False)\n        rec.array([('2018-01-01T09:00:00.000000000', 1, 0.5 ),\n                   ('2018-01-01T09:01:00.000000000', 2, 0.75)],\n                  dtype=[('index', '<M8[ns]'), ('A', '<i8'), ('B', '<f8')])\n        \"\"\"\n        if convert_datetime64 is not None:\n            warnings.warn(\n                \"The 'convert_datetime64' parameter is deprecated and will be removed in a future version\"\n                , FutureWarning, stacklevel=2)\n        if index:\n            if is_datetime64_any_dtype(self.index) and convert_datetime64:\n                ix_vals = [self.index.to_pydatetime()]\n            elif isinstance(self.index, MultiIndex):\n                ix_vals = lmap(np.array, zip(*self.index.values))\n            else:\n                ix_vals = [self.index.values]\n            arrays = ix_vals + [self[c].get_values() for c in self.columns]\n            count = 0\n            index_names = list(self.index.names)\n            if isinstance(self.index, MultiIndex):\n                for i, n in enumerate(index_names):\n                    if n is None:\n                        index_names[i] = 'level_%d' % count\n                        count += 1\n            elif index_names[0] is None:\n                index_names = ['index']\n            names = lmap(compat.text_type, index_names) + lmap(compat.\n                text_type, self.columns)\n        else:\n            arrays = [self[c].get_values() for c in self.columns]\n            names = lmap(compat.text_type, self.columns)\n        formats = [v.dtype for v in arrays]\n        return np.rec.fromarrays(arrays, dtype={'names': names, 'formats':\n            formats})\n\n    @classmethod\n    def from_items(cls, items, columns=None, orient='columns'):\n        \"\"\"Construct a dataframe from a list of tuples\n\n        .. deprecated:: 0.23.0\n          `from_items` is deprecated and will be removed in a future version.\n          Use :meth:`DataFrame.from_dict(dict(items)) <DataFrame.from_dict>`\n          instead.\n          :meth:`DataFrame.from_dict(OrderedDict(items)) <DataFrame.from_dict>`\n          may be used to preserve the key order.\n\n        Convert (key, value) pairs to DataFrame. The keys will be the axis\n        index (usually the columns, but depends on the specified\n        orientation). The values should be arrays or Series.\n\n        Parameters\n        ----------\n        items : sequence of (key, value) pairs\n            Values should be arrays or Series.\n        columns : sequence of column labels, optional\n            Must be passed if orient='index'.\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the\n            input correspond to column labels, pass 'columns'\n            (default). Otherwise if the keys correspond to the index,\n            pass 'index'.\n\n        Returns\n        -------\n        frame : DataFrame\n        \"\"\"\n        warnings.warn(\n            'from_items is deprecated. Please use DataFrame.from_dict(dict(items), ...) instead. DataFrame.from_dict(OrderedDict(items)) may be used to preserve the key order.'\n            , FutureWarning, stacklevel=2)\n        keys, values = lzip(*items)\n        if orient == 'columns':\n            if columns is not None:\n                columns = ensure_index(columns)\n                idict = dict(items)\n                if len(idict) < len(items):\n                    if not columns.equals(ensure_index(keys)):\n                        raise ValueError(\n                            'With non-unique item names, passed columns must be identical'\n                            )\n                    arrays = values\n                else:\n                    arrays = [idict[k] for k in columns if k in idict]\n            else:\n                columns = ensure_index(keys)\n                arrays = values\n            try:\n                return cls._from_arrays(arrays, columns, None)\n            except ValueError:\n                if not is_nested_list_like(values):\n                    raise ValueError(\n                        'The value in each (key, value) pair must be an array, Series, or dict'\n                        )\n        elif orient == 'index':\n            if columns is None:\n                raise TypeError(\"Must pass columns with orient='index'\")\n            keys = ensure_index(keys)\n            try:\n                arr = np.array(values, dtype=object).T\n                data = [lib.maybe_convert_objects(v) for v in arr]\n                return cls._from_arrays(data, columns, keys)\n            except TypeError:\n                if not is_nested_list_like(values):\n                    raise ValueError(\n                        'The value in each (key, value) pair must be an array, Series, or dict'\n                        )\n        else:\n            raise ValueError(\"'orient' must be either 'columns' or 'index'\")\n\n    @classmethod\n    def _from_arrays(cls, arrays, columns, index, dtype=None):\n        mgr = _arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n        return cls(mgr)\n\n    @classmethod\n    def from_csv(cls, path, header=0, sep=',', index_col=0, parse_dates=\n        True, encoding=None, tupleize_cols=None, infer_datetime_format=False):\n        \"\"\"Read CSV file.\n\n        .. deprecated:: 0.21.0\n            Use :func:`pandas.read_csv` instead.\n\n        It is preferable to use the more powerful :func:`pandas.read_csv`\n        for most general purposes, but ``from_csv`` makes for an easy\n        roundtrip to and from a file (the exact counterpart of\n        ``to_csv``), especially with a DataFrame of time series data.\n\n        This method only differs from the preferred :func:`pandas.read_csv`\n        in some defaults:\n\n        - `index_col` is ``0`` instead of ``None`` (take first column as index\n          by default)\n        - `parse_dates` is ``True`` instead of ``False`` (try parsing the index\n          as datetime by default)\n\n        So a ``pd.DataFrame.from_csv(path)`` can be replaced by\n        ``pd.read_csv(path, index_col=0, parse_dates=True)``.\n\n        Parameters\n        ----------\n        path : string file path or file handle / StringIO\n        header : int, default 0\n            Row to use as header (skip prior rows)\n        sep : string, default ','\n            Field delimiter\n        index_col : int or sequence, default 0\n            Column to use for index. If a sequence is given, a MultiIndex\n            is used. Different default from read_table\n        parse_dates : boolean, default True\n            Parse dates. Different default from read_table\n        tupleize_cols : boolean, default False\n            write multi_index columns as a list of tuples (if True)\n            or new (expanded format) if False)\n        infer_datetime_format: boolean, default False\n            If True and `parse_dates` is True for a column, try to infer the\n            datetime format based on the first datetime string. If the format\n            can be inferred, there often will be a large parsing speed-up.\n\n        See also\n        --------\n        pandas.read_csv\n\n        Returns\n        -------\n        y : DataFrame\n\n        \"\"\"\n        warnings.warn(\n            'from_csv is deprecated. Please use read_csv(...) instead. Note that some of the default arguments are different, so please refer to the documentation for from_csv when changing your function calls'\n            , FutureWarning, stacklevel=2)\n        from pandas.io.parsers import read_csv\n        return read_csv(path, header=header, sep=sep, parse_dates=\n            parse_dates, index_col=index_col, encoding=encoding,\n            tupleize_cols=tupleize_cols, infer_datetime_format=\n            infer_datetime_format)\n\n    def to_sparse(self, fill_value=None, kind='block'):\n        \"\"\"\n        Convert to SparseDataFrame.\n\n        Implement the sparse version of the DataFrame meaning that any data\n        matching a specific value it's omitted in the representation.\n        The sparse DataFrame allows for a more efficient storage.\n\n        Parameters\n        ----------\n        fill_value : float, default None\n            The specific value that should be omitted in the representation.\n        kind : {'block', 'integer'}, default 'block'\n            The kind of the SparseIndex tracking where data is not equal to\n            the fill value:\n\n            - 'block' tracks only the locations and sizes of blocks of data.\n            - 'integer' keeps an array with all the locations of the data.\n\n            In most cases 'block' is recommended, since it's more memory\n            efficient.\n\n        Returns\n        -------\n        SparseDataFrame\n            The sparse representation of the DataFrame.\n\n        See Also\n        --------\n        DataFrame.to_dense :\n            Converts the DataFrame back to the its dense form.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([(np.nan, np.nan),\n        ...                    (1., np.nan),\n        ...                    (np.nan, 1.)])\n        >>> df\n             0    1\n        0  NaN  NaN\n        1  1.0  NaN\n        2  NaN  1.0\n        >>> type(df)\n        <class 'pandas.core.frame.DataFrame'>\n\n        >>> sdf = df.to_sparse()\n        >>> sdf\n             0    1\n        0  NaN  NaN\n        1  1.0  NaN\n        2  NaN  1.0\n        >>> type(sdf)\n        <class 'pandas.core.sparse.frame.SparseDataFrame'>\n        \"\"\"\n        from pandas.core.sparse.frame import SparseDataFrame\n        return SparseDataFrame(self._series, index=self.index, columns=self\n            .columns, default_kind=kind, default_fill_value=fill_value)\n\n    def to_panel(self):\n        \"\"\"\n        Transform long (stacked) format (DataFrame) into wide (3D, Panel)\n        format.\n\n        .. deprecated:: 0.20.0\n\n        Currently the index of the DataFrame must be a 2-level MultiIndex. This\n        may be generalized later\n\n        Returns\n        -------\n        panel : Panel\n        \"\"\"\n        if not isinstance(self.index, MultiIndex) or len(self.index.levels\n            ) != 2:\n            raise NotImplementedError('Only 2-level MultiIndex are supported.')\n        if not self.index.is_unique:\n            raise ValueError(\n                \"Can't convert non-uniquely indexed DataFrame to Panel\")\n        self._consolidate_inplace()\n        if self.index.lexsort_depth < 2:\n            selfsorted = self.sort_index(level=0)\n        else:\n            selfsorted = self\n        major_axis, minor_axis = selfsorted.index.levels\n        major_labels, minor_labels = selfsorted.index.labels\n        shape = len(major_axis), len(minor_axis)\n        major_axis = major_axis.copy()\n        major_axis.name = self.index.names[0]\n        minor_axis = minor_axis.copy()\n        minor_axis.name = self.index.names[1]\n        new_axes = [selfsorted.columns, major_axis, minor_axis]\n        new_mgr = selfsorted._data.reshape_nd(axes=new_axes, labels=[\n            major_labels, minor_labels], shape=shape, ref_items=selfsorted.\n            columns)\n        return self._constructor_expanddim(new_mgr)\n\n    def to_csv(self, path_or_buf=None, sep=',', na_rep='', float_format=\n        None, columns=None, header=True, index=True, index_label=None, mode\n        ='w', encoding=None, compression='infer', quoting=None, quotechar=\n        '\"', line_terminator='\\n', chunksize=None, tupleize_cols=None,\n        date_format=None, doublequote=True, escapechar=None, decimal='.'):\n        \"\"\"Write DataFrame to a comma-separated values (csv) file\n\n        Parameters\n        ----------\n        path_or_buf : string or file handle, default None\n            File path or object, if None is provided the result is returned as\n            a string.\n        sep : character, default ','\n            Field delimiter for the output file.\n        na_rep : string, default ''\n            Missing data representation\n        float_format : string, default None\n            Format string for floating point numbers\n        columns : sequence, optional\n            Columns to write\n        header : boolean or list of string, default True\n            Write out the column names. If a list of strings is given it is\n            assumed to be aliases for the column names\n        index : boolean, default True\n            Write row names (index)\n        index_label : string or sequence, or False, default None\n            Column label for index column(s) if desired. If None is given, and\n            `header` and `index` are True, then the index names are used. A\n            sequence should be given if the DataFrame uses MultiIndex.  If\n            False do not print fields for index names. Use index_label=False\n            for easier importing in R\n        mode : str\n            Python write mode, default 'w'\n        encoding : string, optional\n            A string representing the encoding to use in the output file,\n            defaults to 'ascii' on Python 2 and 'utf-8' on Python 3.\n        compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None},\n                      default 'infer'\n            If 'infer' and `path_or_buf` is path-like, then detect compression\n            from the following extensions: '.gz', '.bz2', '.zip' or '.xz'\n            (otherwise no compression).\n\n            .. versionchanged:: 0.24.0\n               'infer' option added and set to default\n        line_terminator : string, default ``'\\\\n'``\n            The newline character or character sequence to use in the output\n            file\n        quoting : optional constant from csv module\n            defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n            then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n            will treat them as non-numeric\n        quotechar : string (length 1), default '\\\\\"'\n            character used to quote fields\n        doublequote : boolean, default True\n            Control quoting of `quotechar` inside a field\n        escapechar : string (length 1), default None\n            character used to escape `sep` and `quotechar` when appropriate\n        chunksize : int or None\n            rows to write at a time\n        tupleize_cols : boolean, default False\n            .. deprecated:: 0.21.0\n               This argument will be removed and will always write each row\n               of the multi-index as a separate row in the CSV file.\n\n            Write MultiIndex columns as a list of tuples (if True) or in\n            the new, expanded format, where each MultiIndex column is a row\n            in the CSV (if False).\n        date_format : string, default None\n            Format string for datetime objects\n        decimal: string, default '.'\n            Character recognized as decimal separator. E.g. use ',' for\n            European data\n\n        \"\"\"\n        if tupleize_cols is not None:\n            warnings.warn(\n                \"The 'tupleize_cols' parameter is deprecated and will be removed in a future version\"\n                , FutureWarning, stacklevel=2)\n        else:\n            tupleize_cols = False\n        from pandas.io.formats.csvs import CSVFormatter\n        formatter = CSVFormatter(self, path_or_buf, line_terminator=\n            line_terminator, sep=sep, encoding=encoding, compression=\n            compression, quoting=quoting, na_rep=na_rep, float_format=\n            float_format, cols=columns, header=header, index=index,\n            index_label=index_label, mode=mode, chunksize=chunksize,\n            quotechar=quotechar, tupleize_cols=tupleize_cols, date_format=\n            date_format, doublequote=doublequote, escapechar=escapechar,\n            decimal=decimal)\n        formatter.save()\n        if path_or_buf is None:\n            return formatter.path_or_buf.getvalue()\n\n    @Appender(_shared_docs['to_excel'] % _shared_doc_kwargs)\n    def to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='',\n        float_format=None, columns=None, header=True, index=True,\n        index_label=None, startrow=0, startcol=0, engine=None, merge_cells=\n        True, encoding=None, inf_rep='inf', verbose=True, freeze_panes=None):\n        from pandas.io.formats.excel import ExcelFormatter\n        formatter = ExcelFormatter(self, na_rep=na_rep, cols=columns,\n            header=header, float_format=float_format, index=index,\n            index_label=index_label, merge_cells=merge_cells, inf_rep=inf_rep)\n        formatter.write(excel_writer, sheet_name=sheet_name, startrow=\n            startrow, startcol=startcol, freeze_panes=freeze_panes, engine=\n            engine)\n\n    @deprecate_kwarg(old_arg_name='encoding', new_arg_name=None)\n    def to_stata(self, fname, convert_dates=None, write_index=True,\n        encoding='latin-1', byteorder=None, time_stamp=None, data_label=\n        None, variable_labels=None, version=114, convert_strl=None):\n        \"\"\"\n        Export Stata binary dta files.\n\n        Parameters\n        ----------\n        fname : path (string), buffer or path object\n            string, path object (pathlib.Path or py._path.local.LocalPath) or\n            object implementing a binary write() functions. If using a buffer\n            then the buffer will not be automatically closed after the file\n            data has been written.\n        convert_dates : dict\n            Dictionary mapping columns containing datetime types to stata\n            internal format to use when writing the dates. Options are 'tc',\n            'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n            or a name. Datetime columns that do not have a conversion type\n            specified will be converted to 'tc'. Raises NotImplementedError if\n            a datetime column has timezone information.\n        write_index : bool\n            Write the index to Stata dataset.\n        encoding : str\n            Default is latin-1. Unicode is not supported.\n        byteorder : str\n            Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`.\n        time_stamp : datetime\n            A datetime to use as file creation date.  Default is the current\n            time.\n        data_label : str\n            A label for the data set.  Must be 80 characters or smaller.\n        variable_labels : dict\n            Dictionary containing columns as keys and variable labels as\n            values. Each label must be 80 characters or smaller.\n\n            .. versionadded:: 0.19.0\n\n        version : {114, 117}\n            Version to use in the output dta file.  Version 114 can be used\n            read by Stata 10 and later.  Version 117 can be read by Stata 13\n            or later. Version 114 limits string variables to 244 characters or\n            fewer while 117 allows strings with lengths up to 2,000,000\n            characters.\n\n            .. versionadded:: 0.23.0\n\n        convert_strl : list, optional\n            List of column names to convert to string columns to Stata StrL\n            format. Only available if version is 117.  Storing strings in the\n            StrL format can produce smaller dta files if strings have more than\n            8 characters and values are repeated.\n\n            .. versionadded:: 0.23.0\n\n        Raises\n        ------\n        NotImplementedError\n            * If datetimes contain timezone information\n            * Column dtype is not representable in Stata\n        ValueError\n            * Columns listed in convert_dates are neither datetime64[ns]\n              or datetime.datetime\n            * Column listed in convert_dates is not in DataFrame\n            * Categorical label contains more than 32,000 characters\n\n            .. versionadded:: 0.19.0\n\n        See Also\n        --------\n        pandas.read_stata : Import Stata data files\n        pandas.io.stata.StataWriter : low-level writer for Stata data files\n        pandas.io.stata.StataWriter117 : low-level writer for version 117 files\n\n        Examples\n        --------\n        >>> data.to_stata('./data_file.dta')\n\n        Or with dates\n\n        >>> data.to_stata('./date_data_file.dta', {2 : 'tw'})\n\n        Alternatively you can create an instance of the StataWriter class\n\n        >>> writer = StataWriter('./data_file.dta', data)\n        >>> writer.write_file()\n\n        With dates:\n\n        >>> writer = StataWriter('./date_data_file.dta', data, {2 : 'tw'})\n        >>> writer.write_file()\n        \"\"\"\n        kwargs = {}\n        if version not in (114, 117):\n            raise ValueError('Only formats 114 and 117 supported.')\n        if version == 114:\n            if convert_strl is not None:\n                raise ValueError(\n                    'strl support is only available when using format 117')\n            from pandas.io.stata import StataWriter as statawriter\n        else:\n            from pandas.io.stata import StataWriter117 as statawriter\n            kwargs['convert_strl'] = convert_strl\n        writer = statawriter(fname, self, convert_dates=convert_dates,\n            byteorder=byteorder, time_stamp=time_stamp, data_label=\n            data_label, write_index=write_index, variable_labels=\n            variable_labels, **kwargs)\n        writer.write_file()\n\n    def to_feather(self, fname):\n        \"\"\"\n        write out the binary feather-format for DataFrames\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        fname : str\n            string file path\n\n        \"\"\"\n        from pandas.io.feather_format import to_feather\n        to_feather(self, fname)\n\n    def to_parquet(self, fname, engine='auto', compression='snappy', **kwargs):\n        \"\"\"\n        Write a DataFrame to the binary parquet format.\n\n        .. versionadded:: 0.21.0\n\n        This function writes the dataframe as a `parquet file\n        <https://parquet.apache.org/>`_. You can choose different parquet\n        backends, and have the option of compression. See\n        :ref:`the user guide <io.parquet>` for more details.\n\n        Parameters\n        ----------\n        fname : str\n            String file path.\n        engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n            Parquet library to use. If 'auto', then the option\n            ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n            behavior is to try 'pyarrow', falling back to 'fastparquet' if\n            'pyarrow' is unavailable.\n        compression : {'snappy', 'gzip', 'brotli', None}, default 'snappy'\n            Name of the compression to use. Use ``None`` for no compression.\n        **kwargs\n            Additional arguments passed to the parquet library. See\n            :ref:`pandas io <io.parquet>` for more details.\n\n        See Also\n        --------\n        read_parquet : Read a parquet file.\n        DataFrame.to_csv : Write a csv file.\n        DataFrame.to_sql : Write to a sql table.\n        DataFrame.to_hdf : Write to hdf.\n\n        Notes\n        -----\n        This function requires either the `fastparquet\n        <https://pypi.org/project/fastparquet>`_ or `pyarrow\n        <https://arrow.apache.org/docs/python/>`_ library.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.to_parquet('df.parquet.gzip', compression='gzip')\n        >>> pd.read_parquet('df.parquet.gzip')\n           col1  col2\n        0     1     3\n        1     2     4\n        \"\"\"\n        from pandas.io.parquet import to_parquet\n        to_parquet(self, fname, engine, compression=compression, **kwargs)\n\n    @Substitution(header=\n        'Write out the column names. If a list of strings is given, it is assumed to be aliases for the column names'\n        )\n    @Substitution(shared_params=fmt.common_docstring, returns=fmt.\n        return_docstring)\n    def to_string(self, buf=None, columns=None, col_space=None, header=True,\n        index=True, na_rep='NaN', formatters=None, float_format=None,\n        sparsify=None, index_names=True, justify=None, line_width=None,\n        max_rows=None, max_cols=None, show_dimensions=False):\n        \"\"\"\n        Render a DataFrame to a console-friendly tabular output.\n\n        %(shared_params)s\n        line_width : int, optional\n            Width to wrap a line in characters.\n\n        %(returns)s\n\n        See Also\n        --------\n        to_html : Convert DataFrame to HTML.\n\n        Examples\n        --------\n        >>> d = {'col1' : [1, 2, 3], 'col2' : [4, 5, 6]}\n        >>> df = pd.DataFrame(d)\n        >>> print(df.to_string())\n           col1  col2\n        0     1     4\n        1     2     5\n        2     3     6\n        \"\"\"\n        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n            col_space=col_space, na_rep=na_rep, formatters=formatters,\n            float_format=float_format, sparsify=sparsify, justify=justify,\n            index_names=index_names, header=header, index=index, line_width\n            =line_width, max_rows=max_rows, max_cols=max_cols,\n            show_dimensions=show_dimensions)\n        formatter.to_string()\n        if buf is None:\n            result = formatter.buf.getvalue()\n            return result\n\n    @Substitution(header='whether to print column labels, default True')\n    @Substitution(shared_params=fmt.common_docstring, returns=fmt.\n        return_docstring)\n    def to_html(self, buf=None, columns=None, col_space=None, header=True,\n        index=True, na_rep='NaN', formatters=None, float_format=None,\n        sparsify=None, index_names=True, justify=None, bold_rows=True,\n        classes=None, escape=True, max_rows=None, max_cols=None,\n        show_dimensions=False, notebook=False, decimal='.', border=None,\n        table_id=None):\n        \"\"\"\n        Render a DataFrame as an HTML table.\n\n        %(shared_params)s\n        bold_rows : boolean, default True\n            Make the row labels bold in the output\n        classes : str or list or tuple, default None\n            CSS class(es) to apply to the resulting html table\n        escape : boolean, default True\n            Convert the characters <, >, and & to HTML-safe sequences.\n        notebook : {True, False}, default False\n            Whether the generated HTML is for IPython Notebook.\n        decimal : string, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe\n\n            .. versionadded:: 0.18.0\n\n        border : int\n            A ``border=border`` attribute is included in the opening\n            `<table>` tag. Default ``pd.options.html.border``.\n\n            .. versionadded:: 0.19.0\n\n        table_id : str, optional\n            A css id is included in the opening `<table>` tag if specified.\n\n            .. versionadded:: 0.23.0\n\n        %(returns)s\n\n        See Also\n        --------\n        to_string : Convert DataFrame to a string.\n        \"\"\"\n        if (justify is not None and justify not in fmt.\n            _VALID_JUSTIFY_PARAMETERS):\n            raise ValueError('Invalid value for justify parameter')\n        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n            col_space=col_space, na_rep=na_rep, formatters=formatters,\n            float_format=float_format, sparsify=sparsify, justify=justify,\n            index_names=index_names, header=header, index=index, bold_rows=\n            bold_rows, escape=escape, max_rows=max_rows, max_cols=max_cols,\n            show_dimensions=show_dimensions, decimal=decimal, table_id=table_id\n            )\n        formatter.to_html(classes=classes, notebook=notebook, border=border)\n        if buf is None:\n            return formatter.buf.getvalue()\n\n    def info(self, verbose=None, buf=None, max_cols=None, memory_usage=None,\n        null_counts=None):\n        \"\"\"\n        Print a concise summary of a DataFrame.\n\n        This method prints information about a DataFrame including\n        the index dtype and column dtypes, non-null values and memory usage.\n\n        Parameters\n        ----------\n        verbose : bool, optional\n            Whether to print the full summary. By default, the setting in\n            ``pandas.options.display.max_info_columns`` is followed.\n        buf : writable buffer, defaults to sys.stdout\n            Where to send the output. By default, the output is printed to\n            sys.stdout. Pass a writable buffer if you need to further process\n            the output.\n        max_cols : int, optional\n            When to switch from the verbose to the truncated output. If the\n            DataFrame has more than `max_cols` columns, the truncated output\n            is used. By default, the setting in\n            ``pandas.options.display.max_info_columns`` is used.\n        memory_usage : bool, str, optional\n            Specifies whether total memory usage of the DataFrame\n            elements (including the index) should be displayed. By default,\n            this follows the ``pandas.options.display.memory_usage`` setting.\n\n            True always show memory usage. False never shows memory usage.\n            A value of 'deep' is equivalent to \"True with deep introspection\".\n            Memory usage is shown in human-readable units (base-2\n            representation). Without deep introspection a memory estimation is\n            made based in column dtype and number of rows assuming values\n            consume the same memory amount for corresponding dtypes. With deep\n            memory introspection, a real memory usage calculation is performed\n            at the cost of computational resources.\n        null_counts : bool, optional\n            Whether to show the non-null counts. By default, this is shown\n            only if the frame is smaller than\n            ``pandas.options.display.max_info_rows`` and\n            ``pandas.options.display.max_info_columns``. A value of True always\n            shows the counts, and False never shows the counts.\n\n        Returns\n        -------\n        None\n            This method prints a summary of a DataFrame and returns None.\n\n        See Also\n        --------\n        DataFrame.describe: Generate descriptive statistics of DataFrame\n            columns.\n        DataFrame.memory_usage: Memory usage of DataFrame columns.\n\n        Examples\n        --------\n        >>> int_values = [1, 2, 3, 4, 5]\n        >>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n        >>> float_values = [0.0, 0.25, 0.5, 0.75, 1.0]\n        >>> df = pd.DataFrame({\"int_col\": int_values, \"text_col\": text_values,\n        ...                   \"float_col\": float_values})\n        >>> df\n           int_col text_col  float_col\n        0        1    alpha       0.00\n        1        2     beta       0.25\n        2        3    gamma       0.50\n        3        4    delta       0.75\n        4        5  epsilon       1.00\n\n        Prints information of all columns:\n\n        >>> df.info(verbose=True)\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 5 entries, 0 to 4\n        Data columns (total 3 columns):\n        int_col      5 non-null int64\n        text_col     5 non-null object\n        float_col    5 non-null float64\n        dtypes: float64(1), int64(1), object(1)\n        memory usage: 200.0+ bytes\n\n        Prints a summary of columns count and its dtypes but not per column\n        information:\n\n        >>> df.info(verbose=False)\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 5 entries, 0 to 4\n        Columns: 3 entries, int_col to float_col\n        dtypes: float64(1), int64(1), object(1)\n        memory usage: 200.0+ bytes\n\n        Pipe output of DataFrame.info to buffer instead of sys.stdout, get\n        buffer content and writes to a text file:\n\n        >>> import io\n        >>> buffer = io.StringIO()\n        >>> df.info(buf=buffer)\n        >>> s = buffer.getvalue()\n        >>> with open(\"df_info.txt\", \"w\", encoding=\"utf-8\") as f:\n        ...     f.write(s)\n        260\n\n        The `memory_usage` parameter allows deep introspection mode, specially\n        useful for big DataFrames and fine-tune memory optimization:\n\n        >>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)\n        >>> df = pd.DataFrame({\n        ...     'column_1': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n        ...     'column_2': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n        ...     'column_3': np.random.choice(['a', 'b', 'c'], 10 ** 6)\n        ... })\n        >>> df.info()\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 1000000 entries, 0 to 999999\n        Data columns (total 3 columns):\n        column_1    1000000 non-null object\n        column_2    1000000 non-null object\n        column_3    1000000 non-null object\n        dtypes: object(3)\n        memory usage: 22.9+ MB\n\n        >>> df.info(memory_usage='deep')\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 1000000 entries, 0 to 999999\n        Data columns (total 3 columns):\n        column_1    1000000 non-null object\n        column_2    1000000 non-null object\n        column_3    1000000 non-null object\n        dtypes: object(3)\n        memory usage: 188.8 MB\n        \"\"\"\n        if buf is None:\n            buf = sys.stdout\n        lines = []\n        lines.append(str(type(self)))\n        lines.append(self.index._summary())\n        if len(self.columns) == 0:\n            lines.append('Empty {name}'.format(name=type(self).__name__))\n            fmt.buffer_put_lines(buf, lines)\n            return\n        cols = self.columns\n        if max_cols is None:\n            max_cols = get_option('display.max_info_columns', len(self.\n                columns) + 1)\n        max_rows = get_option('display.max_info_rows', len(self) + 1)\n        if null_counts is None:\n            show_counts = len(self.columns) <= max_cols and len(self\n                ) < max_rows\n        else:\n            show_counts = null_counts\n        exceeds_info_cols = len(self.columns) > max_cols\n\n        def _verbose_repr():\n            lines.append('Data columns (total %d columns):' % len(self.columns)\n                )\n            space = max(len(pprint_thing(k)) for k in self.columns) + 4\n            counts = None\n            tmpl = '{count}{dtype}'\n            if show_counts:\n                counts = self.count()\n                if len(cols) != len(counts):\n                    raise AssertionError(\n                        'Columns must equal counts ({cols:d} != {counts:d})'\n                        .format(cols=len(cols), counts=len(counts)))\n                tmpl = '{count} non-null {dtype}'\n            dtypes = self.dtypes\n            for i, col in enumerate(self.columns):\n                dtype = dtypes.iloc[i]\n                col = pprint_thing(col)\n                count = ''\n                if show_counts:\n                    count = counts.iloc[i]\n                lines.append(_put_str(col, space) + tmpl.format(count=count,\n                    dtype=dtype))\n\n        def _non_verbose_repr():\n            lines.append(self.columns._summary(name='Columns'))\n\n        def _sizeof_fmt(num, size_qualifier):\n            for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n                if num < 1024.0:\n                    return '{num:3.1f}{size_q} {x}'.format(num=num, size_q=\n                        size_qualifier, x=x)\n                num /= 1024.0\n            return '{num:3.1f}{size_q} {pb}'.format(num=num, size_q=\n                size_qualifier, pb='PB')\n        if verbose:\n            _verbose_repr()\n        elif verbose is False:\n            _non_verbose_repr()\n        elif exceeds_info_cols:\n            _non_verbose_repr()\n        else:\n            _verbose_repr()\n        counts = self.get_dtype_counts()\n        dtypes = ['{k}({kk:d})'.format(k=k[0], kk=k[1]) for k in sorted(\n            compat.iteritems(counts))]\n        lines.append('dtypes: {types}'.format(types=', '.join(dtypes)))\n        if memory_usage is None:\n            memory_usage = get_option('display.memory_usage')\n        if memory_usage:\n            size_qualifier = ''\n            if memory_usage == 'deep':\n                deep = True\n            else:\n                deep = False\n                if 'object' in counts or self.index._is_memory_usage_qualified(\n                    ):\n                    size_qualifier = '+'\n            mem_usage = self.memory_usage(index=True, deep=deep).sum()\n            lines.append('memory usage: {mem}\\n'.format(mem=_sizeof_fmt(\n                mem_usage, size_qualifier)))\n        fmt.buffer_put_lines(buf, lines)\n\n    def memory_usage(self, index=True, deep=False):\n        \"\"\"\n        Return the memory usage of each column in bytes.\n\n        The memory usage can optionally include the contribution of\n        the index and elements of `object` dtype.\n\n        This value is displayed in `DataFrame.info` by default. This can be\n        suppressed by setting ``pandas.options.display.memory_usage`` to False.\n\n        Parameters\n        ----------\n        index : bool, default True\n            Specifies whether to include the memory usage of the DataFrame's\n            index in returned Series. If ``index=True`` the memory usage of the\n            index the first item in the output.\n        deep : bool, default False\n            If True, introspect the data deeply by interrogating\n            `object` dtypes for system-level memory consumption, and include\n            it in the returned values.\n\n        Returns\n        -------\n        sizes : Series\n            A Series whose index is the original column names and whose values\n            is the memory usage of each column in bytes.\n\n        See Also\n        --------\n        numpy.ndarray.nbytes : Total bytes consumed by the elements of an\n            ndarray.\n        Series.memory_usage : Bytes consumed by a Series.\n        pandas.Categorical : Memory-efficient array for string values with\n            many repeated values.\n        DataFrame.info : Concise summary of a DataFrame.\n\n        Examples\n        --------\n        >>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n        >>> data = dict([(t, np.ones(shape=5000).astype(t))\n        ...              for t in dtypes])\n        >>> df = pd.DataFrame(data)\n        >>> df.head()\n           int64  float64  complex128 object  bool\n        0      1      1.0      (1+0j)      1  True\n        1      1      1.0      (1+0j)      1  True\n        2      1      1.0      (1+0j)      1  True\n        3      1      1.0      (1+0j)      1  True\n        4      1      1.0      (1+0j)      1  True\n\n        >>> df.memory_usage()\n        Index            80\n        int64         40000\n        float64       40000\n        complex128    80000\n        object        40000\n        bool           5000\n        dtype: int64\n\n        >>> df.memory_usage(index=False)\n        int64         40000\n        float64       40000\n        complex128    80000\n        object        40000\n        bool           5000\n        dtype: int64\n\n        The memory footprint of `object` dtype columns is ignored by default:\n\n        >>> df.memory_usage(deep=True)\n        Index             80\n        int64          40000\n        float64        40000\n        complex128     80000\n        object        160000\n        bool            5000\n        dtype: int64\n\n        Use a Categorical for efficient storage of an object-dtype column with\n        many repeated values.\n\n        >>> df['object'].astype('category').memory_usage(deep=True)\n        5168\n        \"\"\"\n        result = Series([c.memory_usage(index=False, deep=deep) for col, c in\n            self.iteritems()], index=self.columns)\n        if index:\n            result = Series(self.index.memory_usage(deep=deep), index=['Index']\n                ).append(result)\n        return result\n\n    def transpose(self, *args, **kwargs):\n        \"\"\"\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        copy : bool, default False\n            If True, the underlying data is copied. Otherwise (default), no\n            copy is made if possible.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted for\n            compatibility with numpy.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5     8\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        \"\"\"\n        nv.validate_transpose(args, dict())\n        return super(DataFrame, self).transpose(1, 0, **kwargs)\n    T = property(transpose)\n\n    def _unpickle_frame_compat(self, state):\n        if len(state) == 2:\n            series, idx = state\n            columns = sorted(series)\n        else:\n            series, cols, idx = state\n            columns = com._unpickle_array(cols)\n        index = com._unpickle_array(idx)\n        self._data = self._init_dict(series, index, columns, None)\n\n    def _unpickle_matrix_compat(self, state):\n        (vals, idx, cols), object_state = state\n        index = com._unpickle_array(idx)\n        dm = DataFrame(vals, index=index, columns=com._unpickle_array(cols),\n            copy=False)\n        if object_state is not None:\n            ovals, _, ocols = object_state\n            objects = DataFrame(ovals, index=index, columns=com.\n                _unpickle_array(ocols), copy=False)\n            dm = dm.join(objects)\n        self._data = dm._data\n\n    def get_value(self, index, col, takeable=False):\n        \"\"\"Quickly retrieve single value at passed column and index\n\n        .. deprecated:: 0.21.0\n            Use .at[] or .iat[] accessors instead.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        value : scalar value\n        \"\"\"\n        warnings.warn(\n            'get_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead'\n            , FutureWarning, stacklevel=2)\n        return self._get_value(index, col, takeable=takeable)\n\n    def _get_value(self, index, col, takeable=False):\n        if takeable:\n            series = self._iget_item_cache(col)\n            return com.maybe_box_datetimelike(series._values[index])\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n        try:\n            return engine.get_value(series._values, index)\n        except (TypeError, ValueError):\n            col = self.columns.get_loc(col)\n            index = self.index.get_loc(index)\n            return self._get_value(index, col, takeable=True)\n    _get_value.__doc__ = get_value.__doc__\n\n    def set_value(self, index, col, value, takeable=False):\n        \"\"\"Put single value at passed column and index\n\n        .. deprecated:: 0.21.0\n            Use .at[] or .iat[] accessors instead.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        value : scalar value\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        frame : DataFrame\n            If label pair is contained, will be reference to calling DataFrame,\n            otherwise a new object\n        \"\"\"\n        warnings.warn(\n            'set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead'\n            , FutureWarning, stacklevel=2)\n        return self._set_value(index, col, value, takeable=takeable)\n\n    def _set_value(self, index, col, value, takeable=False):\n        try:\n            if takeable is True:\n                series = self._iget_item_cache(col)\n                return series._set_value(index, value, takeable=True)\n            series = self._get_item_cache(col)\n            engine = self.index._engine\n            engine.set_value(series._values, index, value)\n            return self\n        except (KeyError, TypeError):\n            self.loc[index, col] = value\n            self._item_cache.pop(col, None)\n            return self\n    _set_value.__doc__ = set_value.__doc__\n\n    def _ixs(self, i, axis=0):\n        \"\"\"\n        i : int, slice, or sequence of integers\n        axis : int\n        \"\"\"\n        if axis == 0:\n            \"\"\"\n            Notes\n            -----\n            If slice passed, the resulting data will be a view\n            \"\"\"\n            if isinstance(i, slice):\n                return self[i]\n            else:\n                label = self.index[i]\n                if isinstance(label, Index):\n                    result = self.take(i, axis=axis)\n                    copy = True\n                else:\n                    new_values = self._data.fast_xs(i)\n                    if is_scalar(new_values):\n                        return new_values\n                    copy = isinstance(new_values, np.ndarray\n                        ) and new_values.base is None\n                    result = self._constructor_sliced(new_values, index=\n                        self.columns, name=self.index[i], dtype=new_values.\n                        dtype)\n                result._set_is_copy(self, copy=copy)\n                return result\n        else:\n            \"\"\"\n            Notes\n            -----\n            If slice passed, the resulting data will be a view\n            \"\"\"\n            label = self.columns[i]\n            if isinstance(i, slice):\n                lab_slice = slice(label[0], label[-1])\n                return self.loc[:, lab_slice]\n            else:\n                if isinstance(label, Index):\n                    return self._take(i, axis=1)\n                index_len = len(self.index)\n                values = self._data.iget(i)\n                if index_len and not len(values):\n                    values = np.array([np.nan] * index_len, dtype=object)\n                result = self._box_col_values(values, label)\n                result._set_as_cached(label, self)\n                return result\n\n    def __getitem__(self, key):\n        key = com.apply_if_callable(key, self)\n        try:\n            if self.columns.is_unique and key in self.columns:\n                if self.columns.nlevels > 1:\n                    return self._getitem_multilevel(key)\n                return self._get_item_cache(key)\n        except (TypeError, ValueError):\n            pass\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            return self._slice(indexer, axis=0)\n        if isinstance(key, DataFrame):\n            return self._getitem_frame(key)\n        if com.is_bool_indexer(key):\n            return self._getitem_bool_array(key)\n        is_single_key = isinstance(key, tuple) or not is_list_like(key)\n        if is_single_key:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            indexer = self.columns.get_loc(key)\n            if is_integer(indexer):\n                indexer = [indexer]\n        else:\n            if is_iterator(key):\n                key = list(key)\n            indexer = self.loc._convert_to_indexer(key, axis=1,\n                raise_missing=True)\n        if getattr(indexer, 'dtype', None) == bool:\n            indexer = np.where(indexer)[0]\n        data = self._take(indexer, axis=1)\n        if is_single_key:\n            if data.shape[1] == 1 and not isinstance(self.columns, MultiIndex):\n                data = data[key]\n        return data\n\n    def _getitem_bool_array(self, key):\n        if isinstance(key, Series) and not key.index.equals(self.index):\n            warnings.warn(\n                'Boolean Series key will be reindexed to match DataFrame index.'\n                , UserWarning, stacklevel=3)\n        elif len(key) != len(self.index):\n            raise ValueError('Item wrong length %d instead of %d.' % (len(\n                key), len(self.index)))\n        key = check_bool_indexer(self.index, key)\n        indexer = key.nonzero()[0]\n        return self._take(indexer, axis=0)\n\n    def _getitem_multilevel(self, key):\n        loc = self.columns.get_loc(key)\n        if isinstance(loc, (slice, Series, np.ndarray, Index)):\n            new_columns = self.columns[loc]\n            result_columns = maybe_droplevels(new_columns, key)\n            if self._is_mixed_type:\n                result = self.reindex(columns=new_columns)\n                result.columns = result_columns\n            else:\n                new_values = self.values[:, loc]\n                result = self._constructor(new_values, index=self.index,\n                    columns=result_columns)\n                result = result.__finalize__(self)\n            if len(result.columns) == 1:\n                top = result.columns[0]\n                if isinstance(top, tuple):\n                    top = top[0]\n                if top == '':\n                    result = result['']\n                    if isinstance(result, Series):\n                        result = self._constructor_sliced(result, index=\n                            self.index, name=key)\n            result._set_is_copy(self)\n            return result\n        else:\n            return self._get_item_cache(key)\n\n    def _getitem_frame(self, key):\n        if key.values.size and not is_bool_dtype(key.values):\n            raise ValueError('Must pass DataFrame with boolean values only')\n        return self.where(key)\n\n    def query(self, expr, inplace=False, **kwargs):\n        \"\"\"Query the columns of a frame with a boolean expression.\n\n        Parameters\n        ----------\n        expr : string\n            The query string to evaluate.  You can refer to variables\n            in the environment by prefixing them with an '@' character like\n            ``@a + b``.\n        inplace : bool\n            Whether the query should modify the data in place or return\n            a modified copy\n\n            .. versionadded:: 0.18.0\n\n        kwargs : dict\n            See the documentation for :func:`pandas.eval` for complete details\n            on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n        Returns\n        -------\n        q : DataFrame\n\n        Notes\n        -----\n        The result of the evaluation of this expression is first passed to\n        :attr:`DataFrame.loc` and if that fails because of a\n        multidimensional key (e.g., a DataFrame) then the result will be passed\n        to :meth:`DataFrame.__getitem__`.\n\n        This method uses the top-level :func:`pandas.eval` function to\n        evaluate the passed query.\n\n        The :meth:`~pandas.DataFrame.query` method uses a slightly\n        modified Python syntax by default. For example, the ``&`` and ``|``\n        (bitwise) operators have the precedence of their boolean cousins,\n        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n        however the semantics are different.\n\n        You can change the semantics of the expression by passing the keyword\n        argument ``parser='python'``. This enforces the same semantics as\n        evaluation in Python space. Likewise, you can pass ``engine='python'``\n        to evaluate an expression using Python itself as a backend. This is not\n        recommended as it is inefficient compared to using ``numexpr`` as the\n        engine.\n\n        The :attr:`DataFrame.index` and\n        :attr:`DataFrame.columns` attributes of the\n        :class:`~pandas.DataFrame` instance are placed in the query namespace\n        by default, which allows you to treat both the index and columns of the\n        frame as a column in the frame.\n        The identifier ``index`` is used for the frame index; you can also\n        use the name of the index to identify it in a query. Please note that\n        Python keywords may not be used as identifiers.\n\n        For further details and examples see the ``query`` documentation in\n        :ref:`indexing <indexing.query>`.\n\n        See Also\n        --------\n        pandas.eval\n        DataFrame.eval\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.random.randn(10, 2), columns=list('ab'))\n        >>> df.query('a > b')\n        >>> df[df.a > df.b]  # same result as the previous expression\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(expr, compat.string_types):\n            msg = 'expr must be a string to be evaluated, {0} given'\n            raise ValueError(msg.format(type(expr)))\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        kwargs['target'] = None\n        res = self.eval(expr, **kwargs)\n        try:\n            new_data = self.loc[res]\n        except ValueError:\n            new_data = self[res]\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return new_data\n\n    def eval(self, expr, inplace=False, **kwargs):\n        \"\"\"\n        Evaluate a string describing operations on DataFrame columns.\n\n        Operates on columns only, not specific rows or elements.  This allows\n        `eval` to run arbitrary code, which can make you vulnerable to code\n        injection if you pass user input to this function.\n\n        Parameters\n        ----------\n        expr : str\n            The expression string to evaluate.\n        inplace : bool, default False\n            If the expression contains an assignment, whether to perform the\n            operation inplace and mutate the existing DataFrame. Otherwise,\n            a new DataFrame is returned.\n\n            .. versionadded:: 0.18.0.\n        kwargs : dict\n            See the documentation for :func:`~pandas.eval` for complete details\n            on the keyword arguments accepted by\n            :meth:`~pandas.DataFrame.query`.\n\n        Returns\n        -------\n        ndarray, scalar, or pandas object\n            The result of the evaluation.\n\n        See Also\n        --------\n        DataFrame.query : Evaluates a boolean expression to query the columns\n            of a frame.\n        DataFrame.assign : Can evaluate an expression or function to create new\n            values for a column.\n        pandas.eval : Evaluate a Python expression as a string using various\n            backends.\n\n        Notes\n        -----\n        For more details see the API documentation for :func:`~pandas.eval`.\n        For detailed examples see :ref:`enhancing performance with eval\n        <enhancingperf.eval>`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n        >>> df\n           A   B\n        0  1  10\n        1  2   8\n        2  3   6\n        3  4   4\n        4  5   2\n        >>> df.eval('A + B')\n        0    11\n        1    10\n        2     9\n        3     8\n        4     7\n        dtype: int64\n\n        Assignment is allowed though by default the original DataFrame is not\n        modified.\n\n        >>> df.eval('C = A + B')\n           A   B   C\n        0  1  10  11\n        1  2   8  10\n        2  3   6   9\n        3  4   4   8\n        4  5   2   7\n        >>> df\n           A   B\n        0  1  10\n        1  2   8\n        2  3   6\n        3  4   4\n        4  5   2\n\n        Use ``inplace=True`` to modify the original DataFrame.\n\n        >>> df.eval('C = A + B', inplace=True)\n        >>> df\n           A   B   C\n        0  1  10  11\n        1  2   8  10\n        2  3   6   9\n        3  4   4   8\n        4  5   2   7\n        \"\"\"\n        from pandas.core.computation.eval import eval as _eval\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        resolvers = kwargs.pop('resolvers', None)\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        if resolvers is None:\n            index_resolvers = self._get_index_resolvers()\n            resolvers = dict(self.iteritems()), index_resolvers\n        if 'target' not in kwargs:\n            kwargs['target'] = self\n        kwargs['resolvers'] = kwargs.get('resolvers', ()) + tuple(resolvers)\n        return _eval(expr, inplace=inplace, **kwargs)\n\n    def select_dtypes(self, include=None, exclude=None):\n        \"\"\"\n        Return a subset of the DataFrame's columns based on the column dtypes.\n\n        Parameters\n        ----------\n        include, exclude : scalar or list-like\n            A selection of dtypes or strings to be included/excluded. At least\n            one of these parameters must be supplied.\n\n        Raises\n        ------\n        ValueError\n            * If both of ``include`` and ``exclude`` are empty\n            * If ``include`` and ``exclude`` have overlapping elements\n            * If any kind of string dtype is passed in.\n\n        Returns\n        -------\n        subset : DataFrame\n            The subset of the frame including the dtypes in ``include`` and\n            excluding the dtypes in ``exclude``.\n\n        Notes\n        -----\n        * To select all *numeric* types, use ``np.number`` or ``'number'``\n        * To select strings you must use the ``object`` dtype, but note that\n          this will return *all* object dtype columns\n        * See the `numpy dtype hierarchy\n          <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n        * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n          ``'datetime64'``\n        * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n          ``'timedelta64'``\n        * To select Pandas categorical dtypes, use ``'category'``\n        * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n          0.20.0) or ``'datetime64[ns, tz]'``\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 2] * 3,\n        ...                    'b': [True, False] * 3,\n        ...                    'c': [1.0, 2.0] * 3})\n        >>> df\n                a      b  c\n        0       1   True  1.0\n        1       2  False  2.0\n        2       1   True  1.0\n        3       2  False  2.0\n        4       1   True  1.0\n        5       2  False  2.0\n\n        >>> df.select_dtypes(include='bool')\n           b\n        0  True\n        1  False\n        2  True\n        3  False\n        4  True\n        5  False\n\n        >>> df.select_dtypes(include=['float64'])\n           c\n        0  1.0\n        1  2.0\n        2  1.0\n        3  2.0\n        4  1.0\n        5  2.0\n\n        >>> df.select_dtypes(exclude=['int'])\n               b    c\n        0   True  1.0\n        1  False  2.0\n        2   True  1.0\n        3  False  2.0\n        4   True  1.0\n        5  False  2.0\n        \"\"\"\n        if not is_list_like(include):\n            include = (include,) if include is not None else ()\n        if not is_list_like(exclude):\n            exclude = (exclude,) if exclude is not None else ()\n        selection = tuple(map(frozenset, (include, exclude)))\n        if not any(selection):\n            raise ValueError(\n                'at least one of include or exclude must be nonempty')\n        include, exclude = map(lambda x: frozenset(map(\n            _get_dtype_from_object, x)), selection)\n        for dtypes in (include, exclude):\n            invalidate_string_dtypes(dtypes)\n        if not include.isdisjoint(exclude):\n            raise ValueError('include and exclude overlap on {inc_ex}'.\n                format(inc_ex=include & exclude))\n        include_these = Series(not bool(include), index=self.columns)\n        exclude_these = Series(not bool(exclude), index=self.columns)\n\n        def is_dtype_instance_mapper(idx, dtype):\n            return idx, functools.partial(issubclass, dtype.type)\n        for idx, f in itertools.starmap(is_dtype_instance_mapper, enumerate\n            (self.dtypes)):\n            if include:\n                include_these.iloc[idx] = any(map(f, include))\n            if exclude:\n                exclude_these.iloc[idx] = not any(map(f, exclude))\n        dtype_indexer = include_these & exclude_these\n        return self.loc[com.get_info_slice(self, dtype_indexer)]\n\n    def _box_item_values(self, key, values):\n        items = self.columns[self.columns.get_loc(key)]\n        if values.ndim == 2:\n            return self._constructor(values.T, columns=items, index=self.index)\n        else:\n            return self._box_col_values(values, items)\n\n    def _box_col_values(self, values, items):\n        \"\"\" provide boxed values for a column \"\"\"\n        klass = _get_sliced_frame_result_type(values, self)\n        return klass(values, index=self.index, name=items, fastpath=True)\n\n    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            return self._setitem_slice(indexer, value)\n        if isinstance(key, DataFrame) or getattr(key, 'ndim', None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        else:\n            self._set_item(key, value)\n\n    def _setitem_slice(self, key, value):\n        self._check_setitem_copy()\n        self.loc._setitem_with_indexer(key, value)\n\n    def _setitem_array(self, key, value):\n        if com.is_bool_indexer(key):\n            if len(key) != len(self.index):\n                raise ValueError('Item wrong length %d instead of %d!' % (\n                    len(key), len(self.index)))\n            key = check_bool_indexer(self.index, key)\n            indexer = key.nonzero()[0]\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer(indexer, value)\n        elif isinstance(value, DataFrame):\n            if len(value.columns) != len(key):\n                raise ValueError('Columns must be same length as key')\n            for k1, k2 in zip(key, value.columns):\n                self[k1] = value[k2]\n        else:\n            indexer = self.loc._convert_to_indexer(key, axis=1)\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer((slice(None), indexer), value)\n\n    def _setitem_frame(self, key, value):\n        if isinstance(key, np.ndarray):\n            if key.shape != self.shape:\n                raise ValueError('Array conditional must be same shape as self'\n                    )\n            key = self._constructor(key, **self._construct_axes_dict())\n        if key.values.size and not is_bool_dtype(key.values):\n            raise TypeError(\n                'Must pass DataFrame or 2-d ndarray with boolean values only')\n        self._check_inplace_setting(value)\n        self._check_setitem_copy()\n        self._where(-key, value, inplace=True)\n\n    def _ensure_valid_index(self, value):\n        \"\"\"\n        ensure that if we don't have an index, that we can create one from the\n        passed value\n        \"\"\"\n        if not len(self.index) and is_list_like(value):\n            try:\n                value = Series(value)\n            except:\n                raise ValueError(\n                    'Cannot set a frame with no defined index and a value that cannot be converted to a Series'\n                    )\n            self._data = self._data.reindex_axis(value.index.copy(), axis=1,\n                fill_value=np.nan)\n\n    def _set_item(self, key, value):\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(key, value)\n        NDFrame._set_item(self, key, value)\n        if len(self):\n            self._check_setitem_copy()\n\n    def insert(self, loc, column, value, allow_duplicates=False):\n        \"\"\"\n        Insert column into DataFrame at specified location.\n\n        Raises a ValueError if `column` is already contained in the DataFrame,\n        unless `allow_duplicates` is set to True.\n\n        Parameters\n        ----------\n        loc : int\n            Insertion index. Must verify 0 <= loc <= len(columns)\n        column : string, number, or hashable object\n            label of the inserted column\n        value : int, Series, or array-like\n        allow_duplicates : bool, optional\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(column, value, broadcast=False)\n        self._data.insert(loc, column, value, allow_duplicates=allow_duplicates\n            )\n\n    def assign(self, **kwargs):\n        \"\"\"\n        Assign new columns to a DataFrame.\n\n        Returns a new object with all original columns in addition to new ones.\n        Existing columns that are re-assigned will be overwritten.\n\n        Parameters\n        ----------\n        kwargs : keyword, value pairs\n            The column names are keywords. If the values are\n            callable, they are computed on the DataFrame and\n            assigned to the new columns. The callable must not\n            change input DataFrame (though pandas doesn't check it).\n            If the values are not callable, (e.g. a Series, scalar, or array),\n            they are simply assigned.\n\n        Returns\n        -------\n        df : DataFrame\n            A new DataFrame with the new columns in addition to\n            all the existing columns.\n\n        Notes\n        -----\n        Assigning multiple columns within the same ``assign`` is possible.\n        For Python 3.6 and above, later items in '\\\\*\\\\*kwargs' may refer to\n        newly created or modified columns in 'df'; items are computed and\n        assigned into 'df' in order.  For Python 3.5 and below, the order of\n        keyword arguments is not specified, you cannot refer to newly created\n        or modified columns. All items are computed first, and then assigned\n        in alphabetical order.\n\n        .. versionchanged :: 0.23.0\n\n           Keyword argument order is maintained for Python 3.6 and later.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 11), 'B': np.random.randn(10)})\n\n        Where the value is a callable, evaluated on `df`:\n\n        >>> df.assign(ln_A = lambda x: np.log(x.A))\n            A         B      ln_A\n        0   1  0.426905  0.000000\n        1   2 -0.780949  0.693147\n        2   3 -0.418711  1.098612\n        3   4 -0.269708  1.386294\n        4   5 -0.274002  1.609438\n        5   6 -0.500792  1.791759\n        6   7  1.649697  1.945910\n        7   8 -1.495604  2.079442\n        8   9  0.549296  2.197225\n        9  10 -0.758542  2.302585\n\n        Where the value already exists and is inserted:\n\n        >>> newcol = np.log(df['A'])\n        >>> df.assign(ln_A=newcol)\n            A         B      ln_A\n        0   1  0.426905  0.000000\n        1   2 -0.780949  0.693147\n        2   3 -0.418711  1.098612\n        3   4 -0.269708  1.386294\n        4   5 -0.274002  1.609438\n        5   6 -0.500792  1.791759\n        6   7  1.649697  1.945910\n        7   8 -1.495604  2.079442\n        8   9  0.549296  2.197225\n        9  10 -0.758542  2.302585\n\n        Where the keyword arguments depend on each other\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3]})\n\n        >>> df.assign(B=df.A, C=lambda x:x['A']+ x['B'])\n            A  B  C\n         0  1  1  2\n         1  2  2  4\n         2  3  3  6\n        \"\"\"\n        data = self.copy()\n        if PY36:\n            for k, v in kwargs.items():\n                data[k] = com.apply_if_callable(v, data)\n        else:\n            results = OrderedDict()\n            for k, v in kwargs.items():\n                results[k] = com.apply_if_callable(v, data)\n            results = sorted(results.items())\n            for k, v in results:\n                data[k] = v\n        return data\n\n    def _sanitize_column(self, key, value, broadcast=True):\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        key : object\n        value : scalar, Series, or array-like\n        broadcast : bool, default True\n            If ``key`` matches multiple duplicate column names in the\n            DataFrame, this parameter indicates whether ``value`` should be\n            tiled so that the returned array contains a (duplicated) column for\n            each occurrence of the key. If False, ``value`` will not be tiled.\n\n        Returns\n        -------\n        sanitized_column : numpy-array\n        \"\"\"\n\n        def reindexer(value):\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n                try:\n                    value = value.reindex(self.index)._values\n                except Exception as e:\n                    if not value.index.is_unique:\n                        raise e\n                    raise TypeError(\n                        'incompatible index of inserted column with frame index'\n                        )\n            return value\n        if isinstance(value, Series):\n            value = reindexer(value)\n        elif isinstance(value, DataFrame):\n            if isinstance(self.columns, MultiIndex) and key in self.columns:\n                loc = self.columns.get_loc(key)\n                if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                    cols = maybe_droplevels(self.columns[loc], key)\n                    if len(cols) and not cols.equals(value.columns):\n                        value = value.reindex(cols, axis=1)\n            value = reindexer(value).T\n        elif isinstance(value, ExtensionArray):\n            from pandas.core.series import _sanitize_index\n            value = value.copy()\n            value = _sanitize_index(value, self.index, copy=False)\n        elif isinstance(value, Index) or is_sequence(value):\n            from pandas.core.series import _sanitize_index\n            value = _sanitize_index(value, self.index, copy=False)\n            if not isinstance(value, (np.ndarray, Index)):\n                if isinstance(value, list) and len(value) > 0:\n                    value = maybe_convert_platform(value)\n                else:\n                    value = com.asarray_tuplesafe(value)\n            elif value.ndim == 2:\n                value = value.copy().T\n            elif isinstance(value, Index):\n                value = value.copy(deep=True)\n            else:\n                value = value.copy()\n            if is_object_dtype(value.dtype):\n                value = maybe_infer_to_datetimelike(value)\n        else:\n            infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n            value = cast_scalar_to_array(len(self.index), value)\n            value = maybe_cast_to_datetime(value, infer_dtype)\n        if is_extension_type(value) or is_extension_array_dtype(value):\n            return value\n        if broadcast and key in self.columns and value.ndim == 1:\n            if not self.columns.is_unique or isinstance(self.columns,\n                MultiIndex):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1))\n        return np.atleast_2d(np.asarray(value))\n\n    @property\n    def _series(self):\n        result = {}\n        for idx, item in enumerate(self.columns):\n            result[item] = Series(self._data.iget(idx), index=self.index,\n                name=item)\n        return result\n\n    def lookup(self, row_labels, col_labels):\n        \"\"\"Label-based \"fancy indexing\" function for DataFrame.\n        Given equal-length arrays of row and column labels, return an\n        array of the values corresponding to each (row, col) pair.\n\n        Parameters\n        ----------\n        row_labels : sequence\n            The row labels to use for lookup\n        col_labels : sequence\n            The column labels to use for lookup\n\n        Notes\n        -----\n        Akin to::\n\n            result = []\n            for row, col in zip(row_labels, col_labels):\n                result.append(df.get_value(row, col))\n\n        Examples\n        --------\n        values : ndarray\n            The found values\n\n        \"\"\"\n        n = len(row_labels)\n        if n != len(col_labels):\n            raise ValueError('Row labels must have same size as column labels')\n        thresh = 1000\n        if not self._is_mixed_type or n > thresh:\n            values = self.values\n            ridx = self.index.get_indexer(row_labels)\n            cidx = self.columns.get_indexer(col_labels)\n            if (ridx == -1).any():\n                raise KeyError('One or more row labels was not found')\n            if (cidx == -1).any():\n                raise KeyError('One or more column labels was not found')\n            flat_index = ridx * len(self.columns) + cidx\n            result = values.flat[flat_index]\n        else:\n            result = np.empty(n, dtype='O')\n            for i, (r, c) in enumerate(zip(row_labels, col_labels)):\n                result[i] = self._get_value(r, c)\n        if is_object_dtype(result):\n            result = lib.maybe_convert_objects(result)\n        return result\n\n    def _reindex_axes(self, axes, level, limit, tolerance, method,\n        fill_value, copy):\n        frame = self\n        columns = axes['columns']\n        if columns is not None:\n            frame = frame._reindex_columns(columns, method, copy, level,\n                fill_value, limit, tolerance)\n        index = axes['index']\n        if index is not None:\n            frame = frame._reindex_index(index, method, copy, level,\n                fill_value, limit, tolerance)\n        return frame\n\n    def _reindex_index(self, new_index, method, copy, level, fill_value=np.\n        nan, limit=None, tolerance=None):\n        new_index, indexer = self.index.reindex(new_index, method=method,\n            level=level, limit=limit, tolerance=tolerance)\n        return self._reindex_with_indexers({(0): [new_index, indexer]},\n            copy=copy, fill_value=fill_value, allow_dups=False)\n\n    def _reindex_columns(self, new_columns, method, copy, level, fill_value\n        =None, limit=None, tolerance=None):\n        new_columns, indexer = self.columns.reindex(new_columns, method=\n            method, level=level, limit=limit, tolerance=tolerance)\n        return self._reindex_with_indexers({(1): [new_columns, indexer]},\n            copy=copy, fill_value=fill_value, allow_dups=False)\n\n    def _reindex_multi(self, axes, copy, fill_value):\n        \"\"\" we are guaranteed non-Nones in the axes! \"\"\"\n        new_index, row_indexer = self.index.reindex(axes['index'])\n        new_columns, col_indexer = self.columns.reindex(axes['columns'])\n        if row_indexer is not None and col_indexer is not None:\n            indexer = row_indexer, col_indexer\n            new_values = algorithms.take_2d_multi(self.values, indexer,\n                fill_value=fill_value)\n            return self._constructor(new_values, index=new_index, columns=\n                new_columns)\n        else:\n            return self._reindex_with_indexers({(0): [new_index,\n                row_indexer], (1): [new_columns, col_indexer]}, copy=copy,\n                fill_value=fill_value)\n\n    @Appender(_shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n        fill_value=None, method=None, limit=None, fill_axis=0,\n        broadcast_axis=None):\n        return super(DataFrame, self).align(other, join=join, axis=axis,\n            level=level, copy=copy, fill_value=fill_value, method=method,\n            limit=limit, fill_axis=fill_axis, broadcast_axis=broadcast_axis)\n\n    @Appender(_shared_docs['reindex'] % _shared_doc_kwargs)\n    @rewrite_axis_style_signature('labels', [('method', None), ('copy', \n        True), ('level', None), ('fill_value', np.nan), ('limit', None), (\n        'tolerance', None)])\n    def reindex(self, *args, **kwargs):\n        axes = validate_axis_style_args(self, args, kwargs, 'labels', 'reindex'\n            )\n        kwargs.update(axes)\n        kwargs.pop('axis', None)\n        kwargs.pop('labels', None)\n        return super(DataFrame, self).reindex(**kwargs)\n\n    @Appender(_shared_docs['reindex_axis'] % _shared_doc_kwargs)\n    def reindex_axis(self, labels, axis=0, method=None, level=None, copy=\n        True, limit=None, fill_value=np.nan):\n        return super(DataFrame, self).reindex_axis(labels=labels, axis=axis,\n            method=method, level=level, copy=copy, limit=limit, fill_value=\n            fill_value)\n\n    def drop(self, labels=None, axis=0, index=None, columns=None, level=\n        None, inplace=False, errors='raise'):\n        \"\"\"\n        Drop specified labels from rows or columns.\n\n        Remove rows or columns by specifying label names and corresponding\n        axis, or by specifying directly index or column names. When using a\n        multi-index, labels on different levels can be removed by specifying\n        the level.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n            Index or column labels to drop.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Whether to drop labels from the index (0 or 'index') or\n            columns (1 or 'columns').\n        index, columns : single label or list-like\n            Alternative to specifying axis (``labels, axis=1``\n            is equivalent to ``columns=labels``).\n\n            .. versionadded:: 0.21.0\n        level : int or level name, optional\n            For MultiIndex, level from which the labels will be removed.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and only existing labels are\n            dropped.\n\n        Returns\n        -------\n        dropped : pandas.DataFrame\n\n        See Also\n        --------\n        DataFrame.loc : Label-location based indexer for selection by label.\n        DataFrame.dropna : Return DataFrame with labels on given axis omitted\n            where (all or any) data are missing\n        DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n            removed, optionally only considering certain columns\n        Series.drop : Return Series with specified index labels removed.\n\n        Raises\n        ------\n        KeyError\n            If none of the labels are found in the selected axis\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.arange(12).reshape(3,4),\n        ...                   columns=['A', 'B', 'C', 'D'])\n        >>> df\n           A  B   C   D\n        0  0  1   2   3\n        1  4  5   6   7\n        2  8  9  10  11\n\n        Drop columns\n\n        >>> df.drop(['B', 'C'], axis=1)\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        >>> df.drop(columns=['B', 'C'])\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        Drop a row by index\n\n        >>> df.drop([0, 1])\n           A  B   C   D\n        2  8  9  10  11\n\n        Drop columns and/or rows of MultiIndex DataFrame\n\n        >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n        ...                              ['speed', 'weight', 'length']],\n        ...                      labels=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n        ...                              [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n        >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n        ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n        ...                         [250, 150], [1.5, 0.8], [320, 250],\n        ...                         [1, 0.8], [0.3,0.2]])\n        >>> df\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n                length  1.5     1.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n                length  1.5     0.8\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n                length  0.3     0.2\n\n        >>> df.drop(index='cow', columns='small')\n                        big\n        lama    speed   45.0\n                weight  200.0\n                length  1.5\n        falcon  speed   320.0\n                weight  1.0\n                length  0.3\n\n        >>> df.drop(index='length', level=1)\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n        \"\"\"\n        return super(DataFrame, self).drop(labels=labels, axis=axis, index=\n            index, columns=columns, level=level, inplace=inplace, errors=errors\n            )\n\n    @rewrite_axis_style_signature('mapper', [('copy', True), ('inplace', \n        False), ('level', None)])\n    def rename(self, *args, **kwargs):\n        \"\"\"Alter axes labels.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        mapper, index, columns : dict-like or function, optional\n            dict-like or functions transformations to apply to\n            that axis' values. Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index`` and\n            ``columns``.\n        axis : int or str, optional\n            Axis to target with ``mapper``. Can be either the axis name\n            ('index', 'columns') or number (0, 1). The default is 'index'.\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n            Whether to return a new DataFrame. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        renamed : DataFrame\n\n        See Also\n        --------\n        pandas.DataFrame.rename_axis\n\n        Examples\n        --------\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n        \"\"\"\n        axes = validate_axis_style_args(self, args, kwargs, 'mapper', 'rename')\n        kwargs.update(axes)\n        kwargs.pop('axis', None)\n        kwargs.pop('mapper', None)\n        return super(DataFrame, self).rename(**kwargs)\n\n    @Substitution(**_shared_doc_kwargs)\n    @Appender(NDFrame.fillna.__doc__)\n    def fillna(self, value=None, method=None, axis=None, inplace=False,\n        limit=None, downcast=None, **kwargs):\n        return super(DataFrame, self).fillna(value=value, method=method,\n            axis=axis, inplace=inplace, limit=limit, downcast=downcast, **\n            kwargs)\n\n    @Appender(_shared_docs['replace'] % _shared_doc_kwargs)\n    def replace(self, to_replace=None, value=None, inplace=False, limit=\n        None, regex=False, method='pad'):\n        return super(DataFrame, self).replace(to_replace=to_replace, value=\n            value, inplace=inplace, limit=limit, regex=regex, method=method)\n\n    @Appender(_shared_docs['shift'] % _shared_doc_kwargs)\n    def shift(self, periods=1, freq=None, axis=0):\n        return super(DataFrame, self).shift(periods=periods, freq=freq,\n            axis=axis)\n\n    def set_index(self, keys, drop=True, append=False, inplace=False,\n        verify_integrity=False):\n        \"\"\"\n        Set the DataFrame index (row labels) using one or more existing\n        columns. By default yields a new object.\n\n        Parameters\n        ----------\n        keys : column label or list of column labels / arrays\n        drop : boolean, default True\n            Delete columns to be used as the new index\n        append : boolean, default False\n            Whether to append columns to existing index\n        inplace : boolean, default False\n            Modify the DataFrame in place (do not create a new object)\n        verify_integrity : boolean, default False\n            Check the new index for duplicates. Otherwise defer the check until\n            necessary. Setting to False will improve the performance of this\n            method\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n        ...                    'year': [2012, 2014, 2013, 2014],\n        ...                    'sale':[55, 40, 84, 31]})\n           month  sale  year\n        0  1      55    2012\n        1  4      40    2014\n        2  7      84    2013\n        3  10     31    2014\n\n        Set the index to become the 'month' column:\n\n        >>> df.set_index('month')\n               sale  year\n        month\n        1      55    2012\n        4      40    2014\n        7      84    2013\n        10     31    2014\n\n        Create a multi-index using columns 'year' and 'month':\n\n        >>> df.set_index(['year', 'month'])\n                    sale\n        year  month\n        2012  1     55\n        2014  4     40\n        2013  7     84\n        2014  10    31\n\n        Create a multi-index using a set of values and a column:\n\n        >>> df.set_index([[1, 2, 3, 4], 'year'])\n                 month  sale\n           year\n        1  2012  1      55\n        2  2014  4      40\n        3  2013  7      84\n        4  2014  10     31\n\n        Returns\n        -------\n        dataframe : DataFrame\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(keys, list):\n            keys = [keys]\n        if inplace:\n            frame = self\n        else:\n            frame = self.copy()\n        arrays = []\n        names = []\n        if append:\n            names = [x for x in self.index.names]\n            if isinstance(self.index, MultiIndex):\n                for i in range(self.index.nlevels):\n                    arrays.append(self.index._get_level_values(i))\n            else:\n                arrays.append(self.index)\n        to_remove = []\n        for col in keys:\n            if isinstance(col, MultiIndex):\n                for n in range(col.nlevels - 1):\n                    arrays.append(col._get_level_values(n))\n                level = col._get_level_values(col.nlevels - 1)\n                names.extend(col.names)\n            elif isinstance(col, Series):\n                level = col._values\n                names.append(col.name)\n            elif isinstance(col, Index):\n                level = col\n                names.append(col.name)\n            elif isinstance(col, (list, np.ndarray, Index)):\n                level = col\n                names.append(None)\n            else:\n                level = frame[col]._values\n                names.append(col)\n                if drop:\n                    to_remove.append(col)\n            arrays.append(level)\n        index = ensure_index_from_sequences(arrays, names)\n        if verify_integrity and not index.is_unique:\n            duplicates = index[index.duplicated()].unique()\n            raise ValueError('Index has duplicate keys: {dup}'.format(dup=\n                duplicates))\n        for c in to_remove:\n            del frame[c]\n        index._cleanup()\n        frame.index = index\n        if not inplace:\n            return frame\n\n    def reset_index(self, level=None, drop=False, inplace=False, col_level=\n        0, col_fill=''):\n        \"\"\"\n        For DataFrame with multi-level index, return new DataFrame with\n        labeling information in the columns under the index names, defaulting\n        to 'level_0', 'level_1', etc. if any are None. For a standard index,\n        the index name will be used (if set), otherwise a default 'index' or\n        'level_0' (if 'index' is already taken) will be used.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default None\n            Only remove the given levels from the index. Removes all levels by\n            default\n        drop : boolean, default False\n            Do not try to insert index into dataframe columns. This resets\n            the index to the default integer index.\n        inplace : boolean, default False\n            Modify the DataFrame in place (do not create a new object)\n        col_level : int or str, default 0\n            If the columns have multiple levels, determines which level the\n            labels are inserted into. By default it is inserted into the first\n            level.\n        col_fill : object, default ''\n            If the columns have multiple levels, determines how the other\n            levels are named. If None then the index name is repeated.\n\n        Returns\n        -------\n        resetted : DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('bird',    389.0),\n        ...                    ('bird',     24.0),\n        ...                    ('mammal',   80.5),\n        ...                    ('mammal', np.nan)],\n        ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n        ...                   columns=('class', 'max_speed'))\n        >>> df\n                 class  max_speed\n        falcon    bird      389.0\n        parrot    bird       24.0\n        lion    mammal       80.5\n        monkey  mammal        NaN\n\n        When we reset the index, the old index is added as a column, and a\n        new sequential index is used:\n\n        >>> df.reset_index()\n            index   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        We can use the `drop` parameter to avoid the old index being added as\n        a column:\n\n        >>> df.reset_index(drop=True)\n            class  max_speed\n        0    bird      389.0\n        1    bird       24.0\n        2  mammal       80.5\n        3  mammal        NaN\n\n        You can also use `reset_index` with `MultiIndex`.\n\n        >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n        ...                                    ('bird', 'parrot'),\n        ...                                    ('mammal', 'lion'),\n        ...                                    ('mammal', 'monkey')],\n        ...                                   names=['class', 'name'])\n        >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n        ...                                      ('species', 'type')])\n        >>> df = pd.DataFrame([(389.0, 'fly'),\n        ...                    ( 24.0, 'fly'),\n        ...                    ( 80.5, 'run'),\n        ...                    (np.nan, 'jump')],\n        ...                   index=index,\n        ...                   columns=columns)\n        >>> df\n                       speed species\n                         max    type\n        class  name\n        bird   falcon  389.0     fly\n               parrot   24.0     fly\n        mammal lion     80.5     run\n               monkey    NaN    jump\n\n        If the index has multiple levels, we can reset a subset of them:\n\n        >>> df.reset_index(level='class')\n                 class  speed species\n                          max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        If we are not dropping the index, by default, it is placed in the top\n        level. We can place it in another level:\n\n        >>> df.reset_index(level='class', col_level=1)\n                        speed species\n                 class    max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        When the index is inserted under another level, we can specify under\n        which one with the parameter `col_fill`:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                      species  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n\n        If we specify a nonexistent level for `col_fill`, it is created:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                        genus  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if inplace:\n            new_obj = self\n        else:\n            new_obj = self.copy()\n\n        def _maybe_casted_values(index, labels=None):\n            values = index._values\n            if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n                if values.dtype == np.object_:\n                    values = lib.maybe_convert_objects(values)\n            if labels is not None:\n                mask = labels == -1\n                if mask.all():\n                    values = np.empty(len(mask))\n                    values.fill(np.nan)\n                else:\n                    values = values.take(labels)\n                    if mask.any():\n                        values, changed = maybe_upcast_putmask(values, mask,\n                            np.nan)\n            return values\n        new_index = ibase.default_index(len(new_obj))\n        if level is not None:\n            if not isinstance(level, (tuple, list)):\n                level = [level]\n            level = [self.index._get_level_number(lev) for lev in level]\n            if len(level) < self.index.nlevels:\n                new_index = self.index.droplevel(level)\n        if not drop:\n            if isinstance(self.index, MultiIndex):\n                names = [(n if n is not None else 'level_%d' % i) for i, n in\n                    enumerate(self.index.names)]\n                to_insert = lzip(self.index.levels, self.index.labels)\n            else:\n                default = 'index' if 'index' not in self else 'level_0'\n                names = [default] if self.index.name is None else [self.\n                    index.name]\n                to_insert = (self.index, None),\n            multi_col = isinstance(self.columns, MultiIndex)\n            for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n                if not (level is None or i in level):\n                    continue\n                name = names[i]\n                if multi_col:\n                    col_name = list(name) if isinstance(name, tuple) else [name\n                        ]\n                    if col_fill is None:\n                        if len(col_name) not in (1, self.columns.nlevels):\n                            raise ValueError(\n                                'col_fill=None is incompatible with incomplete column name {}'\n                                .format(name))\n                        col_fill = col_name[0]\n                    lev_num = self.columns._get_level_number(col_level)\n                    name_lst = [col_fill] * lev_num + col_name\n                    missing = self.columns.nlevels - len(name_lst)\n                    name_lst += [col_fill] * missing\n                    name = tuple(name_lst)\n                level_values = _maybe_casted_values(lev, lab)\n                new_obj.insert(0, name, level_values)\n        new_obj.index = new_index\n        if not inplace:\n            return new_obj\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isna(self):\n        return super(DataFrame, self).isna()\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isnull(self):\n        return super(DataFrame, self).isnull()\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notna(self):\n        return super(DataFrame, self).notna()\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notnull(self):\n        return super(DataFrame, self).notnull()\n\n    def dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False\n        ):\n        \"\"\"\n        Remove missing values.\n\n        See the :ref:`User Guide <missing_data>` for more on which values are\n        considered missing, and how to work with missing data.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Determine if rows or columns which contain missing values are\n            removed.\n\n            * 0, or 'index' : Drop rows which contain missing values.\n            * 1, or 'columns' : Drop columns which contain missing value.\n\n            .. deprecated:: 0.23.0\n\n               Pass tuple or list to drop on multiple axes.\n               Only a single axis is allowed.\n\n        how : {'any', 'all'}, default 'any'\n            Determine if row or column is removed from DataFrame, when we have\n            at least one NA or all NA.\n\n            * 'any' : If any NA values are present, drop that row or column.\n            * 'all' : If all values are NA, drop that row or column.\n\n        thresh : int, optional\n            Require that many non-NA values.\n        subset : array-like, optional\n            Labels along other axis to consider, e.g. if you are dropping rows\n            these would be a list of columns to include.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame with NA entries dropped from it.\n\n        See Also\n        --------\n        DataFrame.isna: Indicate missing values.\n        DataFrame.notna : Indicate existing (non-missing) values.\n        DataFrame.fillna : Replace missing values.\n        Series.dropna : Drop missing values.\n        Index.dropna : Drop missing indices.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n        ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n        ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n        ...                             pd.NaT]})\n        >>> df\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Drop the rows where at least one element is missing.\n\n        >>> df.dropna()\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n\n        Drop the columns where at least one element is missing.\n\n        >>> df.dropna(axis='columns')\n               name\n        0    Alfred\n        1    Batman\n        2  Catwoman\n\n        Drop the rows where all elements are missing.\n\n        >>> df.dropna(how='all')\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Keep only the rows with at least 2 non-NA values.\n\n        >>> df.dropna(thresh=2)\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Define in which columns to look for missing values.\n\n        >>> df.dropna(subset=['name', 'born'])\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n\n        Keep the DataFrame with valid entries in the same variable.\n\n        >>> df.dropna(inplace=True)\n        >>> df\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if isinstance(axis, (tuple, list)):\n            msg = (\n                'supplying multiple axes to axis is deprecated and will be removed in a future version.'\n                )\n            warnings.warn(msg, FutureWarning, stacklevel=2)\n            result = self\n            for ax in axis:\n                result = result.dropna(how=how, thresh=thresh, subset=\n                    subset, axis=ax)\n        else:\n            axis = self._get_axis_number(axis)\n            agg_axis = 1 - axis\n            agg_obj = self\n            if subset is not None:\n                ax = self._get_axis(agg_axis)\n                indices = ax.get_indexer_for(subset)\n                check = indices == -1\n                if check.any():\n                    raise KeyError(list(np.compress(check, subset)))\n                agg_obj = self.take(indices, axis=agg_axis)\n            count = agg_obj.count(axis=agg_axis)\n            if thresh is not None:\n                mask = count >= thresh\n            elif how == 'any':\n                mask = count == len(agg_obj._get_axis(agg_axis))\n            elif how == 'all':\n                mask = count > 0\n            elif how is not None:\n                raise ValueError('invalid how option: {h}'.format(h=how))\n            else:\n                raise TypeError('must specify how or thresh')\n            result = self._take(mask.nonzero()[0], axis=axis)\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result\n\n    def drop_duplicates(self, subset=None, keep='first', inplace=False):\n        \"\"\"\n        Return DataFrame with duplicate rows removed, optionally only\n        considering certain columns\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns\n        keep : {'first', 'last', False}, default 'first'\n            - ``first`` : Drop duplicates except for the first occurrence.\n            - ``last`` : Drop duplicates except for the last occurrence.\n            - False : Drop all duplicates.\n        inplace : boolean, default False\n            Whether to drop duplicates in place or to return a copy\n\n        Returns\n        -------\n        deduplicated : DataFrame\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        duplicated = self.duplicated(subset, keep=keep)\n        if inplace:\n            inds, = (-duplicated).nonzero()\n            new_data = self._data.take(inds)\n            self._update_inplace(new_data)\n        else:\n            return self[-duplicated]\n\n    def duplicated(self, subset=None, keep='first'):\n        \"\"\"\n        Return boolean Series denoting duplicate rows, optionally only\n        considering certain columns\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns\n        keep : {'first', 'last', False}, default 'first'\n            - ``first`` : Mark duplicates as ``True`` except for the\n              first occurrence.\n            - ``last`` : Mark duplicates as ``True`` except for the\n              last occurrence.\n            - False : Mark all duplicates as ``True``.\n\n        Returns\n        -------\n        duplicated : Series\n        \"\"\"\n        from pandas.core.sorting import get_group_index\n        from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n\n        def f(vals):\n            labels, shape = algorithms.factorize(vals, size_hint=min(len(\n                self), _SIZE_HINT_LIMIT))\n            return labels.astype('i8', copy=False), len(shape)\n        if subset is None:\n            subset = self.columns\n        elif not np.iterable(subset) or isinstance(subset, compat.string_types\n            ) or isinstance(subset, tuple) and subset in self.columns:\n            subset = subset,\n        diff = Index(subset).difference(self.columns)\n        if not diff.empty:\n            raise KeyError(diff)\n        vals = (col.values for name, col in self.iteritems() if name in subset)\n        labels, shape = map(list, zip(*map(f, vals)))\n        ids = get_group_index(labels, shape, sort=False, xnull=False)\n        return Series(duplicated_int64(ids, keep), index=self.index)\n\n    @Appender(_shared_docs['sort_values'] % _shared_doc_kwargs)\n    def sort_values(self, by, axis=0, ascending=True, inplace=False, kind=\n        'quicksort', na_position='last'):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n        stacklevel = 2\n        if not isinstance(by, list):\n            by = [by]\n        if is_sequence(ascending) and len(by) != len(ascending):\n            raise ValueError(\n                'Length of ascending (%d) != length of by (%d)' % (len(\n                ascending), len(by)))\n        if len(by) > 1:\n            from pandas.core.sorting import lexsort_indexer\n            keys = []\n            for x in by:\n                k = self._get_label_or_level_values(x, axis=axis,\n                    stacklevel=stacklevel)\n                keys.append(k)\n            indexer = lexsort_indexer(keys, orders=ascending, na_position=\n                na_position)\n            indexer = ensure_platform_int(indexer)\n        else:\n            from pandas.core.sorting import nargsort\n            by = by[0]\n            k = self._get_label_or_level_values(by, axis=axis, stacklevel=\n                stacklevel)\n            if isinstance(ascending, (tuple, list)):\n                ascending = ascending[0]\n            indexer = nargsort(k, kind=kind, ascending=ascending,\n                na_position=na_position)\n        new_data = self._data.take(indexer, axis=self.\n            _get_block_manager_axis(axis), verify=False)\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    @Appender(_shared_docs['sort_index'] % _shared_doc_kwargs)\n    def sort_index(self, axis=0, level=None, ascending=True, inplace=False,\n        kind='quicksort', na_position='last', sort_remaining=True, by=None):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if by is not None:\n            warnings.warn(\n                'by argument to sort_index is deprecated, please use .sort_values(by=...)'\n                , FutureWarning, stacklevel=2)\n            if level is not None:\n                raise ValueError('unable to simultaneously sort by and level')\n            return self.sort_values(by, axis=axis, ascending=ascending,\n                inplace=inplace)\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n        labels = labels._sort_levels_monotonic()\n        if level is not None:\n            new_axis, indexer = labels.sortlevel(level, ascending=ascending,\n                sort_remaining=sort_remaining)\n        elif isinstance(labels, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n            indexer = lexsort_indexer(labels._get_labels_for_sorting(),\n                orders=ascending, na_position=na_position)\n        else:\n            from pandas.core.sorting import nargsort\n            if (ascending and labels.is_monotonic_increasing or not\n                ascending and labels.is_monotonic_decreasing):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n            indexer = nargsort(labels, kind=kind, ascending=ascending,\n                na_position=na_position)\n        baxis = self._get_block_manager_axis(axis)\n        new_data = self._data.take(indexer, axis=baxis, verify=False)\n        new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def sortlevel(self, level=0, axis=0, ascending=True, inplace=False,\n        sort_remaining=True):\n        \"\"\"Sort multilevel index by chosen axis and primary level. Data will be\n        lexicographically sorted by the chosen level followed by the other\n        levels (in order).\n\n        .. deprecated:: 0.20.0\n            Use :meth:`DataFrame.sort_index`\n\n\n        Parameters\n        ----------\n        level : int\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n        ascending : boolean, default True\n        inplace : boolean, default False\n            Sort the DataFrame without creating a new instance\n        sort_remaining : boolean, default True\n            Sort by the other levels too.\n\n        Returns\n        -------\n        sorted : DataFrame\n\n        See Also\n        --------\n        DataFrame.sort_index(level=...)\n\n        \"\"\"\n        warnings.warn('sortlevel is deprecated, use sort_index(level= ...)',\n            FutureWarning, stacklevel=2)\n        return self.sort_index(level=level, axis=axis, ascending=ascending,\n            inplace=inplace, sort_remaining=sort_remaining)\n\n    def nlargest(self, n, columns, keep='first'):\n        \"\"\"\n        Return the first `n` rows ordered by `columns` in descending order.\n\n        Return the first `n` rows with the largest values in `columns`, in\n        descending order. The columns that are not specified are returned as\n        well, but not used for ordering.\n\n        This method is equivalent to\n        ``df.sort_values(columns, ascending=False).head(n)``, but more\n        performant.\n\n        Parameters\n        ----------\n        n : int\n            Number of rows to return.\n        columns : label or list of labels\n            Column label(s) to order by.\n        keep : {'first', 'last', 'all'}, default 'first'\n            Where there are duplicate values:\n\n            - `first` : prioritize the first occurrence(s)\n            - `last` : prioritize the last occurrence(s)\n            - ``all`` : do not drop any duplicates, even it means\n                        selecting more than `n` items.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        DataFrame\n            The first `n` rows ordered by the given columns in descending\n            order.\n\n        See Also\n        --------\n        DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n            ascending order.\n        DataFrame.sort_values : Sort DataFrame by the values\n        DataFrame.head : Return the first `n` rows without re-ordering.\n\n        Notes\n        -----\n        This function cannot be used with all column types. For example, when\n        specifying columns with `object` or `category` dtypes, ``TypeError`` is\n        raised.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 10, 8, 11, 8, 2],\n        ...                    'b': list('abdcef'),\n        ...                    'c': [1.0, 2.0, np.nan, 3.0, 4.0, 9.0]})\n        >>> df\n            a  b    c\n        0   1  a  1.0\n        1  10  b  2.0\n        2   8  d  NaN\n        3  11  c  3.0\n        4   8  e  4.0\n        5   2  f  9.0\n\n        In the following example, we will use ``nlargest`` to select the three\n        rows having the largest values in column \"a\".\n\n        >>> df.nlargest(3, 'a')\n            a  b    c\n        3  11  c  3.0\n        1  10  b  2.0\n        2   8  d  NaN\n\n        When using ``keep='last'``, ties are resolved in reverse order:\n\n        >>> df.nlargest(3, 'a', keep='last')\n            a  b    c\n        3  11  c  3.0\n        1  10  b  2.0\n        4   8  e  4.0\n\n        When using ``keep='all'``, all duplicate items are maintained:\n\n        >>> df.nlargest(3, 'a', keep='all')\n            a  b    c\n        3  11  c  3.0\n        1  10  b  2.0\n        2   8  d  NaN\n        4   8  e  4.0\n\n        To order by the largest values in column \"a\" and then \"c\", we can\n        specify multiple columns like in the next example.\n\n        >>> df.nlargest(3, ['a', 'c'])\n            a  b    c\n        4   8  e  4.0\n        3  11  c  3.0\n        1  10  b  2.0\n\n        Attempting to use ``nlargest`` on non-numeric dtypes will raise a\n        ``TypeError``:\n\n        >>> df.nlargest(3, 'b')\n\n        Traceback (most recent call last):\n        TypeError: Column 'b' has dtype object, cannot use method 'nlargest'\n        \"\"\"\n        return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns\n            ).nlargest()\n\n    def nsmallest(self, n, columns, keep='first'):\n        \"\"\"Get the rows of a DataFrame sorted by the `n` smallest\n        values of `columns`.\n\n        Parameters\n        ----------\n        n : int\n            Number of items to retrieve\n        columns : list or str\n            Column name or names to order by\n        keep : {'first', 'last', 'all'}, default 'first'\n            Where there are duplicate values:\n\n            - ``first`` : take the first occurrence.\n            - ``last`` : take the last occurrence.\n            - ``all`` : do not drop any duplicates, even it means\n              selecting more than `n` items.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 10, 8, 11, 8, 2],\n        ...                    'b': list('abdcef'),\n        ...                    'c': [1.0, 2.0, np.nan, 3.0, 4.0, 9.0]})\n        >>> df\n            a  b    c\n        0   1  a  1.0\n        1  10  b  2.0\n        2   8  d  NaN\n        3  11  c  3.0\n        4   8  e  4.0\n        5   2  f  9.0\n\n        In the following example, we will use ``nsmallest`` to select the\n        three rows having the smallest values in column \"a\".\n\n        >>> df.nsmallest(3, 'a')\n           a  b    c\n        0  1  a  1.0\n        5  2  f  9.0\n        2  8  d  NaN\n\n        When using ``keep='last'``, ties are resolved in reverse order:\n\n        >>> df.nsmallest(3, 'a', keep='last')\n           a  b    c\n        0  1  a  1.0\n        5  2  f  9.0\n        4  8  e  4.0\n\n        When using ``keep='all'``, all duplicate items are maintained:\n\n        >>> df.nsmallest(3, 'a', keep='all')\n           a  b    c\n        0  1  a  1.0\n        5  2  f  9.0\n        2  8  d  NaN\n        4  8  e  4.0\n\n        To order by the largest values in column \"a\" and then \"c\", we can\n        specify multiple columns like in the next example.\n\n        >>> df.nsmallest(3, ['a', 'c'])\n           a  b    c\n        0  1  a  1.0\n        5  2  f  9.0\n        4  8  e  4.0\n\n        Attempting to use ``nsmallest`` on non-numeric dtypes will raise a\n        ``TypeError``:\n\n        >>> df.nsmallest(3, 'b')\n\n        Traceback (most recent call last):\n        TypeError: Column 'b' has dtype object, cannot use method 'nsmallest'\n        \"\"\"\n        return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns\n            ).nsmallest()\n\n    def swaplevel(self, i=-2, j=-1, axis=0):\n        \"\"\"\n        Swap levels i and j in a MultiIndex on a particular axis\n\n        Parameters\n        ----------\n        i, j : int, string (can be mixed)\n            Level of index to be swapped. Can pass level name as string.\n\n        Returns\n        -------\n        swapped : same type as caller (new object)\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n\n        \"\"\"\n        result = self.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            result.index = result.index.swaplevel(i, j)\n        else:\n            result.columns = result.columns.swaplevel(i, j)\n        return result\n\n    def reorder_levels(self, order, axis=0):\n        \"\"\"\n        Rearrange index levels using input order.\n        May not drop or duplicate levels\n\n        Parameters\n        ----------\n        order : list of int or list of str\n            List representing new level order. Reference level by number\n            (position) or by key (label).\n        axis : int\n            Where to reorder levels.\n\n        Returns\n        -------\n        type of caller (new object)\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if not isinstance(self._get_axis(axis), MultiIndex):\n            raise TypeError('Can only reorder levels on a hierarchical axis.')\n        result = self.copy()\n        if axis == 0:\n            result.index = result.index.reorder_levels(order)\n        else:\n            result.columns = result.columns.reorder_levels(order)\n        return result\n\n    def _combine_frame(self, other, func, fill_value=None, level=None):\n        this, other = self.align(other, join='outer', level=level, copy=False)\n        new_index, new_columns = this.index, this.columns\n\n        def _arith_op(left, right):\n            left, right = ops.fill_binop(left, right, fill_value)\n            return func(left, right)\n        if this._is_mixed_type or other._is_mixed_type:\n            return ops.dispatch_to_series(this, other, _arith_op)\n        else:\n            result = _arith_op(this.values, other.values)\n        return self._constructor(result, index=new_index, columns=\n            new_columns, copy=False)\n\n    def _combine_match_index(self, other, func, level=None):\n        left, right = self.align(other, join='outer', axis=0, level=level,\n            copy=False)\n        new_data = func(left.values.T, right.values).T\n        return self._constructor(new_data, index=left.index, columns=self.\n            columns, copy=False)\n\n    def _combine_match_columns(self, other, func, level=None, try_cast=True):\n        left, right = self.align(other, join='outer', axis=1, level=level,\n            copy=False)\n        new_data = left._data.eval(func=func, other=right, axes=[left.\n            columns, self.index], try_cast=try_cast)\n        return self._constructor(new_data)\n\n    def _combine_const(self, other, func, errors='raise', try_cast=True):\n        new_data = self._data.eval(func=func, other=other, errors=errors,\n            try_cast=try_cast)\n        return self._constructor(new_data)\n\n    def _compare_frame(self, other, func, str_rep):\n        import pandas.core.computation.expressions as expressions\n\n        def _compare(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(\n                a.columns))}\n        new_data = expressions.evaluate(_compare, str_rep, self, other)\n        result = self._constructor(data=new_data, index=self.index, copy=False)\n        result.columns = self.columns\n        return result\n\n    def combine(self, other, func, fill_value=None, overwrite=True):\n        \"\"\"\n        Perform column-wise combine with another DataFrame based on a\n        passed function.\n\n        Combines a DataFrame with `other` DataFrame using `func`\n        to element-wise combine columns. The row and column indexes of the\n        resulting DataFrame will be the union of the two.\n\n        Parameters\n        ----------\n        other : DataFrame\n            The DataFrame to merge column-wise.\n        func : function\n            Function that takes two series as inputs and return a Series or a\n            scalar. Used to merge the two dataframes column by columns.\n        fill_value : scalar value, default None\n            The value to fill NaNs with prior to passing any column to the\n            merge func.\n        overwrite : boolean, default True\n            If True, columns in `self` that do not exist in `other` will be\n            overwritten with NaNs.\n\n        Returns\n        -------\n        result : DataFrame\n\n        Examples\n        --------\n        Combine using a simple function that chooses the smaller column.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\n        >>> df1.combine(df2, take_smaller)\n           A  B\n        0  0  3\n        1  0  3\n\n        Example using a true element-wise combine function.\n\n        >>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine(df2, np.minimum)\n           A  B\n        0  1  2\n        1  0  3\n\n        Using `fill_value` fills Nones prior to passing the column to the\n        merge function.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine(df2, take_smaller, fill_value=-5)\n           A    B\n        0  0 -5.0\n        1  0  4.0\n\n        However, if the same element in both dataframes is None, that None\n        is preserved\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})\n        >>> df1.combine(df2, take_smaller, fill_value=-5)\n           A    B\n        0  0  NaN\n        1  0  3.0\n\n        Example that demonstrates the use of `overwrite` and behavior when\n        the axis differ between the dataframes.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1],}, index=[1, 2])\n        >>> df1.combine(df2, take_smaller)\n             A    B     C\n        0  NaN  NaN   NaN\n        1  NaN  3.0 -10.0\n        2  NaN  3.0   1.0\n\n        >>> df1.combine(df2, take_smaller, overwrite=False)\n             A    B     C\n        0  0.0  NaN   NaN\n        1  0.0  3.0 -10.0\n        2  NaN  3.0   1.0\n\n        Demonstrating the preference of the passed in dataframe.\n\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1],}, index=[1, 2])\n        >>> df2.combine(df1, take_smaller)\n           A    B   C\n        0  0.0  NaN NaN\n        1  0.0  3.0 NaN\n        2  NaN  3.0 NaN\n\n        >>> df2.combine(df1, take_smaller, overwrite=False)\n             A    B   C\n        0  0.0  NaN NaN\n        1  0.0  3.0 1.0\n        2  NaN  3.0 1.0\n\n        See Also\n        --------\n        DataFrame.combine_first : Combine two DataFrame objects and default to\n            non-null values in frame calling the method\n        \"\"\"\n        other_idxlen = len(other.index)\n        this, other = self.align(other, copy=False)\n        new_index = this.index\n        if other.empty and len(new_index) == len(self.index):\n            return self.copy()\n        if self.empty and len(other) == other_idxlen:\n            return other.copy()\n        new_columns = this.columns.union(other.columns)\n        do_fill = fill_value is not None\n        result = {}\n        for col in new_columns:\n            series = this[col]\n            otherSeries = other[col]\n            this_dtype = series.dtype\n            other_dtype = otherSeries.dtype\n            this_mask = isna(series)\n            other_mask = isna(otherSeries)\n            if not overwrite and other_mask.all():\n                result[col] = this[col].copy()\n                continue\n            if do_fill:\n                series = series.copy()\n                otherSeries = otherSeries.copy()\n                series[this_mask] = fill_value\n                otherSeries[other_mask] = fill_value\n            new_dtype = this_dtype\n            if not is_dtype_equal(this_dtype, other_dtype):\n                new_dtype = find_common_type([this_dtype, other_dtype])\n                if not is_dtype_equal(this_dtype, new_dtype):\n                    series = series.astype(new_dtype)\n                if not is_dtype_equal(other_dtype, new_dtype):\n                    otherSeries = otherSeries.astype(new_dtype)\n            needs_i8_conversion_i = needs_i8_conversion(new_dtype)\n            if needs_i8_conversion_i:\n                arr = func(series, otherSeries, True)\n            else:\n                arr = func(series, otherSeries)\n            arr = maybe_downcast_to_dtype(arr, this_dtype)\n            result[col] = arr\n        return self._constructor(result, index=new_index, columns=new_columns\n            )._convert(datetime=True, copy=False)\n\n    def combine_first(self, other):\n        \"\"\"\n        Update null elements with value in the same location in `other`.\n\n        Combine two DataFrame objects by filling null values in one DataFrame\n        with non-null values from other DataFrame. The row and column indexes\n        of the resulting DataFrame will be the union of the two.\n\n        Parameters\n        ----------\n        other : DataFrame\n            Provided DataFrame to use to fill null values.\n\n        Returns\n        -------\n        combined : DataFrame\n\n        Examples\n        --------\n\n        >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine_first(df2)\n             A    B\n        0  1.0  3.0\n        1  0.0  4.0\n\n        Null values still persist if the location of that null value\n        does not exist in `other`\n\n        >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])\n        >>> df1.combine_first(df2)\n             A    B    C\n        0  NaN  4.0  NaN\n        1  0.0  3.0  1.0\n        2  NaN  3.0  1.0\n\n        See Also\n        --------\n        DataFrame.combine : Perform series-wise operation on two DataFrames\n            using a given function\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n\n        def combiner(x, y, needs_i8_conversion=False):\n            x_values = x.values if hasattr(x, 'values') else x\n            y_values = y.values if hasattr(y, 'values') else y\n            if needs_i8_conversion:\n                mask = isna(x)\n                x_values = x_values.view('i8')\n                y_values = y_values.view('i8')\n            else:\n                mask = isna(x_values)\n            return expressions.where(mask, y_values, x_values)\n        return self.combine(other, combiner, overwrite=False)\n\n    def update(self, other, join='left', overwrite=True, filter_func=None,\n        raise_conflict=False):\n        \"\"\"\n        Modify in place using non-NA values from another DataFrame.\n\n        Aligns on indices. There is no return value.\n\n        Parameters\n        ----------\n        other : DataFrame, or object coercible into a DataFrame\n            Should have at least one matching index/column label\n            with the original DataFrame. If a Series is passed,\n            its name attribute must be set, and that will be\n            used as the column name to align with the original DataFrame.\n        join : {'left'}, default 'left'\n            Only left join is implemented, keeping the index and columns of the\n            original object.\n        overwrite : bool, default True\n            How to handle non-NA values for overlapping keys:\n\n            * True: overwrite original DataFrame's values\n              with values from `other`.\n            * False: only update values that are NA in\n              the original DataFrame.\n\n        filter_func : callable(1d-array) -> boolean 1d-array, optional\n            Can choose to replace values other than NA. Return True for values\n            that should be updated.\n        raise_conflict : bool, default False\n            If True, will raise a ValueError if the DataFrame and `other`\n            both contain non-NA data in the same place.\n\n        Raises\n        ------\n        ValueError\n            When `raise_conflict` is True and there's overlapping non-NA data.\n\n        See Also\n        --------\n        dict.update : Similar method for dictionaries.\n        DataFrame.merge : For column(s)-on-columns(s) operations.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, 5, 6],\n        ...                        'C': [7, 8, 9]})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        The DataFrame's length does not increase as a result of the update,\n        only values at matching index/column labels are updated.\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  d\n        1  b  e\n        2  c  f\n\n        For Series, it's name attribute must be set.\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n        >>> df.update(new_column)\n        >>> df\n           A  B\n        0  a  d\n        1  b  y\n        2  c  e\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  x\n        1  b  d\n        2  c  e\n\n        If `other` contains NaNs the corresponding values are not updated\n        in the original dataframe.\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n        >>> df.update(new_df)\n        >>> df\n           A      B\n        0  1    4.0\n        1  2  500.0\n        2  3    6.0\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n        if join != 'left':\n            raise NotImplementedError('Only left join is supported')\n        if not isinstance(other, DataFrame):\n            other = DataFrame(other)\n        other = other.reindex_like(self)\n        for col in self.columns:\n            this = self[col].values\n            that = other[col].values\n            if filter_func is not None:\n                with np.errstate(all='ignore'):\n                    mask = ~filter_func(this) | isna(that)\n            else:\n                if raise_conflict:\n                    mask_this = notna(that)\n                    mask_that = notna(this)\n                    if any(mask_this & mask_that):\n                        raise ValueError('Data overlaps.')\n                if overwrite:\n                    mask = isna(that)\n                else:\n                    mask = notna(this)\n            if mask.all():\n                continue\n            self[col] = expressions.where(mask, this, that)\n    _shared_docs['pivot'] = \"\"\"\n        Return reshaped DataFrame organized by given index / column values.\n\n        Reshape data (produce a \"pivot\" table) based on column values. Uses\n        unique values from specified `index` / `columns` to form axes of the\n        resulting DataFrame. This function does not support data\n        aggregation, multiple values will result in a MultiIndex in the\n        columns. See the :ref:`User Guide <reshaping>` for more on reshaping.\n\n        Parameters\n        ----------%s\n        index : string or object, optional\n            Column to use to make new frame's index. If None, uses\n            existing index.\n        columns : string or object\n            Column to use to make new frame's columns.\n        values : string, object or a list of the previous, optional\n            Column(s) to use for populating new frame's values. If not\n            specified, all remaining columns will be used and the result will\n            have hierarchically indexed columns.\n\n            .. versionchanged :: 0.23.0\n               Also accept list of column names.\n\n        Returns\n        -------\n        DataFrame\n            Returns reshaped DataFrame.\n\n        Raises\n        ------\n        ValueError:\n            When there are any `index`, `columns` combinations with multiple\n            values. `DataFrame.pivot_table` when you need to aggregate.\n\n        See Also\n        --------\n        DataFrame.pivot_table : generalization of pivot that can handle\n            duplicate values for one index/column pair.\n        DataFrame.unstack : pivot based on the index values instead of a\n            column.\n\n        Notes\n        -----\n        For finer-tuned control, see hierarchical indexing documentation along\n        with the related stack/unstack methods.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',\n        ...                            'two'],\n        ...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n        ...                    'baz': [1, 2, 3, 4, 5, 6],\n        ...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n        >>> df\n            foo   bar  baz  zoo\n        0   one   A    1    x\n        1   one   B    2    y\n        2   one   C    3    z\n        3   two   A    4    q\n        4   two   B    5    w\n        5   two   C    6    t\n\n        >>> df.pivot(index='foo', columns='bar', values='baz')\n        bar  A   B   C\n        foo\n        one  1   2   3\n        two  4   5   6\n\n        >>> df.pivot(index='foo', columns='bar')['baz']\n        bar  A   B   C\n        foo\n        one  1   2   3\n        two  4   5   6\n\n        >>> df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])\n              baz       zoo\n        bar   A  B  C   A  B  C\n        foo\n        one   1  2  3   x  y  z\n        two   4  5  6   q  w  t\n\n        A ValueError is raised if there are any duplicates.\n\n        >>> df = pd.DataFrame({\"foo\": ['one', 'one', 'two', 'two'],\n        ...                    \"bar\": ['A', 'A', 'B', 'C'],\n        ...                    \"baz\": [1, 2, 3, 4]})\n        >>> df\n           foo bar  baz\n        0  one   A    1\n        1  one   A    2\n        2  two   B    3\n        3  two   C    4\n\n        Notice that the first two rows are the same for our `index`\n        and `columns` arguments.\n\n        >>> df.pivot(index='foo', columns='bar', values='baz')\n        Traceback (most recent call last):\n           ...\n        ValueError: Index contains duplicate entries, cannot reshape\n        \"\"\"\n\n    @Substitution('')\n    @Appender(_shared_docs['pivot'])\n    def pivot(self, index=None, columns=None, values=None):\n        from pandas.core.reshape.pivot import pivot\n        return pivot(self, index=index, columns=columns, values=values)\n    _shared_docs['pivot_table'] = \"\"\"\n        Create a spreadsheet-style pivot table as a DataFrame. The levels in\n        the pivot table will be stored in MultiIndex objects (hierarchical\n        indexes) on the index and columns of the result DataFrame\n\n        Parameters\n        ----------%s\n        values : column to aggregate, optional\n        index : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table index.  If an array is passed,\n            it is being used as the same manner as column values.\n        columns : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table column.  If an array is passed,\n            it is being used as the same manner as column values.\n        aggfunc : function, list of functions, dict, default numpy.mean\n            If list of functions passed, the resulting pivot table will have\n            hierarchical columns whose top level are the function names\n            (inferred from the function objects themselves)\n            If dict is passed, the key is column to aggregate and value\n            is function or list of functions\n        fill_value : scalar, default None\n            Value to replace missing values with\n        margins : boolean, default False\n            Add all row / columns (e.g. for subtotal / grand totals)\n        dropna : boolean, default True\n            Do not include columns whose entries are all NaN\n        margins_name : string, default 'All'\n            Name of the row / column that will contain the totals\n            when margins is True.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n        ...                          \"bar\", \"bar\", \"bar\", \"bar\"],\n        ...                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n        ...                          \"one\", \"one\", \"two\", \"two\"],\n        ...                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n        ...                          \"small\", \"large\", \"small\", \"small\",\n        ...                          \"large\"],\n        ...                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7]})\n        >>> df\n             A    B      C  D\n        0  foo  one  small  1\n        1  foo  one  large  2\n        2  foo  one  large  2\n        3  foo  two  small  3\n        4  foo  two  small  3\n        5  bar  one  large  4\n        6  bar  one  small  5\n        7  bar  two  small  6\n        8  bar  two  large  7\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum)\n        >>> table\n        C        large  small\n        A   B\n        bar one    4.0    5.0\n            two    7.0    6.0\n        foo one    4.0    1.0\n            two    NaN    6.0\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum)\n        >>> table\n        C        large  small\n        A   B\n        bar one    4.0    5.0\n            two    7.0    6.0\n        foo one    4.0    1.0\n            two    NaN    6.0\n\n        >>> table = pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n        ...                     aggfunc={'D': np.mean,\n        ...                              'E': [min, max, np.mean]})\n        >>> table\n                          D   E\n                       mean max median min\n        A   C\n        bar large  5.500000  16   14.5  13\n            small  5.500000  15   14.5  14\n        foo large  2.000000  10    9.5   9\n            small  2.333333  12   11.0   8\n\n        Returns\n        -------\n        table : DataFrame\n\n        See also\n        --------\n        DataFrame.pivot : pivot without aggregation that can handle\n            non-numeric data\n        \"\"\"\n\n    @Substitution('')\n    @Appender(_shared_docs['pivot_table'])\n    def pivot_table(self, values=None, index=None, columns=None, aggfunc=\n        'mean', fill_value=None, margins=False, dropna=True, margins_name='All'\n        ):\n        from pandas.core.reshape.pivot import pivot_table\n        return pivot_table(self, values=values, index=index, columns=\n            columns, aggfunc=aggfunc, fill_value=fill_value, margins=\n            margins, dropna=dropna, margins_name=margins_name)\n\n    def stack(self, level=-1, dropna=True):\n        \"\"\"\n        Stack the prescribed level(s) from columns to index.\n\n        Return a reshaped DataFrame or Series having a multi-level\n        index with one or more new inner-most levels compared to the current\n        DataFrame. The new inner-most levels are created by pivoting the\n        columns of the current dataframe:\n\n          - if the columns have a single level, the output is a Series;\n          - if the columns have multiple levels, the new index\n            level(s) is (are) taken from the prescribed level(s) and\n            the output is a DataFrame.\n\n        The new index levels are sorted.\n\n        Parameters\n        ----------\n        level : int, str, list, default -1\n            Level(s) to stack from the column axis onto the index\n            axis, defined as one index or label, or a list of indices\n            or labels.\n        dropna : bool, default True\n            Whether to drop rows in the resulting Frame/Series with\n            missing values. Stacking a column level onto the index\n            axis can create combinations of index and column values\n            that are missing from the original dataframe. See Examples\n            section.\n\n        Returns\n        -------\n        DataFrame or Series\n            Stacked dataframe or series.\n\n        See Also\n        --------\n        DataFrame.unstack : Unstack prescribed level(s) from index axis\n             onto column axis.\n        DataFrame.pivot : Reshape dataframe from long format to wide\n             format.\n        DataFrame.pivot_table : Create a spreadsheet-style pivot table\n             as a DataFrame.\n\n        Notes\n        -----\n        The function is named by analogy with a collection of books\n        being re-organised from being side by side on a horizontal\n        position (the columns of the dataframe) to being stacked\n        vertically on top of of each other (in the index of the\n        dataframe).\n\n        Examples\n        --------\n        **Single level columns**\n\n        >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=['weight', 'height'])\n\n        Stacking a dataframe with a single level column axis returns a Series:\n\n        >>> df_single_level_cols\n             weight height\n        cat       0      1\n        dog       2      3\n        >>> df_single_level_cols.stack()\n        cat  weight    0\n             height    1\n        dog  weight    2\n             height    3\n        dtype: int64\n\n        **Multi level columns: simple case**\n\n        >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('weight', 'pounds')])\n        >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol1)\n\n        Stacking a dataframe with a multi-level column axis:\n\n        >>> df_multi_level_cols1\n             weight\n                 kg    pounds\n        cat       1        2\n        dog       2        4\n        >>> df_multi_level_cols1.stack()\n                    weight\n        cat kg           1\n            pounds       2\n        dog kg           2\n            pounds       4\n\n        **Missing values**\n\n        >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('height', 'm')])\n        >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        It is common to have missing values when stacking a dataframe\n        with multi-level columns, as the stacked dataframe typically\n        has more values than the original dataframe. Missing values\n        are filled with NaNs:\n\n        >>> df_multi_level_cols2\n            weight height\n                kg      m\n        cat    1.0    2.0\n        dog    3.0    4.0\n        >>> df_multi_level_cols2.stack()\n                height  weight\n        cat kg     NaN     1.0\n            m      2.0     NaN\n        dog kg     NaN     3.0\n            m      4.0     NaN\n\n        **Prescribing the level(s) to be stacked**\n\n        The first parameter controls which level or levels are stacked:\n\n        >>> df_multi_level_cols2.stack(0)\n                     kg    m\n        cat height  NaN  2.0\n            weight  1.0  NaN\n        dog height  NaN  4.0\n            weight  3.0  NaN\n        >>> df_multi_level_cols2.stack([0, 1])\n        cat  height  m     2.0\n             weight  kg    1.0\n        dog  height  m     4.0\n             weight  kg    3.0\n        dtype: float64\n\n        **Dropping missing values**\n\n        >>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        Note that rows where all values are missing are dropped by\n        default but this behaviour can be controlled via the dropna\n        keyword parameter:\n\n        >>> df_multi_level_cols3\n            weight height\n                kg      m\n        cat    NaN    1.0\n        dog    2.0    3.0\n        >>> df_multi_level_cols3.stack(dropna=False)\n                height  weight\n        cat kg     NaN     NaN\n            m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        >>> df_multi_level_cols3.stack(dropna=True)\n                height  weight\n        cat m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        \"\"\"\n        from pandas.core.reshape.reshape import stack, stack_multiple\n        if isinstance(level, (tuple, list)):\n            return stack_multiple(self, level, dropna=dropna)\n        else:\n            return stack(self, level, dropna=dropna)\n\n    def unstack(self, level=-1, fill_value=None):\n        \"\"\"\n        Pivot a level of the (necessarily hierarchical) index labels, returning\n        a DataFrame having a new level of column labels whose inner-most level\n        consists of the pivoted index labels. If the index is not a MultiIndex,\n        the output will be a Series (the analogue of stack when the columns are\n        not a MultiIndex).\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, string, or list of these, default -1 (last level)\n            Level(s) of index to unstack, can pass level name\n        fill_value : replace NaN with this value if the unstack produces\n            missing values\n\n            .. versionadded:: 0.18.0\n\n        See also\n        --------\n        DataFrame.pivot : Pivot a table based on column values.\n        DataFrame.stack : Pivot a level of the column labels (inverse operation\n            from `unstack`).\n\n        Examples\n        --------\n        >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n        ...                                    ('two', 'a'), ('two', 'b')])\n        >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n        >>> s\n        one  a   1.0\n             b   2.0\n        two  a   3.0\n             b   4.0\n        dtype: float64\n\n        >>> s.unstack(level=-1)\n             a   b\n        one  1.0  2.0\n        two  3.0  4.0\n\n        >>> s.unstack(level=0)\n           one  two\n        a  1.0   3.0\n        b  2.0   4.0\n\n        >>> df = s.unstack(level=0)\n        >>> df.unstack()\n        one  a  1.0\n             b  2.0\n        two  a  3.0\n             b  4.0\n        dtype: float64\n\n        Returns\n        -------\n        unstacked : DataFrame or Series\n        \"\"\"\n        from pandas.core.reshape.reshape import unstack\n        return unstack(self, level, fill_value)\n    _shared_docs['melt'] = \"\"\"\n    \"Unpivots\" a DataFrame from wide format to long format, optionally\n    leaving identifier variables set.\n\n    This function is useful to massage a DataFrame into a format where one\n    or more columns are identifier variables (`id_vars`), while all other\n    columns, considered measured variables (`value_vars`), are \"unpivoted\" to\n    the row axis, leaving just two non-identifier columns, 'variable' and\n    'value'.\n\n    %(versionadded)s\n    Parameters\n    ----------\n    frame : DataFrame\n    id_vars : tuple, list, or ndarray, optional\n        Column(s) to use as identifier variables.\n    value_vars : tuple, list, or ndarray, optional\n        Column(s) to unpivot. If not specified, uses all columns that\n        are not set as `id_vars`.\n    var_name : scalar\n        Name to use for the 'variable' column. If None it uses\n        ``frame.columns.name`` or 'variable'.\n    value_name : scalar, default 'value'\n        Name to use for the 'value' column.\n    col_level : int or string, optional\n        If columns are a MultiIndex then use this level to melt.\n\n    See also\n    --------\n    %(other)s\n    pivot_table\n    DataFrame.pivot\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},\n    ...                    'B': {0: 1, 1: 3, 2: 5},\n    ...                    'C': {0: 2, 1: 4, 2: 6}})\n    >>> df\n       A  B  C\n    0  a  1  2\n    1  b  3  4\n    2  c  5  6\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B', 'C'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n    3  a        C      2\n    4  b        C      4\n    5  c        C      6\n\n    The names of 'variable' and 'value' columns can be customized:\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B'],\n    ...         var_name='myVarname', value_name='myValname')\n       A myVarname  myValname\n    0  a         B          1\n    1  b         B          3\n    2  c         B          5\n\n    If you have multi-index columns:\n\n    >>> df.columns = [list('ABC'), list('DEF')]\n    >>> df\n       A  B  C\n       D  E  F\n    0  a  1  2\n    1  b  3  4\n    2  c  5  6\n\n    >>> %(caller)scol_level=0, id_vars=['A'], value_vars=['B'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n\n    >>> %(caller)sid_vars=[('A', 'D')], value_vars=[('B', 'E')])\n      (A, D) variable_0 variable_1  value\n    0      a          B          E      1\n    1      b          B          E      3\n    2      c          B          E      5\n\n    \"\"\"\n\n    @Appender(_shared_docs['melt'] % dict(caller='df.melt(', versionadded=\n        \"\"\".. versionadded:: 0.20.0\n\"\"\", other='melt'))\n    def melt(self, id_vars=None, value_vars=None, var_name=None, value_name\n        ='value', col_level=None):\n        from pandas.core.reshape.melt import melt\n        return melt(self, id_vars=id_vars, value_vars=value_vars, var_name=\n            var_name, value_name=value_name, col_level=col_level)\n\n    def diff(self, periods=1, axis=0):\n        \"\"\"\n        First discrete difference of element.\n\n        Calculates the difference of a DataFrame element compared with another\n        element in the DataFrame (default is the element in the same column\n        of the previous row).\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for calculating difference, accepts negative\n            values.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Take difference over rows (0) or columns (1).\n\n            .. versionadded:: 0.16.1.\n\n        Returns\n        -------\n        diffed : DataFrame\n\n        See Also\n        --------\n        Series.diff: First discrete difference for a Series.\n        DataFrame.pct_change: Percent change over given number of periods.\n        DataFrame.shift: Shift index by desired number of periods with an\n            optional time freq.\n\n        Examples\n        --------\n        Difference with previous row\n\n        >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n        ...                    'b': [1, 1, 2, 3, 5, 8],\n        ...                    'c': [1, 4, 9, 16, 25, 36]})\n        >>> df\n           a  b   c\n        0  1  1   1\n        1  2  1   4\n        2  3  2   9\n        3  4  3  16\n        4  5  5  25\n        5  6  8  36\n\n        >>> df.diff()\n             a    b     c\n        0  NaN  NaN   NaN\n        1  1.0  0.0   3.0\n        2  1.0  1.0   5.0\n        3  1.0  1.0   7.0\n        4  1.0  2.0   9.0\n        5  1.0  3.0  11.0\n\n        Difference with previous column\n\n        >>> df.diff(axis=1)\n            a    b     c\n        0 NaN  0.0   0.0\n        1 NaN -1.0   3.0\n        2 NaN -1.0   7.0\n        3 NaN -1.0  13.0\n        4 NaN  0.0  20.0\n        5 NaN  2.0  28.0\n\n        Difference with 3rd previous row\n\n        >>> df.diff(periods=3)\n             a    b     c\n        0  NaN  NaN   NaN\n        1  NaN  NaN   NaN\n        2  NaN  NaN   NaN\n        3  3.0  2.0  15.0\n        4  3.0  4.0  21.0\n        5  3.0  6.0  27.0\n\n        Difference with following row\n\n        >>> df.diff(periods=-1)\n             a    b     c\n        0 -1.0  0.0  -3.0\n        1 -1.0 -1.0  -5.0\n        2 -1.0 -1.0  -7.0\n        3 -1.0 -2.0  -9.0\n        4 -1.0 -3.0 -11.0\n        5  NaN  NaN   NaN\n        \"\"\"\n        bm_axis = self._get_block_manager_axis(axis)\n        new_data = self._data.diff(n=periods, axis=bm_axis)\n        return self._constructor(new_data)\n\n    def _gotitem(self, key, ndim, subset=None):\n        \"\"\"\n        sub-classes to define\n        return a sliced object\n\n        Parameters\n        ----------\n        key : string / list of selections\n        ndim : 1,2\n            requested ndim of result\n        subset : object, default None\n            subset to act on\n        \"\"\"\n        if subset is None:\n            subset = self\n        elif subset.ndim == 1:\n            return subset\n        return subset[key]\n    _agg_doc = dedent(\n        \"\"\"\n    The aggregation operations are always performed over an axis, either the\n    index (default) or the column axis. This behavior is different from\n    `numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n    `var`), where the default is to compute the aggregation of the flattened\n    array, e.g., ``numpy.mean(arr_2d)`` as opposed to ``numpy.mean(arr_2d,\n    axis=0)``.\n\n    `agg` is an alias for `aggregate`. Use the alias.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2, 3],\n    ...                    [4, 5, 6],\n    ...                    [7, 8, 9],\n    ...                    [np.nan, np.nan, np.nan]],\n    ...                   columns=['A', 'B', 'C'])\n\n    Aggregate these functions over the rows.\n\n    >>> df.agg(['sum', 'min'])\n            A     B     C\n    sum  12.0  15.0  18.0\n    min   1.0   2.0   3.0\n\n    Different aggregations per column.\n\n    >>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n            A    B\n    max   NaN  8.0\n    min   1.0  2.0\n    sum  12.0  NaN\n\n    Aggregate over the columns.\n\n    >>> df.agg(\"mean\", axis=\"columns\")\n    0    2.0\n    1    5.0\n    2    8.0\n    3    NaN\n    dtype: float64\n\n    See also\n    --------\n    DataFrame.apply : Perform any type of operations.\n    DataFrame.transform : Perform transformation type operations.\n    pandas.core.groupby.GroupBy : Perform operations over groups.\n    pandas.core.resample.Resampler : Perform operations over resampled bins.\n    pandas.core.window.Rolling : Perform operations over rolling window.\n    pandas.core.window.Expanding : Perform operations over expanding window.\n    pandas.core.window.EWM : Perform operation over exponential weighted\n        window.\n    \"\"\"\n        )\n\n    @Appender(_agg_doc)\n    @Appender(_shared_docs['aggregate'] % dict(versionadded=\n        '.. versionadded:: 0.20.0', **_shared_doc_kwargs))\n    def aggregate(self, func, axis=0, *args, **kwargs):\n        axis = self._get_axis_number(axis)\n        result = None\n        try:\n            result, how = self._aggregate(func, *args, axis=axis, **kwargs)\n        except TypeError:\n            pass\n        if result is None:\n            return self.apply(func, axis=axis, args=args, **kwargs)\n        return result\n\n    def _aggregate(self, arg, axis=0, *args, **kwargs):\n        if axis == 1:\n            result, how = super(DataFrame, self.T)._aggregate(arg, *args,\n                **kwargs)\n            result = result.T if result is not None else result\n            return result, how\n        return super(DataFrame, self)._aggregate(arg, *args, **kwargs)\n    agg = aggregate\n\n    @Appender(_shared_docs['transform'] % _shared_doc_kwargs)\n    def transform(self, func, axis=0, *args, **kwargs):\n        axis = self._get_axis_number(axis)\n        if axis == 1:\n            return super(DataFrame, self.T).transform(func, *args, **kwargs).T\n        return super(DataFrame, self).transform(func, *args, **kwargs)\n\n    def apply(self, func, axis=0, broadcast=None, raw=False, reduce=None,\n        result_type=None, args=(), **kwds):\n        \"\"\"\n        Apply a function along an axis of the DataFrame.\n\n        Objects passed to the function are Series objects whose index is\n        either the DataFrame's index (``axis=0``) or the DataFrame's columns\n        (``axis=1``). By default (``result_type=None``), the final return type\n        is inferred from the return type of the applied function. Otherwise,\n        it depends on the `result_type` argument.\n\n        Parameters\n        ----------\n        func : function\n            Function to apply to each column or row.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis along which the function is applied:\n\n            * 0 or 'index': apply function to each column.\n            * 1 or 'columns': apply function to each row.\n        broadcast : bool, optional\n            Only relevant for aggregation functions:\n\n            * ``False`` or ``None`` : returns a Series whose length is the\n              length of the index or the number of columns (based on the\n              `axis` parameter)\n            * ``True`` : results will be broadcast to the original shape\n              of the frame, the original index and columns will be retained.\n\n            .. deprecated:: 0.23.0\n               This argument will be removed in a future version, replaced\n               by result_type='broadcast'.\n\n        raw : bool, default False\n            * ``False`` : passes each row or column as a Series to the\n              function.\n            * ``True`` : the passed function will receive ndarray objects\n              instead.\n              If you are just applying a NumPy reduction function this will\n              achieve much better performance.\n        reduce : bool or None, default None\n            Try to apply reduction procedures. If the DataFrame is empty,\n            `apply` will use `reduce` to determine whether the result\n            should be a Series or a DataFrame. If ``reduce=None`` (the\n            default), `apply`'s return value will be guessed by calling\n            `func` on an empty Series\n            (note: while guessing, exceptions raised by `func` will be\n            ignored).\n            If ``reduce=True`` a Series will always be returned, and if\n            ``reduce=False`` a DataFrame will always be returned.\n\n            .. deprecated:: 0.23.0\n               This argument will be removed in a future version, replaced\n               by ``result_type='reduce'``.\n\n        result_type : {'expand', 'reduce', 'broadcast', None}, default None\n            These only act when ``axis=1`` (columns):\n\n            * 'expand' : list-like results will be turned into columns.\n            * 'reduce' : returns a Series if possible rather than expanding\n              list-like results. This is the opposite of 'expand'.\n            * 'broadcast' : results will be broadcast to the original shape\n              of the DataFrame, the original index and columns will be\n              retained.\n\n            The default behaviour (None) depends on the return value of the\n            applied function: list-like results will be returned as a Series\n            of those. However if the apply function returns a Series these\n            are expanded to columns.\n\n            .. versionadded:: 0.23.0\n\n        args : tuple\n            Positional arguments to pass to `func` in addition to the\n            array/series.\n        **kwds\n            Additional keyword arguments to pass as keywords arguments to\n            `func`.\n\n        Notes\n        -----\n        In the current implementation apply calls `func` twice on the\n        first column/row to decide whether it can take a fast or slow\n        code path. This can lead to unexpected behavior if `func` has\n        side-effects, as they will take effect twice for the first\n        column/row.\n\n        See also\n        --------\n        DataFrame.applymap: For elementwise operations\n        DataFrame.aggregate: only perform aggregating type operations\n        DataFrame.transform: only perform transforming type operations\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[4, 9],] * 3, columns=['A', 'B'])\n        >>> df\n           A  B\n        0  4  9\n        1  4  9\n        2  4  9\n\n        Using a numpy universal function (in this case the same as\n        ``np.sqrt(df)``):\n\n        >>> df.apply(np.sqrt)\n             A    B\n        0  2.0  3.0\n        1  2.0  3.0\n        2  2.0  3.0\n\n        Using a reducing function on either axis\n\n        >>> df.apply(np.sum, axis=0)\n        A    12\n        B    27\n        dtype: int64\n\n        >>> df.apply(np.sum, axis=1)\n        0    13\n        1    13\n        2    13\n        dtype: int64\n\n        Retuning a list-like will result in a Series\n\n        >>> df.apply(lambda x: [1, 2], axis=1)\n        0    [1, 2]\n        1    [1, 2]\n        2    [1, 2]\n        dtype: object\n\n        Passing result_type='expand' will expand list-like results\n        to columns of a Dataframe\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n           0  1\n        0  1  2\n        1  1  2\n        2  1  2\n\n        Returning a Series inside the function is similar to passing\n        ``result_type='expand'``. The resulting column names\n        will be the Series index.\n\n        >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n           foo  bar\n        0    1    2\n        1    1    2\n        2    1    2\n\n        Passing ``result_type='broadcast'`` will ensure the same shape\n        result, whether list-like or scalar is returned by the function,\n        and broadcast it along the axis. The resulting column names will\n        be the originals.\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n           A  B\n        0  1  2\n        1  1  2\n        2  1  2\n\n        Returns\n        -------\n        applied : Series or DataFrame\n        \"\"\"\n        from pandas.core.apply import frame_apply\n        op = frame_apply(self, func=func, axis=axis, broadcast=broadcast,\n            raw=raw, reduce=reduce, result_type=result_type, args=args,\n            kwds=kwds)\n        return op.get_result()\n\n    def applymap(self, func):\n        \"\"\"\n        Apply a function to a Dataframe elementwise.\n\n        This method applies a function that accepts and returns a scalar\n        to every element of a DataFrame.\n\n        Parameters\n        ----------\n        func : callable\n            Python function, returns a single value from a single value.\n\n        Returns\n        -------\n        DataFrame\n            Transformed DataFrame.\n\n        See also\n        --------\n        DataFrame.apply : Apply a function along input axis of DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n        >>> df\n               0      1\n        0  1.000  2.120\n        1  3.356  4.567\n\n        >>> df.applymap(lambda x: len(str(x)))\n           0  1\n        0  3  4\n        1  5  5\n\n        Note that a vectorized version of `func` often exists, which will\n        be much faster. You could square each number elementwise.\n\n        >>> df.applymap(lambda x: x**2)\n                   0          1\n        0   1.000000   4.494400\n        1  11.262736  20.857489\n\n        But it's better to avoid applymap in that case.\n\n        >>> df ** 2\n                   0          1\n        0   1.000000   4.494400\n        1  11.262736  20.857489\n        \"\"\"\n\n        def infer(x):\n            if x.empty:\n                return lib.map_infer(x, func)\n            return lib.map_infer(x.astype(object).values, func)\n        return self.apply(infer)\n\n    def append(self, other, ignore_index=False, verify_integrity=False,\n        sort=None):\n        \"\"\"\n        Append rows of `other` to the end of caller, returning a new object.\n\n        Columns in `other` that are not in the caller are added as new columns.\n\n        Parameters\n        ----------\n        other : DataFrame or Series/dict-like object, or list of these\n            The data to append.\n        ignore_index : boolean, default False\n            If True, do not use the index labels.\n        verify_integrity : boolean, default False\n            If True, raise ValueError on creating index with duplicates.\n        sort : boolean, default None\n            Sort columns if the columns of `self` and `other` are not aligned.\n            The default sorting is deprecated and will change to not-sorting\n            in a future version of pandas. Explicitly pass ``sort=True`` to\n            silence the warning and sort. Explicitly pass ``sort=False`` to\n            silence the warning and not sort.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        appended : DataFrame\n\n        Notes\n        -----\n        If a list of dict/series is passed and the keys are all contained in\n        the DataFrame's index, the order of the columns in the resulting\n        DataFrame will be unchanged.\n\n        Iteratively appending rows to a DataFrame can be more computationally\n        intensive than a single concatenate. A better solution is to append\n        those rows to a list and then concatenate the list with the original\n        DataFrame all at once.\n\n        See also\n        --------\n        pandas.concat : General function to concatenate DataFrame, Series\n            or Panel objects\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n        >>> df\n           A  B\n        0  1  2\n        1  3  4\n        >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n        >>> df.append(df2)\n           A  B\n        0  1  2\n        1  3  4\n        0  5  6\n        1  7  8\n\n        With `ignore_index` set to True:\n\n        >>> df.append(df2, ignore_index=True)\n           A  B\n        0  1  2\n        1  3  4\n        2  5  6\n        3  7  8\n\n        The following, while not recommended methods for generating DataFrames,\n        show two ways to generate a DataFrame from multiple data sources.\n\n        Less efficient:\n\n        >>> df = pd.DataFrame(columns=['A'])\n        >>> for i in range(5):\n        ...     df = df.append({'A': i}, ignore_index=True)\n        >>> df\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n\n        More efficient:\n\n        >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n        ...           ignore_index=True)\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n        \"\"\"\n        if isinstance(other, (Series, dict)):\n            if isinstance(other, dict):\n                other = Series(other)\n            if other.name is None and not ignore_index:\n                raise TypeError(\n                    'Can only append a Series if ignore_index=True or if the Series has a name'\n                    )\n            if other.name is None:\n                index = None\n            else:\n                index = Index([other.name], name=self.index.name)\n            idx_diff = other.index.difference(self.columns)\n            try:\n                combined_columns = self.columns.append(idx_diff)\n            except TypeError:\n                combined_columns = self.columns.astype(object).append(idx_diff)\n            other = other.reindex(combined_columns, copy=False)\n            other = DataFrame(other.values.reshape((1, len(other))), index=\n                index, columns=combined_columns)\n            other = other._convert(datetime=True, timedelta=True)\n            if not self.columns.equals(combined_columns):\n                self = self.reindex(columns=combined_columns)\n        elif isinstance(other, list) and not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.loc[:, self.columns]\n        from pandas.core.reshape.concat import concat\n        if isinstance(other, (list, tuple)):\n            to_concat = [self] + other\n        else:\n            to_concat = [self, other]\n        return concat(to_concat, ignore_index=ignore_index,\n            verify_integrity=verify_integrity, sort=sort)\n\n    def join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort\n        =False):\n        \"\"\"\n        Join columns with other DataFrame either on index or on a key\n        column. Efficiently Join multiple DataFrame objects by index at once by\n        passing a list.\n\n        Parameters\n        ----------\n        other : DataFrame, Series with name field set, or list of DataFrame\n            Index should be similar to one of the columns in this one. If a\n            Series is passed, its name attribute must be set, and that will be\n            used as the column name in the resulting joined DataFrame\n        on : name, tuple/list of names, or array-like\n            Column or index level name(s) in the caller to join on the index\n            in `other`, otherwise joins index-on-index. If multiple\n            values given, the `other` DataFrame must have a MultiIndex. Can\n            pass an array as the join key if it is not already contained in\n            the calling DataFrame. Like an Excel VLOOKUP operation\n        how : {'left', 'right', 'outer', 'inner'}, default: 'left'\n            How to handle the operation of the two objects.\n\n            * left: use calling frame's index (or column if on is specified)\n            * right: use other frame's index\n            * outer: form union of calling frame's index (or column if on is\n              specified) with other frame's index, and sort it\n              lexicographically\n            * inner: form intersection of calling frame's index (or column if\n              on is specified) with other frame's index, preserving the order\n              of the calling's one\n        lsuffix : string\n            Suffix to use from left frame's overlapping columns\n        rsuffix : string\n            Suffix to use from right frame's overlapping columns\n        sort : boolean, default False\n            Order result DataFrame lexicographically by the join key. If False,\n            the order of the join key depends on the join type (how keyword)\n\n        Notes\n        -----\n        on, lsuffix, and rsuffix options are not supported when passing a list\n        of DataFrame objects\n\n        Support for specifying index levels as the `on` parameter was added\n        in version 0.23.0\n\n        Examples\n        --------\n        >>> caller = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n        ...                        'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n        >>> caller\n            A key\n        0  A0  K0\n        1  A1  K1\n        2  A2  K2\n        3  A3  K3\n        4  A4  K4\n        5  A5  K5\n\n        >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n        ...                       'B': ['B0', 'B1', 'B2']})\n\n        >>> other\n            B key\n        0  B0  K0\n        1  B1  K1\n        2  B2  K2\n\n        Join DataFrames using their indexes.\n\n        >>> caller.join(other, lsuffix='_caller', rsuffix='_other')\n\n        >>>     A key_caller    B key_other\n            0  A0         K0   B0        K0\n            1  A1         K1   B1        K1\n            2  A2         K2   B2        K2\n            3  A3         K3  NaN       NaN\n            4  A4         K4  NaN       NaN\n            5  A5         K5  NaN       NaN\n\n\n        If we want to join using the key columns, we need to set key to be\n        the index in both caller and other. The joined DataFrame will have\n        key as its index.\n\n        >>> caller.set_index('key').join(other.set_index('key'))\n\n        >>>      A    B\n            key\n            K0   A0   B0\n            K1   A1   B1\n            K2   A2   B2\n            K3   A3  NaN\n            K4   A4  NaN\n            K5   A5  NaN\n\n        Another option to join using the key columns is to use the on\n        parameter. DataFrame.join always uses other's index but we can use any\n        column in the caller. This method preserves the original caller's\n        index in the result.\n\n        >>> caller.join(other.set_index('key'), on='key')\n\n        >>>     A key    B\n            0  A0  K0   B0\n            1  A1  K1   B1\n            2  A2  K2   B2\n            3  A3  K3  NaN\n            4  A4  K4  NaN\n            5  A5  K5  NaN\n\n\n        See also\n        --------\n        DataFrame.merge : For column(s)-on-columns(s) operations\n\n        Returns\n        -------\n        joined : DataFrame\n        \"\"\"\n        return self._join_compat(other, on=on, how=how, lsuffix=lsuffix,\n            rsuffix=rsuffix, sort=sort)\n\n    def _join_compat(self, other, on=None, how='left', lsuffix='', rsuffix=\n        '', sort=False):\n        from pandas.core.reshape.merge import merge\n        from pandas.core.reshape.concat import concat\n        if isinstance(other, Series):\n            if other.name is None:\n                raise ValueError('Other Series must have a name')\n            other = DataFrame({other.name: other})\n        if isinstance(other, DataFrame):\n            return merge(self, other, left_on=on, how=how, left_index=on is\n                None, right_index=True, suffixes=(lsuffix, rsuffix), sort=sort)\n        else:\n            if on is not None:\n                raise ValueError(\n                    'Joining multiple DataFrames only supported for joining on index'\n                    )\n            frames = [self] + list(other)\n            can_concat = all(df.index.is_unique for df in frames)\n            if can_concat:\n                if how == 'left':\n                    how = 'outer'\n                    join_axes = [self.index]\n                else:\n                    join_axes = None\n                return concat(frames, axis=1, join=how, join_axes=join_axes,\n                    verify_integrity=True)\n            joined = frames[0]\n            for frame in frames[1:]:\n                joined = merge(joined, frame, how=how, left_index=True,\n                    right_index=True)\n            return joined\n\n    @Substitution('')\n    @Appender(_merge_doc, indents=2)\n    def merge(self, right, how='inner', on=None, left_on=None, right_on=\n        None, left_index=False, right_index=False, sort=False, suffixes=(\n        '_x', '_y'), copy=True, indicator=False, validate=None):\n        from pandas.core.reshape.merge import merge\n        return merge(self, right, how=how, on=on, left_on=left_on, right_on\n            =right_on, left_index=left_index, right_index=right_index, sort\n            =sort, suffixes=suffixes, copy=copy, indicator=indicator,\n            validate=validate)\n\n    def round(self, decimals=0, *args, **kwargs):\n        \"\"\"\n        Round a DataFrame to a variable number of decimal places.\n\n        Parameters\n        ----------\n        decimals : int, dict, Series\n            Number of decimal places to round each column to. If an int is\n            given, round each column to the same number of places.\n            Otherwise dict and Series round to variable numbers of places.\n            Column names should be in the keys if `decimals` is a\n            dict-like, or in the index if `decimals` is a Series. Any\n            columns not included in `decimals` will be left as is. Elements\n            of `decimals` which are not columns of the input will be\n            ignored.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.random.random([3, 3]),\n        ...     columns=['A', 'B', 'C'], index=['first', 'second', 'third'])\n        >>> df\n                       A         B         C\n        first   0.028208  0.992815  0.173891\n        second  0.038683  0.645646  0.577595\n        third   0.877076  0.149370  0.491027\n        >>> df.round(2)\n                   A     B     C\n        first   0.03  0.99  0.17\n        second  0.04  0.65  0.58\n        third   0.88  0.15  0.49\n        >>> df.round({'A': 1, 'C': 2})\n                  A         B     C\n        first   0.0  0.992815  0.17\n        second  0.0  0.645646  0.58\n        third   0.9  0.149370  0.49\n        >>> decimals = pd.Series([1, 0, 2], index=['A', 'B', 'C'])\n        >>> df.round(decimals)\n                  A  B     C\n        first   0.0  1  0.17\n        second  0.0  1  0.58\n        third   0.9  0  0.49\n\n        Returns\n        -------\n        DataFrame object\n\n        See Also\n        --------\n        numpy.around\n        Series.round\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n\n        def _dict_round(df, decimals):\n            for col, vals in df.iteritems():\n                try:\n                    yield _series_round(vals, decimals[col])\n                except KeyError:\n                    yield vals\n\n        def _series_round(s, decimals):\n            if is_integer_dtype(s) or is_float_dtype(s):\n                return s.round(decimals)\n            return s\n        nv.validate_round(args, kwargs)\n        if isinstance(decimals, (dict, Series)):\n            if isinstance(decimals, Series):\n                if not decimals.index.is_unique:\n                    raise ValueError('Index of decimals must be unique')\n            new_cols = [col for col in _dict_round(self, decimals)]\n        elif is_integer(decimals):\n            new_cols = [_series_round(v, decimals) for _, v in self.iteritems()\n                ]\n        else:\n            raise TypeError(\n                'decimals must be an integer, a dict-like or a Series')\n        if len(new_cols) > 0:\n            return self._constructor(concat(new_cols, axis=1), index=self.\n                index, columns=self.columns)\n        else:\n            return self\n\n    def corr(self, method='pearson', min_periods=1):\n        \"\"\"\n        Compute pairwise correlation of columns, excluding NA/null values\n\n        Parameters\n        ----------\n        method : {'pearson', 'kendall', 'spearman'}\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result. Currently only available for pearson\n            and spearman correlation\n\n        Returns\n        -------\n        y : DataFrame\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.values\n        if method == 'pearson':\n            correl = libalgos.nancorr(ensure_float64(mat), minp=min_periods)\n        elif method == 'spearman':\n            correl = libalgos.nancorr_spearman(ensure_float64(mat), minp=\n                min_periods)\n        else:\n            if min_periods is None:\n                min_periods = 1\n            mat = ensure_float64(mat).T\n            corrf = nanops.get_corr_func(method)\n            K = len(cols)\n            correl = np.empty((K, K), dtype=float)\n            mask = np.isfinite(mat)\n            for i, ac in enumerate(mat):\n                for j, bc in enumerate(mat):\n                    if i > j:\n                        continue\n                    valid = mask[i] & mask[j]\n                    if valid.sum() < min_periods:\n                        c = np.nan\n                    elif i == j:\n                        c = 1.0\n                    elif not valid.all():\n                        c = corrf(ac[valid], bc[valid])\n                    else:\n                        c = corrf(ac, bc)\n                    correl[i, j] = c\n                    correl[j, i] = c\n        return self._constructor(correl, index=idx, columns=cols)\n\n    def cov(self, min_periods=None):\n        \"\"\"\n        Compute pairwise covariance of columns, excluding NA/null values.\n\n        Compute the pairwise covariance among the series of a DataFrame.\n        The returned data frame is the `covariance matrix\n        <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\n        of the DataFrame.\n\n        Both NA and null values are automatically excluded from the\n        calculation. (See the note below about bias from missing values.)\n        A threshold can be set for the minimum number of\n        observations for each value created. Comparisons with observations\n        below this threshold will be returned as ``NaN``.\n\n        This method is generally used for the analysis of time series data to\n        understand the relationship between different measures\n        across time.\n\n        Parameters\n        ----------\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result.\n\n        Returns\n        -------\n        DataFrame\n            The covariance matrix of the series of the DataFrame.\n\n        See Also\n        --------\n        pandas.Series.cov : compute covariance with another Series\n        pandas.core.window.EWM.cov: exponential weighted sample covariance\n        pandas.core.window.Expanding.cov : expanding sample covariance\n        pandas.core.window.Rolling.cov : rolling sample covariance\n\n        Notes\n        -----\n        Returns the covariance matrix of the DataFrame's time series.\n        The covariance is normalized by N-1.\n\n        For DataFrames that have Series that are missing data (assuming that\n        data is `missing at random\n        <https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\n        the returned covariance matrix will be an unbiased estimate\n        of the variance and covariance between the member Series.\n\n        However, for many applications this estimate may not be acceptable\n        because the estimate covariance matrix is not guaranteed to be positive\n        semi-definite. This could lead to estimate correlations having\n        absolute values which are greater than one, and/or a non-invertible\n        covariance matrix. See `Estimation of covariance matrices\n        <http://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\n        matrices>`__ for more details.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n        ...                   columns=['dogs', 'cats'])\n        >>> df.cov()\n                  dogs      cats\n        dogs  0.666667 -1.000000\n        cats -1.000000  1.666667\n\n        >>> np.random.seed(42)\n        >>> df = pd.DataFrame(np.random.randn(1000, 5),\n        ...                   columns=['a', 'b', 'c', 'd', 'e'])\n        >>> df.cov()\n                  a         b         c         d         e\n        a  0.998438 -0.020161  0.059277 -0.008943  0.014144\n        b -0.020161  1.059352 -0.008543 -0.024738  0.009826\n        c  0.059277 -0.008543  1.010670 -0.001486 -0.000271\n        d -0.008943 -0.024738 -0.001486  0.921297 -0.013692\n        e  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n        **Minimum number of periods**\n\n        This method also supports an optional ``min_periods`` keyword\n        that specifies the required minimum number of non-NA observations for\n        each column pair in order to have a valid result:\n\n        >>> np.random.seed(42)\n        >>> df = pd.DataFrame(np.random.randn(20, 3),\n        ...                   columns=['a', 'b', 'c'])\n        >>> df.loc[df.index[:5], 'a'] = np.nan\n        >>> df.loc[df.index[5:10], 'b'] = np.nan\n        >>> df.cov(min_periods=12)\n                  a         b         c\n        a  0.316741       NaN -0.150812\n        b       NaN  1.248003  0.191417\n        c -0.150812  0.191417  0.895202\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.values\n        if notna(mat).all():\n            if min_periods is not None and min_periods > len(mat):\n                baseCov = np.empty((mat.shape[1], mat.shape[1]))\n                baseCov.fill(np.nan)\n            else:\n                baseCov = np.cov(mat.T)\n            baseCov = baseCov.reshape((len(cols), len(cols)))\n        else:\n            baseCov = libalgos.nancorr(ensure_float64(mat), cov=True, minp=\n                min_periods)\n        return self._constructor(baseCov, index=idx, columns=cols)\n\n    def corrwith(self, other, axis=0, drop=False):\n        \"\"\"\n        Compute pairwise correlation between rows or columns of two DataFrame\n        objects.\n\n        Parameters\n        ----------\n        other : DataFrame, Series\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' to compute column-wise, 1 or 'columns' for row-wise\n        drop : boolean, default False\n            Drop missing indices from result, default returns union of all\n\n        Returns\n        -------\n        correls : Series\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        this = self._get_numeric_data()\n        if isinstance(other, Series):\n            return this.apply(other.corr, axis=axis)\n        other = other._get_numeric_data()\n        left, right = this.align(other, join='inner', copy=False)\n        left = left + right * 0\n        right = right + left * 0\n        if axis == 1:\n            left = left.T\n            right = right.T\n        ldem = left - left.mean()\n        rdem = right - right.mean()\n        num = (ldem * rdem).sum()\n        dom = (left.count() - 1) * left.std() * right.std()\n        correl = num / dom\n        if not drop:\n            raxis = 1 if axis == 0 else 0\n            result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n            correl = correl.reindex(result_index)\n        return correl\n\n    def count(self, axis=0, level=None, numeric_only=False):\n        \"\"\"\n        Count non-NA cells for each column or row.\n\n        The values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\n        on `pandas.options.mode.use_inf_as_na`) are considered NA.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            If 0 or 'index' counts are generated for each column.\n            If 1 or 'columns' counts are generated for each **row**.\n        level : int or str, optional\n            If the axis is a `MultiIndex` (hierarchical), count along a\n            particular `level`, collapsing into a `DataFrame`.\n            A `str` specifies the level name.\n        numeric_only : boolean, default False\n            Include only `float`, `int` or `boolean` data.\n\n        Returns\n        -------\n        Series or DataFrame\n            For each column/row the number of non-NA/null entries.\n            If `level` is specified returns a `DataFrame`.\n\n        See Also\n        --------\n        Series.count: number of non-NA elements in a Series\n        DataFrame.shape: number of DataFrame rows and columns (including NA\n            elements)\n        DataFrame.isna: boolean same-sized DataFrame showing places of NA\n            elements\n\n        Examples\n        --------\n        Constructing DataFrame from a dictionary:\n\n        >>> df = pd.DataFrame({\"Person\":\n        ...                    [\"John\", \"Myla\", None, \"John\", \"Myla\"],\n        ...                    \"Age\": [24., np.nan, 21., 33, 26],\n        ...                    \"Single\": [False, True, True, True, False]})\n        >>> df\n           Person   Age  Single\n        0    John  24.0   False\n        1    Myla   NaN    True\n        2    None  21.0    True\n        3    John  33.0    True\n        4    Myla  26.0   False\n\n        Notice the uncounted NA values:\n\n        >>> df.count()\n        Person    4\n        Age       4\n        Single    5\n        dtype: int64\n\n        Counts for each **row**:\n\n        >>> df.count(axis='columns')\n        0    3\n        1    2\n        2    2\n        3    3\n        4    3\n        dtype: int64\n\n        Counts for one level of a `MultiIndex`:\n\n        >>> df.set_index([\"Person\", \"Single\"]).count(level=\"Person\")\n                Age\n        Person\n        John      2\n        Myla      1\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if level is not None:\n            return self._count_level(level, axis=axis, numeric_only=\n                numeric_only)\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n        if len(frame._get_axis(axis)) == 0:\n            result = Series(0, index=frame._get_agg_axis(axis))\n        elif frame._is_mixed_type or frame._data.any_extension_types:\n            result = notna(frame).sum(axis=axis)\n        else:\n            series_counts = notna(frame).sum(axis=axis)\n            counts = series_counts.values\n            result = Series(counts, index=frame._get_agg_axis(axis))\n        return result.astype('int64')\n\n    def _count_level(self, level, axis=0, numeric_only=False):\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n        count_axis = frame._get_axis(axis)\n        agg_axis = frame._get_agg_axis(axis)\n        if not isinstance(count_axis, MultiIndex):\n            raise TypeError('Can only count levels on hierarchical {ax}.'.\n                format(ax=self._get_axis_name(axis)))\n        if frame._is_mixed_type:\n            mask = notna(frame).values\n        else:\n            mask = notna(frame.values)\n        if axis == 1:\n            mask = mask.T\n        if isinstance(level, compat.string_types):\n            level = count_axis._get_level_number(level)\n        level_index = count_axis.levels[level]\n        labels = ensure_int64(count_axis.labels[level])\n        counts = lib.count_level_2d(mask, labels, len(level_index), axis=0)\n        result = DataFrame(counts, index=level_index, columns=agg_axis)\n        if axis == 1:\n            return result.T\n        else:\n            return result\n\n    def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None,\n        filter_type=None, **kwds):\n        if axis is None and filter_type == 'bool':\n            labels = None\n            constructor = None\n        else:\n            axis = self._get_axis_number(axis)\n            labels = self._get_agg_axis(axis)\n            constructor = self._constructor\n\n        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)\n        if axis == 1 and self._is_mixed_type and self._is_datelike_mixed_type:\n            numeric_only = True\n        if numeric_only is None:\n            try:\n                values = self.values\n                result = f(values)\n                if filter_type == 'bool' and is_object_dtype(values\n                    ) and axis is None:\n                    result = np.bool_(result)\n            except Exception as e:\n                if filter_type is None and axis == 0:\n                    try:\n                        from pandas.core.apply import frame_apply\n                        opa = frame_apply(self, func=f, result_type=\n                            'expand', ignore_failures=True)\n                        result = opa.get_result()\n                        if result.ndim == self.ndim:\n                            result = result.iloc[0]\n                        return result\n                    except Exception:\n                        pass\n                if filter_type is None or filter_type == 'numeric':\n                    data = self._get_numeric_data()\n                elif filter_type == 'bool':\n                    data = self._get_bool_data()\n                else:\n                    e = NotImplementedError(\n                        'Handling exception with filter_type {f} notimplemented.'\n                        .format(f=filter_type))\n                    raise_with_traceback(e)\n                with np.errstate(all='ignore'):\n                    result = f(data.values)\n                labels = data._get_agg_axis(axis)\n        else:\n            if numeric_only:\n                if filter_type is None or filter_type == 'numeric':\n                    data = self._get_numeric_data()\n                elif filter_type == 'bool':\n                    data = self._get_bool_data()\n                else:\n                    msg = (\n                        'Generating numeric_only data with filter_type {f}not supported.'\n                        .format(f=filter_type))\n                    raise NotImplementedError(msg)\n                values = data.values\n                labels = data._get_agg_axis(axis)\n            else:\n                values = self.values\n            result = f(values)\n        if hasattr(result, 'dtype') and is_object_dtype(result.dtype):\n            try:\n                if filter_type is None or filter_type == 'numeric':\n                    result = result.astype(np.float64)\n                elif filter_type == 'bool' and notna(result).all():\n                    result = result.astype(np.bool_)\n            except (ValueError, TypeError):\n                if axis == 0:\n                    result = coerce_to_dtypes(result, self.dtypes)\n        if constructor is not None:\n            result = Series(result, index=labels)\n        return result\n\n    def nunique(self, axis=0, dropna=True):\n        \"\"\"\n        Return Series with number of distinct observations over requested\n        axis.\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n        dropna : boolean, default True\n            Don't include NaN in the counts.\n\n        Returns\n        -------\n        nunique : Series\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n        >>> df.nunique()\n        A    3\n        B    1\n\n        >>> df.nunique(axis=1)\n        0    1\n        1    2\n        2    2\n        \"\"\"\n        return self.apply(Series.nunique, axis=axis, dropna=dropna)\n\n    def idxmin(self, axis=0, skipna=True):\n        \"\"\"\n        Return index of first occurrence of minimum over requested axis.\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        skipna : boolean, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        Returns\n        -------\n        idxmin : Series\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmin``.\n\n        See Also\n        --------\n        Series.idxmin\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmin(self.values, axis=axis, skipna=skipna)\n        index = self._get_axis(axis)\n        result = [(index[i] if i >= 0 else np.nan) for i in indices]\n        return Series(result, index=self._get_agg_axis(axis))\n\n    def idxmax(self, axis=0, skipna=True):\n        \"\"\"\n        Return index of first occurrence of maximum over requested axis.\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        skipna : boolean, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        Returns\n        -------\n        idxmax : Series\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmax``.\n\n        See Also\n        --------\n        Series.idxmax\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmax(self.values, axis=axis, skipna=skipna)\n        index = self._get_axis(axis)\n        result = [(index[i] if i >= 0 else np.nan) for i in indices]\n        return Series(result, index=self._get_agg_axis(axis))\n\n    def _get_agg_axis(self, axis_num):\n        \"\"\" let's be explicit about this \"\"\"\n        if axis_num == 0:\n            return self.columns\n        elif axis_num == 1:\n            return self.index\n        else:\n            raise ValueError('Axis must be 0 or 1 (got %r)' % axis_num)\n\n    def mode(self, axis=0, numeric_only=False, dropna=True):\n        \"\"\"\n        Gets the mode(s) of each element along the axis selected. Adds a row\n        for each mode per label, fills in gaps with nan.\n\n        Note that there could be multiple values returned for the selected\n        axis (when more than one item share the maximum frequency), which is\n        the reason why a dataframe is returned. If you want to impute missing\n        values with the mode in a dataframe ``df``, you can just do this:\n        ``df.fillna(df.mode().iloc[0])``\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            * 0 or 'index' : get mode of each column\n            * 1 or 'columns' : get mode of each row\n        numeric_only : boolean, default False\n            if True, only apply to numeric columns\n        dropna : boolean, default True\n            Don't consider counts of NaN/NaT.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        modes : DataFrame (sorted)\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 1, 2, 1, 2, 3]})\n        >>> df.mode()\n           A\n        0  1\n        1  2\n        \"\"\"\n        data = self if not numeric_only else self._get_numeric_data()\n\n        def f(s):\n            return s.mode(dropna=dropna)\n        return data.apply(f, axis=axis)\n\n    def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear'\n        ):\n        \"\"\"\n        Return values at the given quantile over requested axis, a la\n        numpy.percentile.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            0 <= q <= 1, the quantile(s) to compute\n        axis : {0, 1, 'index', 'columns'} (default 0)\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        numeric_only : boolean, default True\n            If False, the quantile of datetime and timedelta data will be\n            computed as well\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            .. versionadded:: 0.18.0\n\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n            * linear: `i + (j - i) * fraction`, where `fraction` is the\n              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2.\n\n        Returns\n        -------\n        quantiles : Series or DataFrame\n\n            - If ``q`` is an array, a DataFrame will be returned where the\n              index is ``q``, the columns are the columns of self, and the\n              values are the quantiles.\n            - If ``q`` is a float, a Series will be returned where the\n              index is the columns of self and the values are the quantiles.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n                              columns=['a', 'b'])\n        >>> df.quantile(.1)\n        a    1.3\n        b    3.7\n        dtype: float64\n        >>> df.quantile([.1, .5])\n               a     b\n        0.1  1.3   3.7\n        0.5  2.5  55.0\n\n        Specifying `numeric_only=False` will also compute the quantile of\n        datetime and timedelta data.\n\n        >>> df = pd.DataFrame({'A': [1, 2],\n                               'B': [pd.Timestamp('2010'),\n                                     pd.Timestamp('2011')],\n                               'C': [pd.Timedelta('1 days'),\n                                     pd.Timedelta('2 days')]})\n        >>> df.quantile(0.5, numeric_only=False)\n        A                    1.5\n        B    2010-07-02 12:00:00\n        C        1 days 12:00:00\n        Name: 0.5, dtype: object\n\n        See Also\n        --------\n        pandas.core.window.Rolling.quantile\n        \"\"\"\n        self._check_percentile(q)\n        data = self._get_numeric_data() if numeric_only else self\n        axis = self._get_axis_number(axis)\n        is_transposed = axis == 1\n        if is_transposed:\n            data = data.T\n        result = data._data.quantile(qs=q, axis=1, interpolation=\n            interpolation, transposed=is_transposed)\n        if result.ndim == 2:\n            result = self._constructor(result)\n        else:\n            result = self._constructor_sliced(result, name=q)\n        if is_transposed:\n            result = result.T\n        return result\n\n    def to_timestamp(self, freq=None, how='start', axis=0, copy=True):\n        \"\"\"\n        Cast to DatetimeIndex of timestamps, at *beginning* of period\n\n        Parameters\n        ----------\n        freq : string, default frequency of PeriodIndex\n            Desired frequency\n        how : {'s', 'e', 'start', 'end'}\n            Convention for converting period to timestamp; start of period\n            vs. end\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default)\n        copy : boolean, default True\n            If false then underlying input data is not copied\n\n        Returns\n        -------\n        df : DataFrame with DatetimeIndex\n        \"\"\"\n        new_data = self._data\n        if copy:\n            new_data = new_data.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            new_data.set_axis(1, self.index.to_timestamp(freq=freq, how=how))\n        elif axis == 1:\n            new_data.set_axis(0, self.columns.to_timestamp(freq=freq, how=how))\n        else:\n            raise AssertionError('Axis must be 0 or 1. Got {ax!s}'.format(\n                ax=axis))\n        return self._constructor(new_data)\n\n    def to_period(self, freq=None, axis=0, copy=True):\n        \"\"\"\n        Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n        frequency (inferred from index if not passed)\n\n        Parameters\n        ----------\n        freq : string, default\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default)\n        copy : boolean, default True\n            If False then underlying input data is not copied\n\n        Returns\n        -------\n        ts : TimeSeries with PeriodIndex\n        \"\"\"\n        new_data = self._data\n        if copy:\n            new_data = new_data.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            new_data.set_axis(1, self.index.to_period(freq=freq))\n        elif axis == 1:\n            new_data.set_axis(0, self.columns.to_period(freq=freq))\n        else:\n            raise AssertionError('Axis must be 0 or 1. Got {ax!s}'.format(\n                ax=axis))\n        return self._constructor(new_data)\n\n    def isin(self, values):\n        \"\"\"\n        Return boolean DataFrame showing whether each element in the\n        DataFrame is contained in values.\n\n        Parameters\n        ----------\n        values : iterable, Series, DataFrame or dictionary\n            The result will only be true at a location if all the\n            labels match. If `values` is a Series, that's the index. If\n            `values` is a dictionary, the keys must be the column names,\n            which must match. If `values` is a DataFrame,\n            then both the index and column labels must match.\n\n        Returns\n        -------\n\n        DataFrame of booleans\n\n        Examples\n        --------\n        When ``values`` is a list:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})\n        >>> df.isin([1, 3, 12, 'a'])\n               A      B\n        0   True   True\n        1  False  False\n        2   True  False\n\n        When ``values`` is a dict:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 4, 7]})\n        >>> df.isin({'A': [1, 3], 'B': [4, 7, 12]})\n               A      B\n        0   True  False  # Note that B didn't match the 1 here.\n        1  False   True\n        2   True   True\n\n        When ``values`` is a Series or DataFrame:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})\n        >>> df2 = pd.DataFrame({'A': [1, 3, 3, 2], 'B': ['e', 'f', 'f', 'e']})\n        >>> df.isin(df2)\n               A      B\n        0   True  False\n        1  False  False  # Column A in `df2` has a 3, but not at index 1.\n        2   True   True\n        \"\"\"\n        if isinstance(values, dict):\n            from pandas.core.reshape.concat import concat\n            values = collections.defaultdict(list, values)\n            return concat((self.iloc[:, [i]].isin(values[col]) for i, col in\n                enumerate(self.columns)), axis=1)\n        elif isinstance(values, Series):\n            if not values.index.is_unique:\n                raise ValueError('cannot compute isin with a duplicate axis.')\n            return self.eq(values.reindex_like(self), axis='index')\n        elif isinstance(values, DataFrame):\n            if not (values.columns.is_unique and values.index.is_unique):\n                raise ValueError('cannot compute isin with a duplicate axis.')\n            return self.eq(values.reindex_like(self))\n        else:\n            if not is_list_like(values):\n                raise TypeError(\n                    'only list-like or dict-like objects are allowed to be passed to DataFrame.isin(), you passed a {0!r}'\n                    .format(type(values).__name__))\n            return DataFrame(algorithms.isin(self.values.ravel(), values).\n                reshape(self.shape), self.index, self.columns)\n    plot = CachedAccessor('plot', gfx.FramePlotMethods)\n    hist = gfx.hist_frame\n    boxplot = gfx.boxplot_frame\n",
                        "belong_class_name": "DataFrame",
                        "belong_class_init": "def __init__(self, data=None, index=None, columns=None, dtype=None, copy=False\n    ):\n    if data is None:\n        data = {}\n    if dtype is not None:\n        dtype = self._validate_dtype(dtype)\n    if isinstance(data, DataFrame):\n        data = data._data\n    if isinstance(data, BlockManager):\n        mgr = self._init_mgr(data, axes=dict(index=index, columns=columns),\n            dtype=dtype, copy=copy)\n    elif isinstance(data, dict):\n        mgr = self._init_dict(data, index, columns, dtype=dtype)\n    elif isinstance(data, ma.MaskedArray):\n        import numpy.ma.mrecords as mrecords\n        if isinstance(data, mrecords.MaskedRecords):\n            mgr = _masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n        else:\n            mask = ma.getmaskarray(data)\n            if mask.any():\n                data, fill_value = maybe_upcast(data, copy=True)\n                data[mask] = fill_value\n            else:\n                data = data.copy()\n            mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                copy=copy)\n    elif isinstance(data, (np.ndarray, Series, Index)):\n        if data.dtype.names:\n            data_columns = list(data.dtype.names)\n            data = {k: data[k] for k in data_columns}\n            if columns is None:\n                columns = data_columns\n            mgr = self._init_dict(data, index, columns, dtype=dtype)\n        elif getattr(data, 'name', None) is not None:\n            mgr = self._init_dict({data.name: data}, index, columns, dtype=\n                dtype)\n        else:\n            mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                copy=copy)\n    elif isinstance(data, collections.Iterable) and not isinstance(data,\n        string_and_binary_types):\n        if not isinstance(data, collections.Sequence):\n            data = list(data)\n        if len(data) > 0:\n            if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                if is_named_tuple(data[0]) and columns is None:\n                    columns = data[0]._fields\n                arrays, columns = _to_arrays(data, columns, dtype=dtype)\n                columns = ensure_index(columns)\n                if index is None:\n                    if isinstance(data[0], Series):\n                        index = _get_names_from_index(data)\n                    elif isinstance(data[0], Categorical):\n                        index = ibase.default_index(len(data[0]))\n                    else:\n                        index = ibase.default_index(len(data))\n                mgr = _arrays_to_mgr(arrays, columns, index, columns, dtype\n                    =dtype)\n            else:\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                    copy=copy)\n        else:\n            mgr = self._init_dict({}, index, columns, dtype=dtype)\n    else:\n        try:\n            arr = np.array(data, dtype=dtype, copy=copy)\n        except (ValueError, TypeError) as e:\n            exc = TypeError(\n                'DataFrame constructor called with incompatible data and dtype: {e}'\n                .format(e=e))\n            raise_with_traceback(exc)\n        if arr.ndim == 0 and index is not None and columns is not None:\n            values = cast_scalar_to_array((len(index), len(columns)), data,\n                dtype=dtype)\n            mgr = self._init_ndarray(values, index, columns, dtype=values.\n                dtype, copy=False)\n        else:\n            raise ValueError('DataFrame constructor not properly called!')\n    NDFrame.__init__(self, mgr, fastpath=True)\n",
                        "called_function_name": "ensure_index_from_sequences",
                        "called_function_content": "def set_index(self, keys, drop=True, append=False, inplace=False,\n    verify_integrity=False):\n    \"\"\"\n        Set the DataFrame index (row labels) using one or more existing\n        columns. By default yields a new object.\n\n        Parameters\n        ----------\n        keys : column label or list of column labels / arrays\n        drop : boolean, default True\n            Delete columns to be used as the new index\n        append : boolean, default False\n            Whether to append columns to existing index\n        inplace : boolean, default False\n            Modify the DataFrame in place (do not create a new object)\n        verify_integrity : boolean, default False\n            Check the new index for duplicates. Otherwise defer the check until\n            necessary. Setting to False will improve the performance of this\n            method\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n        ...                    'year': [2012, 2014, 2013, 2014],\n        ...                    'sale':[55, 40, 84, 31]})\n           month  sale  year\n        0  1      55    2012\n        1  4      40    2014\n        2  7      84    2013\n        3  10     31    2014\n\n        Set the index to become the 'month' column:\n\n        >>> df.set_index('month')\n               sale  year\n        month\n        1      55    2012\n        4      40    2014\n        7      84    2013\n        10     31    2014\n\n        Create a multi-index using columns 'year' and 'month':\n\n        >>> df.set_index(['year', 'month'])\n                    sale\n        year  month\n        2012  1     55\n        2014  4     40\n        2013  7     84\n        2014  10    31\n\n        Create a multi-index using a set of values and a column:\n\n        >>> df.set_index([[1, 2, 3, 4], 'year'])\n                 month  sale\n           year\n        1  2012  1      55\n        2  2014  4      40\n        3  2013  7      84\n        4  2014  10     31\n\n        Returns\n        -------\n        dataframe : DataFrame\n        \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not isinstance(keys, list):\n        keys = [keys]\n    if inplace:\n        frame = self\n    else:\n        frame = self.copy()\n    arrays = []\n    names = []\n    if append:\n        names = [x for x in self.index.names]\n        if isinstance(self.index, MultiIndex):\n            for i in range(self.index.nlevels):\n                arrays.append(self.index._get_level_values(i))\n        else:\n            arrays.append(self.index)\n    to_remove = []\n    for col in keys:\n        if isinstance(col, MultiIndex):\n            for n in range(col.nlevels - 1):\n                arrays.append(col._get_level_values(n))\n            level = col._get_level_values(col.nlevels - 1)\n            names.extend(col.names)\n        elif isinstance(col, Series):\n            level = col._values\n            names.append(col.name)\n        elif isinstance(col, Index):\n            level = col\n            names.append(col.name)\n        elif isinstance(col, (list, np.ndarray, Index)):\n            level = col\n            names.append(None)\n        else:\n            level = frame[col]._values\n            names.append(col)\n            if drop:\n                to_remove.append(col)\n        arrays.append(level)\n    index = ensure_index_from_sequences(arrays, names)\n",
                        "called_arguments": "(arrays, names)",
                        "called_function_parameter": "(sequences, names=None)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "ensure_index_from_sequences",
                        "function_content": "def ensure_index_from_sequences(sequences, names=None):\n    \"\"\"Construct an index from sequences of data.\n\n    A single sequence returns an Index. Many sequences returns a\n    MultiIndex.\n\n    Parameters\n    ----------\n    sequences : sequence of sequences\n    names : sequence of str\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index_from_sequences([[1, 2, 3]], names=['name'])\n    Int64Index([1, 2, 3], dtype='int64', name='name')\n\n    >>> ensure_index_from_sequences([['a', 'a'], ['a', 'b']],\n                                    names=['L1', 'L2'])\n    MultiIndex(levels=[['a'], ['a', 'b']],\n               labels=[[0, 0], [0, 1]],\n               names=['L1', 'L2'])\n\n    See Also\n    --------\n    ensure_index\n    \"\"\"\n    from .multi import MultiIndex\n    if len(sequences) == 1:\n        if names is not None:\n            names = names[0]\n        return Index(sequences[0], name=names)\n    else:\n        return MultiIndex.from_arrays(sequences, names=names)\n",
                        "function_parameter": "(sequences, names=None)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "from_arrays",
                        "called_function_content": "def ensure_index_from_sequences(sequences, names=None):\n    \"\"\"Construct an index from sequences of data.\n\n    A single sequence returns an Index. Many sequences returns a\n    MultiIndex.\n\n    Parameters\n    ----------\n    sequences : sequence of sequences\n    names : sequence of str\n\n    Returns\n    -------\n    index : Index or MultiIndex\n\n    Examples\n    --------\n    >>> ensure_index_from_sequences([[1, 2, 3]], names=['name'])\n    Int64Index([1, 2, 3], dtype='int64', name='name')\n\n    >>> ensure_index_from_sequences([['a', 'a'], ['a', 'b']],\n                                    names=['L1', 'L2'])\n    MultiIndex(levels=[['a'], ['a', 'b']],\n               labels=[[0, 0], [0, 1]],\n               names=['L1', 'L2'])\n\n    See Also\n    --------\n    ensure_index\n    \"\"\"\n    from .multi import MultiIndex\n    if len(sequences) == 1:\n        if names is not None:\n            names = names[0]\n        return Index(sequences[0], name=names)\n    else:\n        return MultiIndex.from_arrays(sequences, names=names)\n",
                        "called_arguments": "(sequences, names=names)",
                        "called_function_parameter": "(cls, arrays, sortorder=None, names=None)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "from_arrays",
                        "function_content": "@classmethod\ndef from_arrays(cls, arrays, sortorder=None, names=None):\n    \"\"\"\n        Convert arrays to MultiIndex\n\n        Parameters\n        ----------\n        arrays : list / sequence of array-likes\n            Each array-like gives one level's value for each data point.\n            len(arrays) is the number of levels.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level)\n\n        Returns\n        -------\n        index : MultiIndex\n\n        Examples\n        --------\n        >>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n        >>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\n\n        See Also\n        --------\n        MultiIndex.from_tuples : Convert list of tuples to MultiIndex\n        MultiIndex.from_product : Make a MultiIndex from cartesian product\n                                  of iterables\n        \"\"\"\n    if not is_list_like(arrays):\n        raise TypeError('Input must be a list / sequence of array-likes.')\n    elif is_iterator(arrays):\n        arrays = list(arrays)\n    for i in range(1, len(arrays)):\n        if len(arrays[i]) != len(arrays[i - 1]):\n            raise ValueError('all arrays must be same length')\n    from pandas.core.arrays.categorical import _factorize_from_iterables\n    labels, levels = _factorize_from_iterables(arrays)\n    if names is None:\n        names = [getattr(arr, 'name', None) for arr in arrays]\n    return MultiIndex(levels=levels, labels=labels, sortorder=sortorder,\n        names=names, verify_integrity=False)\n",
                        "function_parameter": "(cls, arrays, sortorder=None, names=None)",
                        "belong_class_content": "class MultiIndex(Index):\n    \"\"\"\n    A multi-level, or hierarchical, index object for pandas objects\n\n    Parameters\n    ----------\n    levels : sequence of arrays\n        The unique labels for each level\n    labels : sequence of arrays\n        Integers for each level designating which label at each location\n    sortorder : optional int\n        Level of sortedness (must be lexicographically sorted by that\n        level)\n    names : optional sequence of objects\n        Names for each of the index levels. (name is accepted for compat)\n    copy : boolean, default False\n        Copy the meta-data\n    verify_integrity : boolean, default True\n        Check that the levels/labels are consistent and valid\n\n    Examples\n    ---------\n    A new ``MultiIndex`` is typically constructed using one of the helper\n    methods :meth:`MultiIndex.from_arrays`, :meth:`MultiIndex.from_product`\n    and :meth:`MultiIndex.from_tuples`. For example (using ``.from_arrays``):\n\n    >>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n    >>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\n    MultiIndex(levels=[[1, 2], ['blue', 'red']],\n           labels=[[0, 0, 1, 1], [1, 0, 1, 0]],\n           names=['number', 'color'])\n\n    See further examples for how to construct a MultiIndex in the doc strings\n    of the mentioned helper methods.\n\n    Notes\n    -----\n    See the `user guide\n    <http://pandas.pydata.org/pandas-docs/stable/advanced.html>`_ for more.\n\n    See Also\n    --------\n    MultiIndex.from_arrays  : Convert list of arrays to MultiIndex\n    MultiIndex.from_product : Create a MultiIndex from the cartesian product\n                              of iterables\n    MultiIndex.from_tuples  : Convert list of tuples to a MultiIndex\n    Index : The base pandas Index type\n\n    Attributes\n    ----------\n    names\n    levels\n    labels\n    nlevels\n    levshape\n\n    Methods\n    -------\n    from_arrays\n    from_tuples\n    from_product\n    set_levels\n    set_labels\n    to_frame\n    is_lexsorted\n    sortlevel\n    droplevel\n    swaplevel\n    reorder_levels\n    remove_unused_levels\n    \"\"\"\n    _typ = 'multiindex'\n    _names = FrozenList()\n    _levels = FrozenList()\n    _labels = FrozenList()\n    _comparables = ['names']\n    rename = Index.set_names\n\n    def __new__(cls, levels=None, labels=None, sortorder=None, names=None,\n        dtype=None, copy=False, name=None, verify_integrity=True,\n        _set_identity=True):\n        if name is not None:\n            names = name\n        if levels is None or labels is None:\n            raise TypeError('Must pass both levels and labels')\n        if len(levels) != len(labels):\n            raise ValueError('Length of levels and labels must be the same.')\n        if len(levels) == 0:\n            raise ValueError('Must pass non-zero number of levels/labels')\n        result = object.__new__(MultiIndex)\n        result._set_levels(levels, copy=copy, validate=False)\n        result._set_labels(labels, copy=copy, validate=False)\n        if names is not None:\n            result._set_names(names)\n        if sortorder is not None:\n            result.sortorder = int(sortorder)\n        else:\n            result.sortorder = sortorder\n        if verify_integrity:\n            result._verify_integrity()\n        if _set_identity:\n            result._reset_identity()\n        return result\n\n    def _verify_integrity(self, labels=None, levels=None):\n        \"\"\"\n\n        Parameters\n        ----------\n        labels : optional list\n            Labels to check for validity. Defaults to current labels.\n        levels : optional list\n            Levels to check for validity. Defaults to current levels.\n\n        Raises\n        ------\n        ValueError\n            If length of levels and labels don't match, if any label would\n            exceed level bounds, or there are any duplicate levels.\n        \"\"\"\n        labels = labels or self.labels\n        levels = levels or self.levels\n        if len(levels) != len(labels):\n            raise ValueError(\n                'Length of levels and labels must match. NOTE: this index is in an inconsistent state.'\n                )\n        label_length = len(self.labels[0])\n        for i, (level, label) in enumerate(zip(levels, labels)):\n            if len(label) != label_length:\n                raise ValueError('Unequal label lengths: %s' % [len(lab) for\n                    lab in labels])\n            if len(label) and label.max() >= len(level):\n                raise ValueError(\n                    'On level %d, label max (%d) >= length of level  (%d). NOTE: this index is in an inconsistent state'\n                     % (i, label.max(), len(level)))\n            if not level.is_unique:\n                raise ValueError(\n                    'Level values must be unique: {values} on level {level}'\n                    .format(values=[value for value in level], level=i))\n\n    @property\n    def levels(self):\n        return self._levels\n\n    def _set_levels(self, levels, level=None, copy=False, validate=True,\n        verify_integrity=False):\n        if validate and len(levels) == 0:\n            raise ValueError('Must set non-zero number of levels.')\n        if validate and level is None and len(levels) != self.nlevels:\n            raise ValueError('Length of levels must match number of levels.')\n        if validate and level is not None and len(levels) != len(level):\n            raise ValueError('Length of levels must match length of level.')\n        if level is None:\n            new_levels = FrozenList(ensure_index(lev, copy=copy).\n                _shallow_copy() for lev in levels)\n        else:\n            level = [self._get_level_number(l) for l in level]\n            new_levels = list(self._levels)\n            for l, v in zip(level, levels):\n                new_levels[l] = ensure_index(v, copy=copy)._shallow_copy()\n            new_levels = FrozenList(new_levels)\n        if verify_integrity:\n            self._verify_integrity(levels=new_levels)\n        names = self.names\n        self._levels = new_levels\n        if any(names):\n            self._set_names(names)\n        self._tuples = None\n        self._reset_cache()\n\n    def set_levels(self, levels, level=None, inplace=False,\n        verify_integrity=True):\n        \"\"\"\n        Set new levels on MultiIndex. Defaults to returning\n        new index.\n\n        Parameters\n        ----------\n        levels : sequence or list of sequence\n            new level(s) to apply\n        level : int, level name, or sequence of int/level names (default None)\n            level(s) to set (None for all levels)\n        inplace : bool\n            if True, mutates in place\n        verify_integrity : bool (default True)\n            if True, checks that levels and labels are compatible\n\n        Returns\n        -------\n        new index (of same type and class...etc)\n\n\n        Examples\n        --------\n        >>> idx = pd.MultiIndex.from_tuples([(1, u'one'), (1, u'two'),\n                                            (2, u'one'), (2, u'two')],\n                                            names=['foo', 'bar'])\n        >>> idx.set_levels([['a','b'], [1,2]])\n        MultiIndex(levels=[[u'a', u'b'], [1, 2]],\n                   labels=[[0, 0, 1, 1], [0, 1, 0, 1]],\n                   names=[u'foo', u'bar'])\n        >>> idx.set_levels(['a','b'], level=0)\n        MultiIndex(levels=[[u'a', u'b'], [u'one', u'two']],\n                   labels=[[0, 0, 1, 1], [0, 1, 0, 1]],\n                   names=[u'foo', u'bar'])\n        >>> idx.set_levels(['a','b'], level='bar')\n        MultiIndex(levels=[[1, 2], [u'a', u'b']],\n                   labels=[[0, 0, 1, 1], [0, 1, 0, 1]],\n                   names=[u'foo', u'bar'])\n        >>> idx.set_levels([['a','b'], [1,2]], level=[0,1])\n        MultiIndex(levels=[[u'a', u'b'], [1, 2]],\n                   labels=[[0, 0, 1, 1], [0, 1, 0, 1]],\n                   names=[u'foo', u'bar'])\n        \"\"\"\n        if level is not None and not is_list_like(level):\n            if not is_list_like(levels):\n                raise TypeError('Levels must be list-like')\n            if is_list_like(levels[0]):\n                raise TypeError('Levels must be list-like')\n            level = [level]\n            levels = [levels]\n        elif level is None or is_list_like(level):\n            if not is_list_like(levels) or not is_list_like(levels[0]):\n                raise TypeError('Levels must be list of lists-like')\n        if inplace:\n            idx = self\n        else:\n            idx = self._shallow_copy()\n        idx._reset_identity()\n        idx._set_levels(levels, level=level, validate=True,\n            verify_integrity=verify_integrity)\n        if not inplace:\n            return idx\n\n    @property\n    def labels(self):\n        return self._labels\n\n    def _set_labels(self, labels, level=None, copy=False, validate=True,\n        verify_integrity=False):\n        if validate and level is None and len(labels) != self.nlevels:\n            raise ValueError('Length of labels must match number of levels')\n        if validate and level is not None and len(labels) != len(level):\n            raise ValueError('Length of labels must match length of levels.')\n        if level is None:\n            new_labels = FrozenList(_ensure_frozen(lab, lev, copy=copy).\n                _shallow_copy() for lev, lab in zip(self.levels, labels))\n        else:\n            level = [self._get_level_number(l) for l in level]\n            new_labels = list(self._labels)\n            for lev_idx, lab in zip(level, labels):\n                lev = self.levels[lev_idx]\n                new_labels[lev_idx] = _ensure_frozen(lab, lev, copy=copy\n                    )._shallow_copy()\n            new_labels = FrozenList(new_labels)\n        if verify_integrity:\n            self._verify_integrity(labels=new_labels)\n        self._labels = new_labels\n        self._tuples = None\n        self._reset_cache()\n\n    def set_labels(self, labels, level=None, inplace=False,\n        verify_integrity=True):\n        \"\"\"\n        Set new labels on MultiIndex. Defaults to returning\n        new index.\n\n        Parameters\n        ----------\n        labels : sequence or list of sequence\n            new labels to apply\n        level : int, level name, or sequence of int/level names (default None)\n            level(s) to set (None for all levels)\n        inplace : bool\n            if True, mutates in place\n        verify_integrity : bool (default True)\n            if True, checks that levels and labels are compatible\n\n        Returns\n        -------\n        new index (of same type and class...etc)\n\n        Examples\n        --------\n        >>> idx = pd.MultiIndex.from_tuples([(1, u'one'), (1, u'two'),\n                                            (2, u'one'), (2, u'two')],\n                                            names=['foo', 'bar'])\n        >>> idx.set_labels([[1,0,1,0], [0,0,1,1]])\n        MultiIndex(levels=[[1, 2], [u'one', u'two']],\n                   labels=[[1, 0, 1, 0], [0, 0, 1, 1]],\n                   names=[u'foo', u'bar'])\n        >>> idx.set_labels([1,0,1,0], level=0)\n        MultiIndex(levels=[[1, 2], [u'one', u'two']],\n                   labels=[[1, 0, 1, 0], [0, 1, 0, 1]],\n                   names=[u'foo', u'bar'])\n        >>> idx.set_labels([0,0,1,1], level='bar')\n        MultiIndex(levels=[[1, 2], [u'one', u'two']],\n                   labels=[[0, 0, 1, 1], [0, 0, 1, 1]],\n                   names=[u'foo', u'bar'])\n        >>> idx.set_labels([[1,0,1,0], [0,0,1,1]], level=[0,1])\n        MultiIndex(levels=[[1, 2], [u'one', u'two']],\n                   labels=[[1, 0, 1, 0], [0, 0, 1, 1]],\n                   names=[u'foo', u'bar'])\n        \"\"\"\n        if level is not None and not is_list_like(level):\n            if not is_list_like(labels):\n                raise TypeError('Labels must be list-like')\n            if is_list_like(labels[0]):\n                raise TypeError('Labels must be list-like')\n            level = [level]\n            labels = [labels]\n        elif level is None or is_list_like(level):\n            if not is_list_like(labels) or not is_list_like(labels[0]):\n                raise TypeError('Labels must be list of lists-like')\n        if inplace:\n            idx = self\n        else:\n            idx = self._shallow_copy()\n        idx._reset_identity()\n        idx._set_labels(labels, level=level, verify_integrity=verify_integrity)\n        if not inplace:\n            return idx\n\n    def copy(self, names=None, dtype=None, levels=None, labels=None, deep=\n        False, _set_identity=False, **kwargs):\n        \"\"\"\n        Make a copy of this object. Names, dtype, levels and labels can be\n        passed and will be set on new copy.\n\n        Parameters\n        ----------\n        names : sequence, optional\n        dtype : numpy dtype or pandas type, optional\n        levels : sequence, optional\n        labels : sequence, optional\n\n        Returns\n        -------\n        copy : MultiIndex\n\n        Notes\n        -----\n        In most cases, there should be no functional difference from using\n        ``deep``, but if ``deep`` is passed it will attempt to deepcopy.\n        This could be potentially expensive on large MultiIndex objects.\n        \"\"\"\n        name = kwargs.get('name')\n        names = self._validate_names(name=name, names=names, deep=deep)\n        if deep:\n            from copy import deepcopy\n            if levels is None:\n                levels = deepcopy(self.levels)\n            if labels is None:\n                labels = deepcopy(self.labels)\n        else:\n            if levels is None:\n                levels = self.levels\n            if labels is None:\n                labels = self.labels\n        return MultiIndex(levels=levels, labels=labels, names=names,\n            sortorder=self.sortorder, verify_integrity=False, _set_identity\n            =_set_identity)\n\n    def __array__(self, dtype=None):\n        \"\"\" the array interface, return my values \"\"\"\n        return self.values\n\n    def view(self, cls=None):\n        \"\"\" this is defined as a copy with the same identity \"\"\"\n        result = self.copy()\n        result._id = self._id\n        return result\n\n    def _shallow_copy_with_infer(self, values=None, **kwargs):\n        if len(values) == 0:\n            return MultiIndex(levels=[[] for _ in range(self.nlevels)],\n                labels=[[] for _ in range(self.nlevels)], **kwargs)\n        return self._shallow_copy(values, **kwargs)\n\n    @Appender(_index_shared_docs['__contains__'] % _index_doc_kwargs)\n    def __contains__(self, key):\n        hash(key)\n        try:\n            self.get_loc(key)\n            return True\n        except (LookupError, TypeError):\n            return False\n    contains = __contains__\n\n    @Appender(_index_shared_docs['_shallow_copy'])\n    def _shallow_copy(self, values=None, **kwargs):\n        if values is not None:\n            names = kwargs.pop('names', kwargs.pop('name', self.names))\n            kwargs.pop('freq', None)\n            return MultiIndex.from_tuples(values, names=names, **kwargs)\n        return self.view()\n\n    @cache_readonly\n    def dtype(self):\n        return np.dtype('O')\n\n    def _is_memory_usage_qualified(self):\n        \"\"\" return a boolean if we need a qualified .info display \"\"\"\n\n        def f(l):\n            return 'mixed' in l or 'string' in l or 'unicode' in l\n        return any(f(l) for l in self._inferred_type_levels)\n\n    @Appender(Index.memory_usage.__doc__)\n    def memory_usage(self, deep=False):\n        return self._nbytes(deep)\n\n    @cache_readonly\n    def nbytes(self):\n        \"\"\" return the number of bytes in the underlying data \"\"\"\n        return self._nbytes(False)\n\n    def _nbytes(self, deep=False):\n        \"\"\"\n        return the number of bytes in the underlying data\n        deeply introspect the level data if deep=True\n\n        include the engine hashtable\n\n        *this is in internal routine*\n\n        \"\"\"\n        objsize = 24\n        level_nbytes = sum(i.memory_usage(deep=deep) for i in self.levels)\n        label_nbytes = sum(i.nbytes for i in self.labels)\n        names_nbytes = sum(getsizeof(i, objsize) for i in self.names)\n        result = level_nbytes + label_nbytes + names_nbytes\n        result += self._engine.sizeof(deep=deep)\n        return result\n\n    def _format_attrs(self):\n        \"\"\"\n        Return a list of tuples of the (attr,formatted_value)\n        \"\"\"\n        attrs = [('levels', ibase.default_pprint(self._levels,\n            max_seq_items=False)), ('labels', ibase.default_pprint(self.\n            _labels, max_seq_items=False))]\n        if com._any_not_none(*self.names):\n            attrs.append(('names', ibase.default_pprint(self.names)))\n        if self.sortorder is not None:\n            attrs.append(('sortorder', ibase.default_pprint(self.sortorder)))\n        return attrs\n\n    def _format_space(self):\n        return '\\n%s' % (' ' * (len(self.__class__.__name__) + 1))\n\n    def _format_data(self, name=None):\n        return None\n\n    def __len__(self):\n        return len(self.labels[0])\n\n    def _get_names(self):\n        return FrozenList(level.name for level in self.levels)\n\n    def _set_names(self, names, level=None, validate=True):\n        \"\"\"\n        Set new names on index. Each name has to be a hashable type.\n\n        Parameters\n        ----------\n        values : str or sequence\n            name(s) to set\n        level : int, level name, or sequence of int/level names (default None)\n            If the index is a MultiIndex (hierarchical), level(s) to set (None\n            for all levels).  Otherwise level must be None\n        validate : boolean, default True\n            validate that the names match level lengths\n\n        Raises\n        ------\n        TypeError if each name is not hashable.\n\n        Notes\n        -----\n        sets names on levels. WARNING: mutates!\n\n        Note that you generally want to set this *after* changing levels, so\n        that it only acts on copies\n        \"\"\"\n        if names is not None and not is_list_like(names):\n            raise ValueError('Names should be list-like for a MultiIndex')\n        names = list(names)\n        if validate and level is not None and len(names) != len(level):\n            raise ValueError('Length of names must match length of level.')\n        if validate and level is None and len(names) != self.nlevels:\n            raise ValueError(\n                'Length of names must match number of levels in MultiIndex.')\n        if level is None:\n            level = range(self.nlevels)\n        else:\n            level = [self._get_level_number(l) for l in level]\n        for l, name in zip(level, names):\n            if name is not None:\n                if not is_hashable(name):\n                    raise TypeError('{}.name must be a hashable type'.\n                        format(self.__class__.__name__))\n            self.levels[l].rename(name, inplace=True)\n    names = property(fset=_set_names, fget=_get_names, doc=\n        'Names of levels in MultiIndex')\n\n    def _format_native_types(self, na_rep='nan', **kwargs):\n        new_levels = []\n        new_labels = []\n        for level, label in zip(self.levels, self.labels):\n            level = level._format_native_types(na_rep=na_rep, **kwargs)\n            mask = label == -1\n            if mask.any():\n                nan_index = len(level)\n                level = np.append(level, na_rep)\n                label = label.values()\n                label[mask] = nan_index\n            new_levels.append(level)\n            new_labels.append(label)\n        mi = MultiIndex(levels=new_levels, labels=new_labels, names=self.\n            names, sortorder=self.sortorder, verify_integrity=False)\n        return mi.values\n\n    @Appender(_index_shared_docs['_get_grouper_for_level'])\n    def _get_grouper_for_level(self, mapper, level):\n        indexer = self.labels[level]\n        level_index = self.levels[level]\n        if mapper is not None:\n            level_values = self.levels[level].take(indexer)\n            grouper = level_values.map(mapper)\n            return grouper, None, None\n        labels, uniques = algos.factorize(indexer, sort=True)\n        if len(uniques) > 0 and uniques[0] == -1:\n            mask = indexer != -1\n            ok_labels, uniques = algos.factorize(indexer[mask], sort=True)\n            labels = np.empty(len(indexer), dtype=indexer.dtype)\n            labels[mask] = ok_labels\n            labels[~mask] = -1\n        if len(uniques) < len(level_index):\n            level_index = level_index.take(uniques)\n        grouper = level_index.take(labels)\n        return grouper, labels, level_index\n\n    @property\n    def _constructor(self):\n        return MultiIndex.from_tuples\n\n    @cache_readonly\n    def inferred_type(self):\n        return 'mixed'\n\n    @staticmethod\n    def _from_elements(values, labels=None, levels=None, names=None,\n        sortorder=None):\n        return MultiIndex(levels, labels, names, sortorder=sortorder)\n\n    def _get_level_number(self, level):\n        count = self.names.count(level)\n        if count > 1 and not is_integer(level):\n            raise ValueError(\n                'The name %s occurs multiple times, use a level number' % level\n                )\n        try:\n            level = self.names.index(level)\n        except ValueError:\n            if not is_integer(level):\n                raise KeyError('Level %s not found' % str(level))\n            elif level < 0:\n                level += self.nlevels\n                if level < 0:\n                    orig_level = level - self.nlevels\n                    raise IndexError(\n                        'Too many levels: Index has only %d levels, %d is not a valid level number'\n                         % (self.nlevels, orig_level))\n            elif level >= self.nlevels:\n                raise IndexError(\n                    'Too many levels: Index has only %d levels, not %d' % (\n                    self.nlevels, level + 1))\n        return level\n    _tuples = None\n\n    @cache_readonly\n    def _engine(self):\n        sizes = np.ceil(np.log2([(len(l) + 1) for l in self.levels]))\n        lev_bits = np.cumsum(sizes[::-1])[::-1]\n        offsets = np.concatenate([lev_bits[1:], [0]]).astype('uint64')\n        if lev_bits[0] > 64:\n            return MultiIndexPyIntEngine(self.levels, self.labels, offsets)\n        return MultiIndexUIntEngine(self.levels, self.labels, offsets)\n\n    @property\n    def values(self):\n        if self._tuples is not None:\n            return self._tuples\n        values = []\n        for i in range(self.nlevels):\n            vals = self._get_level_values(i)\n            if is_categorical_dtype(vals):\n                vals = vals.get_values()\n            if isinstance(vals.dtype, (PandasExtensionDtype, ExtensionDtype)\n                ) or hasattr(vals, '_box_values'):\n                vals = vals.astype(object)\n            vals = np.array(vals, copy=False)\n            values.append(vals)\n        self._tuples = lib.fast_zip(values)\n        return self._tuples\n\n    @property\n    def _has_complex_internals(self):\n        return True\n\n    @cache_readonly\n    def is_monotonic_increasing(self):\n        \"\"\"\n        return if the index is monotonic increasing (only equal or\n        increasing) values.\n        \"\"\"\n        values = [self._get_level_values(i).values for i in reversed(range(\n            len(self.levels)))]\n        try:\n            sort_order = np.lexsort(values)\n            return Index(sort_order).is_monotonic\n        except TypeError:\n            return Index(self.values).is_monotonic\n\n    @cache_readonly\n    def is_monotonic_decreasing(self):\n        \"\"\"\n        return if the index is monotonic decreasing (only equal or\n        decreasing) values.\n        \"\"\"\n        return self[::-1].is_monotonic_increasing\n\n    @cache_readonly\n    def _have_mixed_levels(self):\n        \"\"\" return a boolean list indicated if we have mixed levels \"\"\"\n        return [('mixed' in l) for l in self._inferred_type_levels]\n\n    @cache_readonly\n    def _inferred_type_levels(self):\n        \"\"\" return a list of the inferred types, one for each level \"\"\"\n        return [i.inferred_type for i in self.levels]\n\n    @cache_readonly\n    def _hashed_values(self):\n        \"\"\" return a uint64 ndarray of my hashed values \"\"\"\n        from pandas.core.util.hashing import hash_tuples\n        return hash_tuples(self)\n\n    def _hashed_indexing_key(self, key):\n        \"\"\"\n        validate and return the hash for the provided key\n\n        *this is internal for use for the cython routines*\n\n        Parameters\n        ----------\n        key : string or tuple\n\n        Returns\n        -------\n        np.uint64\n\n        Notes\n        -----\n        we need to stringify if we have mixed levels\n\n        \"\"\"\n        from pandas.core.util.hashing import hash_tuples, hash_tuple\n        if not isinstance(key, tuple):\n            return hash_tuples(key)\n        if not len(key) == self.nlevels:\n            raise KeyError\n\n        def f(k, stringify):\n            if stringify and not isinstance(k, compat.string_types):\n                k = str(k)\n            return k\n        key = tuple(f(k, stringify) for k, stringify in zip(key, self.\n            _have_mixed_levels))\n        return hash_tuple(key)\n\n    @Appender(Index.duplicated.__doc__)\n    def duplicated(self, keep='first'):\n        from pandas.core.sorting import get_group_index\n        from pandas._libs.hashtable import duplicated_int64\n        shape = map(len, self.levels)\n        ids = get_group_index(self.labels, shape, sort=False, xnull=False)\n        return duplicated_int64(ids, keep)\n\n    def fillna(self, value=None, downcast=None):\n        \"\"\"\n        fillna is not implemented for MultiIndex\n        \"\"\"\n        raise NotImplementedError('isna is not defined for MultiIndex')\n\n    @Appender(_index_shared_docs['dropna'])\n    def dropna(self, how='any'):\n        nans = [(label == -1) for label in self.labels]\n        if how == 'any':\n            indexer = np.any(nans, axis=0)\n        elif how == 'all':\n            indexer = np.all(nans, axis=0)\n        else:\n            raise ValueError('invalid how option: {0}'.format(how))\n        new_labels = [label[~indexer] for label in self.labels]\n        return self.copy(labels=new_labels, deep=True)\n\n    def get_value(self, series, key):\n        from pandas.core.indexing import maybe_droplevels\n        s = com.values_from_object(series)\n        k = com.values_from_object(key)\n\n        def _try_mi(k):\n            loc = self.get_loc(k)\n            new_values = series._values[loc]\n            new_index = self[loc]\n            new_index = maybe_droplevels(new_index, k)\n            return series._constructor(new_values, index=new_index, name=\n                series.name).__finalize__(self)\n        try:\n            return self._engine.get_value(s, k)\n        except KeyError as e1:\n            try:\n                return _try_mi(key)\n            except KeyError:\n                pass\n            try:\n                return libindex.get_value_at(s, k)\n            except IndexError:\n                raise\n            except TypeError:\n                if is_iterator(key):\n                    raise InvalidIndexError(key)\n                else:\n                    raise e1\n            except Exception:\n                raise e1\n        except TypeError:\n            if isinstance(key, (datetime.datetime, np.datetime64)\n                ) or compat.PY3 and isinstance(key, compat.string_types):\n                try:\n                    return _try_mi(key)\n                except KeyError:\n                    raise\n                except:\n                    pass\n                try:\n                    return _try_mi(Timestamp(key))\n                except:\n                    pass\n            raise InvalidIndexError(key)\n\n    def _get_level_values(self, level, unique=False):\n        \"\"\"\n        Return vector of label values for requested level,\n        equal to the length of the index\n\n        **this is an internal method**\n\n        Parameters\n        ----------\n        level : int level\n        unique : bool, default False\n            if True, drop duplicated values\n\n        Returns\n        -------\n        values : ndarray\n        \"\"\"\n        values = self.levels[level]\n        labels = self.labels[level]\n        if unique:\n            labels = algos.unique(labels)\n        filled = algos.take_1d(values._values, labels, fill_value=values.\n            _na_value)\n        values = values._shallow_copy(filled)\n        return values\n\n    def get_level_values(self, level):\n        \"\"\"\n        Return vector of label values for requested level,\n        equal to the length of the index.\n\n        Parameters\n        ----------\n        level : int or str\n            ``level`` is either the integer position of the level in the\n            MultiIndex, or the name of the level.\n\n        Returns\n        -------\n        values : Index\n            ``values`` is a level of this MultiIndex converted to\n            a single :class:`Index` (or subclass thereof).\n\n        Examples\n        ---------\n\n        Create a MultiIndex:\n\n        >>> mi = pd.MultiIndex.from_arrays((list('abc'), list('def')))\n        >>> mi.names = ['level_1', 'level_2']\n\n        Get level values by supplying level as either integer or name:\n\n        >>> mi.get_level_values(0)\n        Index(['a', 'b', 'c'], dtype='object', name='level_1')\n        >>> mi.get_level_values('level_2')\n        Index(['d', 'e', 'f'], dtype='object', name='level_2')\n        \"\"\"\n        level = self._get_level_number(level)\n        values = self._get_level_values(level)\n        return values\n\n    @Appender(_index_shared_docs['index_unique'] % _index_doc_kwargs)\n    def unique(self, level=None):\n        if level is None:\n            return super(MultiIndex, self).unique()\n        else:\n            level = self._get_level_number(level)\n            return self._get_level_values(level=level, unique=True)\n\n    def format(self, space=2, sparsify=None, adjoin=True, names=False,\n        na_rep=None, formatter=None):\n        if len(self) == 0:\n            return []\n        stringified_levels = []\n        for lev, lab in zip(self.levels, self.labels):\n            na = na_rep if na_rep is not None else _get_na_rep(lev.dtype.type)\n            if len(lev) > 0:\n                formatted = lev.take(lab).format(formatter=formatter)\n                mask = lab == -1\n                if mask.any():\n                    formatted = np.array(formatted, dtype=object)\n                    formatted[mask] = na\n                    formatted = formatted.tolist()\n            else:\n                formatted = [pprint_thing(na if isna(x) else x,\n                    escape_chars=('\\t', '\\r', '\\n')) for x in algos.take_1d\n                    (lev._values, lab)]\n            stringified_levels.append(formatted)\n        result_levels = []\n        for lev, name in zip(stringified_levels, self.names):\n            level = []\n            if names:\n                level.append(pprint_thing(name, escape_chars=('\\t', '\\r',\n                    '\\n')) if name is not None else '')\n            level.extend(np.array(lev, dtype=object))\n            result_levels.append(level)\n        if sparsify is None:\n            sparsify = get_option('display.multi_sparse')\n        if sparsify:\n            sentinel = ''\n            if sparsify not in [True, 1]:\n                sentinel = sparsify\n            result_levels = _sparsify(result_levels, start=int(names),\n                sentinel=sentinel)\n        if adjoin:\n            from pandas.io.formats.format import _get_adjustment\n            adj = _get_adjustment()\n            return adj.adjoin(space, *result_levels).split('\\n')\n        else:\n            return result_levels\n\n    def _to_safe_for_reshape(self):\n        \"\"\" convert to object if we are a categorical \"\"\"\n        return self.set_levels([i._to_safe_for_reshape() for i in self.levels])\n\n    def to_frame(self, index=True):\n        \"\"\"\n        Create a DataFrame with the levels of the MultiIndex as columns.\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        index : boolean, default True\n            Set the index of the returned DataFrame as the original MultiIndex.\n\n        Returns\n        -------\n        DataFrame : a DataFrame containing the original MultiIndex data.\n        \"\"\"\n        from pandas import DataFrame\n        result = DataFrame({(name or level): self._get_level_values(level) for\n            name, level in zip(self.names, range(len(self.levels)))}, copy=\n            False)\n        if index:\n            result.index = self\n        return result\n\n    def to_hierarchical(self, n_repeat, n_shuffle=1):\n        \"\"\"\n        .. deprecated:: 0.24.0\n\n        Return a MultiIndex reshaped to conform to the\n        shapes given by n_repeat and n_shuffle.\n\n        Useful to replicate and rearrange a MultiIndex for combination\n        with another Index with n_repeat items.\n\n        Parameters\n        ----------\n        n_repeat : int\n            Number of times to repeat the labels on self\n        n_shuffle : int\n            Controls the reordering of the labels. If the result is going\n            to be an inner level in a MultiIndex, n_shuffle will need to be\n            greater than one. The size of each label must divisible by\n            n_shuffle.\n\n        Returns\n        -------\n        MultiIndex\n\n        Examples\n        --------\n        >>> idx = pd.MultiIndex.from_tuples([(1, u'one'), (1, u'two'),\n                                            (2, u'one'), (2, u'two')])\n        >>> idx.to_hierarchical(3)\n        MultiIndex(levels=[[1, 2], [u'one', u'two']],\n                   labels=[[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1],\n                           [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1]])\n        \"\"\"\n        levels = self.levels\n        labels = [np.repeat(x, n_repeat) for x in self.labels]\n        labels = [x.reshape(n_shuffle, -1).ravel(order='F') for x in labels]\n        names = self.names\n        warnings.warn(\n            'Method .to_hierarchical is deprecated and will be removed in a future version'\n            , FutureWarning, stacklevel=2)\n        return MultiIndex(levels=levels, labels=labels, names=names)\n\n    @property\n    def is_all_dates(self):\n        return False\n\n    def is_lexsorted(self):\n        \"\"\"\n        Return True if the labels are lexicographically sorted\n        \"\"\"\n        return self.lexsort_depth == self.nlevels\n\n    @cache_readonly\n    def lexsort_depth(self):\n        if self.sortorder is not None:\n            if self.sortorder == 0:\n                return self.nlevels\n            else:\n                return 0\n        int64_labels = [ensure_int64(lab) for lab in self.labels]\n        for k in range(self.nlevels, 0, -1):\n            if libalgos.is_lexsorted(int64_labels[:k]):\n                return k\n        return 0\n\n    @classmethod\n    def from_arrays(cls, arrays, sortorder=None, names=None):\n        \"\"\"\n        Convert arrays to MultiIndex\n\n        Parameters\n        ----------\n        arrays : list / sequence of array-likes\n            Each array-like gives one level's value for each data point.\n            len(arrays) is the number of levels.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level)\n\n        Returns\n        -------\n        index : MultiIndex\n\n        Examples\n        --------\n        >>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n        >>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\n\n        See Also\n        --------\n        MultiIndex.from_tuples : Convert list of tuples to MultiIndex\n        MultiIndex.from_product : Make a MultiIndex from cartesian product\n                                  of iterables\n        \"\"\"\n        if not is_list_like(arrays):\n            raise TypeError('Input must be a list / sequence of array-likes.')\n        elif is_iterator(arrays):\n            arrays = list(arrays)\n        for i in range(1, len(arrays)):\n            if len(arrays[i]) != len(arrays[i - 1]):\n                raise ValueError('all arrays must be same length')\n        from pandas.core.arrays.categorical import _factorize_from_iterables\n        labels, levels = _factorize_from_iterables(arrays)\n        if names is None:\n            names = [getattr(arr, 'name', None) for arr in arrays]\n        return MultiIndex(levels=levels, labels=labels, sortorder=sortorder,\n            names=names, verify_integrity=False)\n\n    @classmethod\n    def from_tuples(cls, tuples, sortorder=None, names=None):\n        \"\"\"\n        Convert list of tuples to MultiIndex\n\n        Parameters\n        ----------\n        tuples : list / sequence of tuple-likes\n            Each tuple is the index of one row/column.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level)\n\n        Returns\n        -------\n        index : MultiIndex\n\n        Examples\n        --------\n        >>> tuples = [(1, u'red'), (1, u'blue'),\n                      (2, u'red'), (2, u'blue')]\n        >>> pd.MultiIndex.from_tuples(tuples, names=('number', 'color'))\n\n        See Also\n        --------\n        MultiIndex.from_arrays : Convert list of arrays to MultiIndex\n        MultiIndex.from_product : Make a MultiIndex from cartesian product\n                                  of iterables\n        \"\"\"\n        if not is_list_like(tuples):\n            raise TypeError('Input must be a list / sequence of tuple-likes.')\n        elif is_iterator(tuples):\n            tuples = list(tuples)\n        if len(tuples) == 0:\n            if names is None:\n                msg = 'Cannot infer number of levels from empty list'\n                raise TypeError(msg)\n            arrays = [[]] * len(names)\n        elif isinstance(tuples, (np.ndarray, Index)):\n            if isinstance(tuples, Index):\n                tuples = tuples._values\n            arrays = list(lib.tuples_to_object_array(tuples).T)\n        elif isinstance(tuples, list):\n            arrays = list(lib.to_object_array_tuples(tuples).T)\n        else:\n            arrays = lzip(*tuples)\n        return MultiIndex.from_arrays(arrays, sortorder=sortorder, names=names)\n\n    @classmethod\n    def from_product(cls, iterables, sortorder=None, names=None):\n        \"\"\"\n        Make a MultiIndex from the cartesian product of multiple iterables\n\n        Parameters\n        ----------\n        iterables : list / sequence of iterables\n            Each iterable has unique labels for each level of the index.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level).\n        names : list / sequence of strings or None\n            Names for the levels in the index.\n\n        Returns\n        -------\n        index : MultiIndex\n\n        Examples\n        --------\n        >>> numbers = [0, 1, 2]\n        >>> colors = [u'green', u'purple']\n        >>> pd.MultiIndex.from_product([numbers, colors],\n                                       names=['number', 'color'])\n        MultiIndex(levels=[[0, 1, 2], [u'green', u'purple']],\n                   labels=[[0, 0, 1, 1, 2, 2], [0, 1, 0, 1, 0, 1]],\n                   names=[u'number', u'color'])\n\n        See Also\n        --------\n        MultiIndex.from_arrays : Convert list of arrays to MultiIndex\n        MultiIndex.from_tuples : Convert list of tuples to MultiIndex\n        \"\"\"\n        from pandas.core.arrays.categorical import _factorize_from_iterables\n        from pandas.core.reshape.util import cartesian_product\n        if not is_list_like(iterables):\n            raise TypeError('Input must be a list / sequence of iterables.')\n        elif is_iterator(iterables):\n            iterables = list(iterables)\n        labels, levels = _factorize_from_iterables(iterables)\n        labels = cartesian_product(labels)\n        return MultiIndex(levels, labels, sortorder=sortorder, names=names)\n\n    def _sort_levels_monotonic(self):\n        \"\"\"\n        .. versionadded:: 0.20.0\n\n        This is an *internal* function.\n\n        Create a new MultiIndex from the current to monotonically sorted\n        items IN the levels. This does not actually make the entire MultiIndex\n        monotonic, JUST the levels.\n\n        The resulting MultiIndex will have the same outward\n        appearance, meaning the same .values and ordering. It will also\n        be .equals() to the original.\n\n        Returns\n        -------\n        MultiIndex\n\n        Examples\n        --------\n\n        >>> i = pd.MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],\n                              labels=[[0, 0, 1, 1], [0, 1, 0, 1]])\n        >>> i\n        MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],\n                   labels=[[0, 0, 1, 1], [0, 1, 0, 1]])\n\n        >>> i.sort_monotonic()\n        MultiIndex(levels=[['a', 'b'], ['aa', 'bb']],\n                   labels=[[0, 0, 1, 1], [1, 0, 1, 0]])\n\n        \"\"\"\n        if self.is_lexsorted() and self.is_monotonic:\n            return self\n        new_levels = []\n        new_labels = []\n        for lev, lab in zip(self.levels, self.labels):\n            if not lev.is_monotonic:\n                try:\n                    indexer = lev.argsort()\n                except TypeError:\n                    pass\n                else:\n                    lev = lev.take(indexer)\n                    indexer = ensure_int64(indexer)\n                    ri = lib.get_reverse_indexer(indexer, len(indexer))\n                    lab = algos.take_1d(ri, lab)\n            new_levels.append(lev)\n            new_labels.append(lab)\n        return MultiIndex(new_levels, new_labels, names=self.names,\n            sortorder=self.sortorder, verify_integrity=False)\n\n    def remove_unused_levels(self):\n        \"\"\"\n        Create a new MultiIndex from the current that removes\n        unused levels, meaning that they are not expressed in the labels.\n\n        The resulting MultiIndex will have the same outward\n        appearance, meaning the same .values and ordering. It will also\n        be .equals() to the original.\n\n        .. versionadded:: 0.20.0\n\n        Returns\n        -------\n        MultiIndex\n\n        Examples\n        --------\n        >>> i = pd.MultiIndex.from_product([range(2), list('ab')])\n        MultiIndex(levels=[[0, 1], ['a', 'b']],\n                   labels=[[0, 0, 1, 1], [0, 1, 0, 1]])\n\n\n        >>> i[2:]\n        MultiIndex(levels=[[0, 1], ['a', 'b']],\n                   labels=[[1, 1], [0, 1]])\n\n        The 0 from the first level is not represented\n        and can be removed\n\n        >>> i[2:].remove_unused_levels()\n        MultiIndex(levels=[[1], ['a', 'b']],\n                   labels=[[0, 0], [0, 1]])\n\n        \"\"\"\n        new_levels = []\n        new_labels = []\n        changed = False\n        for lev, lab in zip(self.levels, self.labels):\n            uniques = np.where(np.bincount(lab + 1) > 0)[0] - 1\n            has_na = int(len(uniques) and uniques[0] == -1)\n            if len(uniques) != len(lev) + has_na:\n                changed = True\n                uniques = algos.unique(lab)\n                if has_na:\n                    na_idx = np.where(uniques == -1)[0]\n                    uniques[[0, na_idx[0]]] = uniques[[na_idx[0], 0]]\n                label_mapping = np.zeros(len(lev) + has_na)\n                label_mapping[uniques] = np.arange(len(uniques)) - has_na\n                lab = label_mapping[lab]\n                lev = lev.take(uniques[has_na:])\n            new_levels.append(lev)\n            new_labels.append(lab)\n        result = self._shallow_copy()\n        if changed:\n            result._reset_identity()\n            result._set_levels(new_levels, validate=False)\n            result._set_labels(new_labels, validate=False)\n        return result\n\n    @property\n    def nlevels(self):\n        \"\"\"Integer number of levels in this MultiIndex.\"\"\"\n        return len(self.levels)\n\n    @property\n    def levshape(self):\n        \"\"\"A tuple with the length of each level.\"\"\"\n        return tuple(len(x) for x in self.levels)\n\n    def __reduce__(self):\n        \"\"\"Necessary for making this object picklable\"\"\"\n        d = dict(levels=[lev for lev in self.levels], labels=[label for\n            label in self.labels], sortorder=self.sortorder, names=list(\n            self.names))\n        return ibase._new_Index, (self.__class__, d), None\n\n    def __setstate__(self, state):\n        \"\"\"Necessary for making this object picklable\"\"\"\n        if isinstance(state, dict):\n            levels = state.get('levels')\n            labels = state.get('labels')\n            sortorder = state.get('sortorder')\n            names = state.get('names')\n        elif isinstance(state, tuple):\n            nd_state, own_state = state\n            levels, labels, sortorder, names = own_state\n        self._set_levels([Index(x) for x in levels], validate=False)\n        self._set_labels(labels)\n        self._set_names(names)\n        self.sortorder = sortorder\n        self._verify_integrity()\n        self._reset_identity()\n\n    def __getitem__(self, key):\n        if is_scalar(key):\n            retval = []\n            for lev, lab in zip(self.levels, self.labels):\n                if lab[key] == -1:\n                    retval.append(np.nan)\n                else:\n                    retval.append(lev[lab[key]])\n            return tuple(retval)\n        else:\n            if com.is_bool_indexer(key):\n                key = np.asarray(key)\n                sortorder = self.sortorder\n            else:\n                sortorder = None\n                if isinstance(key, Index):\n                    key = np.asarray(key)\n            new_labels = [lab[key] for lab in self.labels]\n            return MultiIndex(levels=self.levels, labels=new_labels, names=\n                self.names, sortorder=sortorder, verify_integrity=False)\n\n    @Appender(_index_shared_docs['take'] % _index_doc_kwargs)\n    def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs\n        ):\n        nv.validate_take(tuple(), kwargs)\n        indices = ensure_platform_int(indices)\n        taken = self._assert_take_fillable(self.labels, indices, allow_fill\n            =allow_fill, fill_value=fill_value, na_value=-1)\n        return MultiIndex(levels=self.levels, labels=taken, names=self.\n            names, verify_integrity=False)\n\n    def _assert_take_fillable(self, values, indices, allow_fill=True,\n        fill_value=None, na_value=None):\n        \"\"\" Internal method to handle NA filling of take \"\"\"\n        if allow_fill and fill_value is not None:\n            if (indices < -1).any():\n                msg = (\n                    'When allow_fill=True and fill_value is not None, all indices must be >= -1'\n                    )\n                raise ValueError(msg)\n            taken = [lab.take(indices) for lab in self.labels]\n            mask = indices == -1\n            if mask.any():\n                masked = []\n                for new_label in taken:\n                    label_values = new_label.values()\n                    label_values[mask] = na_value\n                    masked.append(FrozenNDArray(label_values))\n                taken = masked\n        else:\n            taken = [lab.take(indices) for lab in self.labels]\n        return taken\n\n    def append(self, other):\n        \"\"\"\n        Append a collection of Index options together\n\n        Parameters\n        ----------\n        other : Index or list/tuple of indices\n\n        Returns\n        -------\n        appended : Index\n        \"\"\"\n        if not isinstance(other, (list, tuple)):\n            other = [other]\n        if all(isinstance(o, MultiIndex) and o.nlevels >= self.nlevels for\n            o in other):\n            arrays = []\n            for i in range(self.nlevels):\n                label = self._get_level_values(i)\n                appended = [o._get_level_values(i) for o in other]\n                arrays.append(label.append(appended))\n            return MultiIndex.from_arrays(arrays, names=self.names)\n        to_concat = (self.values,) + tuple(k._values for k in other)\n        new_tuples = np.concatenate(to_concat)\n        try:\n            return MultiIndex.from_tuples(new_tuples, names=self.names)\n        except:\n            return Index(new_tuples)\n\n    def argsort(self, *args, **kwargs):\n        return self.values.argsort(*args, **kwargs)\n\n    @deprecate_kwarg(old_arg_name='n', new_arg_name='repeats')\n    def repeat(self, repeats, *args, **kwargs):\n        nv.validate_repeat(args, kwargs)\n        return MultiIndex(levels=self.levels, labels=[label.view(np.ndarray\n            ).repeat(repeats) for label in self.labels], names=self.names,\n            sortorder=self.sortorder, verify_integrity=False)\n\n    def where(self, cond, other=None):\n        raise NotImplementedError(\n            '.where is not supported for MultiIndex operations')\n\n    def drop(self, labels, level=None, errors='raise'):\n        \"\"\"\n        Make new MultiIndex with passed list of labels deleted\n\n        Parameters\n        ----------\n        labels : array-like\n            Must be a list of tuples\n        level : int or level name, default None\n\n        Returns\n        -------\n        dropped : MultiIndex\n        \"\"\"\n        if level is not None:\n            return self._drop_from_level(labels, level)\n        try:\n            if not isinstance(labels, (np.ndarray, Index)):\n                labels = com.index_labels_to_array(labels)\n            indexer = self.get_indexer(labels)\n            mask = indexer == -1\n            if mask.any():\n                if errors != 'ignore':\n                    raise ValueError('labels %s not contained in axis' %\n                        labels[mask])\n        except Exception:\n            pass\n        inds = []\n        for label in labels:\n            try:\n                loc = self.get_loc(label)\n                if isinstance(loc, int):\n                    inds.append(loc)\n                elif isinstance(loc, slice):\n                    inds.extend(lrange(loc.start, loc.stop))\n                elif com.is_bool_indexer(loc):\n                    if self.lexsort_depth == 0:\n                        warnings.warn(\n                            'dropping on a non-lexsorted multi-index without a level parameter may impact performance.'\n                            , PerformanceWarning, stacklevel=3)\n                    loc = loc.nonzero()[0]\n                    inds.extend(loc)\n                else:\n                    msg = 'unsupported indexer of type {}'.format(type(loc))\n                    raise AssertionError(msg)\n            except KeyError:\n                if errors != 'ignore':\n                    raise\n        return self.delete(inds)\n\n    def _drop_from_level(self, labels, level):\n        labels = com.index_labels_to_array(labels)\n        i = self._get_level_number(level)\n        index = self.levels[i]\n        values = index.get_indexer(labels)\n        mask = ~algos.isin(self.labels[i], values)\n        return self[mask]\n\n    def swaplevel(self, i=-2, j=-1):\n        \"\"\"\n        Swap level i with level j.\n\n        Calling this method does not change the ordering of the values.\n\n        Parameters\n        ----------\n        i : int, str, default -2\n            First level of index to be swapped. Can pass level name as string.\n            Type of parameters can be mixed.\n        j : int, str, default -1\n            Second level of index to be swapped. Can pass level name as string.\n            Type of parameters can be mixed.\n\n        Returns\n        -------\n        MultiIndex\n            A new MultiIndex\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n\n        See Also\n        --------\n        Series.swaplevel : Swap levels i and j in a MultiIndex\n        Dataframe.swaplevel : Swap levels i and j in a MultiIndex on a\n            particular axis\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],\n        ...                    labels=[[0, 0, 1, 1], [0, 1, 0, 1]])\n        >>> mi\n        MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],\n           labels=[[0, 0, 1, 1], [0, 1, 0, 1]])\n        >>> mi.swaplevel(0, 1)\n        MultiIndex(levels=[['bb', 'aa'], ['a', 'b']],\n           labels=[[0, 1, 0, 1], [0, 0, 1, 1]])\n        \"\"\"\n        new_levels = list(self.levels)\n        new_labels = list(self.labels)\n        new_names = list(self.names)\n        i = self._get_level_number(i)\n        j = self._get_level_number(j)\n        new_levels[i], new_levels[j] = new_levels[j], new_levels[i]\n        new_labels[i], new_labels[j] = new_labels[j], new_labels[i]\n        new_names[i], new_names[j] = new_names[j], new_names[i]\n        return MultiIndex(levels=new_levels, labels=new_labels, names=\n            new_names, verify_integrity=False)\n\n    def reorder_levels(self, order):\n        \"\"\"\n        Rearrange levels using input order. May not drop or duplicate levels\n\n        Parameters\n        ----------\n        \"\"\"\n        order = [self._get_level_number(i) for i in order]\n        if len(order) != self.nlevels:\n            raise AssertionError(\n                'Length of order must be same as number of levels (%d), got %d'\n                 % (self.nlevels, len(order)))\n        new_levels = [self.levels[i] for i in order]\n        new_labels = [self.labels[i] for i in order]\n        new_names = [self.names[i] for i in order]\n        return MultiIndex(levels=new_levels, labels=new_labels, names=\n            new_names, verify_integrity=False)\n\n    def __getslice__(self, i, j):\n        return self.__getitem__(slice(i, j))\n\n    def _get_labels_for_sorting(self):\n        \"\"\"\n        we categorizing our labels by using the\n        available catgories (all, not just observed)\n        excluding any missing ones (-1); this is in preparation\n        for sorting, where we need to disambiguate that -1 is not\n        a valid valid\n        \"\"\"\n        from pandas.core.arrays import Categorical\n\n        def cats(label):\n            return np.arange(np.array(label).max() + 1 if len(label) else 0,\n                dtype=label.dtype)\n        return [Categorical.from_codes(label, cats(label), ordered=True) for\n            label in self.labels]\n\n    def sortlevel(self, level=0, ascending=True, sort_remaining=True):\n        \"\"\"\n        Sort MultiIndex at the requested level. The result will respect the\n        original ordering of the associated factor at that level.\n\n        Parameters\n        ----------\n        level : list-like, int or str, default 0\n            If a string is given, must be a name of the level\n            If list-like must be names or ints of levels.\n        ascending : boolean, default True\n            False to sort in descending order\n            Can also be a list to specify a directed ordering\n        sort_remaining : sort by the remaining levels after level.\n\n        Returns\n        -------\n        sorted_index : pd.MultiIndex\n            Resulting index\n        indexer : np.ndarray\n            Indices of output values in original index\n\n        \"\"\"\n        from pandas.core.sorting import indexer_from_factorized\n        if isinstance(level, (compat.string_types, int)):\n            level = [level]\n        level = [self._get_level_number(lev) for lev in level]\n        sortorder = None\n        if isinstance(ascending, list):\n            if not len(level) == len(ascending):\n                raise ValueError('level must have same length as ascending')\n            from pandas.core.sorting import lexsort_indexer\n            indexer = lexsort_indexer([self.labels[lev] for lev in level],\n                orders=ascending)\n        else:\n            labels = list(self.labels)\n            shape = list(self.levshape)\n            primary = tuple(labels.pop(lev - i) for i, lev in enumerate(level))\n            primshp = tuple(shape.pop(lev - i) for i, lev in enumerate(level))\n            if sort_remaining:\n                primary += primary + tuple(labels)\n                primshp += primshp + tuple(shape)\n            else:\n                sortorder = level[0]\n            indexer = indexer_from_factorized(primary, primshp, compress=False)\n            if not ascending:\n                indexer = indexer[::-1]\n        indexer = ensure_platform_int(indexer)\n        new_labels = [lab.take(indexer) for lab in self.labels]\n        new_index = MultiIndex(labels=new_labels, levels=self.levels, names\n            =self.names, sortorder=sortorder, verify_integrity=False)\n        return new_index, indexer\n\n    def _convert_listlike_indexer(self, keyarr, kind=None):\n        \"\"\"\n        Parameters\n        ----------\n        keyarr : list-like\n            Indexer to convert.\n\n        Returns\n        -------\n        tuple (indexer, keyarr)\n            indexer is an ndarray or None if cannot convert\n            keyarr are tuple-safe keys\n        \"\"\"\n        indexer, keyarr = super(MultiIndex, self)._convert_listlike_indexer(\n            keyarr, kind=kind)\n        if indexer is None and len(keyarr) and not isinstance(keyarr[0], tuple\n            ):\n            level = 0\n            _, indexer = self.reindex(keyarr, level=level)\n            if indexer is None:\n                indexer = np.arange(len(self))\n            check = self.levels[0].get_indexer(keyarr)\n            mask = check == -1\n            if mask.any():\n                raise KeyError('%s not in index' % keyarr[mask])\n        return indexer, keyarr\n\n    @Appender(_index_shared_docs['get_indexer'] % _index_doc_kwargs)\n    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        method = missing.clean_reindex_fill_method(method)\n        target = ensure_index(target)\n        if is_list_like(target) and not len(target):\n            return ensure_platform_int(np.array([]))\n        if not isinstance(target, MultiIndex):\n            try:\n                target = MultiIndex.from_tuples(target)\n            except (TypeError, ValueError):\n                if method is None:\n                    return Index(self.values).get_indexer(target, method=\n                        method, limit=limit, tolerance=tolerance)\n        if not self.is_unique:\n            raise ValueError(\n                'Reindexing only valid with uniquely valued Index objects')\n        if method == 'pad' or method == 'backfill':\n            if tolerance is not None:\n                raise NotImplementedError(\n                    'tolerance not implemented yet for MultiIndex')\n            indexer = self._engine.get_indexer(target, method, limit)\n        elif method == 'nearest':\n            raise NotImplementedError(\n                \"method='nearest' not implemented yet for MultiIndex; see GitHub issue 9365\"\n                )\n        else:\n            indexer = self._engine.get_indexer(target)\n        return ensure_platform_int(indexer)\n\n    @Appender(_index_shared_docs['get_indexer_non_unique'] % _index_doc_kwargs)\n    def get_indexer_non_unique(self, target):\n        return super(MultiIndex, self).get_indexer_non_unique(target)\n\n    def reindex(self, target, method=None, level=None, limit=None,\n        tolerance=None):\n        \"\"\"\n        Create index with target's values (move/add/delete values as necessary)\n\n        Returns\n        -------\n        new_index : pd.MultiIndex\n            Resulting index\n        indexer : np.ndarray or None\n            Indices of output values in original index\n\n        \"\"\"\n        preserve_names = not hasattr(target, 'names')\n        if level is not None:\n            if method is not None:\n                raise TypeError('Fill method not supported if level passed')\n            target = ibase._ensure_has_len(target)\n            if len(target) == 0 and not isinstance(target, Index):\n                idx = self.levels[level]\n                attrs = idx._get_attributes_dict()\n                attrs.pop('freq', None)\n                target = type(idx)._simple_new(np.empty(0, dtype=idx.dtype),\n                    **attrs)\n            else:\n                target = ensure_index(target)\n            target, indexer, _ = self._join_level(target, level, how=\n                'right', return_indexers=True, keep_order=False)\n        else:\n            target = ensure_index(target)\n            if self.equals(target):\n                indexer = None\n            elif self.is_unique:\n                indexer = self.get_indexer(target, method=method, limit=\n                    limit, tolerance=tolerance)\n            else:\n                raise ValueError('cannot handle a non-unique multi-index!')\n        if not isinstance(target, MultiIndex):\n            if indexer is None:\n                target = self\n            elif (indexer >= 0).all():\n                target = self.take(indexer)\n            else:\n                target = MultiIndex.from_tuples(target)\n        if (preserve_names and target.nlevels == self.nlevels and target.\n            names != self.names):\n            target = target.copy(deep=False)\n            target.names = self.names\n        return target, indexer\n\n    def get_slice_bound(self, label, side, kind):\n        if not isinstance(label, tuple):\n            label = label,\n        return self._partial_tup_index(label, side=side)\n\n    def slice_locs(self, start=None, end=None, step=None, kind=None):\n        \"\"\"\n        For an ordered MultiIndex, compute the slice locations for input\n        labels.\n\n        The input labels can be tuples representing partial levels, e.g. for a\n        MultiIndex with 3 levels, you can pass a single value (corresponding to\n        the first level), or a 1-, 2-, or 3-tuple.\n\n        Parameters\n        ----------\n        start : label or tuple, default None\n            If None, defaults to the beginning\n        end : label or tuple\n            If None, defaults to the end\n        step : int or None\n            Slice step\n        kind : string, optional, defaults None\n\n        Returns\n        -------\n        (start, end) : (int, int)\n\n        Notes\n        -----\n        This method only works if the MultiIndex is properly lexsorted. So,\n        if only the first 2 levels of a 3-level MultiIndex are lexsorted,\n        you can only pass two levels to ``.slice_locs``.\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_arrays([list('abbd'), list('deff')],\n        ...                                names=['A', 'B'])\n\n        Get the slice locations from the beginning of 'b' in the first level\n        until the end of the multiindex:\n\n        >>> mi.slice_locs(start='b')\n        (1, 4)\n\n        Like above, but stop at the end of 'b' in the first level and 'f' in\n        the second level:\n\n        >>> mi.slice_locs(start='b', end=('b', 'f'))\n        (1, 3)\n\n        See Also\n        --------\n        MultiIndex.get_loc : Get location for a label or a tuple of labels.\n        MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                              sequence of such.\n        \"\"\"\n        return super(MultiIndex, self).slice_locs(start, end, step, kind=kind)\n\n    def _partial_tup_index(self, tup, side='left'):\n        if len(tup) > self.lexsort_depth:\n            raise UnsortedIndexError(\n                'Key length (%d) was greater than MultiIndex lexsort depth (%d)'\n                 % (len(tup), self.lexsort_depth))\n        n = len(tup)\n        start, end = 0, len(self)\n        zipped = zip(tup, self.levels, self.labels)\n        for k, (lab, lev, labs) in enumerate(zipped):\n            section = labs[start:end]\n            if lab not in lev:\n                if not lev.is_type_compatible(lib.infer_dtype([lab])):\n                    raise TypeError('Level type mismatch: %s' % lab)\n                loc = lev.searchsorted(lab, side=side)\n                if side == 'right' and loc >= 0:\n                    loc -= 1\n                return start + section.searchsorted(loc, side=side)\n            idx = lev.get_loc(lab)\n            if k < n - 1:\n                end = start + section.searchsorted(idx, side='right')\n                start = start + section.searchsorted(idx, side='left')\n            else:\n                return start + section.searchsorted(idx, side=side)\n\n    def get_loc(self, key, method=None):\n        \"\"\"\n        Get location for a label or a tuple of labels as an integer, slice or\n        boolean mask.\n\n        Parameters\n        ----------\n        key : label or tuple of labels (one for each level)\n        method : None\n\n        Returns\n        -------\n        loc : int, slice object or boolean mask\n            If the key is past the lexsort depth, the return may be a\n            boolean mask array, otherwise it is always a slice or int.\n\n        Examples\n        ---------\n        >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n        >>> mi.get_loc('b')\n        slice(1, 3, None)\n\n        >>> mi.get_loc(('b', 'e'))\n        1\n\n        Notes\n        ------\n        The key cannot be a slice, list of same-level labels, a boolean mask,\n        or a sequence of such. If you want to use those, use\n        :meth:`MultiIndex.get_locs` instead.\n\n        See also\n        --------\n        Index.get_loc : get_loc method for (single-level) index.\n        MultiIndex.slice_locs : Get slice location given start label(s) and\n                                end label(s).\n        MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                              sequence of such.\n        \"\"\"\n        if method is not None:\n            raise NotImplementedError(\n                'only the default get_loc method is currently supported for MultiIndex'\n                )\n\n        def _maybe_to_slice(loc):\n            \"\"\"convert integer indexer to boolean mask or slice if possible\"\"\"\n            if not isinstance(loc, np.ndarray) or loc.dtype != 'int64':\n                return loc\n            loc = lib.maybe_indices_to_slice(loc, len(self))\n            if isinstance(loc, slice):\n                return loc\n            mask = np.empty(len(self), dtype='bool')\n            mask.fill(False)\n            mask[loc] = True\n            return mask\n        if not isinstance(key, tuple):\n            loc = self._get_level_indexer(key, level=0)\n            return _maybe_to_slice(loc)\n        keylen = len(key)\n        if self.nlevels < keylen:\n            raise KeyError('Key length ({0}) exceeds index depth ({1})'.\n                format(keylen, self.nlevels))\n        if keylen == self.nlevels and self.is_unique:\n            return self._engine.get_loc(key)\n        i = self.lexsort_depth\n        lead_key, follow_key = key[:i], key[i:]\n        start, stop = self.slice_locs(lead_key, lead_key) if lead_key else (\n            0, len(self))\n        if start == stop:\n            raise KeyError(key)\n        if not follow_key:\n            return slice(start, stop)\n        warnings.warn('indexing past lexsort depth may impact performance.',\n            PerformanceWarning, stacklevel=10)\n        loc = np.arange(start, stop, dtype='int64')\n        for i, k in enumerate(follow_key, len(lead_key)):\n            mask = self.labels[i][loc] == self.levels[i].get_loc(k)\n            if not mask.all():\n                loc = loc[mask]\n            if not len(loc):\n                raise KeyError(key)\n        return _maybe_to_slice(loc) if len(loc) != stop - start else slice(\n            start, stop)\n\n    def get_loc_level(self, key, level=0, drop_level=True):\n        \"\"\"\n        Get both the location for the requested label(s) and the\n        resulting sliced index.\n\n        Parameters\n        ----------\n        key : label or sequence of labels\n        level : int/level name or list thereof, optional\n        drop_level : bool, default True\n            if ``False``, the resulting index will not drop any level.\n\n        Returns\n        -------\n        loc : A 2-tuple where the elements are:\n              Element 0: int, slice object or boolean array\n              Element 1: The resulting sliced multiindex/index. If the key\n              contains all levels, this will be ``None``.\n\n        Examples\n        --------\n        >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')],\n        ...                                names=['A', 'B'])\n\n        >>> mi.get_loc_level('b')\n        (slice(1, 3, None), Index(['e', 'f'], dtype='object', name='B'))\n\n        >>> mi.get_loc_level('e', level='B')\n        (array([False,  True, False], dtype=bool),\n        Index(['b'], dtype='object', name='A'))\n\n        >>> mi.get_loc_level(['b', 'e'])\n        (1, None)\n\n        See Also\n        ---------\n        MultiIndex.get_loc  : Get location for a label or a tuple of labels.\n        MultiIndex.get_locs : Get location for a label/slice/list/mask or a\n                              sequence of such\n        \"\"\"\n\n        def maybe_droplevels(indexer, levels, drop_level):\n            if not drop_level:\n                return self[indexer]\n            orig_index = new_index = self[indexer]\n            levels = [self._get_level_number(i) for i in levels]\n            for i in sorted(levels, reverse=True):\n                try:\n                    new_index = new_index.droplevel(i)\n                except:\n                    return orig_index\n            return new_index\n        if isinstance(level, (tuple, list)):\n            if len(key) != len(level):\n                raise AssertionError(\n                    'Key for location must have same length as number of levels'\n                    )\n            result = None\n            for lev, k in zip(level, key):\n                loc, new_index = self.get_loc_level(k, level=lev)\n                if isinstance(loc, slice):\n                    mask = np.zeros(len(self), dtype=bool)\n                    mask[loc] = True\n                    loc = mask\n                result = loc if result is None else result & loc\n            return result, maybe_droplevels(result, level, drop_level)\n        level = self._get_level_number(level)\n        if isinstance(key, list):\n            key = tuple(key)\n        if isinstance(key, tuple) and level == 0:\n            try:\n                if key in self.levels[0]:\n                    indexer = self._get_level_indexer(key, level=level)\n                    new_index = maybe_droplevels(indexer, [0], drop_level)\n                    return indexer, new_index\n            except TypeError:\n                pass\n            if not any(isinstance(k, slice) for k in key):\n\n                def partial_selection(key, indexer=None):\n                    if indexer is None:\n                        indexer = self.get_loc(key)\n                    ilevels = [i for i in range(len(key)) if key[i] !=\n                        slice(None, None)]\n                    return indexer, maybe_droplevels(indexer, ilevels,\n                        drop_level)\n                if len(key) == self.nlevels and self.is_unique:\n                    return self._engine.get_loc(key), None\n                else:\n                    return partial_selection(key)\n            else:\n                indexer = None\n                for i, k in enumerate(key):\n                    if not isinstance(k, slice):\n                        k = self._get_level_indexer(k, level=i)\n                        if isinstance(k, slice):\n                            if k.start == 0 and k.stop == len(self):\n                                k = slice(None, None)\n                        else:\n                            k_index = k\n                    if isinstance(k, slice):\n                        if k == slice(None, None):\n                            continue\n                        else:\n                            raise TypeError(key)\n                    if indexer is None:\n                        indexer = k_index\n                    else:\n                        indexer &= k_index\n                if indexer is None:\n                    indexer = slice(None, None)\n                ilevels = [i for i in range(len(key)) if key[i] != slice(\n                    None, None)]\n                return indexer, maybe_droplevels(indexer, ilevels, drop_level)\n        else:\n            indexer = self._get_level_indexer(key, level=level)\n            return indexer, maybe_droplevels(indexer, [level], drop_level)\n\n    def _get_level_indexer(self, key, level=0, indexer=None):\n        level_index = self.levels[level]\n        labels = self.labels[level]\n\n        def convert_indexer(start, stop, step, indexer=indexer, labels=labels):\n            r = np.arange(start, stop, step)\n            if indexer is not None and len(indexer) != len(labels):\n                from pandas import Series\n                mapper = Series(indexer)\n                indexer = labels.take(ensure_platform_int(indexer))\n                result = Series(Index(indexer).isin(r).nonzero()[0])\n                m = result.map(mapper)._ndarray_values\n            else:\n                m = np.zeros(len(labels), dtype=bool)\n                m[np.in1d(labels, r, assume_unique=Index(labels).is_unique)\n                    ] = True\n            return m\n        if isinstance(key, slice):\n            try:\n                if key.start is not None:\n                    start = level_index.get_loc(key.start)\n                else:\n                    start = 0\n                if key.stop is not None:\n                    stop = level_index.get_loc(key.stop)\n                else:\n                    stop = len(level_index) - 1\n                step = key.step\n            except KeyError:\n                start = stop = level_index.slice_indexer(key.start, key.\n                    stop, key.step, kind='loc')\n                step = start.step\n            if isinstance(start, slice) or isinstance(stop, slice):\n                return convert_indexer(start.start, stop.stop, step)\n            elif level > 0 or self.lexsort_depth == 0 or step is not None:\n                return convert_indexer(start, stop + 1, step)\n            else:\n                i = labels.searchsorted(start, side='left')\n                j = labels.searchsorted(stop, side='right')\n                return slice(i, j, step)\n        else:\n            code = level_index.get_loc(key)\n            if level > 0 or self.lexsort_depth == 0:\n                locs = np.array(labels == code, dtype=bool, copy=False)\n                if not locs.any():\n                    raise KeyError(key)\n                return locs\n            i = labels.searchsorted(code, side='left')\n            j = labels.searchsorted(code, side='right')\n            if i == j:\n                raise KeyError(key)\n            return slice(i, j)\n\n    def get_locs(self, seq):\n        \"\"\"\n        Get location for a given label/slice/list/mask or a sequence of such as\n        an array of integers.\n\n        Parameters\n        ----------\n        seq : label/slice/list/mask or a sequence of such\n           You should use one of the above for each level.\n           If a level should not be used, set it to ``slice(None)``.\n\n        Returns\n        -------\n        locs : array of integers suitable for passing to iloc\n\n        Examples\n        ---------\n        >>> mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\n\n        >>> mi.get_locs('b')\n        array([1, 2], dtype=int64)\n\n        >>> mi.get_locs([slice(None), ['e', 'f']])\n        array([1, 2], dtype=int64)\n\n        >>> mi.get_locs([[True, False, True], slice('e', 'f')])\n        array([2], dtype=int64)\n\n        See also\n        --------\n        MultiIndex.get_loc : Get location for a label or a tuple of labels.\n        MultiIndex.slice_locs : Get slice location given start label(s) and\n                                end label(s).\n        \"\"\"\n        from .numeric import Int64Index\n        true_slices = [i for i, s in enumerate(com.is_true_slices(seq)) if s]\n        if true_slices and true_slices[-1] >= self.lexsort_depth:\n            raise UnsortedIndexError(\n                'MultiIndex slicing requires the index to be lexsorted: slicing on levels {0}, lexsort depth {1}'\n                .format(true_slices, self.lexsort_depth))\n        n = len(self)\n        indexer = None\n\n        def _convert_to_indexer(r):\n            if isinstance(r, slice):\n                m = np.zeros(n, dtype=bool)\n                m[r] = True\n                r = m.nonzero()[0]\n            elif com.is_bool_indexer(r):\n                if len(r) != n:\n                    raise ValueError(\n                        'cannot index with a boolean indexer that is not the same length as the index'\n                        )\n                r = r.nonzero()[0]\n            return Int64Index(r)\n\n        def _update_indexer(idxr, indexer=indexer):\n            if indexer is None:\n                indexer = Index(np.arange(n))\n            if idxr is None:\n                return indexer\n            return indexer & idxr\n        for i, k in enumerate(seq):\n            if com.is_bool_indexer(k):\n                k = np.asarray(k)\n                indexer = _update_indexer(_convert_to_indexer(k), indexer=\n                    indexer)\n            elif is_list_like(k):\n                indexers = None\n                for x in k:\n                    try:\n                        idxrs = _convert_to_indexer(self._get_level_indexer\n                            (x, level=i, indexer=indexer))\n                        indexers = (idxrs if indexers is None else indexers |\n                            idxrs)\n                    except KeyError:\n                        continue\n                if indexers is not None:\n                    indexer = _update_indexer(indexers, indexer=indexer)\n                else:\n                    return Int64Index([])._ndarray_values\n            elif com.is_null_slice(k):\n                indexer = _update_indexer(None, indexer=indexer)\n            elif isinstance(k, slice):\n                indexer = _update_indexer(_convert_to_indexer(self.\n                    _get_level_indexer(k, level=i, indexer=indexer)),\n                    indexer=indexer)\n            else:\n                indexer = _update_indexer(_convert_to_indexer(self.\n                    get_loc_level(k, level=i, drop_level=False)[0]),\n                    indexer=indexer)\n        if indexer is None:\n            return Int64Index([])._ndarray_values\n        return indexer._ndarray_values\n\n    def truncate(self, before=None, after=None):\n        \"\"\"\n        Slice index between two labels / tuples, return new MultiIndex\n\n        Parameters\n        ----------\n        before : label or tuple, can be partial. Default None\n            None defaults to start\n        after : label or tuple, can be partial. Default None\n            None defaults to end\n\n        Returns\n        -------\n        truncated : MultiIndex\n        \"\"\"\n        if after and before and after < before:\n            raise ValueError('after < before')\n        i, j = self.levels[0].slice_locs(before, after)\n        left, right = self.slice_locs(before, after)\n        new_levels = list(self.levels)\n        new_levels[0] = new_levels[0][i:j]\n        new_labels = [lab[left:right] for lab in self.labels]\n        new_labels[0] = new_labels[0] - i\n        return MultiIndex(levels=new_levels, labels=new_labels,\n            verify_integrity=False)\n\n    def equals(self, other):\n        \"\"\"\n        Determines if two MultiIndex objects have the same labeling information\n        (the levels themselves do not necessarily have to be the same)\n\n        See also\n        --------\n        equal_levels\n        \"\"\"\n        if self.is_(other):\n            return True\n        if not isinstance(other, Index):\n            return False\n        if not isinstance(other, MultiIndex):\n            other_vals = com.values_from_object(ensure_index(other))\n            return array_equivalent(self._ndarray_values, other_vals)\n        if self.nlevels != other.nlevels:\n            return False\n        if len(self) != len(other):\n            return False\n        for i in range(self.nlevels):\n            slabels = self.labels[i]\n            slabels = slabels[slabels != -1]\n            svalues = algos.take_nd(np.asarray(self.levels[i]._values),\n                slabels, allow_fill=False)\n            olabels = other.labels[i]\n            olabels = olabels[olabels != -1]\n            ovalues = algos.take_nd(np.asarray(other.levels[i]._values),\n                olabels, allow_fill=False)\n            if len(svalues) == 0 and len(ovalues) == 0:\n                continue\n            if not array_equivalent(svalues, ovalues):\n                return False\n        return True\n\n    def equal_levels(self, other):\n        \"\"\"\n        Return True if the levels of both MultiIndex objects are the same\n\n        \"\"\"\n        if self.nlevels != other.nlevels:\n            return False\n        for i in range(self.nlevels):\n            if not self.levels[i].equals(other.levels[i]):\n                return False\n        return True\n\n    def union(self, other):\n        \"\"\"\n        Form the union of two MultiIndex objects, sorting if possible\n\n        Parameters\n        ----------\n        other : MultiIndex or array / Index of tuples\n\n        Returns\n        -------\n        Index\n\n        >>> index.union(index2)\n        \"\"\"\n        self._assert_can_do_setop(other)\n        other, result_names = self._convert_can_do_setop(other)\n        if len(other) == 0 or self.equals(other):\n            return self\n        uniq_tuples = lib.fast_unique_multiple([self._ndarray_values, other\n            ._ndarray_values])\n        return MultiIndex.from_arrays(lzip(*uniq_tuples), sortorder=0,\n            names=result_names)\n\n    def intersection(self, other):\n        \"\"\"\n        Form the intersection of two MultiIndex objects, sorting if possible\n\n        Parameters\n        ----------\n        other : MultiIndex or array / Index of tuples\n\n        Returns\n        -------\n        Index\n        \"\"\"\n        self._assert_can_do_setop(other)\n        other, result_names = self._convert_can_do_setop(other)\n        if self.equals(other):\n            return self\n        self_tuples = self._ndarray_values\n        other_tuples = other._ndarray_values\n        uniq_tuples = sorted(set(self_tuples) & set(other_tuples))\n        if len(uniq_tuples) == 0:\n            return MultiIndex(levels=self.levels, labels=[[]] * self.\n                nlevels, names=result_names, verify_integrity=False)\n        else:\n            return MultiIndex.from_arrays(lzip(*uniq_tuples), sortorder=0,\n                names=result_names)\n\n    def difference(self, other):\n        \"\"\"\n        Compute sorted set difference of two MultiIndex objects\n\n        Returns\n        -------\n        diff : MultiIndex\n        \"\"\"\n        self._assert_can_do_setop(other)\n        other, result_names = self._convert_can_do_setop(other)\n        if len(other) == 0:\n            return self\n        if self.equals(other):\n            return MultiIndex(levels=self.levels, labels=[[]] * self.\n                nlevels, names=result_names, verify_integrity=False)\n        difference = sorted(set(self._ndarray_values) - set(other.\n            _ndarray_values))\n        if len(difference) == 0:\n            return MultiIndex(levels=[[]] * self.nlevels, labels=[[]] *\n                self.nlevels, names=result_names, verify_integrity=False)\n        else:\n            return MultiIndex.from_tuples(difference, sortorder=0, names=\n                result_names)\n\n    @Appender(_index_shared_docs['astype'])\n    def astype(self, dtype, copy=True):\n        dtype = pandas_dtype(dtype)\n        if is_categorical_dtype(dtype):\n            msg = '> 1 ndim Categorical are not supported at this time'\n            raise NotImplementedError(msg)\n        elif not is_object_dtype(dtype):\n            msg = (\n                'Setting {cls} dtype to anything other than object is not supported'\n                .format(cls=self.__class__))\n            raise TypeError(msg)\n        elif copy is True:\n            return self._shallow_copy()\n        return self\n\n    def _convert_can_do_setop(self, other):\n        result_names = self.names\n        if not hasattr(other, 'names'):\n            if len(other) == 0:\n                other = MultiIndex(levels=[[]] * self.nlevels, labels=[[]] *\n                    self.nlevels, verify_integrity=False)\n            else:\n                msg = 'other must be a MultiIndex or a list of tuples'\n                try:\n                    other = MultiIndex.from_tuples(other)\n                except:\n                    raise TypeError(msg)\n        else:\n            result_names = self.names if self.names == other.names else None\n        return other, result_names\n\n    def insert(self, loc, item):\n        \"\"\"\n        Make new MultiIndex inserting new item at location\n\n        Parameters\n        ----------\n        loc : int\n        item : tuple\n            Must be same length as number of levels in the MultiIndex\n\n        Returns\n        -------\n        new_index : Index\n        \"\"\"\n        if not isinstance(item, tuple):\n            item = (item,) + ('',) * (self.nlevels - 1)\n        elif len(item) != self.nlevels:\n            raise ValueError('Item must have length equal to number of levels.'\n                )\n        new_levels = []\n        new_labels = []\n        for k, level, labels in zip(item, self.levels, self.labels):\n            if k not in level:\n                lev_loc = len(level)\n                level = level.insert(lev_loc, k)\n            else:\n                lev_loc = level.get_loc(k)\n            new_levels.append(level)\n            new_labels.append(np.insert(ensure_int64(labels), loc, lev_loc))\n        return MultiIndex(levels=new_levels, labels=new_labels, names=self.\n            names, verify_integrity=False)\n\n    def delete(self, loc):\n        \"\"\"\n        Make new index with passed location deleted\n\n        Returns\n        -------\n        new_index : MultiIndex\n        \"\"\"\n        new_labels = [np.delete(lab, loc) for lab in self.labels]\n        return MultiIndex(levels=self.levels, labels=new_labels, names=self\n            .names, verify_integrity=False)\n\n    def _wrap_joined_index(self, joined, other):\n        names = self.names if self.names == other.names else None\n        return MultiIndex.from_tuples(joined, names=names)\n\n    @Appender(Index.isin.__doc__)\n    def isin(self, values, level=None):\n        if level is None:\n            values = MultiIndex.from_tuples(values, names=self.names).values\n            return algos.isin(self.values, values)\n        else:\n            num = self._get_level_number(level)\n            levs = self.levels[num]\n            labs = self.labels[num]\n            sought_labels = levs.isin(values).nonzero()[0]\n            if levs.size == 0:\n                return np.zeros(len(labs), dtype=np.bool_)\n            else:\n                return np.lib.arraysetops.in1d(labs, sought_labels)\n",
                        "belong_class_name": "MultiIndex",
                        "belong_class_init": "",
                        "called_function_name": "_factorize_from_iterable",
                        "called_function_content": "@classmethod\ndef from_arrays(cls, arrays, sortorder=None, names=None):\n    \"\"\"\n        Convert arrays to MultiIndex\n\n        Parameters\n        ----------\n        arrays : list / sequence of array-likes\n            Each array-like gives one level's value for each data point.\n            len(arrays) is the number of levels.\n        sortorder : int or None\n            Level of sortedness (must be lexicographically sorted by that\n            level)\n\n        Returns\n        -------\n        index : MultiIndex\n\n        Examples\n        --------\n        >>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\n        >>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\n\n        See Also\n        --------\n        MultiIndex.from_tuples : Convert list of tuples to MultiIndex\n        MultiIndex.from_product : Make a MultiIndex from cartesian product\n                                  of iterables\n        \"\"\"\n    if not is_list_like(arrays):\n        raise TypeError('Input must be a list / sequence of array-likes.')\n    elif is_iterator(arrays):\n        arrays = list(arrays)\n    for i in range(1, len(arrays)):\n        if len(arrays[i]) != len(arrays[i - 1]):\n            raise ValueError('all arrays must be same length')\n    from pandas.core.arrays.categorical import _factorize_from_iterables\n    labels, levels = _factorize_from_iterables(arrays)\n    if names is None:\n        names = [getattr(arr, 'name', None) for arr in arrays]\n    return MultiIndex(levels=levels, labels=labels, sortorder=sortorder,\n        names=names, verify_integrity=False)\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(values)",
                        "split_result": "failure"
                    },
                    {
                        "function_name": "_factorize_from_iterable",
                        "function_content": "def _factorize_from_iterable(values):\n    \"\"\"\n    Factorize an input `values` into `categories` and `codes`. Preserves\n    categorical dtype in `categories`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    values : list-like\n\n    Returns\n    -------\n    codes : ndarray\n    categories : Index\n        If `values` has a categorical dtype, then `categories` is\n        a CategoricalIndex keeping the categories and order of `values`.\n    \"\"\"\n    from pandas.core.indexes.category import CategoricalIndex\n    if not is_list_like(values):\n        raise TypeError('Input must be list-like')\n    if is_categorical(values):\n        if isinstance(values, (ABCCategoricalIndex, ABCSeries)):\n            values = values._values\n        categories = CategoricalIndex(values.categories, categories=values.\n            categories, ordered=values.ordered)\n        codes = values.codes\n    else:\n        cat = Categorical(values, ordered=True)\n        categories = cat.categories\n        codes = cat.codes\n    return codes, categories\n",
                        "function_parameter": "(values)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "__init__",
                        "called_function_content": "def _factorize_from_iterable(values):\n    \"\"\"\n    Factorize an input `values` into `categories` and `codes`. Preserves\n    categorical dtype in `categories`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    values : list-like\n\n    Returns\n    -------\n    codes : ndarray\n    categories : Index\n        If `values` has a categorical dtype, then `categories` is\n        a CategoricalIndex keeping the categories and order of `values`.\n    \"\"\"\n    from pandas.core.indexes.category import CategoricalIndex\n    if not is_list_like(values):\n        raise TypeError('Input must be list-like')\n    if is_categorical(values):\n        if isinstance(values, (ABCCategoricalIndex, ABCSeries)):\n            values = values._values\n        categories = CategoricalIndex(values.categories, categories=values.\n            categories, ordered=values.ordered)\n        codes = values.codes\n    else:\n        cat = Categorical(values, ordered=True)\n        categories = cat.categories\n        codes = cat.codes\n    return codes, categories\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(self, values, categories=None, ordered=None, dtype=None,\n    fastpath=False)",
                        "split_result": "failure"
                    },
                    {
                        "function_name": "__init__",
                        "function_content": "def __init__(self, values, categories=None, ordered=None, dtype=None,\n    fastpath=False):\n    if dtype is not None:\n        if isinstance(dtype, compat.string_types):\n            if dtype == 'category':\n                dtype = CategoricalDtype(categories, ordered)\n            else:\n                msg = 'Unknown `dtype` {dtype}'\n                raise ValueError(msg.format(dtype=dtype))\n        elif categories is not None or ordered is not None:\n            raise ValueError(\n                'Cannot specify both `dtype` and `categories` or `ordered`.')\n        categories = dtype.categories\n    elif is_categorical(values):\n        dtype = values.dtype._from_categorical_dtype(values.dtype,\n            categories, ordered)\n    else:\n        dtype = CategoricalDtype(categories, ordered)\n    if fastpath:\n        self._codes = coerce_indexer_dtype(values, categories)\n        self._dtype = self._dtype.update_dtype(dtype)\n        return\n    null_mask = np.array(False)\n    if is_categorical_dtype(values):\n        if dtype.categories is None:\n            dtype = CategoricalDtype(values.categories, dtype.ordered)\n    elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n        values = maybe_infer_to_datetimelike(values, convert_dates=True)\n        if not isinstance(values, np.ndarray):\n            values = _convert_to_list_like(values)\n            from pandas.core.series import _sanitize_array\n            if len(values) == 0:\n                sanitize_dtype = 'object'\n            else:\n                sanitize_dtype = None\n            null_mask = isna(values)\n            if null_mask.any():\n                values = [values[idx] for idx in np.where(~null_mask)[0]]\n            values = _sanitize_array(values, None, dtype=sanitize_dtype)\n    if dtype.categories is None:\n        try:\n            codes, categories = factorize(values, sort=True)\n        except TypeError:\n            codes, categories = factorize(values, sort=False)\n            if dtype.ordered:\n                raise TypeError(\n                    \"'values' is not ordered, please explicitly specify the categories order by passing in a categories argument.\"\n                    )\n        except ValueError:\n            raise NotImplementedError(\n                '> 1 ndim Categorical are not supported at this time')\n        dtype = CategoricalDtype(categories, dtype.ordered)\n    elif is_categorical_dtype(values):\n        old_codes = values.cat.codes if isinstance(values, ABCSeries\n            ) else values.codes\n        codes = _recode_for_categories(old_codes, values.dtype.categories,\n            dtype.categories)\n    else:\n        codes = _get_codes_for_values(values, dtype.categories)\n    if null_mask.any():\n        full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n        full_codes[~null_mask] = codes\n        codes = full_codes\n    self._dtype = self._dtype.update_dtype(dtype)\n    self._codes = coerce_indexer_dtype(codes, dtype.categories)\n",
                        "function_parameter": "(self, values, categories=None, ordered=None, dtype=None,\n    fastpath=False)",
                        "belong_class_content": "class Categorical(ExtensionArray, PandasObject):\n    \"\"\"\n    Represents a categorical variable in classic R / S-plus fashion\n\n    `Categoricals` can only take on only a limited, and usually fixed, number\n    of possible values (`categories`). In contrast to statistical categorical\n    variables, a `Categorical` might have an order, but numerical operations\n    (additions, divisions, ...) are not possible.\n\n    All values of the `Categorical` are either in `categories` or `np.nan`.\n    Assigning values outside of `categories` will raise a `ValueError`. Order\n    is defined by the order of the `categories`, not lexical order of the\n    values.\n\n    Parameters\n    ----------\n    values : list-like\n        The values of the categorical. If categories are given, values not in\n        categories will be replaced with NaN.\n    categories : Index-like (unique), optional\n        The unique categories for this categorical. If not given, the\n        categories are assumed to be the unique values of `values` (sorted, if\n        possible, otherwise in the order in which they appear).\n    ordered : boolean, (default False)\n        Whether or not this categorical is treated as a ordered categorical.\n        If True, the resulting categorical will be ordered.\n        An ordered categorical respects, when sorted, the order of its\n        `categories` attribute (which in turn is the `categories` argument, if\n        provided).\n    dtype : CategoricalDtype\n        An instance of ``CategoricalDtype`` to use for this categorical\n\n        .. versionadded:: 0.21.0\n\n    Attributes\n    ----------\n    categories : Index\n        The categories of this categorical\n    codes : ndarray\n        The codes (integer positions, which point to the categories) of this\n        categorical, read only.\n    ordered : boolean\n        Whether or not this Categorical is ordered.\n    dtype : CategoricalDtype\n        The instance of ``CategoricalDtype`` storing the ``categories``\n        and ``ordered``.\n\n        .. versionadded:: 0.21.0\n\n    Methods\n    -------\n    from_codes\n    __array__\n\n    Raises\n    ------\n    ValueError\n        If the categories do not validate.\n    TypeError\n        If an explicit ``ordered=True`` is given but no `categories` and the\n        `values` are not sortable.\n\n    Examples\n    --------\n    >>> pd.Categorical([1, 2, 3, 1, 2, 3])\n    [1, 2, 3, 1, 2, 3]\n    Categories (3, int64): [1, 2, 3]\n\n    >>> pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])\n    [a, b, c, a, b, c]\n    Categories (3, object): [a, b, c]\n\n    Ordered `Categoricals` can be sorted according to the custom order\n    of the categories and can have a min and max value.\n\n    >>> c = pd.Categorical(['a','b','c','a','b','c'], ordered=True,\n    ...                    categories=['c', 'b', 'a'])\n    >>> c\n    [a, b, c, a, b, c]\n    Categories (3, object): [c < b < a]\n    >>> c.min()\n    'c'\n\n    Notes\n    -----\n    See the `user guide\n    <http://pandas.pydata.org/pandas-docs/stable/categorical.html>`_ for more.\n\n    See also\n    --------\n    pandas.api.types.CategoricalDtype : Type for categorical data\n    CategoricalIndex : An Index with an underlying ``Categorical``\n    \"\"\"\n    __array_priority__ = 1000\n    _dtype = CategoricalDtype(ordered=False)\n    _deprecations = frozenset(['labels'])\n    _typ = 'categorical'\n\n    def __init__(self, values, categories=None, ordered=None, dtype=None,\n        fastpath=False):\n        if dtype is not None:\n            if isinstance(dtype, compat.string_types):\n                if dtype == 'category':\n                    dtype = CategoricalDtype(categories, ordered)\n                else:\n                    msg = 'Unknown `dtype` {dtype}'\n                    raise ValueError(msg.format(dtype=dtype))\n            elif categories is not None or ordered is not None:\n                raise ValueError(\n                    'Cannot specify both `dtype` and `categories` or `ordered`.'\n                    )\n            categories = dtype.categories\n        elif is_categorical(values):\n            dtype = values.dtype._from_categorical_dtype(values.dtype,\n                categories, ordered)\n        else:\n            dtype = CategoricalDtype(categories, ordered)\n        if fastpath:\n            self._codes = coerce_indexer_dtype(values, categories)\n            self._dtype = self._dtype.update_dtype(dtype)\n            return\n        null_mask = np.array(False)\n        if is_categorical_dtype(values):\n            if dtype.categories is None:\n                dtype = CategoricalDtype(values.categories, dtype.ordered)\n        elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n            values = maybe_infer_to_datetimelike(values, convert_dates=True)\n            if not isinstance(values, np.ndarray):\n                values = _convert_to_list_like(values)\n                from pandas.core.series import _sanitize_array\n                if len(values) == 0:\n                    sanitize_dtype = 'object'\n                else:\n                    sanitize_dtype = None\n                null_mask = isna(values)\n                if null_mask.any():\n                    values = [values[idx] for idx in np.where(~null_mask)[0]]\n                values = _sanitize_array(values, None, dtype=sanitize_dtype)\n        if dtype.categories is None:\n            try:\n                codes, categories = factorize(values, sort=True)\n            except TypeError:\n                codes, categories = factorize(values, sort=False)\n                if dtype.ordered:\n                    raise TypeError(\n                        \"'values' is not ordered, please explicitly specify the categories order by passing in a categories argument.\"\n                        )\n            except ValueError:\n                raise NotImplementedError(\n                    '> 1 ndim Categorical are not supported at this time')\n            dtype = CategoricalDtype(categories, dtype.ordered)\n        elif is_categorical_dtype(values):\n            old_codes = values.cat.codes if isinstance(values, ABCSeries\n                ) else values.codes\n            codes = _recode_for_categories(old_codes, values.dtype.\n                categories, dtype.categories)\n        else:\n            codes = _get_codes_for_values(values, dtype.categories)\n        if null_mask.any():\n            full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n            full_codes[~null_mask] = codes\n            codes = full_codes\n        self._dtype = self._dtype.update_dtype(dtype)\n        self._codes = coerce_indexer_dtype(codes, dtype.categories)\n\n    @property\n    def categories(self):\n        \"\"\"The categories of this categorical.\n\n        Setting assigns new values to each category (effectively a rename of\n        each individual category).\n\n        The assigned value has to be a list-like object. All items must be\n        unique and the number of items in the new categories must be the same\n        as the number of items in the old categories.\n\n        Assigning to `categories` is a inplace operation!\n\n        Raises\n        ------\n        ValueError\n            If the new categories do not validate as categories or if the\n            number of new categories is unequal the number of old categories\n\n        See also\n        --------\n        rename_categories\n        reorder_categories\n        add_categories\n        remove_categories\n        remove_unused_categories\n        set_categories\n        \"\"\"\n        return self.dtype.categories\n\n    @categories.setter\n    def categories(self, categories):\n        new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n        if self.dtype.categories is not None and len(self.dtype.categories\n            ) != len(new_dtype.categories):\n            raise ValueError(\n                'new categories need to have the same number of items as the old categories!'\n                )\n        self._dtype = new_dtype\n\n    @property\n    def ordered(self):\n        \"\"\"Whether the categories have an ordered relationship\"\"\"\n        return self.dtype.ordered\n\n    @property\n    def dtype(self):\n        \"\"\"The :class:`~pandas.api.types.CategoricalDtype` for this instance\"\"\"\n        return self._dtype\n\n    @property\n    def _ndarray_values(self):\n        return self.codes\n\n    @property\n    def _constructor(self):\n        return Categorical\n\n    @classmethod\n    def _from_sequence(cls, scalars, dtype=None, copy=False):\n        return Categorical(scalars, dtype=dtype)\n\n    def copy(self):\n        \"\"\" Copy constructor. \"\"\"\n        return self._constructor(values=self._codes.copy(), categories=self\n            .categories, ordered=self.ordered, fastpath=True)\n\n    def astype(self, dtype, copy=True):\n        \"\"\"\n        Coerce this type to another dtype\n\n        Parameters\n        ----------\n        dtype : numpy dtype or pandas type\n        copy : bool, default True\n            By default, astype always returns a newly allocated object.\n            If copy is set to False and dtype is categorical, the original\n            object is returned.\n\n            .. versionadded:: 0.19.0\n\n        \"\"\"\n        if is_categorical_dtype(dtype):\n            dtype = self.dtype.update_dtype(dtype)\n            self = self.copy() if copy else self\n            if dtype == self.dtype:\n                return self\n            return self._set_dtype(dtype)\n        return np.array(self, dtype=dtype, copy=copy)\n\n    @cache_readonly\n    def ndim(self):\n        \"\"\"Number of dimensions of the Categorical \"\"\"\n        return self._codes.ndim\n\n    @cache_readonly\n    def size(self):\n        \"\"\" return the len of myself \"\"\"\n        return len(self)\n\n    @cache_readonly\n    def itemsize(self):\n        \"\"\" return the size of a single category \"\"\"\n        return self.categories.itemsize\n\n    def tolist(self):\n        \"\"\"\n        Return a list of the values.\n\n        These are each a scalar type, which is a Python scalar\n        (for str, int, float) or a pandas scalar\n        (for Timestamp/Timedelta/Interval/Period)\n        \"\"\"\n        return list(self)\n\n    @property\n    def base(self):\n        \"\"\" compat, we are always our own object \"\"\"\n        return None\n\n    @classmethod\n    def _from_inferred_categories(cls, inferred_categories, inferred_codes,\n        dtype):\n        \"\"\"Construct a Categorical from inferred values\n\n        For inferred categories (`dtype` is None) the categories are sorted.\n        For explicit `dtype`, the `inferred_categories` are cast to the\n        appropriate type.\n\n        Parameters\n        ----------\n\n        inferred_categories : Index\n        inferred_codes : Index\n        dtype : CategoricalDtype or 'category'\n\n        Returns\n        -------\n        Categorical\n        \"\"\"\n        from pandas import Index, to_numeric, to_datetime, to_timedelta\n        cats = Index(inferred_categories)\n        known_categories = isinstance(dtype, CategoricalDtype\n            ) and dtype.categories is not None\n        if known_categories:\n            if dtype.categories.is_numeric():\n                cats = to_numeric(inferred_categories, errors='coerce')\n            elif is_datetime64_dtype(dtype.categories):\n                cats = to_datetime(inferred_categories, errors='coerce')\n            elif is_timedelta64_dtype(dtype.categories):\n                cats = to_timedelta(inferred_categories, errors='coerce')\n        if known_categories:\n            categories = dtype.categories\n            codes = _recode_for_categories(inferred_codes, cats, categories)\n        elif not cats.is_monotonic_increasing:\n            unsorted = cats.copy()\n            categories = cats.sort_values()\n            codes = _recode_for_categories(inferred_codes, unsorted, categories\n                )\n            dtype = CategoricalDtype(categories, ordered=False)\n        else:\n            dtype = CategoricalDtype(cats, ordered=False)\n            codes = inferred_codes\n        return cls(codes, dtype=dtype, fastpath=True)\n\n    @classmethod\n    def from_codes(cls, codes, categories, ordered=False):\n        \"\"\"\n        Make a Categorical type from codes and categories arrays.\n\n        This constructor is useful if you already have codes and categories and\n        so do not need the (computation intensive) factorization step, which is\n        usually done on the constructor.\n\n        If your data does not follow this convention, please use the normal\n        constructor.\n\n        Parameters\n        ----------\n        codes : array-like, integers\n            An integer array, where each integer points to a category in\n            categories or -1 for NaN\n        categories : index-like\n            The categories for the categorical. Items need to be unique.\n        ordered : boolean, (default False)\n            Whether or not this categorical is treated as a ordered\n            categorical. If not given, the resulting categorical will be\n            unordered.\n        \"\"\"\n        codes = np.asarray(codes)\n        if not is_integer_dtype(codes):\n            msg = 'codes need to be array-like integers'\n            if is_float_dtype(codes):\n                icodes = codes.astype('i8')\n                if (icodes == codes).all():\n                    msg = None\n                    codes = icodes\n                    warn(\n                        'float codes will be disallowed in the future and raise a ValueError'\n                        , FutureWarning, stacklevel=2)\n            if msg:\n                raise ValueError(msg)\n        try:\n            codes = coerce_indexer_dtype(codes, categories)\n        except (ValueError, TypeError):\n            raise ValueError(\n                'codes need to be convertible to an arrays of integers')\n        categories = CategoricalDtype.validate_categories(categories)\n        if len(codes) and (codes.max() >= len(categories) or codes.min() < -1):\n            raise ValueError(\n                'codes need to be between -1 and len(categories)-1')\n        return cls(codes, categories=categories, ordered=ordered, fastpath=True\n            )\n    _codes = None\n\n    def _get_codes(self):\n        \"\"\" Get the codes.\n\n        Returns\n        -------\n        codes : integer array view\n            A non writable view of the `codes` array.\n        \"\"\"\n        v = self._codes.view()\n        v.flags.writeable = False\n        return v\n\n    def _set_codes(self, codes):\n        \"\"\"\n        Not settable by the user directly\n        \"\"\"\n        raise ValueError('cannot set Categorical codes directly')\n    codes = property(fget=_get_codes, fset=_set_codes, doc=_codes_doc)\n\n    def _set_categories(self, categories, fastpath=False):\n        \"\"\" Sets new categories inplace\n\n        Parameters\n        ----------\n        fastpath : boolean (default: False)\n           Don't perform validation of the categories for uniqueness or nulls\n\n        Examples\n        --------\n        >>> c = pd.Categorical(['a', 'b'])\n        >>> c\n        [a, b]\n        Categories (2, object): [a, b]\n\n        >>> c._set_categories(pd.Index(['a', 'c']))\n        >>> c\n        [a, c]\n        Categories (2, object): [a, c]\n        \"\"\"\n        if fastpath:\n            new_dtype = CategoricalDtype._from_fastpath(categories, self.\n                ordered)\n        else:\n            new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n        if not fastpath and self.dtype.categories is not None and len(new_dtype\n            .categories) != len(self.dtype.categories):\n            raise ValueError(\n                'new categories need to have the same number of items than the old categories!'\n                )\n        self._dtype = new_dtype\n\n    def _set_dtype(self, dtype):\n        \"\"\"Internal method for directly updating the CategoricalDtype\n\n        Parameters\n        ----------\n        dtype : CategoricalDtype\n\n        Notes\n        -----\n        We don't do any validation here. It's assumed that the dtype is\n        a (valid) instance of `CategoricalDtype`.\n        \"\"\"\n        codes = _recode_for_categories(self.codes, self.categories, dtype.\n            categories)\n        return type(self)(codes, dtype=dtype, fastpath=True)\n\n    def set_ordered(self, value, inplace=False):\n        \"\"\"\n        Sets the ordered attribute to the boolean value\n\n        Parameters\n        ----------\n        value : boolean to set whether this categorical is ordered (True) or\n           not (False)\n        inplace : boolean (default: False)\n           Whether or not to set the ordered attribute inplace or return a copy\n           of this categorical with ordered set to the value\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        new_dtype = CategoricalDtype(self.categories, ordered=value)\n        cat = self if inplace else self.copy()\n        cat._dtype = new_dtype\n        if not inplace:\n            return cat\n\n    def as_ordered(self, inplace=False):\n        \"\"\"\n        Sets the Categorical to be ordered\n\n        Parameters\n        ----------\n        inplace : boolean (default: False)\n           Whether or not to set the ordered attribute inplace or return a copy\n           of this categorical with ordered set to True\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        return self.set_ordered(True, inplace=inplace)\n\n    def as_unordered(self, inplace=False):\n        \"\"\"\n        Sets the Categorical to be unordered\n\n        Parameters\n        ----------\n        inplace : boolean (default: False)\n           Whether or not to set the ordered attribute inplace or return a copy\n           of this categorical with ordered set to False\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        return self.set_ordered(False, inplace=inplace)\n\n    def set_categories(self, new_categories, ordered=None, rename=False,\n        inplace=False):\n        \"\"\" Sets the categories to the specified new_categories.\n\n        `new_categories` can include new categories (which will result in\n        unused categories) or remove old categories (which results in values\n        set to NaN). If `rename==True`, the categories will simple be renamed\n        (less or more items than in old categories will result in values set to\n        NaN or in unused categories respectively).\n\n        This method can be used to perform more than one action of adding,\n        removing, and reordering simultaneously and is therefore faster than\n        performing the individual steps via the more specialised methods.\n\n        On the other hand this methods does not do checks (e.g., whether the\n        old categories are included in the new categories on a reorder), which\n        can result in surprising changes, for example when using special string\n        dtypes on python3, which does not considers a S1 string equal to a\n        single char python string.\n\n        Raises\n        ------\n        ValueError\n            If new_categories does not validate as categories\n\n        Parameters\n        ----------\n        new_categories : Index-like\n           The categories in new order.\n        ordered : boolean, (default: False)\n           Whether or not the categorical is treated as a ordered categorical.\n           If not given, do not change the ordered information.\n        rename : boolean (default: False)\n           Whether or not the new_categories should be considered as a rename\n           of the old categories or as reordered categories.\n        inplace : boolean (default: False)\n           Whether or not to reorder the categories inplace or return a copy of\n           this categorical with reordered categories.\n\n        Returns\n        -------\n        cat : Categorical with reordered categories or None if inplace.\n\n        See also\n        --------\n        rename_categories\n        reorder_categories\n        add_categories\n        remove_categories\n        remove_unused_categories\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if ordered is None:\n            ordered = self.dtype.ordered\n        new_dtype = CategoricalDtype(new_categories, ordered=ordered)\n        cat = self if inplace else self.copy()\n        if rename:\n            if cat.dtype.categories is not None and len(new_dtype.categories\n                ) < len(cat.dtype.categories):\n                self._codes[self._codes >= len(new_dtype.categories)] = -1\n        else:\n            codes = _recode_for_categories(self.codes, self.categories,\n                new_dtype.categories)\n            cat._codes = codes\n        cat._dtype = new_dtype\n        if not inplace:\n            return cat\n\n    def rename_categories(self, new_categories, inplace=False):\n        \"\"\" Renames categories.\n\n        Raises\n        ------\n        ValueError\n            If new categories are list-like and do not have the same number of\n            items than the current categories or do not validate as categories\n\n        Parameters\n        ----------\n        new_categories : list-like, dict-like or callable\n\n           * list-like: all items must be unique and the number of items in\n             the new categories must match the existing number of categories.\n\n           * dict-like: specifies a mapping from\n             old categories to new. Categories not contained in the mapping\n             are passed through and extra categories in the mapping are\n             ignored.\n\n             .. versionadded:: 0.21.0\n\n           * callable : a callable that is called on all items in the old\n             categories and whose return values comprise the new categories.\n\n             .. versionadded:: 0.23.0\n\n           .. warning::\n\n              Currently, Series are considered list like. In a future version\n              of pandas they'll be considered dict-like.\n\n        inplace : boolean (default: False)\n           Whether or not to rename the categories inplace or return a copy of\n           this categorical with renamed categories.\n\n        Returns\n        -------\n        cat : Categorical or None\n           With ``inplace=False``, the new categorical is returned.\n           With ``inplace=True``, there is no return value.\n\n        See also\n        --------\n        reorder_categories\n        add_categories\n        remove_categories\n        remove_unused_categories\n        set_categories\n\n        Examples\n        --------\n        >>> c = pd.Categorical(['a', 'a', 'b'])\n        >>> c.rename_categories([0, 1])\n        [0, 0, 1]\n        Categories (2, int64): [0, 1]\n\n        For dict-like ``new_categories``, extra keys are ignored and\n        categories not in the dictionary are passed through\n\n        >>> c.rename_categories({'a': 'A', 'c': 'C'})\n        [A, A, b]\n        Categories (2, object): [A, b]\n\n        You may also provide a callable to create the new categories\n\n        >>> c.rename_categories(lambda x: x.upper())\n        [A, A, B]\n        Categories (2, object): [A, B]\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        cat = self if inplace else self.copy()\n        if isinstance(new_categories, ABCSeries):\n            msg = \"\"\"Treating Series 'new_categories' as a list-like and using the values. In a future version, 'rename_categories' will treat Series like a dictionary.\nFor dict-like, use 'new_categories.to_dict()'\nFor list-like, use 'new_categories.values'.\"\"\"\n            warn(msg, FutureWarning, stacklevel=2)\n            new_categories = list(new_categories)\n        if is_dict_like(new_categories):\n            cat.categories = [new_categories.get(item, item) for item in\n                cat.categories]\n        elif callable(new_categories):\n            cat.categories = [new_categories(item) for item in cat.categories]\n        else:\n            cat.categories = new_categories\n        if not inplace:\n            return cat\n\n    def reorder_categories(self, new_categories, ordered=None, inplace=False):\n        \"\"\" Reorders categories as specified in new_categories.\n\n        `new_categories` need to include all old categories and no new category\n        items.\n\n        Raises\n        ------\n        ValueError\n            If the new categories do not contain all old category items or any\n            new ones\n\n        Parameters\n        ----------\n        new_categories : Index-like\n           The categories in new order.\n        ordered : boolean, optional\n           Whether or not the categorical is treated as a ordered categorical.\n           If not given, do not change the ordered information.\n        inplace : boolean (default: False)\n           Whether or not to reorder the categories inplace or return a copy of\n           this categorical with reordered categories.\n\n        Returns\n        -------\n        cat : Categorical with reordered categories or None if inplace.\n\n        See also\n        --------\n        rename_categories\n        add_categories\n        remove_categories\n        remove_unused_categories\n        set_categories\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if set(self.dtype.categories) != set(new_categories):\n            raise ValueError(\n                'items in new_categories are not the same as in old categories'\n                )\n        return self.set_categories(new_categories, ordered=ordered, inplace\n            =inplace)\n\n    def add_categories(self, new_categories, inplace=False):\n        \"\"\" Add new categories.\n\n        `new_categories` will be included at the last/highest place in the\n        categories and will be unused directly after this call.\n\n        Raises\n        ------\n        ValueError\n            If the new categories include old categories or do not validate as\n            categories\n\n        Parameters\n        ----------\n        new_categories : category or list-like of category\n           The new categories to be included.\n        inplace : boolean (default: False)\n           Whether or not to add the categories inplace or return a copy of\n           this categorical with added categories.\n\n        Returns\n        -------\n        cat : Categorical with new categories added or None if inplace.\n\n        See also\n        --------\n        rename_categories\n        reorder_categories\n        remove_categories\n        remove_unused_categories\n        set_categories\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not is_list_like(new_categories):\n            new_categories = [new_categories]\n        already_included = set(new_categories) & set(self.dtype.categories)\n        if len(already_included) != 0:\n            msg = (\n                'new categories must not include old categories: {already_included!s}'\n                )\n            raise ValueError(msg.format(already_included=already_included))\n        new_categories = list(self.dtype.categories) + list(new_categories)\n        new_dtype = CategoricalDtype(new_categories, self.ordered)\n        cat = self if inplace else self.copy()\n        cat._dtype = new_dtype\n        cat._codes = coerce_indexer_dtype(cat._codes, new_dtype.categories)\n        if not inplace:\n            return cat\n\n    def remove_categories(self, removals, inplace=False):\n        \"\"\" Removes the specified categories.\n\n        `removals` must be included in the old categories. Values which were in\n        the removed categories will be set to NaN\n\n        Raises\n        ------\n        ValueError\n            If the removals are not contained in the categories\n\n        Parameters\n        ----------\n        removals : category or list of categories\n           The categories which should be removed.\n        inplace : boolean (default: False)\n           Whether or not to remove the categories inplace or return a copy of\n           this categorical with removed categories.\n\n        Returns\n        -------\n        cat : Categorical with removed categories or None if inplace.\n\n        See also\n        --------\n        rename_categories\n        reorder_categories\n        add_categories\n        remove_unused_categories\n        set_categories\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not is_list_like(removals):\n            removals = [removals]\n        removal_set = set(list(removals))\n        not_included = removal_set - set(self.dtype.categories)\n        new_categories = [c for c in self.dtype.categories if c not in\n            removal_set]\n        if any(isna(removals)):\n            not_included = [x for x in not_included if notna(x)]\n            new_categories = [x for x in new_categories if notna(x)]\n        if len(not_included) != 0:\n            msg = 'removals must all be in old categories: {not_included!s}'\n            raise ValueError(msg.format(not_included=not_included))\n        return self.set_categories(new_categories, ordered=self.ordered,\n            rename=False, inplace=inplace)\n\n    def remove_unused_categories(self, inplace=False):\n        \"\"\" Removes categories which are not used.\n\n        Parameters\n        ----------\n        inplace : boolean (default: False)\n           Whether or not to drop unused categories inplace or return a copy of\n           this categorical with unused categories dropped.\n\n        Returns\n        -------\n        cat : Categorical with unused categories dropped or None if inplace.\n\n        See also\n        --------\n        rename_categories\n        reorder_categories\n        add_categories\n        remove_categories\n        set_categories\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        cat = self if inplace else self.copy()\n        idx, inv = np.unique(cat._codes, return_inverse=True)\n        if idx.size != 0 and idx[0] == -1:\n            idx, inv = idx[1:], inv - 1\n        new_categories = cat.dtype.categories.take(idx)\n        new_dtype = CategoricalDtype._from_fastpath(new_categories, ordered\n            =self.ordered)\n        cat._dtype = new_dtype\n        cat._codes = coerce_indexer_dtype(inv, new_dtype.categories)\n        if not inplace:\n            return cat\n\n    def map(self, mapper):\n        \"\"\"\n        Map categories using input correspondence (dict, Series, or function).\n\n        Maps the categories to new categories. If the mapping correspondence is\n        one-to-one the result is a :class:`~pandas.Categorical` which has the\n        same order property as the original, otherwise a :class:`~pandas.Index`\n        is returned.\n\n        If a `dict` or :class:`~pandas.Series` is used any unmapped category is\n        mapped to `NaN`. Note that if this happens an :class:`~pandas.Index`\n        will be returned.\n\n        Parameters\n        ----------\n        mapper : function, dict, or Series\n            Mapping correspondence.\n\n        Returns\n        -------\n        pandas.Categorical or pandas.Index\n            Mapped categorical.\n\n        See Also\n        --------\n        CategoricalIndex.map : Apply a mapping correspondence on a\n            :class:`~pandas.CategoricalIndex`.\n        Index.map : Apply a mapping correspondence on an\n            :class:`~pandas.Index`.\n        Series.map : Apply a mapping correspondence on a\n            :class:`~pandas.Series`.\n        Series.apply : Apply more complex functions on a\n            :class:`~pandas.Series`.\n\n        Examples\n        --------\n        >>> cat = pd.Categorical(['a', 'b', 'c'])\n        >>> cat\n        [a, b, c]\n        Categories (3, object): [a, b, c]\n        >>> cat.map(lambda x: x.upper())\n        [A, B, C]\n        Categories (3, object): [A, B, C]\n        >>> cat.map({'a': 'first', 'b': 'second', 'c': 'third'})\n        [first, second, third]\n        Categories (3, object): [first, second, third]\n\n        If the mapping is one-to-one the ordering of the categories is\n        preserved:\n\n        >>> cat = pd.Categorical(['a', 'b', 'c'], ordered=True)\n        >>> cat\n        [a, b, c]\n        Categories (3, object): [a < b < c]\n        >>> cat.map({'a': 3, 'b': 2, 'c': 1})\n        [3, 2, 1]\n        Categories (3, int64): [3 < 2 < 1]\n\n        If the mapping is not one-to-one an :class:`~pandas.Index` is returned:\n\n        >>> cat.map({'a': 'first', 'b': 'second', 'c': 'first'})\n        Index(['first', 'second', 'first'], dtype='object')\n\n        If a `dict` is used, all unmapped categories are mapped to `NaN` and\n        the result is an :class:`~pandas.Index`:\n\n        >>> cat.map({'a': 'first', 'b': 'second'})\n        Index(['first', 'second', nan], dtype='object')\n        \"\"\"\n        new_categories = self.categories.map(mapper)\n        try:\n            return self.from_codes(self._codes.copy(), categories=\n                new_categories, ordered=self.ordered)\n        except ValueError:\n            return np.take(new_categories, self._codes)\n    __eq__ = _cat_compare_op('__eq__')\n    __ne__ = _cat_compare_op('__ne__')\n    __lt__ = _cat_compare_op('__lt__')\n    __gt__ = _cat_compare_op('__gt__')\n    __le__ = _cat_compare_op('__le__')\n    __ge__ = _cat_compare_op('__ge__')\n\n    @property\n    def shape(self):\n        \"\"\" Shape of the Categorical.\n\n        For internal compatibility with numpy arrays.\n\n        Returns\n        -------\n        shape : tuple\n        \"\"\"\n        return tuple([len(self._codes)])\n\n    def shift(self, periods):\n        \"\"\"\n        Shift Categorical by desired number of periods.\n\n        Parameters\n        ----------\n        periods : int\n            Number of periods to move, can be positive or negative\n\n        Returns\n        -------\n        shifted : Categorical\n        \"\"\"\n        codes = self.codes\n        if codes.ndim > 1:\n            raise NotImplementedError('Categorical with ndim > 1.')\n        if np.prod(codes.shape) and periods != 0:\n            codes = np.roll(codes, ensure_platform_int(periods), axis=0)\n            if periods > 0:\n                codes[:periods] = -1\n            else:\n                codes[periods:] = -1\n        return self.from_codes(codes, categories=self.categories, ordered=\n            self.ordered)\n\n    def __array__(self, dtype=None):\n        \"\"\"\n        The numpy array interface.\n\n        Returns\n        -------\n        values : numpy array\n            A numpy array of either the specified dtype or,\n            if dtype==None (default), the same dtype as\n            categorical.categories.dtype\n        \"\"\"\n        ret = take_1d(self.categories.values, self._codes)\n        if dtype and not is_dtype_equal(dtype, self.categories.dtype):\n            return np.asarray(ret, dtype)\n        if is_extension_array_dtype(ret):\n            ret = np.asarray(ret)\n        return ret\n\n    def __setstate__(self, state):\n        \"\"\"Necessary for making this object picklable\"\"\"\n        if not isinstance(state, dict):\n            raise Exception('invalid pickle state')\n        if '_categories' not in state and '_levels' in state:\n            state['_categories'] = self.dtype.validate_categories(state.pop\n                ('_levels'))\n        if '_codes' not in state and 'labels' in state:\n            state['_codes'] = coerce_indexer_dtype(state.pop('labels'),\n                state['_categories'])\n        if '_ordered' not in state:\n            if 'ordered' in state:\n                state['_ordered'] = state.pop('ordered')\n            else:\n                state['_ordered'] = False\n        if '_dtype' not in state:\n            state['_dtype'] = CategoricalDtype(state['_categories'], state[\n                '_ordered'])\n        for k, v in compat.iteritems(state):\n            setattr(self, k, v)\n\n    @property\n    def T(self):\n        return self\n\n    @property\n    def nbytes(self):\n        return self._codes.nbytes + self.dtype.categories.values.nbytes\n\n    def memory_usage(self, deep=False):\n        \"\"\"\n        Memory usage of my values\n\n        Parameters\n        ----------\n        deep : bool\n            Introspect the data deeply, interrogate\n            `object` dtypes for system-level memory consumption\n\n        Returns\n        -------\n        bytes used\n\n        Notes\n        -----\n        Memory usage does not include memory consumed by elements that\n        are not components of the array if deep=False\n\n        See Also\n        --------\n        numpy.ndarray.nbytes\n        \"\"\"\n        return self._codes.nbytes + self.dtype.categories.memory_usage(deep\n            =deep)\n\n    @Substitution(klass='Categorical')\n    @Appender(_shared_docs['searchsorted'])\n    @deprecate_kwarg(old_arg_name='v', new_arg_name='value')\n    def searchsorted(self, value, side='left', sorter=None):\n        if not self.ordered:\n            raise ValueError(\n                \"\"\"Categorical not ordered\nyou can use .as_ordered() to change the Categorical to an ordered one\"\"\"\n                )\n        from pandas.core.series import Series\n        values_as_codes = _get_codes_for_values(Series(value).values, self.\n            categories)\n        if -1 in values_as_codes:\n            raise ValueError('Value(s) to be inserted must be in categories.')\n        return self.codes.searchsorted(values_as_codes, side=side, sorter=\n            sorter)\n\n    def isna(self):\n        \"\"\"\n        Detect missing values\n\n        Missing values (-1 in .codes) are detected.\n\n        Returns\n        -------\n        a boolean array of whether my values are null\n\n        See also\n        --------\n        isna : top-level isna\n        isnull : alias of isna\n        Categorical.notna : boolean inverse of Categorical.isna\n\n        \"\"\"\n        ret = self._codes == -1\n        return ret\n    isnull = isna\n\n    def notna(self):\n        \"\"\"\n        Inverse of isna\n\n        Both missing values (-1 in .codes) and NA as a category are detected as\n        null.\n\n        Returns\n        -------\n        a boolean array of whether my values are not null\n\n        See also\n        --------\n        notna : top-level notna\n        notnull : alias of notna\n        Categorical.isna : boolean inverse of Categorical.notna\n\n        \"\"\"\n        return ~self.isna()\n    notnull = notna\n\n    def put(self, *args, **kwargs):\n        \"\"\"\n        Replace specific elements in the Categorical with given values.\n        \"\"\"\n        raise NotImplementedError(\n            \"'put' is not yet implemented for Categorical\")\n\n    def dropna(self):\n        \"\"\"\n        Return the Categorical without null values.\n\n        Missing values (-1 in .codes) are detected.\n\n        Returns\n        -------\n        valid : Categorical\n        \"\"\"\n        result = self[self.notna()]\n        return result\n\n    def value_counts(self, dropna=True):\n        \"\"\"\n        Returns a Series containing counts of each category.\n\n        Every category will have an entry, even those with a count of 0.\n\n        Parameters\n        ----------\n        dropna : boolean, default True\n            Don't include counts of NaN.\n\n        Returns\n        -------\n        counts : Series\n\n        See Also\n        --------\n        Series.value_counts\n\n        \"\"\"\n        from numpy import bincount\n        from pandas import Series, CategoricalIndex\n        code, cat = self._codes, self.categories\n        ncat, mask = len(cat), 0 <= code\n        ix, clean = np.arange(ncat), mask.all()\n        if dropna or clean:\n            obs = code if clean else code[mask]\n            count = bincount(obs, minlength=ncat or None)\n        else:\n            count = bincount(np.where(mask, code, ncat))\n            ix = np.append(ix, -1)\n        ix = self._constructor(ix, dtype=self.dtype, fastpath=True)\n        return Series(count, index=CategoricalIndex(ix), dtype='int64')\n\n    def get_values(self):\n        \"\"\" Return the values.\n\n        For internal compatibility with pandas formatting.\n\n        Returns\n        -------\n        values : numpy array\n            A numpy array of the same dtype as categorical.categories.dtype or\n            Index if datetime / periods\n        \"\"\"\n        if is_datetimelike(self.categories):\n            return self.categories.take(self._codes, fill_value=np.nan)\n        return np.array(self)\n\n    def check_for_ordered(self, op):\n        \"\"\" assert that we are ordered \"\"\"\n        if not self.ordered:\n            raise TypeError(\n                \"\"\"Categorical is not ordered for operation {op}\nyou can use .as_ordered() to change the Categorical to an ordered one\n\"\"\"\n                .format(op=op))\n\n    def _values_for_argsort(self):\n        return self._codes.copy()\n\n    def argsort(self, *args, **kwargs):\n        \"\"\"Return the indices that would sort the Categorical.\n\n        Parameters\n        ----------\n        ascending : bool, default True\n            Whether the indices should result in an ascending\n            or descending sort.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n            Sorting algorithm.\n        *args, **kwargs:\n            passed through to :func:`numpy.argsort`.\n\n        Returns\n        -------\n        argsorted : numpy array\n\n        See also\n        --------\n        numpy.ndarray.argsort\n\n        Notes\n        -----\n        While an ordering is applied to the category values, arg-sorting\n        in this context refers more to organizing and grouping together\n        based on matching category values. Thus, this function can be\n        called on an unordered Categorical instance unlike the functions\n        'Categorical.min' and 'Categorical.max'.\n\n        Examples\n        --------\n        >>> pd.Categorical(['b', 'b', 'a', 'c']).argsort()\n        array([2, 0, 1, 3])\n\n        >>> cat = pd.Categorical(['b', 'b', 'a', 'c'],\n        ...                      categories=['c', 'b', 'a'],\n        ...                      ordered=True)\n        >>> cat.argsort()\n        array([3, 0, 1, 2])\n        \"\"\"\n        return super(Categorical, self).argsort(*args, **kwargs)\n\n    def sort_values(self, inplace=False, ascending=True, na_position='last'):\n        \"\"\" Sorts the Categorical by category value returning a new\n        Categorical by default.\n\n        While an ordering is applied to the category values, sorting in this\n        context refers more to organizing and grouping together based on\n        matching category values. Thus, this function can be called on an\n        unordered Categorical instance unlike the functions 'Categorical.min'\n        and 'Categorical.max'.\n\n        Parameters\n        ----------\n        inplace : boolean, default False\n            Do operation in place.\n        ascending : boolean, default True\n            Order ascending. Passing False orders descending. The\n            ordering parameter provides the method by which the\n            category values are organized.\n        na_position : {'first', 'last'} (optional, default='last')\n            'first' puts NaNs at the beginning\n            'last' puts NaNs at the end\n\n        Returns\n        -------\n        y : Categorical or None\n\n        See Also\n        --------\n        Categorical.sort\n        Series.sort_values\n\n        Examples\n        --------\n        >>> c = pd.Categorical([1, 2, 2, 1, 5])\n        >>> c\n        [1, 2, 2, 1, 5]\n        Categories (3, int64): [1, 2, 5]\n        >>> c.sort_values()\n        [1, 1, 2, 2, 5]\n        Categories (3, int64): [1, 2, 5]\n        >>> c.sort_values(ascending=False)\n        [5, 2, 2, 1, 1]\n        Categories (3, int64): [1, 2, 5]\n\n        Inplace sorting can be done as well:\n\n        >>> c.sort_values(inplace=True)\n        >>> c\n        [1, 1, 2, 2, 5]\n        Categories (3, int64): [1, 2, 5]\n        >>>\n        >>> c = pd.Categorical([1, 2, 2, 1, 5])\n\n        'sort_values' behaviour with NaNs. Note that 'na_position'\n        is independent of the 'ascending' parameter:\n\n        >>> c = pd.Categorical([np.nan, 2, 2, np.nan, 5])\n        >>> c\n        [NaN, 2.0, 2.0, NaN, 5.0]\n        Categories (2, int64): [2, 5]\n        >>> c.sort_values()\n        [2.0, 2.0, 5.0, NaN, NaN]\n        Categories (2, int64): [2, 5]\n        >>> c.sort_values(ascending=False)\n        [5.0, 2.0, 2.0, NaN, NaN]\n        Categories (2, int64): [2, 5]\n        >>> c.sort_values(na_position='first')\n        [NaN, NaN, 2.0, 2.0, 5.0]\n        Categories (2, int64): [2, 5]\n        >>> c.sort_values(ascending=False, na_position='first')\n        [NaN, NaN, 5.0, 2.0, 2.0]\n        Categories (2, int64): [2, 5]\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if na_position not in ['last', 'first']:\n            msg = 'invalid na_position: {na_position!r}'\n            raise ValueError(msg.format(na_position=na_position))\n        codes = np.sort(self._codes)\n        if not ascending:\n            codes = codes[::-1]\n        na_mask = codes == -1\n        if na_mask.any():\n            n_nans = len(codes[na_mask])\n            if na_position == 'first':\n                new_codes = codes.copy()\n                new_codes[0:n_nans] = -1\n                new_codes[n_nans:] = codes[~na_mask]\n                codes = new_codes\n            elif na_position == 'last':\n                new_codes = codes.copy()\n                pos = len(codes) - n_nans\n                new_codes[0:pos] = codes[~na_mask]\n                new_codes[pos:] = -1\n                codes = new_codes\n        if inplace:\n            self._codes = codes\n            return\n        else:\n            return self._constructor(values=codes, categories=self.\n                categories, ordered=self.ordered, fastpath=True)\n\n    def _values_for_rank(self):\n        \"\"\"\n        For correctly ranking ordered categorical data. See GH#15420\n\n        Ordered categorical data should be ranked on the basis of\n        codes with -1 translated to NaN.\n\n        Returns\n        -------\n        numpy array\n\n        \"\"\"\n        from pandas import Series\n        if self.ordered:\n            values = self.codes\n            mask = values == -1\n            if mask.any():\n                values = values.astype('float64')\n                values[mask] = np.nan\n        elif self.categories.is_numeric():\n            values = np.array(self)\n        else:\n            values = np.array(self.rename_categories(Series(self.categories\n                ).rank().values))\n        return values\n\n    def ravel(self, order='C'):\n        \"\"\" Return a flattened (numpy) array.\n\n        For internal compatibility with numpy arrays.\n\n        Returns\n        -------\n        raveled : numpy array\n        \"\"\"\n        return np.array(self)\n\n    def view(self):\n        \"\"\"Return a view of myself.\n\n        For internal compatibility with numpy arrays.\n\n        Returns\n        -------\n        view : Categorical\n           Returns `self`!\n        \"\"\"\n        return self\n\n    def to_dense(self):\n        \"\"\"Return my 'dense' representation\n\n        For internal compatibility with numpy arrays.\n\n        Returns\n        -------\n        dense : array\n        \"\"\"\n        return np.asarray(self)\n\n    @deprecate_kwarg(old_arg_name='fill_value', new_arg_name='value')\n    def fillna(self, value=None, method=None, limit=None):\n        \"\"\" Fill NA/NaN values using the specified method.\n\n        Parameters\n        ----------\n        value : scalar, dict, Series\n            If a scalar value is passed it is used to fill all missing values.\n            Alternatively, a Series or dict can be used to fill in different\n            values for each index. The value should not be a list. The\n            value(s) passed should either be in the categories or should be\n            NaN.\n        method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n            Method to use for filling holes in reindexed Series\n            pad / ffill: propagate last valid observation forward to next valid\n            backfill / bfill: use NEXT valid observation to fill gap\n        limit : int, default None\n            (Not implemented yet for Categorical!)\n            If method is specified, this is the maximum number of consecutive\n            NaN values to forward/backward fill. In other words, if there is\n            a gap with more than this number of consecutive NaNs, it will only\n            be partially filled. If method is not specified, this is the\n            maximum number of entries along the entire axis where NaNs will be\n            filled.\n\n        Returns\n        -------\n        filled : Categorical with NA/NaN filled\n        \"\"\"\n        value, method = validate_fillna_kwargs(value, method,\n            validate_scalar_dict_value=False)\n        if value is None:\n            value = np.nan\n        if limit is not None:\n            raise NotImplementedError(\n                'specifying a limit for fillna has not been implemented yet')\n        values = self._codes\n        if method is not None:\n            values = self.to_dense().reshape(-1, len(self))\n            values = interpolate_2d(values, method, 0, None, value).astype(self\n                .categories.dtype)[0]\n            values = _get_codes_for_values(values, self.categories)\n        elif isinstance(value, ABCSeries):\n            if not value[~value.isin(self.categories)].isna().all():\n                raise ValueError('fill value must be in categories')\n            values_codes = _get_codes_for_values(value, self.categories)\n            indexer = np.where(values_codes != -1)\n            values[indexer] = values_codes[values_codes != -1]\n        elif is_hashable(value):\n            if not isna(value) and value not in self.categories:\n                raise ValueError('fill value must be in categories')\n            mask = values == -1\n            if mask.any():\n                values = values.copy()\n                if isna(value):\n                    values[mask] = -1\n                else:\n                    values[mask] = self.categories.get_loc(value)\n        else:\n            raise TypeError(\n                '\"value\" parameter must be a scalar, dict or Series, but you passed a \"{0}\"'\n                .format(type(value).__name__))\n        return self._constructor(values, categories=self.categories,\n            ordered=self.ordered, fastpath=True)\n\n    def take_nd(self, indexer, allow_fill=None, fill_value=None):\n        \"\"\"\n        Take elements from the Categorical.\n\n        Parameters\n        ----------\n        indexer : sequence of integers\n        allow_fill : bool, default None.\n            How to handle negative values in `indexer`.\n\n            * False: negative values in `indices` indicate positional indices\n              from the right. This is similar to\n              :func:`numpy.take`.\n\n            * True: negative values in `indices` indicate missing values\n              (the default). These values are set to `fill_value`. Any other\n              other negative values raise a ``ValueError``.\n\n            .. versionchanged:: 0.23.0\n\n               Deprecated the default value of `allow_fill`. The deprecated\n               default is ``True``. In the future, this will change to\n               ``False``.\n\n        Returns\n        -------\n        Categorical\n            This Categorical will have the same categories and ordered as\n            `self`.\n        \"\"\"\n        indexer = np.asarray(indexer, dtype=np.intp)\n        if allow_fill is None:\n            if (indexer < 0).any():\n                warn(_take_msg, FutureWarning, stacklevel=2)\n                allow_fill = True\n        if isna(fill_value):\n            fill_value = -1\n        codes = take(self._codes, indexer, allow_fill=allow_fill,\n            fill_value=fill_value)\n        result = self._constructor(codes, categories=self.categories,\n            ordered=self.ordered, fastpath=True)\n        return result\n    take = take_nd\n\n    def _slice(self, slicer):\n        \"\"\" Return a slice of myself.\n\n        For internal compatibility with numpy arrays.\n        \"\"\"\n        if isinstance(slicer, tuple) and len(slicer) == 2:\n            if not com.is_null_slice(slicer[0]):\n                raise AssertionError('invalid slicing for a 1-ndim categorical'\n                    )\n            slicer = slicer[1]\n        _codes = self._codes[slicer]\n        return self._constructor(values=_codes, categories=self.categories,\n            ordered=self.ordered, fastpath=True)\n\n    def __len__(self):\n        \"\"\"The length of this Categorical.\"\"\"\n        return len(self._codes)\n\n    def __iter__(self):\n        \"\"\"Returns an Iterator over the values of this Categorical.\"\"\"\n        return iter(self.get_values().tolist())\n\n    def __contains__(self, key):\n        \"\"\"Returns True if `key` is in this Categorical.\"\"\"\n        if isna(key):\n            return self.isna().any()\n        return contains(self, key, container=self._codes)\n\n    def _tidy_repr(self, max_vals=10, footer=True):\n        \"\"\" a short repr displaying only max_vals and an optional (but default\n        footer)\n        \"\"\"\n        num = max_vals // 2\n        head = self[:num]._get_repr(length=False, footer=False)\n        tail = self[-(max_vals - num):]._get_repr(length=False, footer=False)\n        result = u('{head}, ..., {tail}').format(head=head[:-1], tail=tail[1:])\n        if footer:\n            result = u('{result}\\n{footer}').format(result=result, footer=\n                self._repr_footer())\n        return compat.text_type(result)\n\n    def _repr_categories(self):\n        \"\"\" return the base repr for the categories \"\"\"\n        max_categories = 10 if get_option('display.max_categories'\n            ) == 0 else get_option('display.max_categories')\n        from pandas.io.formats import format as fmt\n        if len(self.categories) > max_categories:\n            num = max_categories // 2\n            head = fmt.format_array(self.categories[:num], None)\n            tail = fmt.format_array(self.categories[-num:], None)\n            category_strs = head + ['...'] + tail\n        else:\n            category_strs = fmt.format_array(self.categories, None)\n        category_strs = [x.strip() for x in category_strs]\n        return category_strs\n\n    def _repr_categories_info(self):\n        \"\"\" Returns a string representation of the footer.\"\"\"\n        category_strs = self._repr_categories()\n        dtype = getattr(self.categories, 'dtype_str', str(self.categories.\n            dtype))\n        levheader = 'Categories ({length}, {dtype}): '.format(length=len(\n            self.categories), dtype=dtype)\n        width, height = get_terminal_size()\n        max_width = get_option('display.width') or width\n        if console.in_ipython_frontend():\n            max_width = 0\n        levstring = ''\n        start = True\n        cur_col_len = len(levheader)\n        sep_len, sep = (3, ' < ') if self.ordered else (2, ', ')\n        linesep = sep.rstrip() + '\\n'\n        for val in category_strs:\n            if max_width != 0 and cur_col_len + sep_len + len(val) > max_width:\n                levstring += linesep + ' ' * (len(levheader) + 1)\n                cur_col_len = len(levheader) + 1\n            elif not start:\n                levstring += sep\n                cur_col_len += len(val)\n            levstring += val\n            start = False\n        return levheader + '[' + levstring.replace(' < ... < ', ' ... ') + ']'\n\n    def _repr_footer(self):\n        return u('Length: {length}\\n{info}').format(length=len(self), info=\n            self._repr_categories_info())\n\n    def _get_repr(self, length=True, na_rep='NaN', footer=True):\n        from pandas.io.formats import format as fmt\n        formatter = fmt.CategoricalFormatter(self, length=length, na_rep=\n            na_rep, footer=footer)\n        result = formatter.to_string()\n        return compat.text_type(result)\n\n    def __unicode__(self):\n        \"\"\" Unicode representation. \"\"\"\n        _maxlen = 10\n        if len(self._codes) > _maxlen:\n            result = self._tidy_repr(_maxlen)\n        elif len(self._codes) > 0:\n            result = self._get_repr(length=len(self) > _maxlen)\n        else:\n            msg = self._get_repr(length=False, footer=True).replace('\\n', ', ')\n            result = '[], {repr_msg}'.format(repr_msg=msg)\n        return result\n\n    def _maybe_coerce_indexer(self, indexer):\n        \"\"\" return an indexer coerced to the codes dtype \"\"\"\n        if isinstance(indexer, np.ndarray) and indexer.dtype.kind == 'i':\n            indexer = indexer.astype(self._codes.dtype)\n        return indexer\n\n    def __getitem__(self, key):\n        \"\"\" Return an item. \"\"\"\n        if isinstance(key, (int, np.integer)):\n            i = self._codes[key]\n            if i == -1:\n                return np.nan\n            else:\n                return self.categories[i]\n        else:\n            return self._constructor(values=self._codes[key], dtype=self.\n                dtype, fastpath=True)\n\n    def __setitem__(self, key, value):\n        \"\"\" Item assignment.\n\n\n        Raises\n        ------\n        ValueError\n            If (one or more) Value is not in categories or if a assigned\n            `Categorical` does not have the same categories\n        \"\"\"\n        if isinstance(value, Categorical):\n            if not value.categories.equals(self.categories):\n                raise ValueError(\n                    'Cannot set a Categorical with another, without identical categories'\n                    )\n        rvalue = value if is_list_like(value) else [value]\n        from pandas import Index\n        to_add = Index(rvalue).difference(self.categories)\n        if len(to_add) and not isna(to_add).all():\n            raise ValueError(\n                'Cannot setitem on a Categorical with a new category, set the categories first'\n                )\n        if isinstance(key, (int, np.integer)):\n            pass\n        elif isinstance(key, tuple):\n            if len(key) == 2:\n                if not com.is_null_slice(key[0]):\n                    raise AssertionError(\n                        'invalid slicing for a 1-ndim categorical')\n                key = key[1]\n            elif len(key) == 1:\n                key = key[0]\n            else:\n                raise AssertionError('invalid slicing for a 1-ndim categorical'\n                    )\n        elif isinstance(key, slice):\n            pass\n        else:\n            key = np.asarray(key)\n        lindexer = self.categories.get_indexer(rvalue)\n        lindexer = self._maybe_coerce_indexer(lindexer)\n        self._codes[key] = lindexer\n\n    def _reverse_indexer(self):\n        \"\"\"\n        Compute the inverse of a categorical, returning\n        a dict of categories -> indexers.\n\n        *This is an internal function*\n\n        Returns\n        -------\n        dict of categories -> indexers\n\n        Example\n        -------\n        In [1]: c = pd.Categorical(list('aabca'))\n\n        In [2]: c\n        Out[2]:\n        [a, a, b, c, a]\n        Categories (3, object): [a, b, c]\n\n        In [3]: c.categories\n        Out[3]: Index([u'a', u'b', u'c'], dtype='object')\n\n        In [4]: c.codes\n        Out[4]: array([0, 0, 1, 2, 0], dtype=int8)\n\n        In [5]: c._reverse_indexer()\n        Out[5]: {'a': array([0, 1, 4]), 'b': array([2]), 'c': array([3])}\n\n        \"\"\"\n        categories = self.categories\n        r, counts = libalgos.groupsort_indexer(self.codes.astype('int64'),\n            categories.size)\n        counts = counts.cumsum()\n        result = [r[counts[indexer]:counts[indexer + 1]] for indexer in\n            range(len(counts) - 1)]\n        result = dict(zip(categories, result))\n        return result\n\n    def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None,\n        filter_type=None, **kwds):\n        \"\"\" perform the reduction type operation \"\"\"\n        func = getattr(self, name, None)\n        if func is None:\n            msg = 'Categorical cannot perform the operation {op}'\n            raise TypeError(msg.format(op=name))\n        return func(numeric_only=numeric_only, **kwds)\n\n    def min(self, numeric_only=None, **kwargs):\n        \"\"\" The minimum value of the object.\n\n        Only ordered `Categoricals` have a minimum!\n\n        Raises\n        ------\n        TypeError\n            If the `Categorical` is not `ordered`.\n\n        Returns\n        -------\n        min : the minimum of this `Categorical`\n        \"\"\"\n        self.check_for_ordered('min')\n        if numeric_only:\n            good = self._codes != -1\n            pointer = self._codes[good].min(**kwargs)\n        else:\n            pointer = self._codes.min(**kwargs)\n        if pointer == -1:\n            return np.nan\n        else:\n            return self.categories[pointer]\n\n    def max(self, numeric_only=None, **kwargs):\n        \"\"\" The maximum value of the object.\n\n        Only ordered `Categoricals` have a maximum!\n\n        Raises\n        ------\n        TypeError\n            If the `Categorical` is not `ordered`.\n\n        Returns\n        -------\n        max : the maximum of this `Categorical`\n        \"\"\"\n        self.check_for_ordered('max')\n        if numeric_only:\n            good = self._codes != -1\n            pointer = self._codes[good].max(**kwargs)\n        else:\n            pointer = self._codes.max(**kwargs)\n        if pointer == -1:\n            return np.nan\n        else:\n            return self.categories[pointer]\n\n    def mode(self, dropna=True):\n        \"\"\"\n        Returns the mode(s) of the Categorical.\n\n        Always returns `Categorical` even if only one value.\n\n        Parameters\n        ----------\n        dropna : boolean, default True\n            Don't consider counts of NaN/NaT.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        modes : `Categorical` (sorted)\n        \"\"\"\n        import pandas._libs.hashtable as htable\n        values = self._codes\n        if dropna:\n            good = self._codes != -1\n            values = self._codes[good]\n        values = sorted(htable.mode_int64(ensure_int64(values), dropna))\n        result = self._constructor(values=values, categories=self.\n            categories, ordered=self.ordered, fastpath=True)\n        return result\n\n    def unique(self):\n        \"\"\"\n        Return the ``Categorical`` which ``categories`` and ``codes`` are\n        unique. Unused categories are NOT returned.\n\n        - unordered category: values and categories are sorted by appearance\n          order.\n        - ordered category: values are sorted by appearance order, categories\n          keeps existing order.\n\n        Returns\n        -------\n        unique values : ``Categorical``\n\n        Examples\n        --------\n        An unordered Categorical will return categories in the\n        order of appearance.\n\n        >>> pd.Categorical(list('baabc'))\n        [b, a, c]\n        Categories (3, object): [b, a, c]\n\n        >>> pd.Categorical(list('baabc'), categories=list('abc'))\n        [b, a, c]\n        Categories (3, object): [b, a, c]\n\n        An ordered Categorical preserves the category ordering.\n\n        >>> pd.Categorical(list('baabc'),\n        ...                categories=list('abc'),\n        ...                ordered=True)\n        [b, a, c]\n        Categories (3, object): [a < b < c]\n\n        See Also\n        --------\n        unique\n        CategoricalIndex.unique\n        Series.unique\n\n        \"\"\"\n        unique_codes = unique1d(self.codes)\n        cat = self.copy()\n        cat._codes = unique_codes\n        take_codes = unique_codes[unique_codes != -1]\n        if self.ordered:\n            take_codes = np.sort(take_codes)\n        return cat.set_categories(cat.categories.take(take_codes))\n\n    def _values_for_factorize(self):\n        codes = self.codes.astype('int64')\n        return codes, -1\n\n    @classmethod\n    def _from_factorized(cls, uniques, original):\n        return original._constructor(original.categories.take(uniques),\n            categories=original.categories, ordered=original.ordered)\n\n    def equals(self, other):\n        \"\"\"\n        Returns True if categorical arrays are equal.\n\n        Parameters\n        ----------\n        other : `Categorical`\n\n        Returns\n        -------\n        are_equal : boolean\n        \"\"\"\n        if self.is_dtype_equal(other):\n            if self.categories.equals(other.categories):\n                other_codes = other._codes\n            else:\n                other_codes = _recode_for_categories(other.codes, other.\n                    categories, self.categories)\n            return np.array_equal(self._codes, other_codes)\n        return False\n\n    def is_dtype_equal(self, other):\n        \"\"\"\n        Returns True if categoricals are the same dtype\n          same categories, and same ordered\n\n        Parameters\n        ----------\n        other : Categorical\n\n        Returns\n        -------\n        are_equal : boolean\n        \"\"\"\n        try:\n            return hash(self.dtype) == hash(other.dtype)\n        except (AttributeError, TypeError):\n            return False\n\n    def describe(self):\n        \"\"\" Describes this Categorical\n\n        Returns\n        -------\n        description: `DataFrame`\n            A dataframe with frequency and counts by category.\n        \"\"\"\n        counts = self.value_counts(dropna=False)\n        freqs = counts / float(counts.sum())\n        from pandas.core.reshape.concat import concat\n        result = concat([counts, freqs], axis=1)\n        result.columns = ['counts', 'freqs']\n        result.index.name = 'categories'\n        return result\n\n    def repeat(self, repeats, *args, **kwargs):\n        \"\"\"\n        Repeat elements of a Categorical.\n\n        See also\n        --------\n        numpy.ndarray.repeat\n\n        \"\"\"\n        nv.validate_repeat(args, kwargs)\n        codes = self._codes.repeat(repeats)\n        return self._constructor(values=codes, categories=self.categories,\n            ordered=self.ordered, fastpath=True)\n\n    @property\n    def _can_hold_na(self):\n        return True\n\n    @classmethod\n    def _concat_same_type(self, to_concat):\n        from pandas.core.dtypes.concat import _concat_categorical\n        return _concat_categorical(to_concat)\n\n    def _formatting_values(self):\n        return self\n\n    def isin(self, values):\n        \"\"\"\n        Check whether `values` are contained in Categorical.\n\n        Return a boolean NumPy Array showing whether each element in\n        the Categorical matches an element in the passed sequence of\n        `values` exactly.\n\n        Parameters\n        ----------\n        values : set or list-like\n            The sequence of values to test. Passing in a single string will\n            raise a ``TypeError``. Instead, turn a single string into a\n            list of one element.\n\n        Returns\n        -------\n        isin : numpy.ndarray (bool dtype)\n\n        Raises\n        ------\n        TypeError\n          * If `values` is not a set or list-like\n\n        See Also\n        --------\n        pandas.Series.isin : equivalent method on Series\n\n        Examples\n        --------\n\n        >>> s = pd.Categorical(['lama', 'cow', 'lama', 'beetle', 'lama',\n        ...                'hippo'])\n        >>> s.isin(['cow', 'lama'])\n        array([ True,  True,  True, False,  True, False])\n\n        Passing a single string as ``s.isin('lama')`` will raise an error. Use\n        a list of one element instead:\n\n        >>> s.isin(['lama'])\n        array([ True, False,  True, False,  True, False])\n        \"\"\"\n        from pandas.core.series import _sanitize_array\n        if not is_list_like(values):\n            raise TypeError(\n                'only list-like objects are allowed to be passed to isin(), you passed a [{values_type}]'\n                .format(values_type=type(values).__name__))\n        values = _sanitize_array(values, None, None)\n        null_mask = np.asarray(isna(values))\n        code_values = self.categories.get_indexer(values)\n        code_values = code_values[null_mask | (code_values >= 0)]\n        return algorithms.isin(self.codes, code_values)\n",
                        "belong_class_name": "Categorical",
                        "belong_class_init": "def __init__(self, values, categories=None, ordered=None, dtype=None,\n    fastpath=False):\n    if dtype is not None:\n        if isinstance(dtype, compat.string_types):\n            if dtype == 'category':\n                dtype = CategoricalDtype(categories, ordered)\n            else:\n                msg = 'Unknown `dtype` {dtype}'\n                raise ValueError(msg.format(dtype=dtype))\n        elif categories is not None or ordered is not None:\n            raise ValueError(\n                'Cannot specify both `dtype` and `categories` or `ordered`.')\n        categories = dtype.categories\n    elif is_categorical(values):\n        dtype = values.dtype._from_categorical_dtype(values.dtype,\n            categories, ordered)\n    else:\n        dtype = CategoricalDtype(categories, ordered)\n    if fastpath:\n        self._codes = coerce_indexer_dtype(values, categories)\n        self._dtype = self._dtype.update_dtype(dtype)\n        return\n    null_mask = np.array(False)\n    if is_categorical_dtype(values):\n        if dtype.categories is None:\n            dtype = CategoricalDtype(values.categories, dtype.ordered)\n    elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n        values = maybe_infer_to_datetimelike(values, convert_dates=True)\n        if not isinstance(values, np.ndarray):\n            values = _convert_to_list_like(values)\n            from pandas.core.series import _sanitize_array\n            if len(values) == 0:\n                sanitize_dtype = 'object'\n            else:\n                sanitize_dtype = None\n            null_mask = isna(values)\n            if null_mask.any():\n                values = [values[idx] for idx in np.where(~null_mask)[0]]\n            values = _sanitize_array(values, None, dtype=sanitize_dtype)\n    if dtype.categories is None:\n        try:\n            codes, categories = factorize(values, sort=True)\n        except TypeError:\n            codes, categories = factorize(values, sort=False)\n            if dtype.ordered:\n                raise TypeError(\n                    \"'values' is not ordered, please explicitly specify the categories order by passing in a categories argument.\"\n                    )\n        except ValueError:\n            raise NotImplementedError(\n                '> 1 ndim Categorical are not supported at this time')\n        dtype = CategoricalDtype(categories, dtype.ordered)\n    elif is_categorical_dtype(values):\n        old_codes = values.cat.codes if isinstance(values, ABCSeries\n            ) else values.codes\n        codes = _recode_for_categories(old_codes, values.dtype.categories,\n            dtype.categories)\n    else:\n        codes = _get_codes_for_values(values, dtype.categories)\n    if null_mask.any():\n        full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n        full_codes[~null_mask] = codes\n        codes = full_codes\n    self._dtype = self._dtype.update_dtype(dtype)\n    self._codes = coerce_indexer_dtype(codes, dtype.categories)\n"
                    }
                ]
            ]
        },
        "pandas-22378_ops": {
            "pytest pandas/tests/arithmetic/test_object.py::TestArithmetic::test_add_extension_scalar": [
                [
                    {
                        "function_name": "test_add_extension_scalar",
                        "function_content": "@pytest.mark.parametrize('op', [operator.add, ops.radd])\n@pytest.mark.parametrize('other', ['category', 'Int64'])\ndef test_add_extension_scalar(self, other, box, op):\n    arr = pd.Series(['a', 'b', 'c'])\n    expected = pd.Series([op(x, other) for x in arr])\n    arr = tm.box_expected(arr, box)\n    expected = tm.box_expected(expected, box)\n    result = op(arr, other)\n    tm.assert_equal(result, expected)\n",
                        "function_parameter": "(self, other, box, op)",
                        "belong_class_content": "class TestArithmetic(object):\n\n    @pytest.mark.parametrize('op', [operator.add, ops.radd])\n    @pytest.mark.parametrize('other', ['category', 'Int64'])\n    def test_add_extension_scalar(self, other, box, op):\n        arr = pd.Series(['a', 'b', 'c'])\n        expected = pd.Series([op(x, other) for x in arr])\n        arr = tm.box_expected(arr, box)\n        expected = tm.box_expected(expected, box)\n        result = op(arr, other)\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize('box', [pytest.param(pd.Index, marks=pytest.\n        mark.xfail(reason='Does not mask nulls', strict=True, raises=\n        TypeError)), pd.Series, pd.DataFrame], ids=lambda x: x.__name__)\n    def test_objarr_add_str(self, box):\n        ser = pd.Series(['x', np.nan, 'x'])\n        expected = pd.Series(['xa', np.nan, 'xa'])\n        ser = tm.box_expected(ser, box)\n        expected = tm.box_expected(expected, box)\n        result = ser + 'a'\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize('box', [pytest.param(pd.Index, marks=pytest.\n        mark.xfail(reason='Does not mask nulls', strict=True, raises=\n        TypeError)), pd.Series, pd.DataFrame], ids=lambda x: x.__name__)\n    def test_objarr_radd_str(self, box):\n        ser = pd.Series(['x', np.nan, 'x'])\n        expected = pd.Series(['ax', np.nan, 'ax'])\n        ser = tm.box_expected(ser, box)\n        expected = tm.box_expected(expected, box)\n        result = 'a' + ser\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize('data', [[1, 2, 3], [1.1, 2.2, 3.3], [\n        Timestamp('2011-01-01'), Timestamp('2011-01-02'), pd.NaT], ['x',\n        'y', 1]])\n    @pytest.mark.parametrize('dtype', [None, object])\n    def test_objarr_radd_str_invalid(self, dtype, data, box):\n        ser = Series(data, dtype=dtype)\n        ser = tm.box_expected(ser, box)\n        with pytest.raises(TypeError):\n            'foo_' + ser\n\n    @pytest.mark.parametrize('op', [operator.add, ops.radd, operator.sub,\n        ops.rsub])\n    def test_objarr_add_invalid(self, op, box):\n        if box is pd.DataFrame and op is ops.radd:\n            pytest.xfail(reason=\n                'DataFrame op incorrectly casts the np.arraycase to M8[ns]')\n        obj_ser = tm.makeObjectSeries()\n        obj_ser.name = 'objects'\n        obj_ser = tm.box_expected(obj_ser, box)\n        with pytest.raises(Exception):\n            op(obj_ser, 1)\n        with pytest.raises(Exception):\n            op(obj_ser, np.array(1, dtype=np.int64))\n\n    def test_operators_na_handling(self):\n        ser = Series(['foo', 'bar', 'baz', np.nan])\n        result = 'prefix_' + ser\n        expected = pd.Series(['prefix_foo', 'prefix_bar', 'prefix_baz', np.nan]\n            )\n        tm.assert_series_equal(result, expected)\n        result = ser + '_suffix'\n        expected = pd.Series(['foo_suffix', 'bar_suffix', 'baz_suffix', np.nan]\n            )\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize('dtype', [None, object])\n    def test_series_with_dtype_radd_timedelta(self, dtype):\n        ser = pd.Series([pd.Timedelta('1 days'), pd.Timedelta('2 days'), pd\n            .Timedelta('3 days')], dtype=dtype)\n        expected = pd.Series([pd.Timedelta('4 days'), pd.Timedelta('5 days'\n            ), pd.Timedelta('6 days')])\n        result = pd.Timedelta('3 days') + ser\n        tm.assert_series_equal(result, expected)\n        result = ser + pd.Timedelta('3 days')\n        tm.assert_series_equal(result, expected)\n",
                        "belong_class_name": "TestArithmetic",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "dispatch_to_extension_op",
                        "function_content": "def dispatch_to_extension_op(op, left, right):\n    \"\"\"\n    Assume that left or right is a Series backed by an ExtensionArray,\n    apply the operator defined by op.\n    \"\"\"\n    if is_extension_array_dtype(left):\n        new_left = left.values\n        if isinstance(right, np.ndarray):\n            new_right = lib.item_from_zerodim(right)\n            if is_scalar(new_right):\n                new_right = [new_right]\n            new_right = list(new_right)\n        elif is_extension_array_dtype(right) and type(left) != type(right):\n            new_right = list(new_right)\n        else:\n            new_right = right\n    else:\n        new_left = list(left.values)\n        new_right = right\n    res_values = op(new_left, new_right)\n    res_name = get_op_result_name(left, right)\n    if op.__name__ == 'divmod':\n        return _construct_divmod_result(left, res_values, left.index, res_name)\n    return _construct_result(left, res_values, left.index, res_name)\n",
                        "function_parameter": "(op, left, right)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ],
                [
                    {
                        "function_name": "test_add_extension_scalar",
                        "function_content": "@pytest.mark.parametrize('op', [operator.add, ops.radd])\n@pytest.mark.parametrize('other', ['category', 'Int64'])\ndef test_add_extension_scalar(self, other, box, op):\n    arr = pd.Series(['a', 'b', 'c'])\n    expected = pd.Series([op(x, other) for x in arr])\n    arr = tm.box_expected(arr, box)\n    expected = tm.box_expected(expected, box)\n    result = op(arr, other)\n    tm.assert_equal(result, expected)\n",
                        "function_parameter": "(self, other, box, op)",
                        "belong_class_content": "class TestArithmetic(object):\n\n    @pytest.mark.parametrize('op', [operator.add, ops.radd])\n    @pytest.mark.parametrize('other', ['category', 'Int64'])\n    def test_add_extension_scalar(self, other, box, op):\n        arr = pd.Series(['a', 'b', 'c'])\n        expected = pd.Series([op(x, other) for x in arr])\n        arr = tm.box_expected(arr, box)\n        expected = tm.box_expected(expected, box)\n        result = op(arr, other)\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize('box', [pytest.param(pd.Index, marks=pytest.\n        mark.xfail(reason='Does not mask nulls', strict=True, raises=\n        TypeError)), pd.Series, pd.DataFrame], ids=lambda x: x.__name__)\n    def test_objarr_add_str(self, box):\n        ser = pd.Series(['x', np.nan, 'x'])\n        expected = pd.Series(['xa', np.nan, 'xa'])\n        ser = tm.box_expected(ser, box)\n        expected = tm.box_expected(expected, box)\n        result = ser + 'a'\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize('box', [pytest.param(pd.Index, marks=pytest.\n        mark.xfail(reason='Does not mask nulls', strict=True, raises=\n        TypeError)), pd.Series, pd.DataFrame], ids=lambda x: x.__name__)\n    def test_objarr_radd_str(self, box):\n        ser = pd.Series(['x', np.nan, 'x'])\n        expected = pd.Series(['ax', np.nan, 'ax'])\n        ser = tm.box_expected(ser, box)\n        expected = tm.box_expected(expected, box)\n        result = 'a' + ser\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize('data', [[1, 2, 3], [1.1, 2.2, 3.3], [\n        Timestamp('2011-01-01'), Timestamp('2011-01-02'), pd.NaT], ['x',\n        'y', 1]])\n    @pytest.mark.parametrize('dtype', [None, object])\n    def test_objarr_radd_str_invalid(self, dtype, data, box):\n        ser = Series(data, dtype=dtype)\n        ser = tm.box_expected(ser, box)\n        with pytest.raises(TypeError):\n            'foo_' + ser\n\n    @pytest.mark.parametrize('op', [operator.add, ops.radd, operator.sub,\n        ops.rsub])\n    def test_objarr_add_invalid(self, op, box):\n        if box is pd.DataFrame and op is ops.radd:\n            pytest.xfail(reason=\n                'DataFrame op incorrectly casts the np.arraycase to M8[ns]')\n        obj_ser = tm.makeObjectSeries()\n        obj_ser.name = 'objects'\n        obj_ser = tm.box_expected(obj_ser, box)\n        with pytest.raises(Exception):\n            op(obj_ser, 1)\n        with pytest.raises(Exception):\n            op(obj_ser, np.array(1, dtype=np.int64))\n\n    def test_operators_na_handling(self):\n        ser = Series(['foo', 'bar', 'baz', np.nan])\n        result = 'prefix_' + ser\n        expected = pd.Series(['prefix_foo', 'prefix_bar', 'prefix_baz', np.nan]\n            )\n        tm.assert_series_equal(result, expected)\n        result = ser + '_suffix'\n        expected = pd.Series(['foo_suffix', 'bar_suffix', 'baz_suffix', np.nan]\n            )\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize('dtype', [None, object])\n    def test_series_with_dtype_radd_timedelta(self, dtype):\n        ser = pd.Series([pd.Timedelta('1 days'), pd.Timedelta('2 days'), pd\n            .Timedelta('3 days')], dtype=dtype)\n        expected = pd.Series([pd.Timedelta('4 days'), pd.Timedelta('5 days'\n            ), pd.Timedelta('6 days')])\n        result = pd.Timedelta('3 days') + ser\n        tm.assert_series_equal(result, expected)\n        result = ser + pd.Timedelta('3 days')\n        tm.assert_series_equal(result, expected)\n",
                        "belong_class_name": "TestArithmetic",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "radd",
                        "function_content": "def radd(left, right):\n    return right + left\n",
                        "function_parameter": "(left, right)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "dispatch_to_extension_op",
                        "called_function_content": "def radd(left, right):\n    return right + left\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(op, left, right)",
                        "split_result": "failure"
                    },
                    {
                        "function_name": "dispatch_to_extension_op",
                        "function_content": "def dispatch_to_extension_op(op, left, right):\n    \"\"\"\n    Assume that left or right is a Series backed by an ExtensionArray,\n    apply the operator defined by op.\n    \"\"\"\n    if is_extension_array_dtype(left):\n        new_left = left.values\n        if isinstance(right, np.ndarray):\n            new_right = lib.item_from_zerodim(right)\n            if is_scalar(new_right):\n                new_right = [new_right]\n            new_right = list(new_right)\n        elif is_extension_array_dtype(right) and type(left) != type(right):\n            new_right = list(new_right)\n        else:\n            new_right = right\n    else:\n        new_left = list(left.values)\n        new_right = right\n    res_values = op(new_left, new_right)\n    res_name = get_op_result_name(left, right)\n    if op.__name__ == 'divmod':\n        return _construct_divmod_result(left, res_values, left.index, res_name)\n    return _construct_result(left, res_values, left.index, res_name)\n",
                        "function_parameter": "(op, left, right)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "radd",
                        "called_function_content": "def dispatch_to_extension_op(op, left, right):\n    \"\"\"\n    Assume that left or right is a Series backed by an ExtensionArray,\n    apply the operator defined by op.\n    \"\"\"\n    if is_extension_array_dtype(left):\n        new_left = left.values\n        if isinstance(right, np.ndarray):\n            new_right = lib.item_from_zerodim(right)\n            if is_scalar(new_right):\n                new_right = [new_right]\n            new_right = list(new_right)\n        elif is_extension_array_dtype(right) and type(left) != type(right):\n            new_right = list(new_right)\n        else:\n            new_right = right\n    else:\n        new_left = list(left.values)\n        new_right = right\n    res_values = op(new_left, new_right)\n    res_name = get_op_result_name(left, right)\n    if op.__name__ == 'divmod':\n        return _construct_divmod_result(left, res_values, left.index, res_name)\n    return _construct_result(left, res_values, left.index, res_name)\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(left, right)",
                        "split_result": "failure"
                    },
                    {
                        "function_name": "radd",
                        "function_content": "def radd(left, right):\n    return right + left\n",
                        "function_parameter": "(left, right)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ],
                [
                    {
                        "function_name": "test_add_extension_scalar",
                        "function_content": "@pytest.mark.parametrize('op', [operator.add, ops.radd])\n@pytest.mark.parametrize('other', ['category', 'Int64'])\ndef test_add_extension_scalar(self, other, box, op):\n    arr = pd.Series(['a', 'b', 'c'])\n    expected = pd.Series([op(x, other) for x in arr])\n    arr = tm.box_expected(arr, box)\n    expected = tm.box_expected(expected, box)\n    result = op(arr, other)\n    tm.assert_equal(result, expected)\n",
                        "function_parameter": "(self, other, box, op)",
                        "belong_class_content": "class TestArithmetic(object):\n\n    @pytest.mark.parametrize('op', [operator.add, ops.radd])\n    @pytest.mark.parametrize('other', ['category', 'Int64'])\n    def test_add_extension_scalar(self, other, box, op):\n        arr = pd.Series(['a', 'b', 'c'])\n        expected = pd.Series([op(x, other) for x in arr])\n        arr = tm.box_expected(arr, box)\n        expected = tm.box_expected(expected, box)\n        result = op(arr, other)\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize('box', [pytest.param(pd.Index, marks=pytest.\n        mark.xfail(reason='Does not mask nulls', strict=True, raises=\n        TypeError)), pd.Series, pd.DataFrame], ids=lambda x: x.__name__)\n    def test_objarr_add_str(self, box):\n        ser = pd.Series(['x', np.nan, 'x'])\n        expected = pd.Series(['xa', np.nan, 'xa'])\n        ser = tm.box_expected(ser, box)\n        expected = tm.box_expected(expected, box)\n        result = ser + 'a'\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize('box', [pytest.param(pd.Index, marks=pytest.\n        mark.xfail(reason='Does not mask nulls', strict=True, raises=\n        TypeError)), pd.Series, pd.DataFrame], ids=lambda x: x.__name__)\n    def test_objarr_radd_str(self, box):\n        ser = pd.Series(['x', np.nan, 'x'])\n        expected = pd.Series(['ax', np.nan, 'ax'])\n        ser = tm.box_expected(ser, box)\n        expected = tm.box_expected(expected, box)\n        result = 'a' + ser\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize('data', [[1, 2, 3], [1.1, 2.2, 3.3], [\n        Timestamp('2011-01-01'), Timestamp('2011-01-02'), pd.NaT], ['x',\n        'y', 1]])\n    @pytest.mark.parametrize('dtype', [None, object])\n    def test_objarr_radd_str_invalid(self, dtype, data, box):\n        ser = Series(data, dtype=dtype)\n        ser = tm.box_expected(ser, box)\n        with pytest.raises(TypeError):\n            'foo_' + ser\n\n    @pytest.mark.parametrize('op', [operator.add, ops.radd, operator.sub,\n        ops.rsub])\n    def test_objarr_add_invalid(self, op, box):\n        if box is pd.DataFrame and op is ops.radd:\n            pytest.xfail(reason=\n                'DataFrame op incorrectly casts the np.arraycase to M8[ns]')\n        obj_ser = tm.makeObjectSeries()\n        obj_ser.name = 'objects'\n        obj_ser = tm.box_expected(obj_ser, box)\n        with pytest.raises(Exception):\n            op(obj_ser, 1)\n        with pytest.raises(Exception):\n            op(obj_ser, np.array(1, dtype=np.int64))\n\n    def test_operators_na_handling(self):\n        ser = Series(['foo', 'bar', 'baz', np.nan])\n        result = 'prefix_' + ser\n        expected = pd.Series(['prefix_foo', 'prefix_bar', 'prefix_baz', np.nan]\n            )\n        tm.assert_series_equal(result, expected)\n        result = ser + '_suffix'\n        expected = pd.Series(['foo_suffix', 'bar_suffix', 'baz_suffix', np.nan]\n            )\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize('dtype', [None, object])\n    def test_series_with_dtype_radd_timedelta(self, dtype):\n        ser = pd.Series([pd.Timedelta('1 days'), pd.Timedelta('2 days'), pd\n            .Timedelta('3 days')], dtype=dtype)\n        expected = pd.Series([pd.Timedelta('4 days'), pd.Timedelta('5 days'\n            ), pd.Timedelta('6 days')])\n        result = pd.Timedelta('3 days') + ser\n        tm.assert_series_equal(result, expected)\n        result = ser + pd.Timedelta('3 days')\n        tm.assert_series_equal(result, expected)\n",
                        "belong_class_name": "TestArithmetic",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "f",
                        "function_content": "@Appender(doc)\ndef f(self, other, axis=default_axis, level=None, fill_value=None):\n    other = _align_method_FRAME(self, other, axis)\n    if isinstance(other, ABCDataFrame):\n        return self._combine_frame(other, na_op, fill_value, level)\n    elif isinstance(other, ABCSeries):\n        return _combine_series_frame(self, other, na_op, fill_value=\n            fill_value, axis=axis, level=level, try_cast=True)\n    else:\n        if fill_value is not None:\n            self = self.fillna(fill_value)\n        pass_op = op if lib.is_scalar(other) else na_op\n        return self._combine_const(other, pass_op, try_cast=True)\n",
                        "function_parameter": "(self, other, axis=default_axis, level=None, fill_value=None)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "_combine_const",
                        "called_function_content": "@Appender(doc)\ndef f(self, other, axis=default_axis, level=None, fill_value=None):\n    other = _align_method_FRAME(self, other, axis)\n    if isinstance(other, ABCDataFrame):\n        return self._combine_frame(other, na_op, fill_value, level)\n    elif isinstance(other, ABCSeries):\n        return _combine_series_frame(self, other, na_op, fill_value=\n            fill_value, axis=axis, level=level, try_cast=True)\n    else:\n        if fill_value is not None:\n            self = self.fillna(fill_value)\n        pass_op = op if lib.is_scalar(other) else na_op\n        return self._combine_const(other, pass_op, try_cast=True)\n",
                        "called_arguments": "(other, pass_op, try_cast=True)",
                        "called_function_parameter": "(self, other, func, errors='raise', try_cast=True)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_combine_const",
                        "function_content": "def _combine_const(self, other, func, errors='raise', try_cast=True):\n    if lib.is_scalar(other) or np.ndim(other) == 0:\n        new_data = {i: func(self.iloc[:, i], other) for i, col in enumerate\n            (self.columns)}\n        result = self._constructor(new_data, index=self.index, copy=False)\n        result.columns = self.columns\n        return result\n    new_data = self._data.eval(func=func, other=other, errors=errors,\n        try_cast=try_cast)\n    return self._constructor(new_data)\n",
                        "function_parameter": "(self, other, func, errors='raise', try_cast=True)",
                        "belong_class_content": "class DataFrame(NDFrame):\n    \"\"\" Two-dimensional size-mutable, potentially heterogeneous tabular data\n    structure with labeled axes (rows and columns). Arithmetic operations\n    align on both row and column labels. Can be thought of as a dict-like\n    container for Series objects. The primary pandas data structure.\n\n    Parameters\n    ----------\n    data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n        Dict can contain Series, arrays, constants, or list-like objects\n\n        .. versionchanged :: 0.23.0\n           If data is a dict, argument order is maintained for Python 3.6\n           and later.\n\n    index : Index or array-like\n        Index to use for resulting frame. Will default to RangeIndex if\n        no indexing information part of input data and no index provided\n    columns : Index or array-like\n        Column labels to use for resulting frame. Will default to\n        RangeIndex (0, 1, 2, ..., n) if no column labels are provided\n    dtype : dtype, default None\n        Data type to force. Only a single dtype is allowed. If None, infer\n    copy : boolean, default False\n        Copy data from inputs. Only affects DataFrame / 2d ndarray input\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary.\n\n    >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df = pd.DataFrame(data=d)\n    >>> df\n       col1  col2\n    0     1     3\n    1     2     4\n\n    Notice that the inferred dtype is int64.\n\n    >>> df.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n\n    To enforce a single dtype:\n\n    >>> df = pd.DataFrame(data=d, dtype=np.int8)\n    >>> df.dtypes\n    col1    int8\n    col2    int8\n    dtype: object\n\n    Constructing DataFrame from numpy ndarray:\n\n    >>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n    ...                    columns=['a', 'b', 'c'])\n    >>> df2\n       a  b  c\n    0  1  2  3\n    1  4  5  6\n    2  7  8  9\n\n    See also\n    --------\n    DataFrame.from_records : constructor from tuples, also record arrays\n    DataFrame.from_dict : from dicts of Series, arrays, or dicts\n    DataFrame.from_items : from sequence of (key, value) pairs\n    pandas.read_csv, pandas.read_table, pandas.read_clipboard\n    \"\"\"\n\n    @property\n    def _constructor(self):\n        return DataFrame\n    _constructor_sliced = Series\n    _deprecations = NDFrame._deprecations | frozenset(['sortlevel',\n        'get_value', 'set_value', 'from_csv', 'from_items'])\n    _accessors = set()\n\n    @property\n    def _constructor_expanddim(self):\n        from pandas.core.panel import Panel\n        return Panel\n\n    def __init__(self, data=None, index=None, columns=None, dtype=None,\n        copy=False):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n        if isinstance(data, DataFrame):\n            data = data._data\n        if isinstance(data, BlockManager):\n            mgr = self._init_mgr(data, axes=dict(index=index, columns=\n                columns), dtype=dtype, copy=copy)\n        elif isinstance(data, dict):\n            mgr = self._init_dict(data, index, columns, dtype=dtype)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = _masked_rec_array_to_mgr(data, index, columns, dtype,\n                    copy)\n            else:\n                mask = ma.getmaskarray(data)\n                if mask.any():\n                    data, fill_value = maybe_upcast(data, copy=True)\n                    data[mask] = fill_value\n                else:\n                    data = data.copy()\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                    copy=copy)\n        elif isinstance(data, (np.ndarray, Series, Index)):\n            if data.dtype.names:\n                data_columns = list(data.dtype.names)\n                data = {k: data[k] for k in data_columns}\n                if columns is None:\n                    columns = data_columns\n                mgr = self._init_dict(data, index, columns, dtype=dtype)\n            elif getattr(data, 'name', None) is not None:\n                mgr = self._init_dict({data.name: data}, index, columns,\n                    dtype=dtype)\n            else:\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                    copy=copy)\n        elif isinstance(data, collections.Iterable) and not isinstance(data,\n            string_and_binary_types):\n            if not isinstance(data, collections.Sequence):\n                data = list(data)\n            if len(data) > 0:\n                if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                    if is_named_tuple(data[0]) and columns is None:\n                        columns = data[0]._fields\n                    arrays, columns = _to_arrays(data, columns, dtype=dtype)\n                    columns = ensure_index(columns)\n                    if index is None:\n                        if isinstance(data[0], Series):\n                            index = _get_names_from_index(data)\n                        elif isinstance(data[0], Categorical):\n                            index = ibase.default_index(len(data[0]))\n                        else:\n                            index = ibase.default_index(len(data))\n                    mgr = _arrays_to_mgr(arrays, columns, index, columns,\n                        dtype=dtype)\n                else:\n                    mgr = self._init_ndarray(data, index, columns, dtype=\n                        dtype, copy=copy)\n            else:\n                mgr = self._init_dict({}, index, columns, dtype=dtype)\n        else:\n            try:\n                arr = np.array(data, dtype=dtype, copy=copy)\n            except (ValueError, TypeError) as e:\n                exc = TypeError(\n                    'DataFrame constructor called with incompatible data and dtype: {e}'\n                    .format(e=e))\n                raise_with_traceback(exc)\n            if arr.ndim == 0 and index is not None and columns is not None:\n                values = cast_scalar_to_array((len(index), len(columns)),\n                    data, dtype=dtype)\n                mgr = self._init_ndarray(values, index, columns, dtype=\n                    values.dtype, copy=False)\n            else:\n                raise ValueError('DataFrame constructor not properly called!')\n        NDFrame.__init__(self, mgr, fastpath=True)\n\n    def _init_dict(self, data, index, columns, dtype=None):\n        \"\"\"\n        Segregate Series based on type and coerce into matrices.\n        Needs to handle a lot of exceptional cases.\n        \"\"\"\n        if columns is not None:\n            arrays = Series(data, index=columns, dtype=object)\n            data_names = arrays.index\n            missing = arrays.isnull()\n            if index is None:\n                index = extract_index(arrays[~missing])\n            else:\n                index = ensure_index(index)\n            if missing.any() and not is_integer_dtype(dtype):\n                if dtype is None or np.issubdtype(dtype, np.flexible):\n                    nan_dtype = object\n                else:\n                    nan_dtype = dtype\n                v = construct_1d_arraylike_from_scalar(np.nan, len(index),\n                    nan_dtype)\n                arrays.loc[missing] = [v] * missing.sum()\n        else:\n            keys = com.dict_keys_to_ordered_list(data)\n            columns = data_names = Index(keys)\n            arrays = [data[k] for k in keys]\n        return _arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)\n\n    def _init_ndarray(self, values, index, columns, dtype=None, copy=False):\n        if isinstance(values, Series):\n            if columns is None:\n                if values.name is not None:\n                    columns = [values.name]\n            if index is None:\n                index = values.index\n            else:\n                values = values.reindex(index)\n            if not len(values) and columns is not None and len(columns):\n                values = np.empty((0, 1), dtype=object)\n\n        def _get_axes(N, K, index=index, columns=columns):\n            if index is None:\n                index = ibase.default_index(N)\n            else:\n                index = ensure_index(index)\n            if columns is None:\n                columns = ibase.default_index(K)\n            else:\n                columns = ensure_index(columns)\n            return index, columns\n        if is_categorical_dtype(getattr(values, 'dtype', None)\n            ) or is_categorical_dtype(dtype):\n            if not hasattr(values, 'dtype'):\n                values = _prep_ndarray(values, copy=copy)\n                values = values.ravel()\n            elif copy:\n                values = values.copy()\n            index, columns = _get_axes(len(values), 1)\n            return _arrays_to_mgr([values], columns, index, columns, dtype=\n                dtype)\n        elif is_datetimetz(values) or is_extension_array_dtype(values):\n            if columns is None:\n                columns = [0]\n            return _arrays_to_mgr([values], columns, index, columns, dtype=\n                dtype)\n        values = _prep_ndarray(values, copy=copy)\n        if dtype is not None:\n            if not is_dtype_equal(values.dtype, dtype):\n                try:\n                    values = values.astype(dtype)\n                except Exception as orig:\n                    e = ValueError(\n                        \"failed to cast to '{dtype}' (Exception was: {orig})\"\n                        .format(dtype=dtype, orig=orig))\n                    raise_with_traceback(e)\n        index, columns = _get_axes(*values.shape)\n        values = values.T\n        if dtype is None and is_object_dtype(values):\n            values = maybe_infer_to_datetimelike(values)\n        return create_block_manager_from_blocks([values], [columns, index])\n\n    @property\n    def axes(self):\n        \"\"\"\n        Return a list representing the axes of the DataFrame.\n\n        It has the row axis labels and column axis labels as the only members.\n        They are returned in that order.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.axes\n        [RangeIndex(start=0, stop=2, step=1), Index(['coll', 'col2'],\n        dtype='object')]\n        \"\"\"\n        return [self.index, self.columns]\n\n    @property\n    def shape(self):\n        \"\"\"\n        Return a tuple representing the dimensionality of the DataFrame.\n\n        See Also\n        --------\n        ndarray.shape\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.shape\n        (2, 2)\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n        ...                    'col3': [5, 6]})\n        >>> df.shape\n        (2, 3)\n        \"\"\"\n        return len(self.index), len(self.columns)\n\n    def _repr_fits_vertical_(self):\n        \"\"\"\n        Check length against max_rows.\n        \"\"\"\n        max_rows = get_option('display.max_rows')\n        return len(self) <= max_rows\n\n    def _repr_fits_horizontal_(self, ignore_width=False):\n        \"\"\"\n        Check if full repr fits in horizontal boundaries imposed by the display\n        options width and max_columns. In case off non-interactive session, no\n        boundaries apply.\n\n        ignore_width is here so ipnb+HTML output can behave the way\n        users expect. display.max_columns remains in effect.\n        GH3541, GH3573\n        \"\"\"\n        width, height = console.get_console_size()\n        max_columns = get_option('display.max_columns')\n        nb_columns = len(self.columns)\n        if (max_columns and nb_columns > max_columns or not ignore_width and\n            width and nb_columns > width // 2):\n            return False\n        if ignore_width or not console.in_interactive_session():\n            return True\n        if get_option('display.width'\n            ) is not None or console.in_ipython_frontend():\n            max_rows = 1\n        else:\n            max_rows = get_option('display.max_rows')\n        buf = StringIO()\n        d = self\n        if not max_rows is None:\n            d = d.iloc[:min(max_rows, len(d))]\n        else:\n            return True\n        d.to_string(buf=buf)\n        value = buf.getvalue()\n        repr_width = max(len(l) for l in value.split('\\n'))\n        return repr_width < width\n\n    def _info_repr(self):\n        \"\"\"True if the repr should show the info view.\"\"\"\n        info_repr_option = get_option('display.large_repr') == 'info'\n        return info_repr_option and not (self._repr_fits_horizontal_() and\n            self._repr_fits_vertical_())\n\n    def __unicode__(self):\n        \"\"\"\n        Return a string representation for a particular DataFrame\n\n        Invoked by unicode(df) in py2 only. Yields a Unicode String in both\n        py2/py3.\n        \"\"\"\n        buf = StringIO(u(''))\n        if self._info_repr():\n            self.info(buf=buf)\n            return buf.getvalue()\n        max_rows = get_option('display.max_rows')\n        max_cols = get_option('display.max_columns')\n        show_dimensions = get_option('display.show_dimensions')\n        if get_option('display.expand_frame_repr'):\n            width, _ = console.get_console_size()\n        else:\n            width = None\n        self.to_string(buf=buf, max_rows=max_rows, max_cols=max_cols,\n            line_width=width, show_dimensions=show_dimensions)\n        return buf.getvalue()\n\n    def _repr_html_(self):\n        \"\"\"\n        Return a html representation for a particular DataFrame.\n        Mainly for IPython notebook.\n        \"\"\"\n        if console.in_qtconsole():\n            return None\n        if self._info_repr():\n            buf = StringIO(u(''))\n            self.info(buf=buf)\n            val = buf.getvalue().replace('<', '&lt;', 1)\n            val = val.replace('>', '&gt;', 1)\n            return '<pre>' + val + '</pre>'\n        if get_option('display.notebook_repr_html'):\n            max_rows = get_option('display.max_rows')\n            max_cols = get_option('display.max_columns')\n            show_dimensions = get_option('display.show_dimensions')\n            return self.to_html(max_rows=max_rows, max_cols=max_cols,\n                show_dimensions=show_dimensions, notebook=True)\n        else:\n            return None\n\n    @property\n    def style(self):\n        \"\"\"\n        Property returning a Styler object containing methods for\n        building a styled HTML representation fo the DataFrame.\n\n        See Also\n        --------\n        pandas.io.formats.style.Styler\n        \"\"\"\n        from pandas.io.formats.style import Styler\n        return Styler(self)\n\n    def iteritems(self):\n        \"\"\"\n        Iterator over (column name, Series) pairs.\n\n        See also\n        --------\n        iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n        itertuples : Iterate over DataFrame rows as namedtuples of the values.\n\n        \"\"\"\n        if self.columns.is_unique and hasattr(self, '_item_cache'):\n            for k in self.columns:\n                yield k, self._get_item_cache(k)\n        else:\n            for i, k in enumerate(self.columns):\n                yield k, self._ixs(i, axis=1)\n\n    def iterrows(self):\n        \"\"\"\n        Iterate over DataFrame rows as (index, Series) pairs.\n\n        Notes\n        -----\n\n        1. Because ``iterrows`` returns a Series for each row,\n           it does **not** preserve dtypes across the rows (dtypes are\n           preserved across columns for DataFrames). For example,\n\n           >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n           >>> row = next(df.iterrows())[1]\n           >>> row\n           int      1.0\n           float    1.5\n           Name: 0, dtype: float64\n           >>> print(row['int'].dtype)\n           float64\n           >>> print(df['int'].dtype)\n           int64\n\n           To preserve dtypes while iterating over the rows, it is better\n           to use :meth:`itertuples` which returns namedtuples of the values\n           and which is generally faster than ``iterrows``.\n\n        2. You should **never modify** something you are iterating over.\n           This is not guaranteed to work in all cases. Depending on the\n           data types, the iterator returns a copy and not a view, and writing\n           to it will have no effect.\n\n        Returns\n        -------\n        it : generator\n            A generator that iterates over the rows of the frame.\n\n        See also\n        --------\n        itertuples : Iterate over DataFrame rows as namedtuples of the values.\n        iteritems : Iterate over (column name, Series) pairs.\n\n        \"\"\"\n        columns = self.columns\n        klass = self._constructor_sliced\n        for k, v in zip(self.index, self.values):\n            s = klass(v, index=columns, name=k)\n            yield k, s\n\n    def itertuples(self, index=True, name='Pandas'):\n        \"\"\"\n        Iterate over DataFrame rows as namedtuples, with index value as first\n        element of the tuple.\n\n        Parameters\n        ----------\n        index : boolean, default True\n            If True, return the index as the first element of the tuple.\n        name : string, default \"Pandas\"\n            The name of the returned namedtuples or None to return regular\n            tuples.\n\n        Notes\n        -----\n        The column names will be renamed to positional names if they are\n        invalid Python identifiers, repeated, or start with an underscore.\n        With a large number of columns (>255), regular tuples are returned.\n\n        See also\n        --------\n        iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n        iteritems : Iterate over (column name, Series) pairs.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [0.1, 0.2]},\n                              index=['a', 'b'])\n        >>> df\n           col1  col2\n        a     1   0.1\n        b     2   0.2\n        >>> for row in df.itertuples():\n        ...     print(row)\n        ...\n        Pandas(Index='a', col1=1, col2=0.10000000000000001)\n        Pandas(Index='b', col1=2, col2=0.20000000000000001)\n\n        \"\"\"\n        arrays = []\n        fields = []\n        if index:\n            arrays.append(self.index)\n            fields.append('Index')\n        arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))\n        if name is not None and len(self.columns) + index < 256:\n            try:\n                itertuple = collections.namedtuple(name, fields + list(self\n                    .columns), rename=True)\n                return map(itertuple._make, zip(*arrays))\n            except Exception:\n                pass\n        return zip(*arrays)\n    items = iteritems\n\n    def __len__(self):\n        \"\"\"Returns length of info axis, but here we use the index \"\"\"\n        return len(self.index)\n\n    def dot(self, other):\n        \"\"\"\n        Matrix multiplication with DataFrame or Series objects.  Can also be\n        called using `self @ other` in Python >= 3.5.\n\n        Parameters\n        ----------\n        other : DataFrame or Series\n\n        Returns\n        -------\n        dot_product : DataFrame or Series\n        \"\"\"\n        if isinstance(other, (Series, DataFrame)):\n            common = self.columns.union(other.index)\n            if len(common) > len(self.columns) or len(common) > len(other.index\n                ):\n                raise ValueError('matrices are not aligned')\n            left = self.reindex(columns=common, copy=False)\n            right = other.reindex(index=common, copy=False)\n            lvals = left.values\n            rvals = right.values\n        else:\n            left = self\n            lvals = self.values\n            rvals = np.asarray(other)\n            if lvals.shape[1] != rvals.shape[0]:\n                raise ValueError('Dot product shape mismatch, {l} vs {r}'.\n                    format(l=lvals.shape, r=rvals.shape))\n        if isinstance(other, DataFrame):\n            return self._constructor(np.dot(lvals, rvals), index=left.index,\n                columns=other.columns)\n        elif isinstance(other, Series):\n            return Series(np.dot(lvals, rvals), index=left.index)\n        elif isinstance(rvals, (np.ndarray, Index)):\n            result = np.dot(lvals, rvals)\n            if result.ndim == 2:\n                return self._constructor(result, index=left.index)\n            else:\n                return Series(result, index=left.index)\n        else:\n            raise TypeError('unsupported type: {oth}'.format(oth=type(other)))\n\n    def __matmul__(self, other):\n        \"\"\" Matrix multiplication using binary `@` operator in Python>=3.5 \"\"\"\n        return self.dot(other)\n\n    def __rmatmul__(self, other):\n        \"\"\" Matrix multiplication using binary `@` operator in Python>=3.5 \"\"\"\n        return self.T.dot(np.transpose(other)).T\n\n    @classmethod\n    def from_dict(cls, data, orient='columns', dtype=None, columns=None):\n        \"\"\"\n        Construct DataFrame from dict of array-like or dicts.\n\n        Creates DataFrame object from dictionary by columns or by index\n        allowing dtype specification.\n\n        Parameters\n        ----------\n        data : dict\n            Of the form {field : array-like} or {field : dict}.\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the passed dict\n            should be the columns of the resulting DataFrame, pass 'columns'\n            (default). Otherwise if the keys should be rows, pass 'index'.\n        dtype : dtype, default None\n            Data type to force, otherwise infer.\n        columns : list, default None\n            Column labels to use when ``orient='index'``. Raises a ValueError\n            if used with ``orient='columns'``.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        pandas.DataFrame\n\n        See Also\n        --------\n        DataFrame.from_records : DataFrame from ndarray (structured\n            dtype), list of tuples, dict, or DataFrame\n        DataFrame : DataFrame object creation using constructor\n\n        Examples\n        --------\n        By default the keys of the dict become the DataFrame columns:\n\n        >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data)\n           col_1 col_2\n        0      3     a\n        1      2     b\n        2      1     c\n        3      0     d\n\n        Specify ``orient='index'`` to create the DataFrame using dictionary\n        keys as rows:\n\n        >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data, orient='index')\n               0  1  2  3\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n\n        When using the 'index' orientation, the column names can be\n        specified manually:\n\n        >>> pd.DataFrame.from_dict(data, orient='index',\n        ...                        columns=['A', 'B', 'C', 'D'])\n               A  B  C  D\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n        \"\"\"\n        index = None\n        orient = orient.lower()\n        if orient == 'index':\n            if len(data) > 0:\n                if isinstance(list(data.values())[0], (Series, dict)):\n                    data = _from_nested_dict(data)\n                else:\n                    data, index = list(data.values()), list(data.keys())\n        elif orient == 'columns':\n            if columns is not None:\n                raise ValueError(\n                    \"cannot use columns parameter with orient='columns'\")\n        else:\n            raise ValueError('only recognize index or columns for orient')\n        return cls(data, index=index, columns=columns, dtype=dtype)\n\n    def to_dict(self, orient='dict', into=dict):\n        \"\"\"\n        Convert the DataFrame to a dictionary.\n\n        The type of the key-value pairs can be customized with the parameters\n        (see below).\n\n        Parameters\n        ----------\n        orient : str {'dict', 'list', 'series', 'split', 'records', 'index'}\n            Determines the type of the values of the dictionary.\n\n            - 'dict' (default) : dict like {column -> {index -> value}}\n            - 'list' : dict like {column -> [values]}\n            - 'series' : dict like {column -> Series(values)}\n            - 'split' : dict like\n              {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}\n            - 'records' : list like\n              [{column -> value}, ... , {column -> value}]\n            - 'index' : dict like {index -> {column -> value}}\n\n            Abbreviations are allowed. `s` indicates `series` and `sp`\n            indicates `split`.\n\n        into : class, default dict\n            The collections.Mapping subclass used for all Mappings\n            in the return value.  Can be the actual class or an empty\n            instance of the mapping type you want.  If you want a\n            collections.defaultdict, you must pass it initialized.\n\n            .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        result : collections.Mapping like {column -> {index -> value}}\n\n        See Also\n        --------\n        DataFrame.from_dict: create a DataFrame from a dictionary\n        DataFrame.to_json: convert a DataFrame to JSON format\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2],\n        ...                    'col2': [0.5, 0.75]},\n        ...                   index=['a', 'b'])\n        >>> df\n           col1  col2\n        a     1   0.50\n        b     2   0.75\n        >>> df.to_dict()\n        {'col1': {'a': 1, 'b': 2}, 'col2': {'a': 0.5, 'b': 0.75}}\n\n        You can specify the return orientation.\n\n        >>> df.to_dict('series')\n        {'col1': a    1\n                 b    2\n                 Name: col1, dtype: int64,\n         'col2': a    0.50\n                 b    0.75\n                 Name: col2, dtype: float64}\n\n        >>> df.to_dict('split')\n        {'index': ['a', 'b'], 'columns': ['col1', 'col2'],\n         'data': [[1.0, 0.5], [2.0, 0.75]]}\n\n        >>> df.to_dict('records')\n        [{'col1': 1.0, 'col2': 0.5}, {'col1': 2.0, 'col2': 0.75}]\n\n        >>> df.to_dict('index')\n        {'a': {'col1': 1.0, 'col2': 0.5}, 'b': {'col1': 2.0, 'col2': 0.75}}\n\n        You can also specify the mapping type.\n\n        >>> from collections import OrderedDict, defaultdict\n        >>> df.to_dict(into=OrderedDict)\n        OrderedDict([('col1', OrderedDict([('a', 1), ('b', 2)])),\n                     ('col2', OrderedDict([('a', 0.5), ('b', 0.75)]))])\n\n        If you want a `defaultdict`, you need to initialize it:\n\n        >>> dd = defaultdict(list)\n        >>> df.to_dict('records', into=dd)\n        [defaultdict(<class 'list'>, {'col1': 1.0, 'col2': 0.5}),\n         defaultdict(<class 'list'>, {'col1': 2.0, 'col2': 0.75})]\n        \"\"\"\n        if not self.columns.is_unique:\n            warnings.warn(\n                'DataFrame columns are not unique, some columns will be omitted.'\n                , UserWarning, stacklevel=2)\n        into_c = com.standardize_mapping(into)\n        if orient.lower().startswith('d'):\n            return into_c((k, v.to_dict(into)) for k, v in compat.iteritems\n                (self))\n        elif orient.lower().startswith('l'):\n            return into_c((k, v.tolist()) for k, v in compat.iteritems(self))\n        elif orient.lower().startswith('sp'):\n            return into_c((('index', self.index.tolist()), ('columns', self\n                .columns.tolist()), ('data', lib.map_infer(self.values.\n                ravel(), com.maybe_box_datetimelike).reshape(self.values.\n                shape).tolist())))\n        elif orient.lower().startswith('s'):\n            return into_c((k, com.maybe_box_datetimelike(v)) for k, v in\n                compat.iteritems(self))\n        elif orient.lower().startswith('r'):\n            return [into_c((k, com.maybe_box_datetimelike(v)) for k, v in\n                zip(self.columns, np.atleast_1d(row))) for row in self.values]\n        elif orient.lower().startswith('i'):\n            return into_c((t[0], dict(zip(self.columns, t[1:]))) for t in\n                self.itertuples())\n        else:\n            raise ValueError(\"orient '{o}' not understood\".format(o=orient))\n\n    def to_gbq(self, destination_table, project_id=None, chunksize=None,\n        reauth=False, if_exists='fail', private_key=None,\n        auth_local_webserver=False, table_schema=None, location=None,\n        progress_bar=True, verbose=None):\n        \"\"\"\n        Write a DataFrame to a Google BigQuery table.\n\n        This function requires the `pandas-gbq package\n        <https://pandas-gbq.readthedocs.io>`__.\n\n        See the `How to authenticate with Google BigQuery\n        <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\n        guide for authentication instructions.\n\n        Parameters\n        ----------\n        destination_table : str\n            Name of table to be written, in the form ``dataset.tablename``.\n        project_id : str, optional\n            Google BigQuery Account project ID. Optional when available from\n            the environment.\n        chunksize : int, optional\n            Number of rows to be inserted in each chunk from the dataframe.\n            Set to ``None`` to load the whole dataframe at once.\n        reauth : bool, default False\n            Force Google BigQuery to re-authenticate the user. This is useful\n            if multiple accounts are used.\n        if_exists : str, default 'fail'\n            Behavior when the destination table exists. Value can be one of:\n\n            ``'fail'``\n                If table exists, do nothing.\n            ``'replace'``\n                If table exists, drop it, recreate it, and insert data.\n            ``'append'``\n                If table exists, insert data. Create if does not exist.\n        private_key : str, optional\n            Service account private key in JSON format. Can be file path\n            or string contents. This is useful for remote server\n            authentication (eg. Jupyter/IPython notebook on remote host).\n        auth_local_webserver : bool, default False\n            Use the `local webserver flow`_ instead of the `console flow`_\n            when getting user credentials.\n\n            .. _local webserver flow:\n                http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n            .. _console flow:\n                http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n            *New in version 0.2.0 of pandas-gbq*.\n        table_schema : list of dicts, optional\n            List of BigQuery table fields to which according DataFrame\n            columns conform to, e.g. ``[{'name': 'col1', 'type':\n            'STRING'},...]``. If schema is not provided, it will be\n            generated according to dtypes of DataFrame columns. See\n            BigQuery API documentation on available names of a field.\n\n            *New in version 0.3.1 of pandas-gbq*.\n        location : str, optional\n            Location where the load job should run. See the `BigQuery locations\n            documentation\n            <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n            list of available locations. The location must match that of the\n            target dataset.\n\n            *New in version 0.5.0 of pandas-gbq*.\n        progress_bar : bool, default True\n            Use the library `tqdm` to show the progress bar for the upload,\n            chunk by chunk.\n\n            *New in version 0.5.0 of pandas-gbq*.\n        verbose : bool, deprecated\n            Deprecated in Pandas-GBQ 0.4.0. Use the `logging module\n            to adjust verbosity instead\n            <https://pandas-gbq.readthedocs.io/en/latest/intro.html#logging>`__.\n\n        See Also\n        --------\n        pandas_gbq.to_gbq : This function in the pandas-gbq library.\n        pandas.read_gbq : Read a DataFrame from Google BigQuery.\n        \"\"\"\n        from pandas.io import gbq\n        return gbq.to_gbq(self, destination_table, project_id=project_id,\n            chunksize=chunksize, reauth=reauth, if_exists=if_exists,\n            private_key=private_key, auth_local_webserver=\n            auth_local_webserver, table_schema=table_schema, location=\n            location, progress_bar=progress_bar, verbose=verbose)\n\n    @classmethod\n    def from_records(cls, data, index=None, exclude=None, columns=None,\n        coerce_float=False, nrows=None):\n        \"\"\"\n        Convert structured or record ndarray to DataFrame\n\n        Parameters\n        ----------\n        data : ndarray (structured dtype), list of tuples, dict, or DataFrame\n        index : string, list of fields, array-like\n            Field of array to use as the index, alternately a specific set of\n            input labels to use\n        exclude : sequence, default None\n            Columns or fields to exclude\n        columns : sequence, default None\n            Column names to use. If the passed data do not have names\n            associated with them, this argument provides names for the\n            columns. Otherwise this argument indicates the order of the columns\n            in the result (any names not found in the data will become all-NA\n            columns)\n        coerce_float : boolean, default False\n            Attempt to convert values of non-string, non-numeric objects (like\n            decimal.Decimal) to floating point, useful for SQL result sets\n        nrows : int, default None\n            Number of rows to read if data is an iterator\n\n        Returns\n        -------\n        df : DataFrame\n        \"\"\"\n        if columns is not None:\n            columns = ensure_index(columns)\n        if is_iterator(data):\n            if nrows == 0:\n                return cls()\n            try:\n                first_row = next(data)\n            except StopIteration:\n                return cls(index=index, columns=columns)\n            dtype = None\n            if hasattr(first_row, 'dtype') and first_row.dtype.names:\n                dtype = first_row.dtype\n            values = [first_row]\n            if nrows is None:\n                values += data\n            else:\n                values.extend(itertools.islice(data, nrows - 1))\n            if dtype is not None:\n                data = np.array(values, dtype=dtype)\n            else:\n                data = values\n        if isinstance(data, dict):\n            if columns is None:\n                columns = arr_columns = ensure_index(sorted(data))\n                arrays = [data[k] for k in columns]\n            else:\n                arrays = []\n                arr_columns = []\n                for k, v in compat.iteritems(data):\n                    if k in columns:\n                        arr_columns.append(k)\n                        arrays.append(v)\n                arrays, arr_columns = _reorder_arrays(arrays, arr_columns,\n                    columns)\n        elif isinstance(data, (np.ndarray, DataFrame)):\n            arrays, columns = _to_arrays(data, columns)\n            if columns is not None:\n                columns = ensure_index(columns)\n            arr_columns = columns\n        else:\n            arrays, arr_columns = _to_arrays(data, columns, coerce_float=\n                coerce_float)\n            arr_columns = ensure_index(arr_columns)\n            if columns is not None:\n                columns = ensure_index(columns)\n            else:\n                columns = arr_columns\n        if exclude is None:\n            exclude = set()\n        else:\n            exclude = set(exclude)\n        result_index = None\n        if index is not None:\n            if isinstance(index, compat.string_types) or not hasattr(index,\n                '__iter__'):\n                i = columns.get_loc(index)\n                exclude.add(index)\n                if len(arrays) > 0:\n                    result_index = Index(arrays[i], name=index)\n                else:\n                    result_index = Index([], name=index)\n            else:\n                try:\n                    to_remove = [arr_columns.get_loc(field) for field in index]\n                    index_data = [arrays[i] for i in to_remove]\n                    result_index = ensure_index_from_sequences(index_data,\n                        names=index)\n                    exclude.update(index)\n                except Exception:\n                    result_index = index\n        if any(exclude):\n            arr_exclude = [x for x in exclude if x in arr_columns]\n            to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n            arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n            arr_columns = arr_columns.drop(arr_exclude)\n            columns = columns.drop(exclude)\n        mgr = _arrays_to_mgr(arrays, arr_columns, result_index, columns)\n        return cls(mgr)\n\n    def to_records(self, index=True, convert_datetime64=None):\n        \"\"\"\n        Convert DataFrame to a NumPy record array.\n\n        Index will be put in the 'index' field of the record array if\n        requested.\n\n        Parameters\n        ----------\n        index : boolean, default True\n            Include index in resulting record array, stored in 'index' field.\n        convert_datetime64 : boolean, default None\n            .. deprecated:: 0.23.0\n\n            Whether to convert the index to datetime.datetime if it is a\n            DatetimeIndex.\n\n        Returns\n        -------\n        y : numpy.recarray\n\n        See Also\n        --------\n        DataFrame.from_records: convert structured or record ndarray\n            to DataFrame.\n        numpy.recarray: ndarray that allows field access using\n            attributes, analogous to typed columns in a\n            spreadsheet.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n        ...                   index=['a', 'b'])\n        >>> df\n           A     B\n        a  1  0.50\n        b  2  0.75\n        >>> df.to_records()\n        rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n                  dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n        The index can be excluded from the record array:\n\n        >>> df.to_records(index=False)\n        rec.array([(1, 0.5 ), (2, 0.75)],\n                  dtype=[('A', '<i8'), ('B', '<f8')])\n\n        By default, timestamps are converted to `datetime.datetime`:\n\n        >>> df.index = pd.date_range('2018-01-01 09:00', periods=2, freq='min')\n        >>> df\n                             A     B\n        2018-01-01 09:00:00  1  0.50\n        2018-01-01 09:01:00  2  0.75\n        >>> df.to_records()\n        rec.array([(datetime.datetime(2018, 1, 1, 9, 0), 1, 0.5 ),\n                   (datetime.datetime(2018, 1, 1, 9, 1), 2, 0.75)],\n                  dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n        The timestamp conversion can be disabled so NumPy's datetime64\n        data type is used instead:\n\n        >>> df.to_records(convert_datetime64=False)\n        rec.array([('2018-01-01T09:00:00.000000000', 1, 0.5 ),\n                   ('2018-01-01T09:01:00.000000000', 2, 0.75)],\n                  dtype=[('index', '<M8[ns]'), ('A', '<i8'), ('B', '<f8')])\n        \"\"\"\n        if convert_datetime64 is not None:\n            warnings.warn(\n                \"The 'convert_datetime64' parameter is deprecated and will be removed in a future version\"\n                , FutureWarning, stacklevel=2)\n        if index:\n            if is_datetime64_any_dtype(self.index) and convert_datetime64:\n                ix_vals = [self.index.to_pydatetime()]\n            elif isinstance(self.index, MultiIndex):\n                ix_vals = lmap(np.array, zip(*self.index.values))\n            else:\n                ix_vals = [self.index.values]\n            arrays = ix_vals + [self[c].get_values() for c in self.columns]\n            count = 0\n            index_names = list(self.index.names)\n            if isinstance(self.index, MultiIndex):\n                for i, n in enumerate(index_names):\n                    if n is None:\n                        index_names[i] = 'level_%d' % count\n                        count += 1\n            elif index_names[0] is None:\n                index_names = ['index']\n            names = lmap(compat.text_type, index_names) + lmap(compat.\n                text_type, self.columns)\n        else:\n            arrays = [self[c].get_values() for c in self.columns]\n            names = lmap(compat.text_type, self.columns)\n        formats = [v.dtype for v in arrays]\n        return np.rec.fromarrays(arrays, dtype={'names': names, 'formats':\n            formats})\n\n    @classmethod\n    def from_items(cls, items, columns=None, orient='columns'):\n        \"\"\"Construct a dataframe from a list of tuples\n\n        .. deprecated:: 0.23.0\n          `from_items` is deprecated and will be removed in a future version.\n          Use :meth:`DataFrame.from_dict(dict(items)) <DataFrame.from_dict>`\n          instead.\n          :meth:`DataFrame.from_dict(OrderedDict(items)) <DataFrame.from_dict>`\n          may be used to preserve the key order.\n\n        Convert (key, value) pairs to DataFrame. The keys will be the axis\n        index (usually the columns, but depends on the specified\n        orientation). The values should be arrays or Series.\n\n        Parameters\n        ----------\n        items : sequence of (key, value) pairs\n            Values should be arrays or Series.\n        columns : sequence of column labels, optional\n            Must be passed if orient='index'.\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the\n            input correspond to column labels, pass 'columns'\n            (default). Otherwise if the keys correspond to the index,\n            pass 'index'.\n\n        Returns\n        -------\n        frame : DataFrame\n        \"\"\"\n        warnings.warn(\n            'from_items is deprecated. Please use DataFrame.from_dict(dict(items), ...) instead. DataFrame.from_dict(OrderedDict(items)) may be used to preserve the key order.'\n            , FutureWarning, stacklevel=2)\n        keys, values = lzip(*items)\n        if orient == 'columns':\n            if columns is not None:\n                columns = ensure_index(columns)\n                idict = dict(items)\n                if len(idict) < len(items):\n                    if not columns.equals(ensure_index(keys)):\n                        raise ValueError(\n                            'With non-unique item names, passed columns must be identical'\n                            )\n                    arrays = values\n                else:\n                    arrays = [idict[k] for k in columns if k in idict]\n            else:\n                columns = ensure_index(keys)\n                arrays = values\n            try:\n                return cls._from_arrays(arrays, columns, None)\n            except ValueError:\n                if not is_nested_list_like(values):\n                    raise ValueError(\n                        'The value in each (key, value) pair must be an array, Series, or dict'\n                        )\n        elif orient == 'index':\n            if columns is None:\n                raise TypeError(\"Must pass columns with orient='index'\")\n            keys = ensure_index(keys)\n            try:\n                arr = np.array(values, dtype=object).T\n                data = [lib.maybe_convert_objects(v) for v in arr]\n                return cls._from_arrays(data, columns, keys)\n            except TypeError:\n                if not is_nested_list_like(values):\n                    raise ValueError(\n                        'The value in each (key, value) pair must be an array, Series, or dict'\n                        )\n        else:\n            raise ValueError(\"'orient' must be either 'columns' or 'index'\")\n\n    @classmethod\n    def _from_arrays(cls, arrays, columns, index, dtype=None):\n        mgr = _arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n        return cls(mgr)\n\n    @classmethod\n    def from_csv(cls, path, header=0, sep=',', index_col=0, parse_dates=\n        True, encoding=None, tupleize_cols=None, infer_datetime_format=False):\n        \"\"\"Read CSV file.\n\n        .. deprecated:: 0.21.0\n            Use :func:`pandas.read_csv` instead.\n\n        It is preferable to use the more powerful :func:`pandas.read_csv`\n        for most general purposes, but ``from_csv`` makes for an easy\n        roundtrip to and from a file (the exact counterpart of\n        ``to_csv``), especially with a DataFrame of time series data.\n\n        This method only differs from the preferred :func:`pandas.read_csv`\n        in some defaults:\n\n        - `index_col` is ``0`` instead of ``None`` (take first column as index\n          by default)\n        - `parse_dates` is ``True`` instead of ``False`` (try parsing the index\n          as datetime by default)\n\n        So a ``pd.DataFrame.from_csv(path)`` can be replaced by\n        ``pd.read_csv(path, index_col=0, parse_dates=True)``.\n\n        Parameters\n        ----------\n        path : string file path or file handle / StringIO\n        header : int, default 0\n            Row to use as header (skip prior rows)\n        sep : string, default ','\n            Field delimiter\n        index_col : int or sequence, default 0\n            Column to use for index. If a sequence is given, a MultiIndex\n            is used. Different default from read_table\n        parse_dates : boolean, default True\n            Parse dates. Different default from read_table\n        tupleize_cols : boolean, default False\n            write multi_index columns as a list of tuples (if True)\n            or new (expanded format) if False)\n        infer_datetime_format: boolean, default False\n            If True and `parse_dates` is True for a column, try to infer the\n            datetime format based on the first datetime string. If the format\n            can be inferred, there often will be a large parsing speed-up.\n\n        See also\n        --------\n        pandas.read_csv\n\n        Returns\n        -------\n        y : DataFrame\n\n        \"\"\"\n        warnings.warn(\n            'from_csv is deprecated. Please use read_csv(...) instead. Note that some of the default arguments are different, so please refer to the documentation for from_csv when changing your function calls'\n            , FutureWarning, stacklevel=2)\n        from pandas.io.parsers import read_csv\n        return read_csv(path, header=header, sep=sep, parse_dates=\n            parse_dates, index_col=index_col, encoding=encoding,\n            tupleize_cols=tupleize_cols, infer_datetime_format=\n            infer_datetime_format)\n\n    def to_sparse(self, fill_value=None, kind='block'):\n        \"\"\"\n        Convert to SparseDataFrame.\n\n        Implement the sparse version of the DataFrame meaning that any data\n        matching a specific value it's omitted in the representation.\n        The sparse DataFrame allows for a more efficient storage.\n\n        Parameters\n        ----------\n        fill_value : float, default None\n            The specific value that should be omitted in the representation.\n        kind : {'block', 'integer'}, default 'block'\n            The kind of the SparseIndex tracking where data is not equal to\n            the fill value:\n\n            - 'block' tracks only the locations and sizes of blocks of data.\n            - 'integer' keeps an array with all the locations of the data.\n\n            In most cases 'block' is recommended, since it's more memory\n            efficient.\n\n        Returns\n        -------\n        SparseDataFrame\n            The sparse representation of the DataFrame.\n\n        See Also\n        --------\n        DataFrame.to_dense :\n            Converts the DataFrame back to the its dense form.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([(np.nan, np.nan),\n        ...                    (1., np.nan),\n        ...                    (np.nan, 1.)])\n        >>> df\n             0    1\n        0  NaN  NaN\n        1  1.0  NaN\n        2  NaN  1.0\n        >>> type(df)\n        <class 'pandas.core.frame.DataFrame'>\n\n        >>> sdf = df.to_sparse()\n        >>> sdf\n             0    1\n        0  NaN  NaN\n        1  1.0  NaN\n        2  NaN  1.0\n        >>> type(sdf)\n        <class 'pandas.core.sparse.frame.SparseDataFrame'>\n        \"\"\"\n        from pandas.core.sparse.frame import SparseDataFrame\n        return SparseDataFrame(self._series, index=self.index, columns=self\n            .columns, default_kind=kind, default_fill_value=fill_value)\n\n    def to_panel(self):\n        \"\"\"\n        Transform long (stacked) format (DataFrame) into wide (3D, Panel)\n        format.\n\n        .. deprecated:: 0.20.0\n\n        Currently the index of the DataFrame must be a 2-level MultiIndex. This\n        may be generalized later\n\n        Returns\n        -------\n        panel : Panel\n        \"\"\"\n        if not isinstance(self.index, MultiIndex) or len(self.index.levels\n            ) != 2:\n            raise NotImplementedError('Only 2-level MultiIndex are supported.')\n        if not self.index.is_unique:\n            raise ValueError(\n                \"Can't convert non-uniquely indexed DataFrame to Panel\")\n        self._consolidate_inplace()\n        if self.index.lexsort_depth < 2:\n            selfsorted = self.sort_index(level=0)\n        else:\n            selfsorted = self\n        major_axis, minor_axis = selfsorted.index.levels\n        major_labels, minor_labels = selfsorted.index.labels\n        shape = len(major_axis), len(minor_axis)\n        major_axis = major_axis.copy()\n        major_axis.name = self.index.names[0]\n        minor_axis = minor_axis.copy()\n        minor_axis.name = self.index.names[1]\n        new_axes = [selfsorted.columns, major_axis, minor_axis]\n        new_mgr = selfsorted._data.reshape_nd(axes=new_axes, labels=[\n            major_labels, minor_labels], shape=shape, ref_items=selfsorted.\n            columns)\n        return self._constructor_expanddim(new_mgr)\n\n    @Appender(_shared_docs['to_excel'] % _shared_doc_kwargs)\n    def to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='',\n        float_format=None, columns=None, header=True, index=True,\n        index_label=None, startrow=0, startcol=0, engine=None, merge_cells=\n        True, encoding=None, inf_rep='inf', verbose=True, freeze_panes=None):\n        from pandas.io.formats.excel import ExcelFormatter\n        formatter = ExcelFormatter(self, na_rep=na_rep, cols=columns,\n            header=header, float_format=float_format, index=index,\n            index_label=index_label, merge_cells=merge_cells, inf_rep=inf_rep)\n        formatter.write(excel_writer, sheet_name=sheet_name, startrow=\n            startrow, startcol=startcol, freeze_panes=freeze_panes, engine=\n            engine)\n\n    @deprecate_kwarg(old_arg_name='encoding', new_arg_name=None)\n    def to_stata(self, fname, convert_dates=None, write_index=True,\n        encoding='latin-1', byteorder=None, time_stamp=None, data_label=\n        None, variable_labels=None, version=114, convert_strl=None):\n        \"\"\"\n        Export Stata binary dta files.\n\n        Parameters\n        ----------\n        fname : path (string), buffer or path object\n            string, path object (pathlib.Path or py._path.local.LocalPath) or\n            object implementing a binary write() functions. If using a buffer\n            then the buffer will not be automatically closed after the file\n            data has been written.\n        convert_dates : dict\n            Dictionary mapping columns containing datetime types to stata\n            internal format to use when writing the dates. Options are 'tc',\n            'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n            or a name. Datetime columns that do not have a conversion type\n            specified will be converted to 'tc'. Raises NotImplementedError if\n            a datetime column has timezone information.\n        write_index : bool\n            Write the index to Stata dataset.\n        encoding : str\n            Default is latin-1. Unicode is not supported.\n        byteorder : str\n            Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`.\n        time_stamp : datetime\n            A datetime to use as file creation date.  Default is the current\n            time.\n        data_label : str\n            A label for the data set.  Must be 80 characters or smaller.\n        variable_labels : dict\n            Dictionary containing columns as keys and variable labels as\n            values. Each label must be 80 characters or smaller.\n\n            .. versionadded:: 0.19.0\n\n        version : {114, 117}\n            Version to use in the output dta file.  Version 114 can be used\n            read by Stata 10 and later.  Version 117 can be read by Stata 13\n            or later. Version 114 limits string variables to 244 characters or\n            fewer while 117 allows strings with lengths up to 2,000,000\n            characters.\n\n            .. versionadded:: 0.23.0\n\n        convert_strl : list, optional\n            List of column names to convert to string columns to Stata StrL\n            format. Only available if version is 117.  Storing strings in the\n            StrL format can produce smaller dta files if strings have more than\n            8 characters and values are repeated.\n\n            .. versionadded:: 0.23.0\n\n        Raises\n        ------\n        NotImplementedError\n            * If datetimes contain timezone information\n            * Column dtype is not representable in Stata\n        ValueError\n            * Columns listed in convert_dates are neither datetime64[ns]\n              or datetime.datetime\n            * Column listed in convert_dates is not in DataFrame\n            * Categorical label contains more than 32,000 characters\n\n            .. versionadded:: 0.19.0\n\n        See Also\n        --------\n        pandas.read_stata : Import Stata data files\n        pandas.io.stata.StataWriter : low-level writer for Stata data files\n        pandas.io.stata.StataWriter117 : low-level writer for version 117 files\n\n        Examples\n        --------\n        >>> data.to_stata('./data_file.dta')\n\n        Or with dates\n\n        >>> data.to_stata('./date_data_file.dta', {2 : 'tw'})\n\n        Alternatively you can create an instance of the StataWriter class\n\n        >>> writer = StataWriter('./data_file.dta', data)\n        >>> writer.write_file()\n\n        With dates:\n\n        >>> writer = StataWriter('./date_data_file.dta', data, {2 : 'tw'})\n        >>> writer.write_file()\n        \"\"\"\n        kwargs = {}\n        if version not in (114, 117):\n            raise ValueError('Only formats 114 and 117 supported.')\n        if version == 114:\n            if convert_strl is not None:\n                raise ValueError(\n                    'strl support is only available when using format 117')\n            from pandas.io.stata import StataWriter as statawriter\n        else:\n            from pandas.io.stata import StataWriter117 as statawriter\n            kwargs['convert_strl'] = convert_strl\n        writer = statawriter(fname, self, convert_dates=convert_dates,\n            byteorder=byteorder, time_stamp=time_stamp, data_label=\n            data_label, write_index=write_index, variable_labels=\n            variable_labels, **kwargs)\n        writer.write_file()\n\n    def to_feather(self, fname):\n        \"\"\"\n        write out the binary feather-format for DataFrames\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        fname : str\n            string file path\n\n        \"\"\"\n        from pandas.io.feather_format import to_feather\n        to_feather(self, fname)\n\n    def to_parquet(self, fname, engine='auto', compression='snappy', **kwargs):\n        \"\"\"\n        Write a DataFrame to the binary parquet format.\n\n        .. versionadded:: 0.21.0\n\n        This function writes the dataframe as a `parquet file\n        <https://parquet.apache.org/>`_. You can choose different parquet\n        backends, and have the option of compression. See\n        :ref:`the user guide <io.parquet>` for more details.\n\n        Parameters\n        ----------\n        fname : str\n            String file path.\n        engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n            Parquet library to use. If 'auto', then the option\n            ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n            behavior is to try 'pyarrow', falling back to 'fastparquet' if\n            'pyarrow' is unavailable.\n        compression : {'snappy', 'gzip', 'brotli', None}, default 'snappy'\n            Name of the compression to use. Use ``None`` for no compression.\n        **kwargs\n            Additional arguments passed to the parquet library. See\n            :ref:`pandas io <io.parquet>` for more details.\n\n        See Also\n        --------\n        read_parquet : Read a parquet file.\n        DataFrame.to_csv : Write a csv file.\n        DataFrame.to_sql : Write to a sql table.\n        DataFrame.to_hdf : Write to hdf.\n\n        Notes\n        -----\n        This function requires either the `fastparquet\n        <https://pypi.org/project/fastparquet>`_ or `pyarrow\n        <https://arrow.apache.org/docs/python/>`_ library.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.to_parquet('df.parquet.gzip', compression='gzip')\n        >>> pd.read_parquet('df.parquet.gzip')\n           col1  col2\n        0     1     3\n        1     2     4\n        \"\"\"\n        from pandas.io.parquet import to_parquet\n        to_parquet(self, fname, engine, compression=compression, **kwargs)\n\n    @Substitution(header=\n        'Write out the column names. If a list of strings is given, it is assumed to be aliases for the column names'\n        )\n    @Substitution(shared_params=fmt.common_docstring, returns=fmt.\n        return_docstring)\n    def to_string(self, buf=None, columns=None, col_space=None, header=True,\n        index=True, na_rep='NaN', formatters=None, float_format=None,\n        sparsify=None, index_names=True, justify=None, line_width=None,\n        max_rows=None, max_cols=None, show_dimensions=False):\n        \"\"\"\n        Render a DataFrame to a console-friendly tabular output.\n\n        %(shared_params)s\n        line_width : int, optional\n            Width to wrap a line in characters.\n\n        %(returns)s\n\n        See Also\n        --------\n        to_html : Convert DataFrame to HTML.\n\n        Examples\n        --------\n        >>> d = {'col1' : [1, 2, 3], 'col2' : [4, 5, 6]}\n        >>> df = pd.DataFrame(d)\n        >>> print(df.to_string())\n           col1  col2\n        0     1     4\n        1     2     5\n        2     3     6\n        \"\"\"\n        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n            col_space=col_space, na_rep=na_rep, formatters=formatters,\n            float_format=float_format, sparsify=sparsify, justify=justify,\n            index_names=index_names, header=header, index=index, line_width\n            =line_width, max_rows=max_rows, max_cols=max_cols,\n            show_dimensions=show_dimensions)\n        formatter.to_string()\n        if buf is None:\n            result = formatter.buf.getvalue()\n            return result\n\n    @Substitution(header='whether to print column labels, default True')\n    @Substitution(shared_params=fmt.common_docstring, returns=fmt.\n        return_docstring)\n    def to_html(self, buf=None, columns=None, col_space=None, header=True,\n        index=True, na_rep='NaN', formatters=None, float_format=None,\n        sparsify=None, index_names=True, justify=None, bold_rows=True,\n        classes=None, escape=True, max_rows=None, max_cols=None,\n        show_dimensions=False, notebook=False, decimal='.', border=None,\n        table_id=None):\n        \"\"\"\n        Render a DataFrame as an HTML table.\n\n        %(shared_params)s\n        bold_rows : boolean, default True\n            Make the row labels bold in the output\n        classes : str or list or tuple, default None\n            CSS class(es) to apply to the resulting html table\n        escape : boolean, default True\n            Convert the characters <, >, and & to HTML-safe sequences.\n        notebook : {True, False}, default False\n            Whether the generated HTML is for IPython Notebook.\n        decimal : string, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe\n\n            .. versionadded:: 0.18.0\n\n        border : int\n            A ``border=border`` attribute is included in the opening\n            `<table>` tag. Default ``pd.options.html.border``.\n\n            .. versionadded:: 0.19.0\n\n        table_id : str, optional\n            A css id is included in the opening `<table>` tag if specified.\n\n            .. versionadded:: 0.23.0\n\n        %(returns)s\n\n        See Also\n        --------\n        to_string : Convert DataFrame to a string.\n        \"\"\"\n        if (justify is not None and justify not in fmt.\n            _VALID_JUSTIFY_PARAMETERS):\n            raise ValueError('Invalid value for justify parameter')\n        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n            col_space=col_space, na_rep=na_rep, formatters=formatters,\n            float_format=float_format, sparsify=sparsify, justify=justify,\n            index_names=index_names, header=header, index=index, bold_rows=\n            bold_rows, escape=escape, max_rows=max_rows, max_cols=max_cols,\n            show_dimensions=show_dimensions, decimal=decimal, table_id=table_id\n            )\n        formatter.to_html(classes=classes, notebook=notebook, border=border)\n        if buf is None:\n            return formatter.buf.getvalue()\n\n    def info(self, verbose=None, buf=None, max_cols=None, memory_usage=None,\n        null_counts=None):\n        \"\"\"\n        Print a concise summary of a DataFrame.\n\n        This method prints information about a DataFrame including\n        the index dtype and column dtypes, non-null values and memory usage.\n\n        Parameters\n        ----------\n        verbose : bool, optional\n            Whether to print the full summary. By default, the setting in\n            ``pandas.options.display.max_info_columns`` is followed.\n        buf : writable buffer, defaults to sys.stdout\n            Where to send the output. By default, the output is printed to\n            sys.stdout. Pass a writable buffer if you need to further process\n            the output.\n        max_cols : int, optional\n            When to switch from the verbose to the truncated output. If the\n            DataFrame has more than `max_cols` columns, the truncated output\n            is used. By default, the setting in\n            ``pandas.options.display.max_info_columns`` is used.\n        memory_usage : bool, str, optional\n            Specifies whether total memory usage of the DataFrame\n            elements (including the index) should be displayed. By default,\n            this follows the ``pandas.options.display.memory_usage`` setting.\n\n            True always show memory usage. False never shows memory usage.\n            A value of 'deep' is equivalent to \"True with deep introspection\".\n            Memory usage is shown in human-readable units (base-2\n            representation). Without deep introspection a memory estimation is\n            made based in column dtype and number of rows assuming values\n            consume the same memory amount for corresponding dtypes. With deep\n            memory introspection, a real memory usage calculation is performed\n            at the cost of computational resources.\n        null_counts : bool, optional\n            Whether to show the non-null counts. By default, this is shown\n            only if the frame is smaller than\n            ``pandas.options.display.max_info_rows`` and\n            ``pandas.options.display.max_info_columns``. A value of True always\n            shows the counts, and False never shows the counts.\n\n        Returns\n        -------\n        None\n            This method prints a summary of a DataFrame and returns None.\n\n        See Also\n        --------\n        DataFrame.describe: Generate descriptive statistics of DataFrame\n            columns.\n        DataFrame.memory_usage: Memory usage of DataFrame columns.\n\n        Examples\n        --------\n        >>> int_values = [1, 2, 3, 4, 5]\n        >>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n        >>> float_values = [0.0, 0.25, 0.5, 0.75, 1.0]\n        >>> df = pd.DataFrame({\"int_col\": int_values, \"text_col\": text_values,\n        ...                   \"float_col\": float_values})\n        >>> df\n           int_col text_col  float_col\n        0        1    alpha       0.00\n        1        2     beta       0.25\n        2        3    gamma       0.50\n        3        4    delta       0.75\n        4        5  epsilon       1.00\n\n        Prints information of all columns:\n\n        >>> df.info(verbose=True)\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 5 entries, 0 to 4\n        Data columns (total 3 columns):\n        int_col      5 non-null int64\n        text_col     5 non-null object\n        float_col    5 non-null float64\n        dtypes: float64(1), int64(1), object(1)\n        memory usage: 200.0+ bytes\n\n        Prints a summary of columns count and its dtypes but not per column\n        information:\n\n        >>> df.info(verbose=False)\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 5 entries, 0 to 4\n        Columns: 3 entries, int_col to float_col\n        dtypes: float64(1), int64(1), object(1)\n        memory usage: 200.0+ bytes\n\n        Pipe output of DataFrame.info to buffer instead of sys.stdout, get\n        buffer content and writes to a text file:\n\n        >>> import io\n        >>> buffer = io.StringIO()\n        >>> df.info(buf=buffer)\n        >>> s = buffer.getvalue()\n        >>> with open(\"df_info.txt\", \"w\", encoding=\"utf-8\") as f:\n        ...     f.write(s)\n        260\n\n        The `memory_usage` parameter allows deep introspection mode, specially\n        useful for big DataFrames and fine-tune memory optimization:\n\n        >>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)\n        >>> df = pd.DataFrame({\n        ...     'column_1': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n        ...     'column_2': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n        ...     'column_3': np.random.choice(['a', 'b', 'c'], 10 ** 6)\n        ... })\n        >>> df.info()\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 1000000 entries, 0 to 999999\n        Data columns (total 3 columns):\n        column_1    1000000 non-null object\n        column_2    1000000 non-null object\n        column_3    1000000 non-null object\n        dtypes: object(3)\n        memory usage: 22.9+ MB\n\n        >>> df.info(memory_usage='deep')\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 1000000 entries, 0 to 999999\n        Data columns (total 3 columns):\n        column_1    1000000 non-null object\n        column_2    1000000 non-null object\n        column_3    1000000 non-null object\n        dtypes: object(3)\n        memory usage: 188.8 MB\n        \"\"\"\n        if buf is None:\n            buf = sys.stdout\n        lines = []\n        lines.append(str(type(self)))\n        lines.append(self.index._summary())\n        if len(self.columns) == 0:\n            lines.append('Empty {name}'.format(name=type(self).__name__))\n            fmt.buffer_put_lines(buf, lines)\n            return\n        cols = self.columns\n        if max_cols is None:\n            max_cols = get_option('display.max_info_columns', len(self.\n                columns) + 1)\n        max_rows = get_option('display.max_info_rows', len(self) + 1)\n        if null_counts is None:\n            show_counts = len(self.columns) <= max_cols and len(self\n                ) < max_rows\n        else:\n            show_counts = null_counts\n        exceeds_info_cols = len(self.columns) > max_cols\n\n        def _verbose_repr():\n            lines.append('Data columns (total %d columns):' % len(self.columns)\n                )\n            space = max(len(pprint_thing(k)) for k in self.columns) + 4\n            counts = None\n            tmpl = '{count}{dtype}'\n            if show_counts:\n                counts = self.count()\n                if len(cols) != len(counts):\n                    raise AssertionError(\n                        'Columns must equal counts ({cols:d} != {counts:d})'\n                        .format(cols=len(cols), counts=len(counts)))\n                tmpl = '{count} non-null {dtype}'\n            dtypes = self.dtypes\n            for i, col in enumerate(self.columns):\n                dtype = dtypes.iloc[i]\n                col = pprint_thing(col)\n                count = ''\n                if show_counts:\n                    count = counts.iloc[i]\n                lines.append(_put_str(col, space) + tmpl.format(count=count,\n                    dtype=dtype))\n\n        def _non_verbose_repr():\n            lines.append(self.columns._summary(name='Columns'))\n\n        def _sizeof_fmt(num, size_qualifier):\n            for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n                if num < 1024.0:\n                    return '{num:3.1f}{size_q} {x}'.format(num=num, size_q=\n                        size_qualifier, x=x)\n                num /= 1024.0\n            return '{num:3.1f}{size_q} {pb}'.format(num=num, size_q=\n                size_qualifier, pb='PB')\n        if verbose:\n            _verbose_repr()\n        elif verbose is False:\n            _non_verbose_repr()\n        elif exceeds_info_cols:\n            _non_verbose_repr()\n        else:\n            _verbose_repr()\n        counts = self.get_dtype_counts()\n        dtypes = ['{k}({kk:d})'.format(k=k[0], kk=k[1]) for k in sorted(\n            compat.iteritems(counts))]\n        lines.append('dtypes: {types}'.format(types=', '.join(dtypes)))\n        if memory_usage is None:\n            memory_usage = get_option('display.memory_usage')\n        if memory_usage:\n            size_qualifier = ''\n            if memory_usage == 'deep':\n                deep = True\n            else:\n                deep = False\n                if 'object' in counts or self.index._is_memory_usage_qualified(\n                    ):\n                    size_qualifier = '+'\n            mem_usage = self.memory_usage(index=True, deep=deep).sum()\n            lines.append('memory usage: {mem}\\n'.format(mem=_sizeof_fmt(\n                mem_usage, size_qualifier)))\n        fmt.buffer_put_lines(buf, lines)\n\n    def memory_usage(self, index=True, deep=False):\n        \"\"\"\n        Return the memory usage of each column in bytes.\n\n        The memory usage can optionally include the contribution of\n        the index and elements of `object` dtype.\n\n        This value is displayed in `DataFrame.info` by default. This can be\n        suppressed by setting ``pandas.options.display.memory_usage`` to False.\n\n        Parameters\n        ----------\n        index : bool, default True\n            Specifies whether to include the memory usage of the DataFrame's\n            index in returned Series. If ``index=True`` the memory usage of the\n            index the first item in the output.\n        deep : bool, default False\n            If True, introspect the data deeply by interrogating\n            `object` dtypes for system-level memory consumption, and include\n            it in the returned values.\n\n        Returns\n        -------\n        sizes : Series\n            A Series whose index is the original column names and whose values\n            is the memory usage of each column in bytes.\n\n        See Also\n        --------\n        numpy.ndarray.nbytes : Total bytes consumed by the elements of an\n            ndarray.\n        Series.memory_usage : Bytes consumed by a Series.\n        pandas.Categorical : Memory-efficient array for string values with\n            many repeated values.\n        DataFrame.info : Concise summary of a DataFrame.\n\n        Examples\n        --------\n        >>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n        >>> data = dict([(t, np.ones(shape=5000).astype(t))\n        ...              for t in dtypes])\n        >>> df = pd.DataFrame(data)\n        >>> df.head()\n           int64  float64  complex128 object  bool\n        0      1      1.0      (1+0j)      1  True\n        1      1      1.0      (1+0j)      1  True\n        2      1      1.0      (1+0j)      1  True\n        3      1      1.0      (1+0j)      1  True\n        4      1      1.0      (1+0j)      1  True\n\n        >>> df.memory_usage()\n        Index            80\n        int64         40000\n        float64       40000\n        complex128    80000\n        object        40000\n        bool           5000\n        dtype: int64\n\n        >>> df.memory_usage(index=False)\n        int64         40000\n        float64       40000\n        complex128    80000\n        object        40000\n        bool           5000\n        dtype: int64\n\n        The memory footprint of `object` dtype columns is ignored by default:\n\n        >>> df.memory_usage(deep=True)\n        Index             80\n        int64          40000\n        float64        40000\n        complex128     80000\n        object        160000\n        bool            5000\n        dtype: int64\n\n        Use a Categorical for efficient storage of an object-dtype column with\n        many repeated values.\n\n        >>> df['object'].astype('category').memory_usage(deep=True)\n        5168\n        \"\"\"\n        result = Series([c.memory_usage(index=False, deep=deep) for col, c in\n            self.iteritems()], index=self.columns)\n        if index:\n            result = Series(self.index.memory_usage(deep=deep), index=['Index']\n                ).append(result)\n        return result\n\n    def transpose(self, *args, **kwargs):\n        \"\"\"\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        copy : bool, default False\n            If True, the underlying data is copied. Otherwise (default), no\n            copy is made if possible.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted for\n            compatibility with numpy.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5     8\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        \"\"\"\n        nv.validate_transpose(args, dict())\n        return super(DataFrame, self).transpose(1, 0, **kwargs)\n    T = property(transpose)\n\n    def _unpickle_frame_compat(self, state):\n        if len(state) == 2:\n            series, idx = state\n            columns = sorted(series)\n        else:\n            series, cols, idx = state\n            columns = com._unpickle_array(cols)\n        index = com._unpickle_array(idx)\n        self._data = self._init_dict(series, index, columns, None)\n\n    def _unpickle_matrix_compat(self, state):\n        (vals, idx, cols), object_state = state\n        index = com._unpickle_array(idx)\n        dm = DataFrame(vals, index=index, columns=com._unpickle_array(cols),\n            copy=False)\n        if object_state is not None:\n            ovals, _, ocols = object_state\n            objects = DataFrame(ovals, index=index, columns=com.\n                _unpickle_array(ocols), copy=False)\n            dm = dm.join(objects)\n        self._data = dm._data\n\n    def get_value(self, index, col, takeable=False):\n        \"\"\"Quickly retrieve single value at passed column and index\n\n        .. deprecated:: 0.21.0\n            Use .at[] or .iat[] accessors instead.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        value : scalar value\n        \"\"\"\n        warnings.warn(\n            'get_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead'\n            , FutureWarning, stacklevel=2)\n        return self._get_value(index, col, takeable=takeable)\n\n    def _get_value(self, index, col, takeable=False):\n        if takeable:\n            series = self._iget_item_cache(col)\n            return com.maybe_box_datetimelike(series._values[index])\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n        try:\n            return engine.get_value(series._values, index)\n        except (TypeError, ValueError):\n            col = self.columns.get_loc(col)\n            index = self.index.get_loc(index)\n            return self._get_value(index, col, takeable=True)\n    _get_value.__doc__ = get_value.__doc__\n\n    def set_value(self, index, col, value, takeable=False):\n        \"\"\"Put single value at passed column and index\n\n        .. deprecated:: 0.21.0\n            Use .at[] or .iat[] accessors instead.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        value : scalar value\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        frame : DataFrame\n            If label pair is contained, will be reference to calling DataFrame,\n            otherwise a new object\n        \"\"\"\n        warnings.warn(\n            'set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead'\n            , FutureWarning, stacklevel=2)\n        return self._set_value(index, col, value, takeable=takeable)\n\n    def _set_value(self, index, col, value, takeable=False):\n        try:\n            if takeable is True:\n                series = self._iget_item_cache(col)\n                return series._set_value(index, value, takeable=True)\n            series = self._get_item_cache(col)\n            engine = self.index._engine\n            engine.set_value(series._values, index, value)\n            return self\n        except (KeyError, TypeError):\n            self.loc[index, col] = value\n            self._item_cache.pop(col, None)\n            return self\n    _set_value.__doc__ = set_value.__doc__\n\n    def _ixs(self, i, axis=0):\n        \"\"\"\n        i : int, slice, or sequence of integers\n        axis : int\n        \"\"\"\n        if axis == 0:\n            \"\"\"\n            Notes\n            -----\n            If slice passed, the resulting data will be a view\n            \"\"\"\n            if isinstance(i, slice):\n                return self[i]\n            else:\n                label = self.index[i]\n                if isinstance(label, Index):\n                    result = self.take(i, axis=axis)\n                    copy = True\n                else:\n                    new_values = self._data.fast_xs(i)\n                    if is_scalar(new_values):\n                        return new_values\n                    copy = isinstance(new_values, np.ndarray\n                        ) and new_values.base is None\n                    result = self._constructor_sliced(new_values, index=\n                        self.columns, name=self.index[i], dtype=new_values.\n                        dtype)\n                result._set_is_copy(self, copy=copy)\n                return result\n        else:\n            \"\"\"\n            Notes\n            -----\n            If slice passed, the resulting data will be a view\n            \"\"\"\n            label = self.columns[i]\n            if isinstance(i, slice):\n                lab_slice = slice(label[0], label[-1])\n                return self.loc[:, lab_slice]\n            else:\n                if isinstance(label, Index):\n                    return self._take(i, axis=1)\n                index_len = len(self.index)\n                values = self._data.iget(i)\n                if index_len and not len(values):\n                    values = np.array([np.nan] * index_len, dtype=object)\n                result = self._box_col_values(values, label)\n                result._set_as_cached(label, self)\n                return result\n\n    def __getitem__(self, key):\n        key = com.apply_if_callable(key, self)\n        try:\n            if self.columns.is_unique and key in self.columns:\n                if self.columns.nlevels > 1:\n                    return self._getitem_multilevel(key)\n                return self._get_item_cache(key)\n        except (TypeError, ValueError):\n            pass\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            return self._slice(indexer, axis=0)\n        if isinstance(key, DataFrame):\n            return self._getitem_frame(key)\n        if com.is_bool_indexer(key):\n            return self._getitem_bool_array(key)\n        is_single_key = isinstance(key, tuple) or not is_list_like(key)\n        if is_single_key:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            indexer = self.columns.get_loc(key)\n            if is_integer(indexer):\n                indexer = [indexer]\n        else:\n            if is_iterator(key):\n                key = list(key)\n            indexer = self.loc._convert_to_indexer(key, axis=1,\n                raise_missing=True)\n        if getattr(indexer, 'dtype', None) == bool:\n            indexer = np.where(indexer)[0]\n        data = self._take(indexer, axis=1)\n        if is_single_key:\n            if data.shape[1] == 1 and not isinstance(self.columns, MultiIndex):\n                data = data[key]\n        return data\n\n    def _getitem_bool_array(self, key):\n        if isinstance(key, Series) and not key.index.equals(self.index):\n            warnings.warn(\n                'Boolean Series key will be reindexed to match DataFrame index.'\n                , UserWarning, stacklevel=3)\n        elif len(key) != len(self.index):\n            raise ValueError('Item wrong length %d instead of %d.' % (len(\n                key), len(self.index)))\n        key = check_bool_indexer(self.index, key)\n        indexer = key.nonzero()[0]\n        return self._take(indexer, axis=0)\n\n    def _getitem_multilevel(self, key):\n        loc = self.columns.get_loc(key)\n        if isinstance(loc, (slice, Series, np.ndarray, Index)):\n            new_columns = self.columns[loc]\n            result_columns = maybe_droplevels(new_columns, key)\n            if self._is_mixed_type:\n                result = self.reindex(columns=new_columns)\n                result.columns = result_columns\n            else:\n                new_values = self.values[:, loc]\n                result = self._constructor(new_values, index=self.index,\n                    columns=result_columns)\n                result = result.__finalize__(self)\n            if len(result.columns) == 1:\n                top = result.columns[0]\n                if isinstance(top, tuple):\n                    top = top[0]\n                if top == '':\n                    result = result['']\n                    if isinstance(result, Series):\n                        result = self._constructor_sliced(result, index=\n                            self.index, name=key)\n            result._set_is_copy(self)\n            return result\n        else:\n            return self._get_item_cache(key)\n\n    def _getitem_frame(self, key):\n        if key.values.size and not is_bool_dtype(key.values):\n            raise ValueError('Must pass DataFrame with boolean values only')\n        return self.where(key)\n\n    def query(self, expr, inplace=False, **kwargs):\n        \"\"\"Query the columns of a frame with a boolean expression.\n\n        Parameters\n        ----------\n        expr : string\n            The query string to evaluate.  You can refer to variables\n            in the environment by prefixing them with an '@' character like\n            ``@a + b``.\n        inplace : bool\n            Whether the query should modify the data in place or return\n            a modified copy\n\n            .. versionadded:: 0.18.0\n\n        kwargs : dict\n            See the documentation for :func:`pandas.eval` for complete details\n            on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n        Returns\n        -------\n        q : DataFrame\n\n        Notes\n        -----\n        The result of the evaluation of this expression is first passed to\n        :attr:`DataFrame.loc` and if that fails because of a\n        multidimensional key (e.g., a DataFrame) then the result will be passed\n        to :meth:`DataFrame.__getitem__`.\n\n        This method uses the top-level :func:`pandas.eval` function to\n        evaluate the passed query.\n\n        The :meth:`~pandas.DataFrame.query` method uses a slightly\n        modified Python syntax by default. For example, the ``&`` and ``|``\n        (bitwise) operators have the precedence of their boolean cousins,\n        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n        however the semantics are different.\n\n        You can change the semantics of the expression by passing the keyword\n        argument ``parser='python'``. This enforces the same semantics as\n        evaluation in Python space. Likewise, you can pass ``engine='python'``\n        to evaluate an expression using Python itself as a backend. This is not\n        recommended as it is inefficient compared to using ``numexpr`` as the\n        engine.\n\n        The :attr:`DataFrame.index` and\n        :attr:`DataFrame.columns` attributes of the\n        :class:`~pandas.DataFrame` instance are placed in the query namespace\n        by default, which allows you to treat both the index and columns of the\n        frame as a column in the frame.\n        The identifier ``index`` is used for the frame index; you can also\n        use the name of the index to identify it in a query. Please note that\n        Python keywords may not be used as identifiers.\n\n        For further details and examples see the ``query`` documentation in\n        :ref:`indexing <indexing.query>`.\n\n        See Also\n        --------\n        pandas.eval\n        DataFrame.eval\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.random.randn(10, 2), columns=list('ab'))\n        >>> df.query('a > b')\n        >>> df[df.a > df.b]  # same result as the previous expression\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(expr, compat.string_types):\n            msg = 'expr must be a string to be evaluated, {0} given'\n            raise ValueError(msg.format(type(expr)))\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        kwargs['target'] = None\n        res = self.eval(expr, **kwargs)\n        try:\n            new_data = self.loc[res]\n        except ValueError:\n            new_data = self[res]\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return new_data\n\n    def eval(self, expr, inplace=False, **kwargs):\n        \"\"\"\n        Evaluate a string describing operations on DataFrame columns.\n\n        Operates on columns only, not specific rows or elements.  This allows\n        `eval` to run arbitrary code, which can make you vulnerable to code\n        injection if you pass user input to this function.\n\n        Parameters\n        ----------\n        expr : str\n            The expression string to evaluate.\n        inplace : bool, default False\n            If the expression contains an assignment, whether to perform the\n            operation inplace and mutate the existing DataFrame. Otherwise,\n            a new DataFrame is returned.\n\n            .. versionadded:: 0.18.0.\n        kwargs : dict\n            See the documentation for :func:`~pandas.eval` for complete details\n            on the keyword arguments accepted by\n            :meth:`~pandas.DataFrame.query`.\n\n        Returns\n        -------\n        ndarray, scalar, or pandas object\n            The result of the evaluation.\n\n        See Also\n        --------\n        DataFrame.query : Evaluates a boolean expression to query the columns\n            of a frame.\n        DataFrame.assign : Can evaluate an expression or function to create new\n            values for a column.\n        pandas.eval : Evaluate a Python expression as a string using various\n            backends.\n\n        Notes\n        -----\n        For more details see the API documentation for :func:`~pandas.eval`.\n        For detailed examples see :ref:`enhancing performance with eval\n        <enhancingperf.eval>`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n        >>> df\n           A   B\n        0  1  10\n        1  2   8\n        2  3   6\n        3  4   4\n        4  5   2\n        >>> df.eval('A + B')\n        0    11\n        1    10\n        2     9\n        3     8\n        4     7\n        dtype: int64\n\n        Assignment is allowed though by default the original DataFrame is not\n        modified.\n\n        >>> df.eval('C = A + B')\n           A   B   C\n        0  1  10  11\n        1  2   8  10\n        2  3   6   9\n        3  4   4   8\n        4  5   2   7\n        >>> df\n           A   B\n        0  1  10\n        1  2   8\n        2  3   6\n        3  4   4\n        4  5   2\n\n        Use ``inplace=True`` to modify the original DataFrame.\n\n        >>> df.eval('C = A + B', inplace=True)\n        >>> df\n           A   B   C\n        0  1  10  11\n        1  2   8  10\n        2  3   6   9\n        3  4   4   8\n        4  5   2   7\n        \"\"\"\n        from pandas.core.computation.eval import eval as _eval\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        resolvers = kwargs.pop('resolvers', None)\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        if resolvers is None:\n            index_resolvers = self._get_index_resolvers()\n            resolvers = dict(self.iteritems()), index_resolvers\n        if 'target' not in kwargs:\n            kwargs['target'] = self\n        kwargs['resolvers'] = kwargs.get('resolvers', ()) + tuple(resolvers)\n        return _eval(expr, inplace=inplace, **kwargs)\n\n    def select_dtypes(self, include=None, exclude=None):\n        \"\"\"\n        Return a subset of the DataFrame's columns based on the column dtypes.\n\n        Parameters\n        ----------\n        include, exclude : scalar or list-like\n            A selection of dtypes or strings to be included/excluded. At least\n            one of these parameters must be supplied.\n\n        Raises\n        ------\n        ValueError\n            * If both of ``include`` and ``exclude`` are empty\n            * If ``include`` and ``exclude`` have overlapping elements\n            * If any kind of string dtype is passed in.\n\n        Returns\n        -------\n        subset : DataFrame\n            The subset of the frame including the dtypes in ``include`` and\n            excluding the dtypes in ``exclude``.\n\n        Notes\n        -----\n        * To select all *numeric* types, use ``np.number`` or ``'number'``\n        * To select strings you must use the ``object`` dtype, but note that\n          this will return *all* object dtype columns\n        * See the `numpy dtype hierarchy\n          <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n        * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n          ``'datetime64'``\n        * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n          ``'timedelta64'``\n        * To select Pandas categorical dtypes, use ``'category'``\n        * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n          0.20.0) or ``'datetime64[ns, tz]'``\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 2] * 3,\n        ...                    'b': [True, False] * 3,\n        ...                    'c': [1.0, 2.0] * 3})\n        >>> df\n                a      b  c\n        0       1   True  1.0\n        1       2  False  2.0\n        2       1   True  1.0\n        3       2  False  2.0\n        4       1   True  1.0\n        5       2  False  2.0\n\n        >>> df.select_dtypes(include='bool')\n           b\n        0  True\n        1  False\n        2  True\n        3  False\n        4  True\n        5  False\n\n        >>> df.select_dtypes(include=['float64'])\n           c\n        0  1.0\n        1  2.0\n        2  1.0\n        3  2.0\n        4  1.0\n        5  2.0\n\n        >>> df.select_dtypes(exclude=['int'])\n               b    c\n        0   True  1.0\n        1  False  2.0\n        2   True  1.0\n        3  False  2.0\n        4   True  1.0\n        5  False  2.0\n        \"\"\"\n        if not is_list_like(include):\n            include = (include,) if include is not None else ()\n        if not is_list_like(exclude):\n            exclude = (exclude,) if exclude is not None else ()\n        selection = tuple(map(frozenset, (include, exclude)))\n        if not any(selection):\n            raise ValueError(\n                'at least one of include or exclude must be nonempty')\n        include, exclude = map(lambda x: frozenset(map(\n            _get_dtype_from_object, x)), selection)\n        for dtypes in (include, exclude):\n            invalidate_string_dtypes(dtypes)\n        if not include.isdisjoint(exclude):\n            raise ValueError('include and exclude overlap on {inc_ex}'.\n                format(inc_ex=include & exclude))\n        include_these = Series(not bool(include), index=self.columns)\n        exclude_these = Series(not bool(exclude), index=self.columns)\n\n        def is_dtype_instance_mapper(idx, dtype):\n            return idx, functools.partial(issubclass, dtype.type)\n        for idx, f in itertools.starmap(is_dtype_instance_mapper, enumerate\n            (self.dtypes)):\n            if include:\n                include_these.iloc[idx] = any(map(f, include))\n            if exclude:\n                exclude_these.iloc[idx] = not any(map(f, exclude))\n        dtype_indexer = include_these & exclude_these\n        return self.loc[com.get_info_slice(self, dtype_indexer)]\n\n    def _box_item_values(self, key, values):\n        items = self.columns[self.columns.get_loc(key)]\n        if values.ndim == 2:\n            return self._constructor(values.T, columns=items, index=self.index)\n        else:\n            return self._box_col_values(values, items)\n\n    def _box_col_values(self, values, items):\n        \"\"\" provide boxed values for a column \"\"\"\n        klass = _get_sliced_frame_result_type(values, self)\n        return klass(values, index=self.index, name=items, fastpath=True)\n\n    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            return self._setitem_slice(indexer, value)\n        if isinstance(key, DataFrame) or getattr(key, 'ndim', None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        else:\n            self._set_item(key, value)\n\n    def _setitem_slice(self, key, value):\n        self._check_setitem_copy()\n        self.loc._setitem_with_indexer(key, value)\n\n    def _setitem_array(self, key, value):\n        if com.is_bool_indexer(key):\n            if len(key) != len(self.index):\n                raise ValueError('Item wrong length %d instead of %d!' % (\n                    len(key), len(self.index)))\n            key = check_bool_indexer(self.index, key)\n            indexer = key.nonzero()[0]\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer(indexer, value)\n        elif isinstance(value, DataFrame):\n            if len(value.columns) != len(key):\n                raise ValueError('Columns must be same length as key')\n            for k1, k2 in zip(key, value.columns):\n                self[k1] = value[k2]\n        else:\n            indexer = self.loc._convert_to_indexer(key, axis=1)\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer((slice(None), indexer), value)\n\n    def _setitem_frame(self, key, value):\n        if isinstance(key, np.ndarray):\n            if key.shape != self.shape:\n                raise ValueError('Array conditional must be same shape as self'\n                    )\n            key = self._constructor(key, **self._construct_axes_dict())\n        if key.values.size and not is_bool_dtype(key.values):\n            raise TypeError(\n                'Must pass DataFrame or 2-d ndarray with boolean values only')\n        self._check_inplace_setting(value)\n        self._check_setitem_copy()\n        self._where(-key, value, inplace=True)\n\n    def _ensure_valid_index(self, value):\n        \"\"\"\n        ensure that if we don't have an index, that we can create one from the\n        passed value\n        \"\"\"\n        if not len(self.index) and is_list_like(value):\n            try:\n                value = Series(value)\n            except:\n                raise ValueError(\n                    'Cannot set a frame with no defined index and a value that cannot be converted to a Series'\n                    )\n            self._data = self._data.reindex_axis(value.index.copy(), axis=1,\n                fill_value=np.nan)\n\n    def _set_item(self, key, value):\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(key, value)\n        NDFrame._set_item(self, key, value)\n        if len(self):\n            self._check_setitem_copy()\n\n    def insert(self, loc, column, value, allow_duplicates=False):\n        \"\"\"\n        Insert column into DataFrame at specified location.\n\n        Raises a ValueError if `column` is already contained in the DataFrame,\n        unless `allow_duplicates` is set to True.\n\n        Parameters\n        ----------\n        loc : int\n            Insertion index. Must verify 0 <= loc <= len(columns)\n        column : string, number, or hashable object\n            label of the inserted column\n        value : int, Series, or array-like\n        allow_duplicates : bool, optional\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(column, value, broadcast=False)\n        self._data.insert(loc, column, value, allow_duplicates=allow_duplicates\n            )\n\n    def assign(self, **kwargs):\n        \"\"\"\n        Assign new columns to a DataFrame.\n\n        Returns a new object with all original columns in addition to new ones.\n        Existing columns that are re-assigned will be overwritten.\n\n        Parameters\n        ----------\n        kwargs : keyword, value pairs\n            The column names are keywords. If the values are\n            callable, they are computed on the DataFrame and\n            assigned to the new columns. The callable must not\n            change input DataFrame (though pandas doesn't check it).\n            If the values are not callable, (e.g. a Series, scalar, or array),\n            they are simply assigned.\n\n        Returns\n        -------\n        df : DataFrame\n            A new DataFrame with the new columns in addition to\n            all the existing columns.\n\n        Notes\n        -----\n        Assigning multiple columns within the same ``assign`` is possible.\n        For Python 3.6 and above, later items in '\\\\*\\\\*kwargs' may refer to\n        newly created or modified columns in 'df'; items are computed and\n        assigned into 'df' in order.  For Python 3.5 and below, the order of\n        keyword arguments is not specified, you cannot refer to newly created\n        or modified columns. All items are computed first, and then assigned\n        in alphabetical order.\n\n        .. versionchanged :: 0.23.0\n\n           Keyword argument order is maintained for Python 3.6 and later.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 11), 'B': np.random.randn(10)})\n\n        Where the value is a callable, evaluated on `df`:\n\n        >>> df.assign(ln_A = lambda x: np.log(x.A))\n            A         B      ln_A\n        0   1  0.426905  0.000000\n        1   2 -0.780949  0.693147\n        2   3 -0.418711  1.098612\n        3   4 -0.269708  1.386294\n        4   5 -0.274002  1.609438\n        5   6 -0.500792  1.791759\n        6   7  1.649697  1.945910\n        7   8 -1.495604  2.079442\n        8   9  0.549296  2.197225\n        9  10 -0.758542  2.302585\n\n        Where the value already exists and is inserted:\n\n        >>> newcol = np.log(df['A'])\n        >>> df.assign(ln_A=newcol)\n            A         B      ln_A\n        0   1  0.426905  0.000000\n        1   2 -0.780949  0.693147\n        2   3 -0.418711  1.098612\n        3   4 -0.269708  1.386294\n        4   5 -0.274002  1.609438\n        5   6 -0.500792  1.791759\n        6   7  1.649697  1.945910\n        7   8 -1.495604  2.079442\n        8   9  0.549296  2.197225\n        9  10 -0.758542  2.302585\n\n        Where the keyword arguments depend on each other\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3]})\n\n        >>> df.assign(B=df.A, C=lambda x:x['A']+ x['B'])\n            A  B  C\n         0  1  1  2\n         1  2  2  4\n         2  3  3  6\n        \"\"\"\n        data = self.copy()\n        if PY36:\n            for k, v in kwargs.items():\n                data[k] = com.apply_if_callable(v, data)\n        else:\n            results = OrderedDict()\n            for k, v in kwargs.items():\n                results[k] = com.apply_if_callable(v, data)\n            results = sorted(results.items())\n            for k, v in results:\n                data[k] = v\n        return data\n\n    def _sanitize_column(self, key, value, broadcast=True):\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        key : object\n        value : scalar, Series, or array-like\n        broadcast : bool, default True\n            If ``key`` matches multiple duplicate column names in the\n            DataFrame, this parameter indicates whether ``value`` should be\n            tiled so that the returned array contains a (duplicated) column for\n            each occurrence of the key. If False, ``value`` will not be tiled.\n\n        Returns\n        -------\n        sanitized_column : numpy-array\n        \"\"\"\n\n        def reindexer(value):\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n                try:\n                    value = value.reindex(self.index)._values\n                except Exception as e:\n                    if not value.index.is_unique:\n                        raise e\n                    raise TypeError(\n                        'incompatible index of inserted column with frame index'\n                        )\n            return value\n        if isinstance(value, Series):\n            value = reindexer(value)\n        elif isinstance(value, DataFrame):\n            if isinstance(self.columns, MultiIndex) and key in self.columns:\n                loc = self.columns.get_loc(key)\n                if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                    cols = maybe_droplevels(self.columns[loc], key)\n                    if len(cols) and not cols.equals(value.columns):\n                        value = value.reindex(cols, axis=1)\n            value = reindexer(value).T\n        elif isinstance(value, ExtensionArray):\n            from pandas.core.series import _sanitize_index\n            value = value.copy()\n            value = _sanitize_index(value, self.index, copy=False)\n        elif isinstance(value, Index) or is_sequence(value):\n            from pandas.core.series import _sanitize_index\n            value = _sanitize_index(value, self.index, copy=False)\n            if not isinstance(value, (np.ndarray, Index)):\n                if isinstance(value, list) and len(value) > 0:\n                    value = maybe_convert_platform(value)\n                else:\n                    value = com.asarray_tuplesafe(value)\n            elif value.ndim == 2:\n                value = value.copy().T\n            elif isinstance(value, Index):\n                value = value.copy(deep=True)\n            else:\n                value = value.copy()\n            if is_object_dtype(value.dtype):\n                value = maybe_infer_to_datetimelike(value)\n        else:\n            infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n            value = cast_scalar_to_array(len(self.index), value)\n            value = maybe_cast_to_datetime(value, infer_dtype)\n        if is_extension_type(value) or is_extension_array_dtype(value):\n            return value\n        if broadcast and key in self.columns and value.ndim == 1:\n            if not self.columns.is_unique or isinstance(self.columns,\n                MultiIndex):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1))\n        return np.atleast_2d(np.asarray(value))\n\n    @property\n    def _series(self):\n        result = {}\n        for idx, item in enumerate(self.columns):\n            result[item] = Series(self._data.iget(idx), index=self.index,\n                name=item)\n        return result\n\n    def lookup(self, row_labels, col_labels):\n        \"\"\"Label-based \"fancy indexing\" function for DataFrame.\n        Given equal-length arrays of row and column labels, return an\n        array of the values corresponding to each (row, col) pair.\n\n        Parameters\n        ----------\n        row_labels : sequence\n            The row labels to use for lookup\n        col_labels : sequence\n            The column labels to use for lookup\n\n        Notes\n        -----\n        Akin to::\n\n            result = []\n            for row, col in zip(row_labels, col_labels):\n                result.append(df.get_value(row, col))\n\n        Examples\n        --------\n        values : ndarray\n            The found values\n\n        \"\"\"\n        n = len(row_labels)\n        if n != len(col_labels):\n            raise ValueError('Row labels must have same size as column labels')\n        thresh = 1000\n        if not self._is_mixed_type or n > thresh:\n            values = self.values\n            ridx = self.index.get_indexer(row_labels)\n            cidx = self.columns.get_indexer(col_labels)\n            if (ridx == -1).any():\n                raise KeyError('One or more row labels was not found')\n            if (cidx == -1).any():\n                raise KeyError('One or more column labels was not found')\n            flat_index = ridx * len(self.columns) + cidx\n            result = values.flat[flat_index]\n        else:\n            result = np.empty(n, dtype='O')\n            for i, (r, c) in enumerate(zip(row_labels, col_labels)):\n                result[i] = self._get_value(r, c)\n        if is_object_dtype(result):\n            result = lib.maybe_convert_objects(result)\n        return result\n\n    def _reindex_axes(self, axes, level, limit, tolerance, method,\n        fill_value, copy):\n        frame = self\n        columns = axes['columns']\n        if columns is not None:\n            frame = frame._reindex_columns(columns, method, copy, level,\n                fill_value, limit, tolerance)\n        index = axes['index']\n        if index is not None:\n            frame = frame._reindex_index(index, method, copy, level,\n                fill_value, limit, tolerance)\n        return frame\n\n    def _reindex_index(self, new_index, method, copy, level, fill_value=np.\n        nan, limit=None, tolerance=None):\n        new_index, indexer = self.index.reindex(new_index, method=method,\n            level=level, limit=limit, tolerance=tolerance)\n        return self._reindex_with_indexers({(0): [new_index, indexer]},\n            copy=copy, fill_value=fill_value, allow_dups=False)\n\n    def _reindex_columns(self, new_columns, method, copy, level, fill_value\n        =None, limit=None, tolerance=None):\n        new_columns, indexer = self.columns.reindex(new_columns, method=\n            method, level=level, limit=limit, tolerance=tolerance)\n        return self._reindex_with_indexers({(1): [new_columns, indexer]},\n            copy=copy, fill_value=fill_value, allow_dups=False)\n\n    def _reindex_multi(self, axes, copy, fill_value):\n        \"\"\" we are guaranteed non-Nones in the axes! \"\"\"\n        new_index, row_indexer = self.index.reindex(axes['index'])\n        new_columns, col_indexer = self.columns.reindex(axes['columns'])\n        if row_indexer is not None and col_indexer is not None:\n            indexer = row_indexer, col_indexer\n            new_values = algorithms.take_2d_multi(self.values, indexer,\n                fill_value=fill_value)\n            return self._constructor(new_values, index=new_index, columns=\n                new_columns)\n        else:\n            return self._reindex_with_indexers({(0): [new_index,\n                row_indexer], (1): [new_columns, col_indexer]}, copy=copy,\n                fill_value=fill_value)\n\n    @Appender(_shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n        fill_value=None, method=None, limit=None, fill_axis=0,\n        broadcast_axis=None):\n        return super(DataFrame, self).align(other, join=join, axis=axis,\n            level=level, copy=copy, fill_value=fill_value, method=method,\n            limit=limit, fill_axis=fill_axis, broadcast_axis=broadcast_axis)\n\n    @Appender(_shared_docs['reindex'] % _shared_doc_kwargs)\n    @rewrite_axis_style_signature('labels', [('method', None), ('copy', \n        True), ('level', None), ('fill_value', np.nan), ('limit', None), (\n        'tolerance', None)])\n    def reindex(self, *args, **kwargs):\n        axes = validate_axis_style_args(self, args, kwargs, 'labels', 'reindex'\n            )\n        kwargs.update(axes)\n        kwargs.pop('axis', None)\n        kwargs.pop('labels', None)\n        return super(DataFrame, self).reindex(**kwargs)\n\n    @Appender(_shared_docs['reindex_axis'] % _shared_doc_kwargs)\n    def reindex_axis(self, labels, axis=0, method=None, level=None, copy=\n        True, limit=None, fill_value=np.nan):\n        return super(DataFrame, self).reindex_axis(labels=labels, axis=axis,\n            method=method, level=level, copy=copy, limit=limit, fill_value=\n            fill_value)\n\n    def drop(self, labels=None, axis=0, index=None, columns=None, level=\n        None, inplace=False, errors='raise'):\n        \"\"\"\n        Drop specified labels from rows or columns.\n\n        Remove rows or columns by specifying label names and corresponding\n        axis, or by specifying directly index or column names. When using a\n        multi-index, labels on different levels can be removed by specifying\n        the level.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n            Index or column labels to drop.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Whether to drop labels from the index (0 or 'index') or\n            columns (1 or 'columns').\n        index, columns : single label or list-like\n            Alternative to specifying axis (``labels, axis=1``\n            is equivalent to ``columns=labels``).\n\n            .. versionadded:: 0.21.0\n        level : int or level name, optional\n            For MultiIndex, level from which the labels will be removed.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and only existing labels are\n            dropped.\n\n        Returns\n        -------\n        dropped : pandas.DataFrame\n\n        See Also\n        --------\n        DataFrame.loc : Label-location based indexer for selection by label.\n        DataFrame.dropna : Return DataFrame with labels on given axis omitted\n            where (all or any) data are missing\n        DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n            removed, optionally only considering certain columns\n        Series.drop : Return Series with specified index labels removed.\n\n        Raises\n        ------\n        KeyError\n            If none of the labels are found in the selected axis\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.arange(12).reshape(3,4),\n        ...                   columns=['A', 'B', 'C', 'D'])\n        >>> df\n           A  B   C   D\n        0  0  1   2   3\n        1  4  5   6   7\n        2  8  9  10  11\n\n        Drop columns\n\n        >>> df.drop(['B', 'C'], axis=1)\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        >>> df.drop(columns=['B', 'C'])\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        Drop a row by index\n\n        >>> df.drop([0, 1])\n           A  B   C   D\n        2  8  9  10  11\n\n        Drop columns and/or rows of MultiIndex DataFrame\n\n        >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n        ...                              ['speed', 'weight', 'length']],\n        ...                      labels=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n        ...                              [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n        >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n        ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n        ...                         [250, 150], [1.5, 0.8], [320, 250],\n        ...                         [1, 0.8], [0.3,0.2]])\n        >>> df\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n                length  1.5     1.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n                length  1.5     0.8\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n                length  0.3     0.2\n\n        >>> df.drop(index='cow', columns='small')\n                        big\n        lama    speed   45.0\n                weight  200.0\n                length  1.5\n        falcon  speed   320.0\n                weight  1.0\n                length  0.3\n\n        >>> df.drop(index='length', level=1)\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n        \"\"\"\n        return super(DataFrame, self).drop(labels=labels, axis=axis, index=\n            index, columns=columns, level=level, inplace=inplace, errors=errors\n            )\n\n    @rewrite_axis_style_signature('mapper', [('copy', True), ('inplace', \n        False), ('level', None)])\n    def rename(self, *args, **kwargs):\n        \"\"\"Alter axes labels.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        mapper, index, columns : dict-like or function, optional\n            dict-like or functions transformations to apply to\n            that axis' values. Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index`` and\n            ``columns``.\n        axis : int or str, optional\n            Axis to target with ``mapper``. Can be either the axis name\n            ('index', 'columns') or number (0, 1). The default is 'index'.\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n            Whether to return a new DataFrame. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        renamed : DataFrame\n\n        See Also\n        --------\n        pandas.DataFrame.rename_axis\n\n        Examples\n        --------\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n        \"\"\"\n        axes = validate_axis_style_args(self, args, kwargs, 'mapper', 'rename')\n        kwargs.update(axes)\n        kwargs.pop('axis', None)\n        kwargs.pop('mapper', None)\n        return super(DataFrame, self).rename(**kwargs)\n\n    @Substitution(**_shared_doc_kwargs)\n    @Appender(NDFrame.fillna.__doc__)\n    def fillna(self, value=None, method=None, axis=None, inplace=False,\n        limit=None, downcast=None, **kwargs):\n        return super(DataFrame, self).fillna(value=value, method=method,\n            axis=axis, inplace=inplace, limit=limit, downcast=downcast, **\n            kwargs)\n\n    @Appender(_shared_docs['replace'] % _shared_doc_kwargs)\n    def replace(self, to_replace=None, value=None, inplace=False, limit=\n        None, regex=False, method='pad'):\n        return super(DataFrame, self).replace(to_replace=to_replace, value=\n            value, inplace=inplace, limit=limit, regex=regex, method=method)\n\n    @Appender(_shared_docs['shift'] % _shared_doc_kwargs)\n    def shift(self, periods=1, freq=None, axis=0):\n        return super(DataFrame, self).shift(periods=periods, freq=freq,\n            axis=axis)\n\n    def set_index(self, keys, drop=True, append=False, inplace=False,\n        verify_integrity=False):\n        \"\"\"\n        Set the DataFrame index (row labels) using one or more existing\n        columns. By default yields a new object.\n\n        Parameters\n        ----------\n        keys : column label or list of column labels / arrays\n        drop : boolean, default True\n            Delete columns to be used as the new index\n        append : boolean, default False\n            Whether to append columns to existing index\n        inplace : boolean, default False\n            Modify the DataFrame in place (do not create a new object)\n        verify_integrity : boolean, default False\n            Check the new index for duplicates. Otherwise defer the check until\n            necessary. Setting to False will improve the performance of this\n            method\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n        ...                    'year': [2012, 2014, 2013, 2014],\n        ...                    'sale':[55, 40, 84, 31]})\n           month  sale  year\n        0  1      55    2012\n        1  4      40    2014\n        2  7      84    2013\n        3  10     31    2014\n\n        Set the index to become the 'month' column:\n\n        >>> df.set_index('month')\n               sale  year\n        month\n        1      55    2012\n        4      40    2014\n        7      84    2013\n        10     31    2014\n\n        Create a multi-index using columns 'year' and 'month':\n\n        >>> df.set_index(['year', 'month'])\n                    sale\n        year  month\n        2012  1     55\n        2014  4     40\n        2013  7     84\n        2014  10    31\n\n        Create a multi-index using a set of values and a column:\n\n        >>> df.set_index([[1, 2, 3, 4], 'year'])\n                 month  sale\n           year\n        1  2012  1      55\n        2  2014  4      40\n        3  2013  7      84\n        4  2014  10     31\n\n        Returns\n        -------\n        dataframe : DataFrame\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(keys, list):\n            keys = [keys]\n        if inplace:\n            frame = self\n        else:\n            frame = self.copy()\n        arrays = []\n        names = []\n        if append:\n            names = [x for x in self.index.names]\n            if isinstance(self.index, MultiIndex):\n                for i in range(self.index.nlevels):\n                    arrays.append(self.index._get_level_values(i))\n            else:\n                arrays.append(self.index)\n        to_remove = []\n        for col in keys:\n            if isinstance(col, MultiIndex):\n                for n in range(col.nlevels - 1):\n                    arrays.append(col._get_level_values(n))\n                level = col._get_level_values(col.nlevels - 1)\n                names.extend(col.names)\n            elif isinstance(col, Series):\n                level = col._values\n                names.append(col.name)\n            elif isinstance(col, Index):\n                level = col\n                names.append(col.name)\n            elif isinstance(col, (list, np.ndarray, Index)):\n                level = col\n                names.append(None)\n            else:\n                level = frame[col]._values\n                names.append(col)\n                if drop:\n                    to_remove.append(col)\n            arrays.append(level)\n        index = ensure_index_from_sequences(arrays, names)\n        if verify_integrity and not index.is_unique:\n            duplicates = index[index.duplicated()].unique()\n            raise ValueError('Index has duplicate keys: {dup}'.format(dup=\n                duplicates))\n        for c in to_remove:\n            del frame[c]\n        index._cleanup()\n        frame.index = index\n        if not inplace:\n            return frame\n\n    def reset_index(self, level=None, drop=False, inplace=False, col_level=\n        0, col_fill=''):\n        \"\"\"\n        For DataFrame with multi-level index, return new DataFrame with\n        labeling information in the columns under the index names, defaulting\n        to 'level_0', 'level_1', etc. if any are None. For a standard index,\n        the index name will be used (if set), otherwise a default 'index' or\n        'level_0' (if 'index' is already taken) will be used.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default None\n            Only remove the given levels from the index. Removes all levels by\n            default\n        drop : boolean, default False\n            Do not try to insert index into dataframe columns. This resets\n            the index to the default integer index.\n        inplace : boolean, default False\n            Modify the DataFrame in place (do not create a new object)\n        col_level : int or str, default 0\n            If the columns have multiple levels, determines which level the\n            labels are inserted into. By default it is inserted into the first\n            level.\n        col_fill : object, default ''\n            If the columns have multiple levels, determines how the other\n            levels are named. If None then the index name is repeated.\n\n        Returns\n        -------\n        resetted : DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('bird',    389.0),\n        ...                    ('bird',     24.0),\n        ...                    ('mammal',   80.5),\n        ...                    ('mammal', np.nan)],\n        ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n        ...                   columns=('class', 'max_speed'))\n        >>> df\n                 class  max_speed\n        falcon    bird      389.0\n        parrot    bird       24.0\n        lion    mammal       80.5\n        monkey  mammal        NaN\n\n        When we reset the index, the old index is added as a column, and a\n        new sequential index is used:\n\n        >>> df.reset_index()\n            index   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        We can use the `drop` parameter to avoid the old index being added as\n        a column:\n\n        >>> df.reset_index(drop=True)\n            class  max_speed\n        0    bird      389.0\n        1    bird       24.0\n        2  mammal       80.5\n        3  mammal        NaN\n\n        You can also use `reset_index` with `MultiIndex`.\n\n        >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n        ...                                    ('bird', 'parrot'),\n        ...                                    ('mammal', 'lion'),\n        ...                                    ('mammal', 'monkey')],\n        ...                                   names=['class', 'name'])\n        >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n        ...                                      ('species', 'type')])\n        >>> df = pd.DataFrame([(389.0, 'fly'),\n        ...                    ( 24.0, 'fly'),\n        ...                    ( 80.5, 'run'),\n        ...                    (np.nan, 'jump')],\n        ...                   index=index,\n        ...                   columns=columns)\n        >>> df\n                       speed species\n                         max    type\n        class  name\n        bird   falcon  389.0     fly\n               parrot   24.0     fly\n        mammal lion     80.5     run\n               monkey    NaN    jump\n\n        If the index has multiple levels, we can reset a subset of them:\n\n        >>> df.reset_index(level='class')\n                 class  speed species\n                          max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        If we are not dropping the index, by default, it is placed in the top\n        level. We can place it in another level:\n\n        >>> df.reset_index(level='class', col_level=1)\n                        speed species\n                 class    max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        When the index is inserted under another level, we can specify under\n        which one with the parameter `col_fill`:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                      species  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n\n        If we specify a nonexistent level for `col_fill`, it is created:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                        genus  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if inplace:\n            new_obj = self\n        else:\n            new_obj = self.copy()\n\n        def _maybe_casted_values(index, labels=None):\n            values = index._values\n            if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n                if values.dtype == np.object_:\n                    values = lib.maybe_convert_objects(values)\n            if labels is not None:\n                mask = labels == -1\n                if mask.all():\n                    values = np.empty(len(mask))\n                    values.fill(np.nan)\n                else:\n                    values = values.take(labels)\n                    if mask.any():\n                        values, changed = maybe_upcast_putmask(values, mask,\n                            np.nan)\n            return values\n        new_index = ibase.default_index(len(new_obj))\n        if level is not None:\n            if not isinstance(level, (tuple, list)):\n                level = [level]\n            level = [self.index._get_level_number(lev) for lev in level]\n            if len(level) < self.index.nlevels:\n                new_index = self.index.droplevel(level)\n        if not drop:\n            if isinstance(self.index, MultiIndex):\n                names = [(n if n is not None else 'level_%d' % i) for i, n in\n                    enumerate(self.index.names)]\n                to_insert = lzip(self.index.levels, self.index.labels)\n            else:\n                default = 'index' if 'index' not in self else 'level_0'\n                names = [default] if self.index.name is None else [self.\n                    index.name]\n                to_insert = (self.index, None),\n            multi_col = isinstance(self.columns, MultiIndex)\n            for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n                if not (level is None or i in level):\n                    continue\n                name = names[i]\n                if multi_col:\n                    col_name = list(name) if isinstance(name, tuple) else [name\n                        ]\n                    if col_fill is None:\n                        if len(col_name) not in (1, self.columns.nlevels):\n                            raise ValueError(\n                                'col_fill=None is incompatible with incomplete column name {}'\n                                .format(name))\n                        col_fill = col_name[0]\n                    lev_num = self.columns._get_level_number(col_level)\n                    name_lst = [col_fill] * lev_num + col_name\n                    missing = self.columns.nlevels - len(name_lst)\n                    name_lst += [col_fill] * missing\n                    name = tuple(name_lst)\n                level_values = _maybe_casted_values(lev, lab)\n                new_obj.insert(0, name, level_values)\n        new_obj.index = new_index\n        if not inplace:\n            return new_obj\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isna(self):\n        return super(DataFrame, self).isna()\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isnull(self):\n        return super(DataFrame, self).isnull()\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notna(self):\n        return super(DataFrame, self).notna()\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notnull(self):\n        return super(DataFrame, self).notnull()\n\n    def dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False\n        ):\n        \"\"\"\n        Remove missing values.\n\n        See the :ref:`User Guide <missing_data>` for more on which values are\n        considered missing, and how to work with missing data.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Determine if rows or columns which contain missing values are\n            removed.\n\n            * 0, or 'index' : Drop rows which contain missing values.\n            * 1, or 'columns' : Drop columns which contain missing value.\n\n            .. deprecated:: 0.23.0\n\n               Pass tuple or list to drop on multiple axes.\n               Only a single axis is allowed.\n\n        how : {'any', 'all'}, default 'any'\n            Determine if row or column is removed from DataFrame, when we have\n            at least one NA or all NA.\n\n            * 'any' : If any NA values are present, drop that row or column.\n            * 'all' : If all values are NA, drop that row or column.\n\n        thresh : int, optional\n            Require that many non-NA values.\n        subset : array-like, optional\n            Labels along other axis to consider, e.g. if you are dropping rows\n            these would be a list of columns to include.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame with NA entries dropped from it.\n\n        See Also\n        --------\n        DataFrame.isna: Indicate missing values.\n        DataFrame.notna : Indicate existing (non-missing) values.\n        DataFrame.fillna : Replace missing values.\n        Series.dropna : Drop missing values.\n        Index.dropna : Drop missing indices.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n        ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n        ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n        ...                             pd.NaT]})\n        >>> df\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Drop the rows where at least one element is missing.\n\n        >>> df.dropna()\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n\n        Drop the columns where at least one element is missing.\n\n        >>> df.dropna(axis='columns')\n               name\n        0    Alfred\n        1    Batman\n        2  Catwoman\n\n        Drop the rows where all elements are missing.\n\n        >>> df.dropna(how='all')\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Keep only the rows with at least 2 non-NA values.\n\n        >>> df.dropna(thresh=2)\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Define in which columns to look for missing values.\n\n        >>> df.dropna(subset=['name', 'born'])\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n\n        Keep the DataFrame with valid entries in the same variable.\n\n        >>> df.dropna(inplace=True)\n        >>> df\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if isinstance(axis, (tuple, list)):\n            msg = (\n                'supplying multiple axes to axis is deprecated and will be removed in a future version.'\n                )\n            warnings.warn(msg, FutureWarning, stacklevel=2)\n            result = self\n            for ax in axis:\n                result = result.dropna(how=how, thresh=thresh, subset=\n                    subset, axis=ax)\n        else:\n            axis = self._get_axis_number(axis)\n            agg_axis = 1 - axis\n            agg_obj = self\n            if subset is not None:\n                ax = self._get_axis(agg_axis)\n                indices = ax.get_indexer_for(subset)\n                check = indices == -1\n                if check.any():\n                    raise KeyError(list(np.compress(check, subset)))\n                agg_obj = self.take(indices, axis=agg_axis)\n            count = agg_obj.count(axis=agg_axis)\n            if thresh is not None:\n                mask = count >= thresh\n            elif how == 'any':\n                mask = count == len(agg_obj._get_axis(agg_axis))\n            elif how == 'all':\n                mask = count > 0\n            elif how is not None:\n                raise ValueError('invalid how option: {h}'.format(h=how))\n            else:\n                raise TypeError('must specify how or thresh')\n            result = self._take(mask.nonzero()[0], axis=axis)\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result\n\n    def drop_duplicates(self, subset=None, keep='first', inplace=False):\n        \"\"\"\n        Return DataFrame with duplicate rows removed, optionally only\n        considering certain columns\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns\n        keep : {'first', 'last', False}, default 'first'\n            - ``first`` : Drop duplicates except for the first occurrence.\n            - ``last`` : Drop duplicates except for the last occurrence.\n            - False : Drop all duplicates.\n        inplace : boolean, default False\n            Whether to drop duplicates in place or to return a copy\n\n        Returns\n        -------\n        deduplicated : DataFrame\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        duplicated = self.duplicated(subset, keep=keep)\n        if inplace:\n            inds, = (-duplicated).nonzero()\n            new_data = self._data.take(inds)\n            self._update_inplace(new_data)\n        else:\n            return self[-duplicated]\n\n    def duplicated(self, subset=None, keep='first'):\n        \"\"\"\n        Return boolean Series denoting duplicate rows, optionally only\n        considering certain columns\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns\n        keep : {'first', 'last', False}, default 'first'\n            - ``first`` : Mark duplicates as ``True`` except for the\n              first occurrence.\n            - ``last`` : Mark duplicates as ``True`` except for the\n              last occurrence.\n            - False : Mark all duplicates as ``True``.\n\n        Returns\n        -------\n        duplicated : Series\n        \"\"\"\n        from pandas.core.sorting import get_group_index\n        from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n\n        def f(vals):\n            labels, shape = algorithms.factorize(vals, size_hint=min(len(\n                self), _SIZE_HINT_LIMIT))\n            return labels.astype('i8', copy=False), len(shape)\n        if subset is None:\n            subset = self.columns\n        elif not np.iterable(subset) or isinstance(subset, compat.string_types\n            ) or isinstance(subset, tuple) and subset in self.columns:\n            subset = subset,\n        diff = Index(subset).difference(self.columns)\n        if not diff.empty:\n            raise KeyError(diff)\n        vals = (col.values for name, col in self.iteritems() if name in subset)\n        labels, shape = map(list, zip(*map(f, vals)))\n        ids = get_group_index(labels, shape, sort=False, xnull=False)\n        return Series(duplicated_int64(ids, keep), index=self.index)\n\n    @Appender(_shared_docs['sort_values'] % _shared_doc_kwargs)\n    def sort_values(self, by, axis=0, ascending=True, inplace=False, kind=\n        'quicksort', na_position='last'):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n        stacklevel = 2\n        if not isinstance(by, list):\n            by = [by]\n        if is_sequence(ascending) and len(by) != len(ascending):\n            raise ValueError(\n                'Length of ascending (%d) != length of by (%d)' % (len(\n                ascending), len(by)))\n        if len(by) > 1:\n            from pandas.core.sorting import lexsort_indexer\n            keys = []\n            for x in by:\n                k = self._get_label_or_level_values(x, axis=axis,\n                    stacklevel=stacklevel)\n                keys.append(k)\n            indexer = lexsort_indexer(keys, orders=ascending, na_position=\n                na_position)\n            indexer = ensure_platform_int(indexer)\n        else:\n            from pandas.core.sorting import nargsort\n            by = by[0]\n            k = self._get_label_or_level_values(by, axis=axis, stacklevel=\n                stacklevel)\n            if isinstance(ascending, (tuple, list)):\n                ascending = ascending[0]\n            indexer = nargsort(k, kind=kind, ascending=ascending,\n                na_position=na_position)\n        new_data = self._data.take(indexer, axis=self.\n            _get_block_manager_axis(axis), verify=False)\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    @Appender(_shared_docs['sort_index'] % _shared_doc_kwargs)\n    def sort_index(self, axis=0, level=None, ascending=True, inplace=False,\n        kind='quicksort', na_position='last', sort_remaining=True, by=None):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if by is not None:\n            warnings.warn(\n                'by argument to sort_index is deprecated, please use .sort_values(by=...)'\n                , FutureWarning, stacklevel=2)\n            if level is not None:\n                raise ValueError('unable to simultaneously sort by and level')\n            return self.sort_values(by, axis=axis, ascending=ascending,\n                inplace=inplace)\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n        labels = labels._sort_levels_monotonic()\n        if level is not None:\n            new_axis, indexer = labels.sortlevel(level, ascending=ascending,\n                sort_remaining=sort_remaining)\n        elif isinstance(labels, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n            indexer = lexsort_indexer(labels._get_labels_for_sorting(),\n                orders=ascending, na_position=na_position)\n        else:\n            from pandas.core.sorting import nargsort\n            if (ascending and labels.is_monotonic_increasing or not\n                ascending and labels.is_monotonic_decreasing):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n            indexer = nargsort(labels, kind=kind, ascending=ascending,\n                na_position=na_position)\n        baxis = self._get_block_manager_axis(axis)\n        new_data = self._data.take(indexer, axis=baxis, verify=False)\n        new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def sortlevel(self, level=0, axis=0, ascending=True, inplace=False,\n        sort_remaining=True):\n        \"\"\"Sort multilevel index by chosen axis and primary level. Data will be\n        lexicographically sorted by the chosen level followed by the other\n        levels (in order).\n\n        .. deprecated:: 0.20.0\n            Use :meth:`DataFrame.sort_index`\n\n\n        Parameters\n        ----------\n        level : int\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n        ascending : boolean, default True\n        inplace : boolean, default False\n            Sort the DataFrame without creating a new instance\n        sort_remaining : boolean, default True\n            Sort by the other levels too.\n\n        Returns\n        -------\n        sorted : DataFrame\n\n        See Also\n        --------\n        DataFrame.sort_index(level=...)\n\n        \"\"\"\n        warnings.warn('sortlevel is deprecated, use sort_index(level= ...)',\n            FutureWarning, stacklevel=2)\n        return self.sort_index(level=level, axis=axis, ascending=ascending,\n            inplace=inplace, sort_remaining=sort_remaining)\n\n    def nlargest(self, n, columns, keep='first'):\n        \"\"\"\n        Return the first `n` rows ordered by `columns` in descending order.\n\n        Return the first `n` rows with the largest values in `columns`, in\n        descending order. The columns that are not specified are returned as\n        well, but not used for ordering.\n\n        This method is equivalent to\n        ``df.sort_values(columns, ascending=False).head(n)``, but more\n        performant.\n\n        Parameters\n        ----------\n        n : int\n            Number of rows to return.\n        columns : label or list of labels\n            Column label(s) to order by.\n        keep : {'first', 'last', 'all'}, default 'first'\n            Where there are duplicate values:\n\n            - `first` : prioritize the first occurrence(s)\n            - `last` : prioritize the last occurrence(s)\n            - ``all`` : do not drop any duplicates, even it means\n                        selecting more than `n` items.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        DataFrame\n            The first `n` rows ordered by the given columns in descending\n            order.\n\n        See Also\n        --------\n        DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n            ascending order.\n        DataFrame.sort_values : Sort DataFrame by the values\n        DataFrame.head : Return the first `n` rows without re-ordering.\n\n        Notes\n        -----\n        This function cannot be used with all column types. For example, when\n        specifying columns with `object` or `category` dtypes, ``TypeError`` is\n        raised.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 10, 8, 11, 8, 2],\n        ...                    'b': list('abdcef'),\n        ...                    'c': [1.0, 2.0, np.nan, 3.0, 4.0, 9.0]})\n        >>> df\n            a  b    c\n        0   1  a  1.0\n        1  10  b  2.0\n        2   8  d  NaN\n        3  11  c  3.0\n        4   8  e  4.0\n        5   2  f  9.0\n\n        In the following example, we will use ``nlargest`` to select the three\n        rows having the largest values in column \"a\".\n\n        >>> df.nlargest(3, 'a')\n            a  b    c\n        3  11  c  3.0\n        1  10  b  2.0\n        2   8  d  NaN\n\n        When using ``keep='last'``, ties are resolved in reverse order:\n\n        >>> df.nlargest(3, 'a', keep='last')\n            a  b    c\n        3  11  c  3.0\n        1  10  b  2.0\n        4   8  e  4.0\n\n        When using ``keep='all'``, all duplicate items are maintained:\n\n        >>> df.nlargest(3, 'a', keep='all')\n            a  b    c\n        3  11  c  3.0\n        1  10  b  2.0\n        2   8  d  NaN\n        4   8  e  4.0\n\n        To order by the largest values in column \"a\" and then \"c\", we can\n        specify multiple columns like in the next example.\n\n        >>> df.nlargest(3, ['a', 'c'])\n            a  b    c\n        4   8  e  4.0\n        3  11  c  3.0\n        1  10  b  2.0\n\n        Attempting to use ``nlargest`` on non-numeric dtypes will raise a\n        ``TypeError``:\n\n        >>> df.nlargest(3, 'b')\n\n        Traceback (most recent call last):\n        TypeError: Column 'b' has dtype object, cannot use method 'nlargest'\n        \"\"\"\n        return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns\n            ).nlargest()\n\n    def nsmallest(self, n, columns, keep='first'):\n        \"\"\"Get the rows of a DataFrame sorted by the `n` smallest\n        values of `columns`.\n\n        Parameters\n        ----------\n        n : int\n            Number of items to retrieve\n        columns : list or str\n            Column name or names to order by\n        keep : {'first', 'last', 'all'}, default 'first'\n            Where there are duplicate values:\n\n            - ``first`` : take the first occurrence.\n            - ``last`` : take the last occurrence.\n            - ``all`` : do not drop any duplicates, even it means\n              selecting more than `n` items.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 10, 8, 11, 8, 2],\n        ...                    'b': list('abdcef'),\n        ...                    'c': [1.0, 2.0, np.nan, 3.0, 4.0, 9.0]})\n        >>> df\n            a  b    c\n        0   1  a  1.0\n        1  10  b  2.0\n        2   8  d  NaN\n        3  11  c  3.0\n        4   8  e  4.0\n        5   2  f  9.0\n\n        In the following example, we will use ``nsmallest`` to select the\n        three rows having the smallest values in column \"a\".\n\n        >>> df.nsmallest(3, 'a')\n           a  b    c\n        0  1  a  1.0\n        5  2  f  9.0\n        2  8  d  NaN\n\n        When using ``keep='last'``, ties are resolved in reverse order:\n\n        >>> df.nsmallest(3, 'a', keep='last')\n           a  b    c\n        0  1  a  1.0\n        5  2  f  9.0\n        4  8  e  4.0\n\n        When using ``keep='all'``, all duplicate items are maintained:\n\n        >>> df.nsmallest(3, 'a', keep='all')\n           a  b    c\n        0  1  a  1.0\n        5  2  f  9.0\n        2  8  d  NaN\n        4  8  e  4.0\n\n        To order by the largest values in column \"a\" and then \"c\", we can\n        specify multiple columns like in the next example.\n\n        >>> df.nsmallest(3, ['a', 'c'])\n           a  b    c\n        0  1  a  1.0\n        5  2  f  9.0\n        4  8  e  4.0\n\n        Attempting to use ``nsmallest`` on non-numeric dtypes will raise a\n        ``TypeError``:\n\n        >>> df.nsmallest(3, 'b')\n\n        Traceback (most recent call last):\n        TypeError: Column 'b' has dtype object, cannot use method 'nsmallest'\n        \"\"\"\n        return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns\n            ).nsmallest()\n\n    def swaplevel(self, i=-2, j=-1, axis=0):\n        \"\"\"\n        Swap levels i and j in a MultiIndex on a particular axis\n\n        Parameters\n        ----------\n        i, j : int, string (can be mixed)\n            Level of index to be swapped. Can pass level name as string.\n\n        Returns\n        -------\n        swapped : same type as caller (new object)\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n\n        \"\"\"\n        result = self.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            result.index = result.index.swaplevel(i, j)\n        else:\n            result.columns = result.columns.swaplevel(i, j)\n        return result\n\n    def reorder_levels(self, order, axis=0):\n        \"\"\"\n        Rearrange index levels using input order.\n        May not drop or duplicate levels\n\n        Parameters\n        ----------\n        order : list of int or list of str\n            List representing new level order. Reference level by number\n            (position) or by key (label).\n        axis : int\n            Where to reorder levels.\n\n        Returns\n        -------\n        type of caller (new object)\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if not isinstance(self._get_axis(axis), MultiIndex):\n            raise TypeError('Can only reorder levels on a hierarchical axis.')\n        result = self.copy()\n        if axis == 0:\n            result.index = result.index.reorder_levels(order)\n        else:\n            result.columns = result.columns.reorder_levels(order)\n        return result\n\n    def _combine_frame(self, other, func, fill_value=None, level=None):\n        this, other = self.align(other, join='outer', level=level, copy=False)\n        new_index, new_columns = this.index, this.columns\n\n        def _arith_op(left, right):\n            left, right = ops.fill_binop(left, right, fill_value)\n            return func(left, right)\n        if this._is_mixed_type or other._is_mixed_type:\n            return ops.dispatch_to_series(this, other, _arith_op)\n        else:\n            result = _arith_op(this.values, other.values)\n        return self._constructor(result, index=new_index, columns=\n            new_columns, copy=False)\n\n    def _combine_match_index(self, other, func, level=None):\n        left, right = self.align(other, join='outer', axis=0, level=level,\n            copy=False)\n        new_data = func(left.values.T, right.values).T\n        return self._constructor(new_data, index=left.index, columns=self.\n            columns, copy=False)\n\n    def _combine_match_columns(self, other, func, level=None, try_cast=True):\n        left, right = self.align(other, join='outer', axis=1, level=level,\n            copy=False)\n        new_data = left._data.eval(func=func, other=right, axes=[left.\n            columns, self.index], try_cast=try_cast)\n        return self._constructor(new_data)\n\n    def _combine_const(self, other, func, errors='raise', try_cast=True):\n        if lib.is_scalar(other) or np.ndim(other) == 0:\n            new_data = {i: func(self.iloc[:, i], other) for i, col in\n                enumerate(self.columns)}\n            result = self._constructor(new_data, index=self.index, copy=False)\n            result.columns = self.columns\n            return result\n        new_data = self._data.eval(func=func, other=other, errors=errors,\n            try_cast=try_cast)\n        return self._constructor(new_data)\n\n    def _compare_frame(self, other, func, str_rep):\n        import pandas.core.computation.expressions as expressions\n\n        def _compare(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(\n                a.columns))}\n        new_data = expressions.evaluate(_compare, str_rep, self, other)\n        result = self._constructor(data=new_data, index=self.index, copy=False)\n        result.columns = self.columns\n        return result\n\n    def combine(self, other, func, fill_value=None, overwrite=True):\n        \"\"\"\n        Perform column-wise combine with another DataFrame based on a\n        passed function.\n\n        Combines a DataFrame with `other` DataFrame using `func`\n        to element-wise combine columns. The row and column indexes of the\n        resulting DataFrame will be the union of the two.\n\n        Parameters\n        ----------\n        other : DataFrame\n            The DataFrame to merge column-wise.\n        func : function\n            Function that takes two series as inputs and return a Series or a\n            scalar. Used to merge the two dataframes column by columns.\n        fill_value : scalar value, default None\n            The value to fill NaNs with prior to passing any column to the\n            merge func.\n        overwrite : boolean, default True\n            If True, columns in `self` that do not exist in `other` will be\n            overwritten with NaNs.\n\n        Returns\n        -------\n        result : DataFrame\n\n        Examples\n        --------\n        Combine using a simple function that chooses the smaller column.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\n        >>> df1.combine(df2, take_smaller)\n           A  B\n        0  0  3\n        1  0  3\n\n        Example using a true element-wise combine function.\n\n        >>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine(df2, np.minimum)\n           A  B\n        0  1  2\n        1  0  3\n\n        Using `fill_value` fills Nones prior to passing the column to the\n        merge function.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine(df2, take_smaller, fill_value=-5)\n           A    B\n        0  0 -5.0\n        1  0  4.0\n\n        However, if the same element in both dataframes is None, that None\n        is preserved\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})\n        >>> df1.combine(df2, take_smaller, fill_value=-5)\n           A    B\n        0  0  NaN\n        1  0  3.0\n\n        Example that demonstrates the use of `overwrite` and behavior when\n        the axis differ between the dataframes.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1],}, index=[1, 2])\n        >>> df1.combine(df2, take_smaller)\n             A    B     C\n        0  NaN  NaN   NaN\n        1  NaN  3.0 -10.0\n        2  NaN  3.0   1.0\n\n        >>> df1.combine(df2, take_smaller, overwrite=False)\n             A    B     C\n        0  0.0  NaN   NaN\n        1  0.0  3.0 -10.0\n        2  NaN  3.0   1.0\n\n        Demonstrating the preference of the passed in dataframe.\n\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1],}, index=[1, 2])\n        >>> df2.combine(df1, take_smaller)\n           A    B   C\n        0  0.0  NaN NaN\n        1  0.0  3.0 NaN\n        2  NaN  3.0 NaN\n\n        >>> df2.combine(df1, take_smaller, overwrite=False)\n             A    B   C\n        0  0.0  NaN NaN\n        1  0.0  3.0 1.0\n        2  NaN  3.0 1.0\n\n        See Also\n        --------\n        DataFrame.combine_first : Combine two DataFrame objects and default to\n            non-null values in frame calling the method\n        \"\"\"\n        other_idxlen = len(other.index)\n        this, other = self.align(other, copy=False)\n        new_index = this.index\n        if other.empty and len(new_index) == len(self.index):\n            return self.copy()\n        if self.empty and len(other) == other_idxlen:\n            return other.copy()\n        new_columns = this.columns.union(other.columns)\n        do_fill = fill_value is not None\n        result = {}\n        for col in new_columns:\n            series = this[col]\n            otherSeries = other[col]\n            this_dtype = series.dtype\n            other_dtype = otherSeries.dtype\n            this_mask = isna(series)\n            other_mask = isna(otherSeries)\n            if not overwrite and other_mask.all():\n                result[col] = this[col].copy()\n                continue\n            if do_fill:\n                series = series.copy()\n                otherSeries = otherSeries.copy()\n                series[this_mask] = fill_value\n                otherSeries[other_mask] = fill_value\n            new_dtype = this_dtype\n            if not is_dtype_equal(this_dtype, other_dtype):\n                new_dtype = find_common_type([this_dtype, other_dtype])\n                if not is_dtype_equal(this_dtype, new_dtype):\n                    series = series.astype(new_dtype)\n                if not is_dtype_equal(other_dtype, new_dtype):\n                    otherSeries = otherSeries.astype(new_dtype)\n            needs_i8_conversion_i = needs_i8_conversion(new_dtype)\n            if needs_i8_conversion_i:\n                arr = func(series, otherSeries, True)\n            else:\n                arr = func(series, otherSeries)\n            arr = maybe_downcast_to_dtype(arr, this_dtype)\n            result[col] = arr\n        return self._constructor(result, index=new_index, columns=new_columns\n            )._convert(datetime=True, copy=False)\n\n    def combine_first(self, other):\n        \"\"\"\n        Update null elements with value in the same location in `other`.\n\n        Combine two DataFrame objects by filling null values in one DataFrame\n        with non-null values from other DataFrame. The row and column indexes\n        of the resulting DataFrame will be the union of the two.\n\n        Parameters\n        ----------\n        other : DataFrame\n            Provided DataFrame to use to fill null values.\n\n        Returns\n        -------\n        combined : DataFrame\n\n        Examples\n        --------\n\n        >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine_first(df2)\n             A    B\n        0  1.0  3.0\n        1  0.0  4.0\n\n        Null values still persist if the location of that null value\n        does not exist in `other`\n\n        >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])\n        >>> df1.combine_first(df2)\n             A    B    C\n        0  NaN  4.0  NaN\n        1  0.0  3.0  1.0\n        2  NaN  3.0  1.0\n\n        See Also\n        --------\n        DataFrame.combine : Perform series-wise operation on two DataFrames\n            using a given function\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n\n        def combiner(x, y, needs_i8_conversion=False):\n            x_values = x.values if hasattr(x, 'values') else x\n            y_values = y.values if hasattr(y, 'values') else y\n            if needs_i8_conversion:\n                mask = isna(x)\n                x_values = x_values.view('i8')\n                y_values = y_values.view('i8')\n            else:\n                mask = isna(x_values)\n            return expressions.where(mask, y_values, x_values)\n        return self.combine(other, combiner, overwrite=False)\n\n    def update(self, other, join='left', overwrite=True, filter_func=None,\n        raise_conflict=False):\n        \"\"\"\n        Modify in place using non-NA values from another DataFrame.\n\n        Aligns on indices. There is no return value.\n\n        Parameters\n        ----------\n        other : DataFrame, or object coercible into a DataFrame\n            Should have at least one matching index/column label\n            with the original DataFrame. If a Series is passed,\n            its name attribute must be set, and that will be\n            used as the column name to align with the original DataFrame.\n        join : {'left'}, default 'left'\n            Only left join is implemented, keeping the index and columns of the\n            original object.\n        overwrite : bool, default True\n            How to handle non-NA values for overlapping keys:\n\n            * True: overwrite original DataFrame's values\n              with values from `other`.\n            * False: only update values that are NA in\n              the original DataFrame.\n\n        filter_func : callable(1d-array) -> boolean 1d-array, optional\n            Can choose to replace values other than NA. Return True for values\n            that should be updated.\n        raise_conflict : bool, default False\n            If True, will raise a ValueError if the DataFrame and `other`\n            both contain non-NA data in the same place.\n\n        Raises\n        ------\n        ValueError\n            When `raise_conflict` is True and there's overlapping non-NA data.\n\n        See Also\n        --------\n        dict.update : Similar method for dictionaries.\n        DataFrame.merge : For column(s)-on-columns(s) operations.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, 5, 6],\n        ...                        'C': [7, 8, 9]})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        The DataFrame's length does not increase as a result of the update,\n        only values at matching index/column labels are updated.\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  d\n        1  b  e\n        2  c  f\n\n        For Series, it's name attribute must be set.\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n        >>> df.update(new_column)\n        >>> df\n           A  B\n        0  a  d\n        1  b  y\n        2  c  e\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  x\n        1  b  d\n        2  c  e\n\n        If `other` contains NaNs the corresponding values are not updated\n        in the original dataframe.\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n        >>> df.update(new_df)\n        >>> df\n           A      B\n        0  1    4.0\n        1  2  500.0\n        2  3    6.0\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n        if join != 'left':\n            raise NotImplementedError('Only left join is supported')\n        if not isinstance(other, DataFrame):\n            other = DataFrame(other)\n        other = other.reindex_like(self)\n        for col in self.columns:\n            this = self[col].values\n            that = other[col].values\n            if filter_func is not None:\n                with np.errstate(all='ignore'):\n                    mask = ~filter_func(this) | isna(that)\n            else:\n                if raise_conflict:\n                    mask_this = notna(that)\n                    mask_that = notna(this)\n                    if any(mask_this & mask_that):\n                        raise ValueError('Data overlaps.')\n                if overwrite:\n                    mask = isna(that)\n                else:\n                    mask = notna(this)\n            if mask.all():\n                continue\n            self[col] = expressions.where(mask, this, that)\n    _shared_docs['pivot'] = \"\"\"\n        Return reshaped DataFrame organized by given index / column values.\n\n        Reshape data (produce a \"pivot\" table) based on column values. Uses\n        unique values from specified `index` / `columns` to form axes of the\n        resulting DataFrame. This function does not support data\n        aggregation, multiple values will result in a MultiIndex in the\n        columns. See the :ref:`User Guide <reshaping>` for more on reshaping.\n\n        Parameters\n        ----------%s\n        index : string or object, optional\n            Column to use to make new frame's index. If None, uses\n            existing index.\n        columns : string or object\n            Column to use to make new frame's columns.\n        values : string, object or a list of the previous, optional\n            Column(s) to use for populating new frame's values. If not\n            specified, all remaining columns will be used and the result will\n            have hierarchically indexed columns.\n\n            .. versionchanged :: 0.23.0\n               Also accept list of column names.\n\n        Returns\n        -------\n        DataFrame\n            Returns reshaped DataFrame.\n\n        Raises\n        ------\n        ValueError:\n            When there are any `index`, `columns` combinations with multiple\n            values. `DataFrame.pivot_table` when you need to aggregate.\n\n        See Also\n        --------\n        DataFrame.pivot_table : generalization of pivot that can handle\n            duplicate values for one index/column pair.\n        DataFrame.unstack : pivot based on the index values instead of a\n            column.\n\n        Notes\n        -----\n        For finer-tuned control, see hierarchical indexing documentation along\n        with the related stack/unstack methods.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',\n        ...                            'two'],\n        ...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n        ...                    'baz': [1, 2, 3, 4, 5, 6],\n        ...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n        >>> df\n            foo   bar  baz  zoo\n        0   one   A    1    x\n        1   one   B    2    y\n        2   one   C    3    z\n        3   two   A    4    q\n        4   two   B    5    w\n        5   two   C    6    t\n\n        >>> df.pivot(index='foo', columns='bar', values='baz')\n        bar  A   B   C\n        foo\n        one  1   2   3\n        two  4   5   6\n\n        >>> df.pivot(index='foo', columns='bar')['baz']\n        bar  A   B   C\n        foo\n        one  1   2   3\n        two  4   5   6\n\n        >>> df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])\n              baz       zoo\n        bar   A  B  C   A  B  C\n        foo\n        one   1  2  3   x  y  z\n        two   4  5  6   q  w  t\n\n        A ValueError is raised if there are any duplicates.\n\n        >>> df = pd.DataFrame({\"foo\": ['one', 'one', 'two', 'two'],\n        ...                    \"bar\": ['A', 'A', 'B', 'C'],\n        ...                    \"baz\": [1, 2, 3, 4]})\n        >>> df\n           foo bar  baz\n        0  one   A    1\n        1  one   A    2\n        2  two   B    3\n        3  two   C    4\n\n        Notice that the first two rows are the same for our `index`\n        and `columns` arguments.\n\n        >>> df.pivot(index='foo', columns='bar', values='baz')\n        Traceback (most recent call last):\n           ...\n        ValueError: Index contains duplicate entries, cannot reshape\n        \"\"\"\n\n    @Substitution('')\n    @Appender(_shared_docs['pivot'])\n    def pivot(self, index=None, columns=None, values=None):\n        from pandas.core.reshape.pivot import pivot\n        return pivot(self, index=index, columns=columns, values=values)\n    _shared_docs['pivot_table'] = \"\"\"\n        Create a spreadsheet-style pivot table as a DataFrame. The levels in\n        the pivot table will be stored in MultiIndex objects (hierarchical\n        indexes) on the index and columns of the result DataFrame\n\n        Parameters\n        ----------%s\n        values : column to aggregate, optional\n        index : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table index.  If an array is passed,\n            it is being used as the same manner as column values.\n        columns : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table column.  If an array is passed,\n            it is being used as the same manner as column values.\n        aggfunc : function, list of functions, dict, default numpy.mean\n            If list of functions passed, the resulting pivot table will have\n            hierarchical columns whose top level are the function names\n            (inferred from the function objects themselves)\n            If dict is passed, the key is column to aggregate and value\n            is function or list of functions\n        fill_value : scalar, default None\n            Value to replace missing values with\n        margins : boolean, default False\n            Add all row / columns (e.g. for subtotal / grand totals)\n        dropna : boolean, default True\n            Do not include columns whose entries are all NaN\n        margins_name : string, default 'All'\n            Name of the row / column that will contain the totals\n            when margins is True.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n        ...                          \"bar\", \"bar\", \"bar\", \"bar\"],\n        ...                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n        ...                          \"one\", \"one\", \"two\", \"two\"],\n        ...                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n        ...                          \"small\", \"large\", \"small\", \"small\",\n        ...                          \"large\"],\n        ...                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7]})\n        >>> df\n             A    B      C  D\n        0  foo  one  small  1\n        1  foo  one  large  2\n        2  foo  one  large  2\n        3  foo  two  small  3\n        4  foo  two  small  3\n        5  bar  one  large  4\n        6  bar  one  small  5\n        7  bar  two  small  6\n        8  bar  two  large  7\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum)\n        >>> table\n        C        large  small\n        A   B\n        bar one    4.0    5.0\n            two    7.0    6.0\n        foo one    4.0    1.0\n            two    NaN    6.0\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum)\n        >>> table\n        C        large  small\n        A   B\n        bar one    4.0    5.0\n            two    7.0    6.0\n        foo one    4.0    1.0\n            two    NaN    6.0\n\n        >>> table = pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n        ...                     aggfunc={'D': np.mean,\n        ...                              'E': [min, max, np.mean]})\n        >>> table\n                          D   E\n                       mean max median min\n        A   C\n        bar large  5.500000  16   14.5  13\n            small  5.500000  15   14.5  14\n        foo large  2.000000  10    9.5   9\n            small  2.333333  12   11.0   8\n\n        Returns\n        -------\n        table : DataFrame\n\n        See also\n        --------\n        DataFrame.pivot : pivot without aggregation that can handle\n            non-numeric data\n        \"\"\"\n\n    @Substitution('')\n    @Appender(_shared_docs['pivot_table'])\n    def pivot_table(self, values=None, index=None, columns=None, aggfunc=\n        'mean', fill_value=None, margins=False, dropna=True, margins_name='All'\n        ):\n        from pandas.core.reshape.pivot import pivot_table\n        return pivot_table(self, values=values, index=index, columns=\n            columns, aggfunc=aggfunc, fill_value=fill_value, margins=\n            margins, dropna=dropna, margins_name=margins_name)\n\n    def stack(self, level=-1, dropna=True):\n        \"\"\"\n        Stack the prescribed level(s) from columns to index.\n\n        Return a reshaped DataFrame or Series having a multi-level\n        index with one or more new inner-most levels compared to the current\n        DataFrame. The new inner-most levels are created by pivoting the\n        columns of the current dataframe:\n\n          - if the columns have a single level, the output is a Series;\n          - if the columns have multiple levels, the new index\n            level(s) is (are) taken from the prescribed level(s) and\n            the output is a DataFrame.\n\n        The new index levels are sorted.\n\n        Parameters\n        ----------\n        level : int, str, list, default -1\n            Level(s) to stack from the column axis onto the index\n            axis, defined as one index or label, or a list of indices\n            or labels.\n        dropna : bool, default True\n            Whether to drop rows in the resulting Frame/Series with\n            missing values. Stacking a column level onto the index\n            axis can create combinations of index and column values\n            that are missing from the original dataframe. See Examples\n            section.\n\n        Returns\n        -------\n        DataFrame or Series\n            Stacked dataframe or series.\n\n        See Also\n        --------\n        DataFrame.unstack : Unstack prescribed level(s) from index axis\n             onto column axis.\n        DataFrame.pivot : Reshape dataframe from long format to wide\n             format.\n        DataFrame.pivot_table : Create a spreadsheet-style pivot table\n             as a DataFrame.\n\n        Notes\n        -----\n        The function is named by analogy with a collection of books\n        being re-organised from being side by side on a horizontal\n        position (the columns of the dataframe) to being stacked\n        vertically on top of of each other (in the index of the\n        dataframe).\n\n        Examples\n        --------\n        **Single level columns**\n\n        >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=['weight', 'height'])\n\n        Stacking a dataframe with a single level column axis returns a Series:\n\n        >>> df_single_level_cols\n             weight height\n        cat       0      1\n        dog       2      3\n        >>> df_single_level_cols.stack()\n        cat  weight    0\n             height    1\n        dog  weight    2\n             height    3\n        dtype: int64\n\n        **Multi level columns: simple case**\n\n        >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('weight', 'pounds')])\n        >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol1)\n\n        Stacking a dataframe with a multi-level column axis:\n\n        >>> df_multi_level_cols1\n             weight\n                 kg    pounds\n        cat       1        2\n        dog       2        4\n        >>> df_multi_level_cols1.stack()\n                    weight\n        cat kg           1\n            pounds       2\n        dog kg           2\n            pounds       4\n\n        **Missing values**\n\n        >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('height', 'm')])\n        >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        It is common to have missing values when stacking a dataframe\n        with multi-level columns, as the stacked dataframe typically\n        has more values than the original dataframe. Missing values\n        are filled with NaNs:\n\n        >>> df_multi_level_cols2\n            weight height\n                kg      m\n        cat    1.0    2.0\n        dog    3.0    4.0\n        >>> df_multi_level_cols2.stack()\n                height  weight\n        cat kg     NaN     1.0\n            m      2.0     NaN\n        dog kg     NaN     3.0\n            m      4.0     NaN\n\n        **Prescribing the level(s) to be stacked**\n\n        The first parameter controls which level or levels are stacked:\n\n        >>> df_multi_level_cols2.stack(0)\n                     kg    m\n        cat height  NaN  2.0\n            weight  1.0  NaN\n        dog height  NaN  4.0\n            weight  3.0  NaN\n        >>> df_multi_level_cols2.stack([0, 1])\n        cat  height  m     2.0\n             weight  kg    1.0\n        dog  height  m     4.0\n             weight  kg    3.0\n        dtype: float64\n\n        **Dropping missing values**\n\n        >>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        Note that rows where all values are missing are dropped by\n        default but this behaviour can be controlled via the dropna\n        keyword parameter:\n\n        >>> df_multi_level_cols3\n            weight height\n                kg      m\n        cat    NaN    1.0\n        dog    2.0    3.0\n        >>> df_multi_level_cols3.stack(dropna=False)\n                height  weight\n        cat kg     NaN     NaN\n            m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        >>> df_multi_level_cols3.stack(dropna=True)\n                height  weight\n        cat m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        \"\"\"\n        from pandas.core.reshape.reshape import stack, stack_multiple\n        if isinstance(level, (tuple, list)):\n            return stack_multiple(self, level, dropna=dropna)\n        else:\n            return stack(self, level, dropna=dropna)\n\n    def unstack(self, level=-1, fill_value=None):\n        \"\"\"\n        Pivot a level of the (necessarily hierarchical) index labels, returning\n        a DataFrame having a new level of column labels whose inner-most level\n        consists of the pivoted index labels. If the index is not a MultiIndex,\n        the output will be a Series (the analogue of stack when the columns are\n        not a MultiIndex).\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, string, or list of these, default -1 (last level)\n            Level(s) of index to unstack, can pass level name\n        fill_value : replace NaN with this value if the unstack produces\n            missing values\n\n            .. versionadded:: 0.18.0\n\n        See also\n        --------\n        DataFrame.pivot : Pivot a table based on column values.\n        DataFrame.stack : Pivot a level of the column labels (inverse operation\n            from `unstack`).\n\n        Examples\n        --------\n        >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n        ...                                    ('two', 'a'), ('two', 'b')])\n        >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n        >>> s\n        one  a   1.0\n             b   2.0\n        two  a   3.0\n             b   4.0\n        dtype: float64\n\n        >>> s.unstack(level=-1)\n             a   b\n        one  1.0  2.0\n        two  3.0  4.0\n\n        >>> s.unstack(level=0)\n           one  two\n        a  1.0   3.0\n        b  2.0   4.0\n\n        >>> df = s.unstack(level=0)\n        >>> df.unstack()\n        one  a  1.0\n             b  2.0\n        two  a  3.0\n             b  4.0\n        dtype: float64\n\n        Returns\n        -------\n        unstacked : DataFrame or Series\n        \"\"\"\n        from pandas.core.reshape.reshape import unstack\n        return unstack(self, level, fill_value)\n    _shared_docs['melt'] = \"\"\"\n    \"Unpivots\" a DataFrame from wide format to long format, optionally\n    leaving identifier variables set.\n\n    This function is useful to massage a DataFrame into a format where one\n    or more columns are identifier variables (`id_vars`), while all other\n    columns, considered measured variables (`value_vars`), are \"unpivoted\" to\n    the row axis, leaving just two non-identifier columns, 'variable' and\n    'value'.\n\n    %(versionadded)s\n    Parameters\n    ----------\n    frame : DataFrame\n    id_vars : tuple, list, or ndarray, optional\n        Column(s) to use as identifier variables.\n    value_vars : tuple, list, or ndarray, optional\n        Column(s) to unpivot. If not specified, uses all columns that\n        are not set as `id_vars`.\n    var_name : scalar\n        Name to use for the 'variable' column. If None it uses\n        ``frame.columns.name`` or 'variable'.\n    value_name : scalar, default 'value'\n        Name to use for the 'value' column.\n    col_level : int or string, optional\n        If columns are a MultiIndex then use this level to melt.\n\n    See also\n    --------\n    %(other)s\n    pivot_table\n    DataFrame.pivot\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},\n    ...                    'B': {0: 1, 1: 3, 2: 5},\n    ...                    'C': {0: 2, 1: 4, 2: 6}})\n    >>> df\n       A  B  C\n    0  a  1  2\n    1  b  3  4\n    2  c  5  6\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B', 'C'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n    3  a        C      2\n    4  b        C      4\n    5  c        C      6\n\n    The names of 'variable' and 'value' columns can be customized:\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B'],\n    ...         var_name='myVarname', value_name='myValname')\n       A myVarname  myValname\n    0  a         B          1\n    1  b         B          3\n    2  c         B          5\n\n    If you have multi-index columns:\n\n    >>> df.columns = [list('ABC'), list('DEF')]\n    >>> df\n       A  B  C\n       D  E  F\n    0  a  1  2\n    1  b  3  4\n    2  c  5  6\n\n    >>> %(caller)scol_level=0, id_vars=['A'], value_vars=['B'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n\n    >>> %(caller)sid_vars=[('A', 'D')], value_vars=[('B', 'E')])\n      (A, D) variable_0 variable_1  value\n    0      a          B          E      1\n    1      b          B          E      3\n    2      c          B          E      5\n\n    \"\"\"\n\n    @Appender(_shared_docs['melt'] % dict(caller='df.melt(', versionadded=\n        \"\"\".. versionadded:: 0.20.0\n\"\"\", other='melt'))\n    def melt(self, id_vars=None, value_vars=None, var_name=None, value_name\n        ='value', col_level=None):\n        from pandas.core.reshape.melt import melt\n        return melt(self, id_vars=id_vars, value_vars=value_vars, var_name=\n            var_name, value_name=value_name, col_level=col_level)\n\n    def diff(self, periods=1, axis=0):\n        \"\"\"\n        First discrete difference of element.\n\n        Calculates the difference of a DataFrame element compared with another\n        element in the DataFrame (default is the element in the same column\n        of the previous row).\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for calculating difference, accepts negative\n            values.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Take difference over rows (0) or columns (1).\n\n            .. versionadded:: 0.16.1.\n\n        Returns\n        -------\n        diffed : DataFrame\n\n        See Also\n        --------\n        Series.diff: First discrete difference for a Series.\n        DataFrame.pct_change: Percent change over given number of periods.\n        DataFrame.shift: Shift index by desired number of periods with an\n            optional time freq.\n\n        Examples\n        --------\n        Difference with previous row\n\n        >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n        ...                    'b': [1, 1, 2, 3, 5, 8],\n        ...                    'c': [1, 4, 9, 16, 25, 36]})\n        >>> df\n           a  b   c\n        0  1  1   1\n        1  2  1   4\n        2  3  2   9\n        3  4  3  16\n        4  5  5  25\n        5  6  8  36\n\n        >>> df.diff()\n             a    b     c\n        0  NaN  NaN   NaN\n        1  1.0  0.0   3.0\n        2  1.0  1.0   5.0\n        3  1.0  1.0   7.0\n        4  1.0  2.0   9.0\n        5  1.0  3.0  11.0\n\n        Difference with previous column\n\n        >>> df.diff(axis=1)\n            a    b     c\n        0 NaN  0.0   0.0\n        1 NaN -1.0   3.0\n        2 NaN -1.0   7.0\n        3 NaN -1.0  13.0\n        4 NaN  0.0  20.0\n        5 NaN  2.0  28.0\n\n        Difference with 3rd previous row\n\n        >>> df.diff(periods=3)\n             a    b     c\n        0  NaN  NaN   NaN\n        1  NaN  NaN   NaN\n        2  NaN  NaN   NaN\n        3  3.0  2.0  15.0\n        4  3.0  4.0  21.0\n        5  3.0  6.0  27.0\n\n        Difference with following row\n\n        >>> df.diff(periods=-1)\n             a    b     c\n        0 -1.0  0.0  -3.0\n        1 -1.0 -1.0  -5.0\n        2 -1.0 -1.0  -7.0\n        3 -1.0 -2.0  -9.0\n        4 -1.0 -3.0 -11.0\n        5  NaN  NaN   NaN\n        \"\"\"\n        bm_axis = self._get_block_manager_axis(axis)\n        new_data = self._data.diff(n=periods, axis=bm_axis)\n        return self._constructor(new_data)\n\n    def _gotitem(self, key, ndim, subset=None):\n        \"\"\"\n        sub-classes to define\n        return a sliced object\n\n        Parameters\n        ----------\n        key : string / list of selections\n        ndim : 1,2\n            requested ndim of result\n        subset : object, default None\n            subset to act on\n        \"\"\"\n        if subset is None:\n            subset = self\n        elif subset.ndim == 1:\n            return subset\n        return subset[key]\n    _agg_doc = dedent(\n        \"\"\"\n    The aggregation operations are always performed over an axis, either the\n    index (default) or the column axis. This behavior is different from\n    `numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n    `var`), where the default is to compute the aggregation of the flattened\n    array, e.g., ``numpy.mean(arr_2d)`` as opposed to ``numpy.mean(arr_2d,\n    axis=0)``.\n\n    `agg` is an alias for `aggregate`. Use the alias.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2, 3],\n    ...                    [4, 5, 6],\n    ...                    [7, 8, 9],\n    ...                    [np.nan, np.nan, np.nan]],\n    ...                   columns=['A', 'B', 'C'])\n\n    Aggregate these functions over the rows.\n\n    >>> df.agg(['sum', 'min'])\n            A     B     C\n    sum  12.0  15.0  18.0\n    min   1.0   2.0   3.0\n\n    Different aggregations per column.\n\n    >>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n            A    B\n    max   NaN  8.0\n    min   1.0  2.0\n    sum  12.0  NaN\n\n    Aggregate over the columns.\n\n    >>> df.agg(\"mean\", axis=\"columns\")\n    0    2.0\n    1    5.0\n    2    8.0\n    3    NaN\n    dtype: float64\n\n    See also\n    --------\n    DataFrame.apply : Perform any type of operations.\n    DataFrame.transform : Perform transformation type operations.\n    pandas.core.groupby.GroupBy : Perform operations over groups.\n    pandas.core.resample.Resampler : Perform operations over resampled bins.\n    pandas.core.window.Rolling : Perform operations over rolling window.\n    pandas.core.window.Expanding : Perform operations over expanding window.\n    pandas.core.window.EWM : Perform operation over exponential weighted\n        window.\n    \"\"\"\n        )\n\n    @Appender(_agg_doc)\n    @Appender(_shared_docs['aggregate'] % dict(versionadded=\n        '.. versionadded:: 0.20.0', **_shared_doc_kwargs))\n    def aggregate(self, func, axis=0, *args, **kwargs):\n        axis = self._get_axis_number(axis)\n        result = None\n        try:\n            result, how = self._aggregate(func, *args, axis=axis, **kwargs)\n        except TypeError:\n            pass\n        if result is None:\n            return self.apply(func, axis=axis, args=args, **kwargs)\n        return result\n\n    def _aggregate(self, arg, axis=0, *args, **kwargs):\n        if axis == 1:\n            result, how = super(DataFrame, self.T)._aggregate(arg, *args,\n                **kwargs)\n            result = result.T if result is not None else result\n            return result, how\n        return super(DataFrame, self)._aggregate(arg, *args, **kwargs)\n    agg = aggregate\n\n    @Appender(_shared_docs['transform'] % _shared_doc_kwargs)\n    def transform(self, func, axis=0, *args, **kwargs):\n        axis = self._get_axis_number(axis)\n        if axis == 1:\n            return super(DataFrame, self.T).transform(func, *args, **kwargs).T\n        return super(DataFrame, self).transform(func, *args, **kwargs)\n\n    def apply(self, func, axis=0, broadcast=None, raw=False, reduce=None,\n        result_type=None, args=(), **kwds):\n        \"\"\"\n        Apply a function along an axis of the DataFrame.\n\n        Objects passed to the function are Series objects whose index is\n        either the DataFrame's index (``axis=0``) or the DataFrame's columns\n        (``axis=1``). By default (``result_type=None``), the final return type\n        is inferred from the return type of the applied function. Otherwise,\n        it depends on the `result_type` argument.\n\n        Parameters\n        ----------\n        func : function\n            Function to apply to each column or row.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis along which the function is applied:\n\n            * 0 or 'index': apply function to each column.\n            * 1 or 'columns': apply function to each row.\n        broadcast : bool, optional\n            Only relevant for aggregation functions:\n\n            * ``False`` or ``None`` : returns a Series whose length is the\n              length of the index or the number of columns (based on the\n              `axis` parameter)\n            * ``True`` : results will be broadcast to the original shape\n              of the frame, the original index and columns will be retained.\n\n            .. deprecated:: 0.23.0\n               This argument will be removed in a future version, replaced\n               by result_type='broadcast'.\n\n        raw : bool, default False\n            * ``False`` : passes each row or column as a Series to the\n              function.\n            * ``True`` : the passed function will receive ndarray objects\n              instead.\n              If you are just applying a NumPy reduction function this will\n              achieve much better performance.\n        reduce : bool or None, default None\n            Try to apply reduction procedures. If the DataFrame is empty,\n            `apply` will use `reduce` to determine whether the result\n            should be a Series or a DataFrame. If ``reduce=None`` (the\n            default), `apply`'s return value will be guessed by calling\n            `func` on an empty Series\n            (note: while guessing, exceptions raised by `func` will be\n            ignored).\n            If ``reduce=True`` a Series will always be returned, and if\n            ``reduce=False`` a DataFrame will always be returned.\n\n            .. deprecated:: 0.23.0\n               This argument will be removed in a future version, replaced\n               by ``result_type='reduce'``.\n\n        result_type : {'expand', 'reduce', 'broadcast', None}, default None\n            These only act when ``axis=1`` (columns):\n\n            * 'expand' : list-like results will be turned into columns.\n            * 'reduce' : returns a Series if possible rather than expanding\n              list-like results. This is the opposite of 'expand'.\n            * 'broadcast' : results will be broadcast to the original shape\n              of the DataFrame, the original index and columns will be\n              retained.\n\n            The default behaviour (None) depends on the return value of the\n            applied function: list-like results will be returned as a Series\n            of those. However if the apply function returns a Series these\n            are expanded to columns.\n\n            .. versionadded:: 0.23.0\n\n        args : tuple\n            Positional arguments to pass to `func` in addition to the\n            array/series.\n        **kwds\n            Additional keyword arguments to pass as keywords arguments to\n            `func`.\n\n        Notes\n        -----\n        In the current implementation apply calls `func` twice on the\n        first column/row to decide whether it can take a fast or slow\n        code path. This can lead to unexpected behavior if `func` has\n        side-effects, as they will take effect twice for the first\n        column/row.\n\n        See also\n        --------\n        DataFrame.applymap: For elementwise operations\n        DataFrame.aggregate: only perform aggregating type operations\n        DataFrame.transform: only perform transforming type operations\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[4, 9],] * 3, columns=['A', 'B'])\n        >>> df\n           A  B\n        0  4  9\n        1  4  9\n        2  4  9\n\n        Using a numpy universal function (in this case the same as\n        ``np.sqrt(df)``):\n\n        >>> df.apply(np.sqrt)\n             A    B\n        0  2.0  3.0\n        1  2.0  3.0\n        2  2.0  3.0\n\n        Using a reducing function on either axis\n\n        >>> df.apply(np.sum, axis=0)\n        A    12\n        B    27\n        dtype: int64\n\n        >>> df.apply(np.sum, axis=1)\n        0    13\n        1    13\n        2    13\n        dtype: int64\n\n        Retuning a list-like will result in a Series\n\n        >>> df.apply(lambda x: [1, 2], axis=1)\n        0    [1, 2]\n        1    [1, 2]\n        2    [1, 2]\n        dtype: object\n\n        Passing result_type='expand' will expand list-like results\n        to columns of a Dataframe\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n           0  1\n        0  1  2\n        1  1  2\n        2  1  2\n\n        Returning a Series inside the function is similar to passing\n        ``result_type='expand'``. The resulting column names\n        will be the Series index.\n\n        >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n           foo  bar\n        0    1    2\n        1    1    2\n        2    1    2\n\n        Passing ``result_type='broadcast'`` will ensure the same shape\n        result, whether list-like or scalar is returned by the function,\n        and broadcast it along the axis. The resulting column names will\n        be the originals.\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n           A  B\n        0  1  2\n        1  1  2\n        2  1  2\n\n        Returns\n        -------\n        applied : Series or DataFrame\n        \"\"\"\n        from pandas.core.apply import frame_apply\n        op = frame_apply(self, func=func, axis=axis, broadcast=broadcast,\n            raw=raw, reduce=reduce, result_type=result_type, args=args,\n            kwds=kwds)\n        return op.get_result()\n\n    def applymap(self, func):\n        \"\"\"\n        Apply a function to a Dataframe elementwise.\n\n        This method applies a function that accepts and returns a scalar\n        to every element of a DataFrame.\n\n        Parameters\n        ----------\n        func : callable\n            Python function, returns a single value from a single value.\n\n        Returns\n        -------\n        DataFrame\n            Transformed DataFrame.\n\n        See also\n        --------\n        DataFrame.apply : Apply a function along input axis of DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n        >>> df\n               0      1\n        0  1.000  2.120\n        1  3.356  4.567\n\n        >>> df.applymap(lambda x: len(str(x)))\n           0  1\n        0  3  4\n        1  5  5\n\n        Note that a vectorized version of `func` often exists, which will\n        be much faster. You could square each number elementwise.\n\n        >>> df.applymap(lambda x: x**2)\n                   0          1\n        0   1.000000   4.494400\n        1  11.262736  20.857489\n\n        But it's better to avoid applymap in that case.\n\n        >>> df ** 2\n                   0          1\n        0   1.000000   4.494400\n        1  11.262736  20.857489\n        \"\"\"\n\n        def infer(x):\n            if x.empty:\n                return lib.map_infer(x, func)\n            return lib.map_infer(x.astype(object).values, func)\n        return self.apply(infer)\n\n    def append(self, other, ignore_index=False, verify_integrity=False,\n        sort=None):\n        \"\"\"\n        Append rows of `other` to the end of caller, returning a new object.\n\n        Columns in `other` that are not in the caller are added as new columns.\n\n        Parameters\n        ----------\n        other : DataFrame or Series/dict-like object, or list of these\n            The data to append.\n        ignore_index : boolean, default False\n            If True, do not use the index labels.\n        verify_integrity : boolean, default False\n            If True, raise ValueError on creating index with duplicates.\n        sort : boolean, default None\n            Sort columns if the columns of `self` and `other` are not aligned.\n            The default sorting is deprecated and will change to not-sorting\n            in a future version of pandas. Explicitly pass ``sort=True`` to\n            silence the warning and sort. Explicitly pass ``sort=False`` to\n            silence the warning and not sort.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        appended : DataFrame\n\n        Notes\n        -----\n        If a list of dict/series is passed and the keys are all contained in\n        the DataFrame's index, the order of the columns in the resulting\n        DataFrame will be unchanged.\n\n        Iteratively appending rows to a DataFrame can be more computationally\n        intensive than a single concatenate. A better solution is to append\n        those rows to a list and then concatenate the list with the original\n        DataFrame all at once.\n\n        See also\n        --------\n        pandas.concat : General function to concatenate DataFrame, Series\n            or Panel objects\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n        >>> df\n           A  B\n        0  1  2\n        1  3  4\n        >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n        >>> df.append(df2)\n           A  B\n        0  1  2\n        1  3  4\n        0  5  6\n        1  7  8\n\n        With `ignore_index` set to True:\n\n        >>> df.append(df2, ignore_index=True)\n           A  B\n        0  1  2\n        1  3  4\n        2  5  6\n        3  7  8\n\n        The following, while not recommended methods for generating DataFrames,\n        show two ways to generate a DataFrame from multiple data sources.\n\n        Less efficient:\n\n        >>> df = pd.DataFrame(columns=['A'])\n        >>> for i in range(5):\n        ...     df = df.append({'A': i}, ignore_index=True)\n        >>> df\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n\n        More efficient:\n\n        >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n        ...           ignore_index=True)\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n        \"\"\"\n        if isinstance(other, (Series, dict)):\n            if isinstance(other, dict):\n                other = Series(other)\n            if other.name is None and not ignore_index:\n                raise TypeError(\n                    'Can only append a Series if ignore_index=True or if the Series has a name'\n                    )\n            if other.name is None:\n                index = None\n            else:\n                index = Index([other.name], name=self.index.name)\n            idx_diff = other.index.difference(self.columns)\n            try:\n                combined_columns = self.columns.append(idx_diff)\n            except TypeError:\n                combined_columns = self.columns.astype(object).append(idx_diff)\n            other = other.reindex(combined_columns, copy=False)\n            other = DataFrame(other.values.reshape((1, len(other))), index=\n                index, columns=combined_columns)\n            other = other._convert(datetime=True, timedelta=True)\n            if not self.columns.equals(combined_columns):\n                self = self.reindex(columns=combined_columns)\n        elif isinstance(other, list) and not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.loc[:, self.columns]\n        from pandas.core.reshape.concat import concat\n        if isinstance(other, (list, tuple)):\n            to_concat = [self] + other\n        else:\n            to_concat = [self, other]\n        return concat(to_concat, ignore_index=ignore_index,\n            verify_integrity=verify_integrity, sort=sort)\n\n    def join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort\n        =False):\n        \"\"\"\n        Join columns with other DataFrame either on index or on a key\n        column. Efficiently Join multiple DataFrame objects by index at once by\n        passing a list.\n\n        Parameters\n        ----------\n        other : DataFrame, Series with name field set, or list of DataFrame\n            Index should be similar to one of the columns in this one. If a\n            Series is passed, its name attribute must be set, and that will be\n            used as the column name in the resulting joined DataFrame\n        on : name, tuple/list of names, or array-like\n            Column or index level name(s) in the caller to join on the index\n            in `other`, otherwise joins index-on-index. If multiple\n            values given, the `other` DataFrame must have a MultiIndex. Can\n            pass an array as the join key if it is not already contained in\n            the calling DataFrame. Like an Excel VLOOKUP operation\n        how : {'left', 'right', 'outer', 'inner'}, default: 'left'\n            How to handle the operation of the two objects.\n\n            * left: use calling frame's index (or column if on is specified)\n            * right: use other frame's index\n            * outer: form union of calling frame's index (or column if on is\n              specified) with other frame's index, and sort it\n              lexicographically\n            * inner: form intersection of calling frame's index (or column if\n              on is specified) with other frame's index, preserving the order\n              of the calling's one\n        lsuffix : string\n            Suffix to use from left frame's overlapping columns\n        rsuffix : string\n            Suffix to use from right frame's overlapping columns\n        sort : boolean, default False\n            Order result DataFrame lexicographically by the join key. If False,\n            the order of the join key depends on the join type (how keyword)\n\n        Notes\n        -----\n        on, lsuffix, and rsuffix options are not supported when passing a list\n        of DataFrame objects\n\n        Support for specifying index levels as the `on` parameter was added\n        in version 0.23.0\n\n        Examples\n        --------\n        >>> caller = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n        ...                        'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n        >>> caller\n            A key\n        0  A0  K0\n        1  A1  K1\n        2  A2  K2\n        3  A3  K3\n        4  A4  K4\n        5  A5  K5\n\n        >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n        ...                       'B': ['B0', 'B1', 'B2']})\n\n        >>> other\n            B key\n        0  B0  K0\n        1  B1  K1\n        2  B2  K2\n\n        Join DataFrames using their indexes.\n\n        >>> caller.join(other, lsuffix='_caller', rsuffix='_other')\n\n        >>>     A key_caller    B key_other\n            0  A0         K0   B0        K0\n            1  A1         K1   B1        K1\n            2  A2         K2   B2        K2\n            3  A3         K3  NaN       NaN\n            4  A4         K4  NaN       NaN\n            5  A5         K5  NaN       NaN\n\n\n        If we want to join using the key columns, we need to set key to be\n        the index in both caller and other. The joined DataFrame will have\n        key as its index.\n\n        >>> caller.set_index('key').join(other.set_index('key'))\n\n        >>>      A    B\n            key\n            K0   A0   B0\n            K1   A1   B1\n            K2   A2   B2\n            K3   A3  NaN\n            K4   A4  NaN\n            K5   A5  NaN\n\n        Another option to join using the key columns is to use the on\n        parameter. DataFrame.join always uses other's index but we can use any\n        column in the caller. This method preserves the original caller's\n        index in the result.\n\n        >>> caller.join(other.set_index('key'), on='key')\n\n        >>>     A key    B\n            0  A0  K0   B0\n            1  A1  K1   B1\n            2  A2  K2   B2\n            3  A3  K3  NaN\n            4  A4  K4  NaN\n            5  A5  K5  NaN\n\n\n        See also\n        --------\n        DataFrame.merge : For column(s)-on-columns(s) operations\n\n        Returns\n        -------\n        joined : DataFrame\n        \"\"\"\n        return self._join_compat(other, on=on, how=how, lsuffix=lsuffix,\n            rsuffix=rsuffix, sort=sort)\n\n    def _join_compat(self, other, on=None, how='left', lsuffix='', rsuffix=\n        '', sort=False):\n        from pandas.core.reshape.merge import merge\n        from pandas.core.reshape.concat import concat\n        if isinstance(other, Series):\n            if other.name is None:\n                raise ValueError('Other Series must have a name')\n            other = DataFrame({other.name: other})\n        if isinstance(other, DataFrame):\n            return merge(self, other, left_on=on, how=how, left_index=on is\n                None, right_index=True, suffixes=(lsuffix, rsuffix), sort=sort)\n        else:\n            if on is not None:\n                raise ValueError(\n                    'Joining multiple DataFrames only supported for joining on index'\n                    )\n            frames = [self] + list(other)\n            can_concat = all(df.index.is_unique for df in frames)\n            if can_concat:\n                if how == 'left':\n                    how = 'outer'\n                    join_axes = [self.index]\n                else:\n                    join_axes = None\n                return concat(frames, axis=1, join=how, join_axes=join_axes,\n                    verify_integrity=True)\n            joined = frames[0]\n            for frame in frames[1:]:\n                joined = merge(joined, frame, how=how, left_index=True,\n                    right_index=True)\n            return joined\n\n    @Substitution('')\n    @Appender(_merge_doc, indents=2)\n    def merge(self, right, how='inner', on=None, left_on=None, right_on=\n        None, left_index=False, right_index=False, sort=False, suffixes=(\n        '_x', '_y'), copy=True, indicator=False, validate=None):\n        from pandas.core.reshape.merge import merge\n        return merge(self, right, how=how, on=on, left_on=left_on, right_on\n            =right_on, left_index=left_index, right_index=right_index, sort\n            =sort, suffixes=suffixes, copy=copy, indicator=indicator,\n            validate=validate)\n\n    def round(self, decimals=0, *args, **kwargs):\n        \"\"\"\n        Round a DataFrame to a variable number of decimal places.\n\n        Parameters\n        ----------\n        decimals : int, dict, Series\n            Number of decimal places to round each column to. If an int is\n            given, round each column to the same number of places.\n            Otherwise dict and Series round to variable numbers of places.\n            Column names should be in the keys if `decimals` is a\n            dict-like, or in the index if `decimals` is a Series. Any\n            columns not included in `decimals` will be left as is. Elements\n            of `decimals` which are not columns of the input will be\n            ignored.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.random.random([3, 3]),\n        ...     columns=['A', 'B', 'C'], index=['first', 'second', 'third'])\n        >>> df\n                       A         B         C\n        first   0.028208  0.992815  0.173891\n        second  0.038683  0.645646  0.577595\n        third   0.877076  0.149370  0.491027\n        >>> df.round(2)\n                   A     B     C\n        first   0.03  0.99  0.17\n        second  0.04  0.65  0.58\n        third   0.88  0.15  0.49\n        >>> df.round({'A': 1, 'C': 2})\n                  A         B     C\n        first   0.0  0.992815  0.17\n        second  0.0  0.645646  0.58\n        third   0.9  0.149370  0.49\n        >>> decimals = pd.Series([1, 0, 2], index=['A', 'B', 'C'])\n        >>> df.round(decimals)\n                  A  B     C\n        first   0.0  1  0.17\n        second  0.0  1  0.58\n        third   0.9  0  0.49\n\n        Returns\n        -------\n        DataFrame object\n\n        See Also\n        --------\n        numpy.around\n        Series.round\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n\n        def _dict_round(df, decimals):\n            for col, vals in df.iteritems():\n                try:\n                    yield _series_round(vals, decimals[col])\n                except KeyError:\n                    yield vals\n\n        def _series_round(s, decimals):\n            if is_integer_dtype(s) or is_float_dtype(s):\n                return s.round(decimals)\n            return s\n        nv.validate_round(args, kwargs)\n        if isinstance(decimals, (dict, Series)):\n            if isinstance(decimals, Series):\n                if not decimals.index.is_unique:\n                    raise ValueError('Index of decimals must be unique')\n            new_cols = [col for col in _dict_round(self, decimals)]\n        elif is_integer(decimals):\n            new_cols = [_series_round(v, decimals) for _, v in self.iteritems()\n                ]\n        else:\n            raise TypeError(\n                'decimals must be an integer, a dict-like or a Series')\n        if len(new_cols) > 0:\n            return self._constructor(concat(new_cols, axis=1), index=self.\n                index, columns=self.columns)\n        else:\n            return self\n\n    def corr(self, method='pearson', min_periods=1):\n        \"\"\"\n        Compute pairwise correlation of columns, excluding NA/null values\n\n        Parameters\n        ----------\n        method : {'pearson', 'kendall', 'spearman'}\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result. Currently only available for pearson\n            and spearman correlation\n\n        Returns\n        -------\n        y : DataFrame\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.values\n        if method == 'pearson':\n            correl = libalgos.nancorr(ensure_float64(mat), minp=min_periods)\n        elif method == 'spearman':\n            correl = libalgos.nancorr_spearman(ensure_float64(mat), minp=\n                min_periods)\n        else:\n            if min_periods is None:\n                min_periods = 1\n            mat = ensure_float64(mat).T\n            corrf = nanops.get_corr_func(method)\n            K = len(cols)\n            correl = np.empty((K, K), dtype=float)\n            mask = np.isfinite(mat)\n            for i, ac in enumerate(mat):\n                for j, bc in enumerate(mat):\n                    if i > j:\n                        continue\n                    valid = mask[i] & mask[j]\n                    if valid.sum() < min_periods:\n                        c = np.nan\n                    elif i == j:\n                        c = 1.0\n                    elif not valid.all():\n                        c = corrf(ac[valid], bc[valid])\n                    else:\n                        c = corrf(ac, bc)\n                    correl[i, j] = c\n                    correl[j, i] = c\n        return self._constructor(correl, index=idx, columns=cols)\n\n    def cov(self, min_periods=None):\n        \"\"\"\n        Compute pairwise covariance of columns, excluding NA/null values.\n\n        Compute the pairwise covariance among the series of a DataFrame.\n        The returned data frame is the `covariance matrix\n        <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\n        of the DataFrame.\n\n        Both NA and null values are automatically excluded from the\n        calculation. (See the note below about bias from missing values.)\n        A threshold can be set for the minimum number of\n        observations for each value created. Comparisons with observations\n        below this threshold will be returned as ``NaN``.\n\n        This method is generally used for the analysis of time series data to\n        understand the relationship between different measures\n        across time.\n\n        Parameters\n        ----------\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result.\n\n        Returns\n        -------\n        DataFrame\n            The covariance matrix of the series of the DataFrame.\n\n        See Also\n        --------\n        pandas.Series.cov : compute covariance with another Series\n        pandas.core.window.EWM.cov: exponential weighted sample covariance\n        pandas.core.window.Expanding.cov : expanding sample covariance\n        pandas.core.window.Rolling.cov : rolling sample covariance\n\n        Notes\n        -----\n        Returns the covariance matrix of the DataFrame's time series.\n        The covariance is normalized by N-1.\n\n        For DataFrames that have Series that are missing data (assuming that\n        data is `missing at random\n        <https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\n        the returned covariance matrix will be an unbiased estimate\n        of the variance and covariance between the member Series.\n\n        However, for many applications this estimate may not be acceptable\n        because the estimate covariance matrix is not guaranteed to be positive\n        semi-definite. This could lead to estimate correlations having\n        absolute values which are greater than one, and/or a non-invertible\n        covariance matrix. See `Estimation of covariance matrices\n        <http://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\n        matrices>`__ for more details.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n        ...                   columns=['dogs', 'cats'])\n        >>> df.cov()\n                  dogs      cats\n        dogs  0.666667 -1.000000\n        cats -1.000000  1.666667\n\n        >>> np.random.seed(42)\n        >>> df = pd.DataFrame(np.random.randn(1000, 5),\n        ...                   columns=['a', 'b', 'c', 'd', 'e'])\n        >>> df.cov()\n                  a         b         c         d         e\n        a  0.998438 -0.020161  0.059277 -0.008943  0.014144\n        b -0.020161  1.059352 -0.008543 -0.024738  0.009826\n        c  0.059277 -0.008543  1.010670 -0.001486 -0.000271\n        d -0.008943 -0.024738 -0.001486  0.921297 -0.013692\n        e  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n        **Minimum number of periods**\n\n        This method also supports an optional ``min_periods`` keyword\n        that specifies the required minimum number of non-NA observations for\n        each column pair in order to have a valid result:\n\n        >>> np.random.seed(42)\n        >>> df = pd.DataFrame(np.random.randn(20, 3),\n        ...                   columns=['a', 'b', 'c'])\n        >>> df.loc[df.index[:5], 'a'] = np.nan\n        >>> df.loc[df.index[5:10], 'b'] = np.nan\n        >>> df.cov(min_periods=12)\n                  a         b         c\n        a  0.316741       NaN -0.150812\n        b       NaN  1.248003  0.191417\n        c -0.150812  0.191417  0.895202\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.values\n        if notna(mat).all():\n            if min_periods is not None and min_periods > len(mat):\n                baseCov = np.empty((mat.shape[1], mat.shape[1]))\n                baseCov.fill(np.nan)\n            else:\n                baseCov = np.cov(mat.T)\n            baseCov = baseCov.reshape((len(cols), len(cols)))\n        else:\n            baseCov = libalgos.nancorr(ensure_float64(mat), cov=True, minp=\n                min_periods)\n        return self._constructor(baseCov, index=idx, columns=cols)\n\n    def corrwith(self, other, axis=0, drop=False):\n        \"\"\"\n        Compute pairwise correlation between rows or columns of two DataFrame\n        objects.\n\n        Parameters\n        ----------\n        other : DataFrame, Series\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' to compute column-wise, 1 or 'columns' for row-wise\n        drop : boolean, default False\n            Drop missing indices from result, default returns union of all\n\n        Returns\n        -------\n        correls : Series\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        this = self._get_numeric_data()\n        if isinstance(other, Series):\n            return this.apply(other.corr, axis=axis)\n        other = other._get_numeric_data()\n        left, right = this.align(other, join='inner', copy=False)\n        left = left + right * 0\n        right = right + left * 0\n        if axis == 1:\n            left = left.T\n            right = right.T\n        ldem = left - left.mean()\n        rdem = right - right.mean()\n        num = (ldem * rdem).sum()\n        dom = (left.count() - 1) * left.std() * right.std()\n        correl = num / dom\n        if not drop:\n            raxis = 1 if axis == 0 else 0\n            result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n            correl = correl.reindex(result_index)\n        return correl\n\n    def count(self, axis=0, level=None, numeric_only=False):\n        \"\"\"\n        Count non-NA cells for each column or row.\n\n        The values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\n        on `pandas.options.mode.use_inf_as_na`) are considered NA.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            If 0 or 'index' counts are generated for each column.\n            If 1 or 'columns' counts are generated for each **row**.\n        level : int or str, optional\n            If the axis is a `MultiIndex` (hierarchical), count along a\n            particular `level`, collapsing into a `DataFrame`.\n            A `str` specifies the level name.\n        numeric_only : boolean, default False\n            Include only `float`, `int` or `boolean` data.\n\n        Returns\n        -------\n        Series or DataFrame\n            For each column/row the number of non-NA/null entries.\n            If `level` is specified returns a `DataFrame`.\n\n        See Also\n        --------\n        Series.count: number of non-NA elements in a Series\n        DataFrame.shape: number of DataFrame rows and columns (including NA\n            elements)\n        DataFrame.isna: boolean same-sized DataFrame showing places of NA\n            elements\n\n        Examples\n        --------\n        Constructing DataFrame from a dictionary:\n\n        >>> df = pd.DataFrame({\"Person\":\n        ...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n        ...                    \"Age\": [24., np.nan, 21., 33, 26],\n        ...                    \"Single\": [False, True, True, True, False]})\n        >>> df\n           Person   Age  Single\n        0    John  24.0   False\n        1    Myla   NaN    True\n        2   Lewis  21.0    True\n        3    John  33.0    True\n        4    Myla  26.0   False\n\n        Notice the uncounted NA values:\n\n        >>> df.count()\n        Person    5\n        Age       4\n        Single    5\n        dtype: int64\n\n        Counts for each **row**:\n\n        >>> df.count(axis='columns')\n        0    3\n        1    2\n        2    3\n        3    3\n        4    3\n        dtype: int64\n\n        Counts for one level of a `MultiIndex`:\n\n        >>> df.set_index([\"Person\", \"Single\"]).count(level=\"Person\")\n                Age\n        Person\n        John      2\n        Lewis     1\n        Myla      1\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if level is not None:\n            return self._count_level(level, axis=axis, numeric_only=\n                numeric_only)\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n        if len(frame._get_axis(axis)) == 0:\n            result = Series(0, index=frame._get_agg_axis(axis))\n        elif frame._is_mixed_type or frame._data.any_extension_types:\n            result = notna(frame).sum(axis=axis)\n        else:\n            series_counts = notna(frame).sum(axis=axis)\n            counts = series_counts.values\n            result = Series(counts, index=frame._get_agg_axis(axis))\n        return result.astype('int64')\n\n    def _count_level(self, level, axis=0, numeric_only=False):\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n        count_axis = frame._get_axis(axis)\n        agg_axis = frame._get_agg_axis(axis)\n        if not isinstance(count_axis, MultiIndex):\n            raise TypeError('Can only count levels on hierarchical {ax}.'.\n                format(ax=self._get_axis_name(axis)))\n        if frame._is_mixed_type:\n            mask = notna(frame).values\n        else:\n            mask = notna(frame.values)\n        if axis == 1:\n            mask = mask.T\n        if isinstance(level, compat.string_types):\n            level = count_axis._get_level_number(level)\n        level_index = count_axis.levels[level]\n        labels = ensure_int64(count_axis.labels[level])\n        counts = lib.count_level_2d(mask, labels, len(level_index), axis=0)\n        result = DataFrame(counts, index=level_index, columns=agg_axis)\n        if axis == 1:\n            return result.T\n        else:\n            return result\n\n    def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None,\n        filter_type=None, **kwds):\n        if axis is None and filter_type == 'bool':\n            labels = None\n            constructor = None\n        else:\n            axis = self._get_axis_number(axis)\n            labels = self._get_agg_axis(axis)\n            constructor = self._constructor\n\n        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)\n        if axis == 1 and self._is_mixed_type and self._is_datelike_mixed_type:\n            numeric_only = True\n        if numeric_only is None:\n            try:\n                values = self.values\n                result = f(values)\n                if filter_type == 'bool' and is_object_dtype(values\n                    ) and axis is None:\n                    result = np.bool_(result)\n            except Exception as e:\n                if filter_type is None and axis == 0:\n                    try:\n                        from pandas.core.apply import frame_apply\n                        opa = frame_apply(self, func=f, result_type=\n                            'expand', ignore_failures=True)\n                        result = opa.get_result()\n                        if result.ndim == self.ndim:\n                            result = result.iloc[0]\n                        return result\n                    except Exception:\n                        pass\n                if filter_type is None or filter_type == 'numeric':\n                    data = self._get_numeric_data()\n                elif filter_type == 'bool':\n                    data = self._get_bool_data()\n                else:\n                    e = NotImplementedError(\n                        'Handling exception with filter_type {f} notimplemented.'\n                        .format(f=filter_type))\n                    raise_with_traceback(e)\n                with np.errstate(all='ignore'):\n                    result = f(data.values)\n                labels = data._get_agg_axis(axis)\n        else:\n            if numeric_only:\n                if filter_type is None or filter_type == 'numeric':\n                    data = self._get_numeric_data()\n                elif filter_type == 'bool':\n                    data = self._get_bool_data()\n                else:\n                    msg = (\n                        'Generating numeric_only data with filter_type {f}not supported.'\n                        .format(f=filter_type))\n                    raise NotImplementedError(msg)\n                values = data.values\n                labels = data._get_agg_axis(axis)\n            else:\n                values = self.values\n            result = f(values)\n        if hasattr(result, 'dtype') and is_object_dtype(result.dtype):\n            try:\n                if filter_type is None or filter_type == 'numeric':\n                    result = result.astype(np.float64)\n                elif filter_type == 'bool' and notna(result).all():\n                    result = result.astype(np.bool_)\n            except (ValueError, TypeError):\n                if axis == 0:\n                    result = coerce_to_dtypes(result, self.dtypes)\n        if constructor is not None:\n            result = Series(result, index=labels)\n        return result\n\n    def nunique(self, axis=0, dropna=True):\n        \"\"\"\n        Return Series with number of distinct observations over requested\n        axis.\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n        dropna : boolean, default True\n            Don't include NaN in the counts.\n\n        Returns\n        -------\n        nunique : Series\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n        >>> df.nunique()\n        A    3\n        B    1\n\n        >>> df.nunique(axis=1)\n        0    1\n        1    2\n        2    2\n        \"\"\"\n        return self.apply(Series.nunique, axis=axis, dropna=dropna)\n\n    def idxmin(self, axis=0, skipna=True):\n        \"\"\"\n        Return index of first occurrence of minimum over requested axis.\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        skipna : boolean, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        Returns\n        -------\n        idxmin : Series\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmin``.\n\n        See Also\n        --------\n        Series.idxmin\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmin(self.values, axis=axis, skipna=skipna)\n        index = self._get_axis(axis)\n        result = [(index[i] if i >= 0 else np.nan) for i in indices]\n        return Series(result, index=self._get_agg_axis(axis))\n\n    def idxmax(self, axis=0, skipna=True):\n        \"\"\"\n        Return index of first occurrence of maximum over requested axis.\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        skipna : boolean, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        Returns\n        -------\n        idxmax : Series\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmax``.\n\n        See Also\n        --------\n        Series.idxmax\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmax(self.values, axis=axis, skipna=skipna)\n        index = self._get_axis(axis)\n        result = [(index[i] if i >= 0 else np.nan) for i in indices]\n        return Series(result, index=self._get_agg_axis(axis))\n\n    def _get_agg_axis(self, axis_num):\n        \"\"\" let's be explicit about this \"\"\"\n        if axis_num == 0:\n            return self.columns\n        elif axis_num == 1:\n            return self.index\n        else:\n            raise ValueError('Axis must be 0 or 1 (got %r)' % axis_num)\n\n    def mode(self, axis=0, numeric_only=False, dropna=True):\n        \"\"\"\n        Gets the mode(s) of each element along the axis selected. Adds a row\n        for each mode per label, fills in gaps with nan.\n\n        Note that there could be multiple values returned for the selected\n        axis (when more than one item share the maximum frequency), which is\n        the reason why a dataframe is returned. If you want to impute missing\n        values with the mode in a dataframe ``df``, you can just do this:\n        ``df.fillna(df.mode().iloc[0])``\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            * 0 or 'index' : get mode of each column\n            * 1 or 'columns' : get mode of each row\n        numeric_only : boolean, default False\n            if True, only apply to numeric columns\n        dropna : boolean, default True\n            Don't consider counts of NaN/NaT.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        modes : DataFrame (sorted)\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 1, 2, 1, 2, 3]})\n        >>> df.mode()\n           A\n        0  1\n        1  2\n        \"\"\"\n        data = self if not numeric_only else self._get_numeric_data()\n\n        def f(s):\n            return s.mode(dropna=dropna)\n        return data.apply(f, axis=axis)\n\n    def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear'\n        ):\n        \"\"\"\n        Return values at the given quantile over requested axis, a la\n        numpy.percentile.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            0 <= q <= 1, the quantile(s) to compute\n        axis : {0, 1, 'index', 'columns'} (default 0)\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        numeric_only : boolean, default True\n            If False, the quantile of datetime and timedelta data will be\n            computed as well\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            .. versionadded:: 0.18.0\n\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n            * linear: `i + (j - i) * fraction`, where `fraction` is the\n              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2.\n\n        Returns\n        -------\n        quantiles : Series or DataFrame\n\n            - If ``q`` is an array, a DataFrame will be returned where the\n              index is ``q``, the columns are the columns of self, and the\n              values are the quantiles.\n            - If ``q`` is a float, a Series will be returned where the\n              index is the columns of self and the values are the quantiles.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n                              columns=['a', 'b'])\n        >>> df.quantile(.1)\n        a    1.3\n        b    3.7\n        dtype: float64\n        >>> df.quantile([.1, .5])\n               a     b\n        0.1  1.3   3.7\n        0.5  2.5  55.0\n\n        Specifying `numeric_only=False` will also compute the quantile of\n        datetime and timedelta data.\n\n        >>> df = pd.DataFrame({'A': [1, 2],\n                               'B': [pd.Timestamp('2010'),\n                                     pd.Timestamp('2011')],\n                               'C': [pd.Timedelta('1 days'),\n                                     pd.Timedelta('2 days')]})\n        >>> df.quantile(0.5, numeric_only=False)\n        A                    1.5\n        B    2010-07-02 12:00:00\n        C        1 days 12:00:00\n        Name: 0.5, dtype: object\n\n        See Also\n        --------\n        pandas.core.window.Rolling.quantile\n        \"\"\"\n        self._check_percentile(q)\n        data = self._get_numeric_data() if numeric_only else self\n        axis = self._get_axis_number(axis)\n        is_transposed = axis == 1\n        if is_transposed:\n            data = data.T\n        result = data._data.quantile(qs=q, axis=1, interpolation=\n            interpolation, transposed=is_transposed)\n        if result.ndim == 2:\n            result = self._constructor(result)\n        else:\n            result = self._constructor_sliced(result, name=q)\n        if is_transposed:\n            result = result.T\n        return result\n\n    def to_timestamp(self, freq=None, how='start', axis=0, copy=True):\n        \"\"\"\n        Cast to DatetimeIndex of timestamps, at *beginning* of period\n\n        Parameters\n        ----------\n        freq : string, default frequency of PeriodIndex\n            Desired frequency\n        how : {'s', 'e', 'start', 'end'}\n            Convention for converting period to timestamp; start of period\n            vs. end\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default)\n        copy : boolean, default True\n            If false then underlying input data is not copied\n\n        Returns\n        -------\n        df : DataFrame with DatetimeIndex\n        \"\"\"\n        new_data = self._data\n        if copy:\n            new_data = new_data.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            new_data.set_axis(1, self.index.to_timestamp(freq=freq, how=how))\n        elif axis == 1:\n            new_data.set_axis(0, self.columns.to_timestamp(freq=freq, how=how))\n        else:\n            raise AssertionError('Axis must be 0 or 1. Got {ax!s}'.format(\n                ax=axis))\n        return self._constructor(new_data)\n\n    def to_period(self, freq=None, axis=0, copy=True):\n        \"\"\"\n        Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n        frequency (inferred from index if not passed)\n\n        Parameters\n        ----------\n        freq : string, default\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default)\n        copy : boolean, default True\n            If False then underlying input data is not copied\n\n        Returns\n        -------\n        ts : TimeSeries with PeriodIndex\n        \"\"\"\n        new_data = self._data\n        if copy:\n            new_data = new_data.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            new_data.set_axis(1, self.index.to_period(freq=freq))\n        elif axis == 1:\n            new_data.set_axis(0, self.columns.to_period(freq=freq))\n        else:\n            raise AssertionError('Axis must be 0 or 1. Got {ax!s}'.format(\n                ax=axis))\n        return self._constructor(new_data)\n\n    def isin(self, values):\n        \"\"\"\n        Return boolean DataFrame showing whether each element in the\n        DataFrame is contained in values.\n\n        Parameters\n        ----------\n        values : iterable, Series, DataFrame or dictionary\n            The result will only be true at a location if all the\n            labels match. If `values` is a Series, that's the index. If\n            `values` is a dictionary, the keys must be the column names,\n            which must match. If `values` is a DataFrame,\n            then both the index and column labels must match.\n\n        Returns\n        -------\n\n        DataFrame of booleans\n\n        Examples\n        --------\n        When ``values`` is a list:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})\n        >>> df.isin([1, 3, 12, 'a'])\n               A      B\n        0   True   True\n        1  False  False\n        2   True  False\n\n        When ``values`` is a dict:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 4, 7]})\n        >>> df.isin({'A': [1, 3], 'B': [4, 7, 12]})\n               A      B\n        0   True  False  # Note that B didn't match the 1 here.\n        1  False   True\n        2   True   True\n\n        When ``values`` is a Series or DataFrame:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})\n        >>> df2 = pd.DataFrame({'A': [1, 3, 3, 2], 'B': ['e', 'f', 'f', 'e']})\n        >>> df.isin(df2)\n               A      B\n        0   True  False\n        1  False  False  # Column A in `df2` has a 3, but not at index 1.\n        2   True   True\n        \"\"\"\n        if isinstance(values, dict):\n            from pandas.core.reshape.concat import concat\n            values = collections.defaultdict(list, values)\n            return concat((self.iloc[:, [i]].isin(values[col]) for i, col in\n                enumerate(self.columns)), axis=1)\n        elif isinstance(values, Series):\n            if not values.index.is_unique:\n                raise ValueError('cannot compute isin with a duplicate axis.')\n            return self.eq(values.reindex_like(self), axis='index')\n        elif isinstance(values, DataFrame):\n            if not (values.columns.is_unique and values.index.is_unique):\n                raise ValueError('cannot compute isin with a duplicate axis.')\n            return self.eq(values.reindex_like(self))\n        else:\n            if not is_list_like(values):\n                raise TypeError(\n                    'only list-like or dict-like objects are allowed to be passed to DataFrame.isin(), you passed a {0!r}'\n                    .format(type(values).__name__))\n            return DataFrame(algorithms.isin(self.values.ravel(), values).\n                reshape(self.shape), self.index, self.columns)\n    plot = CachedAccessor('plot', gfx.FramePlotMethods)\n    hist = gfx.hist_frame\n    boxplot = gfx.boxplot_frame\n",
                        "belong_class_name": "DataFrame",
                        "belong_class_init": "def __init__(self, data=None, index=None, columns=None, dtype=None, copy=False\n    ):\n    if data is None:\n        data = {}\n    if dtype is not None:\n        dtype = self._validate_dtype(dtype)\n    if isinstance(data, DataFrame):\n        data = data._data\n    if isinstance(data, BlockManager):\n        mgr = self._init_mgr(data, axes=dict(index=index, columns=columns),\n            dtype=dtype, copy=copy)\n    elif isinstance(data, dict):\n        mgr = self._init_dict(data, index, columns, dtype=dtype)\n    elif isinstance(data, ma.MaskedArray):\n        import numpy.ma.mrecords as mrecords\n        if isinstance(data, mrecords.MaskedRecords):\n            mgr = _masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n        else:\n            mask = ma.getmaskarray(data)\n            if mask.any():\n                data, fill_value = maybe_upcast(data, copy=True)\n                data[mask] = fill_value\n            else:\n                data = data.copy()\n            mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                copy=copy)\n    elif isinstance(data, (np.ndarray, Series, Index)):\n        if data.dtype.names:\n            data_columns = list(data.dtype.names)\n            data = {k: data[k] for k in data_columns}\n            if columns is None:\n                columns = data_columns\n            mgr = self._init_dict(data, index, columns, dtype=dtype)\n        elif getattr(data, 'name', None) is not None:\n            mgr = self._init_dict({data.name: data}, index, columns, dtype=\n                dtype)\n        else:\n            mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                copy=copy)\n    elif isinstance(data, collections.Iterable) and not isinstance(data,\n        string_and_binary_types):\n        if not isinstance(data, collections.Sequence):\n            data = list(data)\n        if len(data) > 0:\n            if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                if is_named_tuple(data[0]) and columns is None:\n                    columns = data[0]._fields\n                arrays, columns = _to_arrays(data, columns, dtype=dtype)\n                columns = ensure_index(columns)\n                if index is None:\n                    if isinstance(data[0], Series):\n                        index = _get_names_from_index(data)\n                    elif isinstance(data[0], Categorical):\n                        index = ibase.default_index(len(data[0]))\n                    else:\n                        index = ibase.default_index(len(data))\n                mgr = _arrays_to_mgr(arrays, columns, index, columns, dtype\n                    =dtype)\n            else:\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                    copy=copy)\n        else:\n            mgr = self._init_dict({}, index, columns, dtype=dtype)\n    else:\n        try:\n            arr = np.array(data, dtype=dtype, copy=copy)\n        except (ValueError, TypeError) as e:\n            exc = TypeError(\n                'DataFrame constructor called with incompatible data and dtype: {e}'\n                .format(e=e))\n            raise_with_traceback(exc)\n        if arr.ndim == 0 and index is not None and columns is not None:\n            values = cast_scalar_to_array((len(index), len(columns)), data,\n                dtype=dtype)\n            mgr = self._init_ndarray(values, index, columns, dtype=values.\n                dtype, copy=False)\n        else:\n            raise ValueError('DataFrame constructor not properly called!')\n    NDFrame.__init__(self, mgr, fastpath=True)\n",
                        "called_function_name": "dispatch_to_extension_op",
                        "called_function_content": "def _combine_const(self, other, func, errors='raise', try_cast=True):\n    if lib.is_scalar(other) or np.ndim(other) == 0:\n        new_data = {i: func(self.iloc[:, i], other) for i, col in enumerate\n            (self.columns)}\n        result = self._constructor(new_data, index=self.index, copy=False)\n        result.columns = self.columns\n        return result\n    new_data = self._data.eval(func=func, other=other, errors=errors,\n        try_cast=try_cast)\n    return self._constructor(new_data)\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(op, left, right)",
                        "split_result": "failure"
                    },
                    {
                        "function_name": "dispatch_to_extension_op",
                        "function_content": "def dispatch_to_extension_op(op, left, right):\n    \"\"\"\n    Assume that left or right is a Series backed by an ExtensionArray,\n    apply the operator defined by op.\n    \"\"\"\n    if is_extension_array_dtype(left):\n        new_left = left.values\n        if isinstance(right, np.ndarray):\n            new_right = lib.item_from_zerodim(right)\n            if is_scalar(new_right):\n                new_right = [new_right]\n            new_right = list(new_right)\n        elif is_extension_array_dtype(right) and type(left) != type(right):\n            new_right = list(new_right)\n        else:\n            new_right = right\n    else:\n        new_left = list(left.values)\n        new_right = right\n    res_values = op(new_left, new_right)\n    res_name = get_op_result_name(left, right)\n    if op.__name__ == 'divmod':\n        return _construct_divmod_result(left, res_values, left.index, res_name)\n    return _construct_result(left, res_values, left.index, res_name)\n",
                        "function_parameter": "(op, left, right)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ],
                [
                    {
                        "function_name": "test_add_extension_scalar",
                        "function_content": "@pytest.mark.parametrize('op', [operator.add, ops.radd])\n@pytest.mark.parametrize('other', ['category', 'Int64'])\ndef test_add_extension_scalar(self, other, box, op):\n    arr = pd.Series(['a', 'b', 'c'])\n    expected = pd.Series([op(x, other) for x in arr])\n    arr = tm.box_expected(arr, box)\n    expected = tm.box_expected(expected, box)\n    result = op(arr, other)\n    tm.assert_equal(result, expected)\n",
                        "function_parameter": "(self, other, box, op)",
                        "belong_class_content": "class TestArithmetic(object):\n\n    @pytest.mark.parametrize('op', [operator.add, ops.radd])\n    @pytest.mark.parametrize('other', ['category', 'Int64'])\n    def test_add_extension_scalar(self, other, box, op):\n        arr = pd.Series(['a', 'b', 'c'])\n        expected = pd.Series([op(x, other) for x in arr])\n        arr = tm.box_expected(arr, box)\n        expected = tm.box_expected(expected, box)\n        result = op(arr, other)\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize('box', [pytest.param(pd.Index, marks=pytest.\n        mark.xfail(reason='Does not mask nulls', strict=True, raises=\n        TypeError)), pd.Series, pd.DataFrame], ids=lambda x: x.__name__)\n    def test_objarr_add_str(self, box):\n        ser = pd.Series(['x', np.nan, 'x'])\n        expected = pd.Series(['xa', np.nan, 'xa'])\n        ser = tm.box_expected(ser, box)\n        expected = tm.box_expected(expected, box)\n        result = ser + 'a'\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize('box', [pytest.param(pd.Index, marks=pytest.\n        mark.xfail(reason='Does not mask nulls', strict=True, raises=\n        TypeError)), pd.Series, pd.DataFrame], ids=lambda x: x.__name__)\n    def test_objarr_radd_str(self, box):\n        ser = pd.Series(['x', np.nan, 'x'])\n        expected = pd.Series(['ax', np.nan, 'ax'])\n        ser = tm.box_expected(ser, box)\n        expected = tm.box_expected(expected, box)\n        result = 'a' + ser\n        tm.assert_equal(result, expected)\n\n    @pytest.mark.parametrize('data', [[1, 2, 3], [1.1, 2.2, 3.3], [\n        Timestamp('2011-01-01'), Timestamp('2011-01-02'), pd.NaT], ['x',\n        'y', 1]])\n    @pytest.mark.parametrize('dtype', [None, object])\n    def test_objarr_radd_str_invalid(self, dtype, data, box):\n        ser = Series(data, dtype=dtype)\n        ser = tm.box_expected(ser, box)\n        with pytest.raises(TypeError):\n            'foo_' + ser\n\n    @pytest.mark.parametrize('op', [operator.add, ops.radd, operator.sub,\n        ops.rsub])\n    def test_objarr_add_invalid(self, op, box):\n        if box is pd.DataFrame and op is ops.radd:\n            pytest.xfail(reason=\n                'DataFrame op incorrectly casts the np.arraycase to M8[ns]')\n        obj_ser = tm.makeObjectSeries()\n        obj_ser.name = 'objects'\n        obj_ser = tm.box_expected(obj_ser, box)\n        with pytest.raises(Exception):\n            op(obj_ser, 1)\n        with pytest.raises(Exception):\n            op(obj_ser, np.array(1, dtype=np.int64))\n\n    def test_operators_na_handling(self):\n        ser = Series(['foo', 'bar', 'baz', np.nan])\n        result = 'prefix_' + ser\n        expected = pd.Series(['prefix_foo', 'prefix_bar', 'prefix_baz', np.nan]\n            )\n        tm.assert_series_equal(result, expected)\n        result = ser + '_suffix'\n        expected = pd.Series(['foo_suffix', 'bar_suffix', 'baz_suffix', np.nan]\n            )\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize('dtype', [None, object])\n    def test_series_with_dtype_radd_timedelta(self, dtype):\n        ser = pd.Series([pd.Timedelta('1 days'), pd.Timedelta('2 days'), pd\n            .Timedelta('3 days')], dtype=dtype)\n        expected = pd.Series([pd.Timedelta('4 days'), pd.Timedelta('5 days'\n            ), pd.Timedelta('6 days')])\n        result = pd.Timedelta('3 days') + ser\n        tm.assert_series_equal(result, expected)\n        result = ser + pd.Timedelta('3 days')\n        tm.assert_series_equal(result, expected)\n",
                        "belong_class_name": "TestArithmetic",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "radd",
                        "function_content": "def radd(left, right):\n    return right + left\n",
                        "function_parameter": "(left, right)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "f",
                        "called_function_content": "def radd(left, right):\n    return right + left\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(self, other, axis=default_axis, level=None, fill_value=None)",
                        "split_result": "failure"
                    },
                    {
                        "function_name": "f",
                        "function_content": "@Appender(doc)\ndef f(self, other, axis=default_axis, level=None, fill_value=None):\n    other = _align_method_FRAME(self, other, axis)\n    if isinstance(other, ABCDataFrame):\n        return self._combine_frame(other, na_op, fill_value, level)\n    elif isinstance(other, ABCSeries):\n        return _combine_series_frame(self, other, na_op, fill_value=\n            fill_value, axis=axis, level=level, try_cast=True)\n    else:\n        if fill_value is not None:\n            self = self.fillna(fill_value)\n        pass_op = op if lib.is_scalar(other) else na_op\n        return self._combine_const(other, pass_op, try_cast=True)\n",
                        "function_parameter": "(self, other, axis=default_axis, level=None, fill_value=None)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "_combine_const",
                        "called_function_content": "@Appender(doc)\ndef f(self, other, axis=default_axis, level=None, fill_value=None):\n    other = _align_method_FRAME(self, other, axis)\n    if isinstance(other, ABCDataFrame):\n        return self._combine_frame(other, na_op, fill_value, level)\n    elif isinstance(other, ABCSeries):\n        return _combine_series_frame(self, other, na_op, fill_value=\n            fill_value, axis=axis, level=level, try_cast=True)\n    else:\n        if fill_value is not None:\n            self = self.fillna(fill_value)\n        pass_op = op if lib.is_scalar(other) else na_op\n        return self._combine_const(other, pass_op, try_cast=True)\n",
                        "called_arguments": "(other, pass_op, try_cast=True)",
                        "called_function_parameter": "(self, other, func, errors='raise', try_cast=True)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_combine_const",
                        "function_content": "def _combine_const(self, other, func, errors='raise', try_cast=True):\n    if lib.is_scalar(other) or np.ndim(other) == 0:\n        new_data = {i: func(self.iloc[:, i], other) for i, col in enumerate\n            (self.columns)}\n        result = self._constructor(new_data, index=self.index, copy=False)\n        result.columns = self.columns\n        return result\n    new_data = self._data.eval(func=func, other=other, errors=errors,\n        try_cast=try_cast)\n    return self._constructor(new_data)\n",
                        "function_parameter": "(self, other, func, errors='raise', try_cast=True)",
                        "belong_class_content": "class DataFrame(NDFrame):\n    \"\"\" Two-dimensional size-mutable, potentially heterogeneous tabular data\n    structure with labeled axes (rows and columns). Arithmetic operations\n    align on both row and column labels. Can be thought of as a dict-like\n    container for Series objects. The primary pandas data structure.\n\n    Parameters\n    ----------\n    data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n        Dict can contain Series, arrays, constants, or list-like objects\n\n        .. versionchanged :: 0.23.0\n           If data is a dict, argument order is maintained for Python 3.6\n           and later.\n\n    index : Index or array-like\n        Index to use for resulting frame. Will default to RangeIndex if\n        no indexing information part of input data and no index provided\n    columns : Index or array-like\n        Column labels to use for resulting frame. Will default to\n        RangeIndex (0, 1, 2, ..., n) if no column labels are provided\n    dtype : dtype, default None\n        Data type to force. Only a single dtype is allowed. If None, infer\n    copy : boolean, default False\n        Copy data from inputs. Only affects DataFrame / 2d ndarray input\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary.\n\n    >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df = pd.DataFrame(data=d)\n    >>> df\n       col1  col2\n    0     1     3\n    1     2     4\n\n    Notice that the inferred dtype is int64.\n\n    >>> df.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n\n    To enforce a single dtype:\n\n    >>> df = pd.DataFrame(data=d, dtype=np.int8)\n    >>> df.dtypes\n    col1    int8\n    col2    int8\n    dtype: object\n\n    Constructing DataFrame from numpy ndarray:\n\n    >>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n    ...                    columns=['a', 'b', 'c'])\n    >>> df2\n       a  b  c\n    0  1  2  3\n    1  4  5  6\n    2  7  8  9\n\n    See also\n    --------\n    DataFrame.from_records : constructor from tuples, also record arrays\n    DataFrame.from_dict : from dicts of Series, arrays, or dicts\n    DataFrame.from_items : from sequence of (key, value) pairs\n    pandas.read_csv, pandas.read_table, pandas.read_clipboard\n    \"\"\"\n\n    @property\n    def _constructor(self):\n        return DataFrame\n    _constructor_sliced = Series\n    _deprecations = NDFrame._deprecations | frozenset(['sortlevel',\n        'get_value', 'set_value', 'from_csv', 'from_items'])\n    _accessors = set()\n\n    @property\n    def _constructor_expanddim(self):\n        from pandas.core.panel import Panel\n        return Panel\n\n    def __init__(self, data=None, index=None, columns=None, dtype=None,\n        copy=False):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n        if isinstance(data, DataFrame):\n            data = data._data\n        if isinstance(data, BlockManager):\n            mgr = self._init_mgr(data, axes=dict(index=index, columns=\n                columns), dtype=dtype, copy=copy)\n        elif isinstance(data, dict):\n            mgr = self._init_dict(data, index, columns, dtype=dtype)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = _masked_rec_array_to_mgr(data, index, columns, dtype,\n                    copy)\n            else:\n                mask = ma.getmaskarray(data)\n                if mask.any():\n                    data, fill_value = maybe_upcast(data, copy=True)\n                    data[mask] = fill_value\n                else:\n                    data = data.copy()\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                    copy=copy)\n        elif isinstance(data, (np.ndarray, Series, Index)):\n            if data.dtype.names:\n                data_columns = list(data.dtype.names)\n                data = {k: data[k] for k in data_columns}\n                if columns is None:\n                    columns = data_columns\n                mgr = self._init_dict(data, index, columns, dtype=dtype)\n            elif getattr(data, 'name', None) is not None:\n                mgr = self._init_dict({data.name: data}, index, columns,\n                    dtype=dtype)\n            else:\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                    copy=copy)\n        elif isinstance(data, collections.Iterable) and not isinstance(data,\n            string_and_binary_types):\n            if not isinstance(data, collections.Sequence):\n                data = list(data)\n            if len(data) > 0:\n                if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                    if is_named_tuple(data[0]) and columns is None:\n                        columns = data[0]._fields\n                    arrays, columns = _to_arrays(data, columns, dtype=dtype)\n                    columns = ensure_index(columns)\n                    if index is None:\n                        if isinstance(data[0], Series):\n                            index = _get_names_from_index(data)\n                        elif isinstance(data[0], Categorical):\n                            index = ibase.default_index(len(data[0]))\n                        else:\n                            index = ibase.default_index(len(data))\n                    mgr = _arrays_to_mgr(arrays, columns, index, columns,\n                        dtype=dtype)\n                else:\n                    mgr = self._init_ndarray(data, index, columns, dtype=\n                        dtype, copy=copy)\n            else:\n                mgr = self._init_dict({}, index, columns, dtype=dtype)\n        else:\n            try:\n                arr = np.array(data, dtype=dtype, copy=copy)\n            except (ValueError, TypeError) as e:\n                exc = TypeError(\n                    'DataFrame constructor called with incompatible data and dtype: {e}'\n                    .format(e=e))\n                raise_with_traceback(exc)\n            if arr.ndim == 0 and index is not None and columns is not None:\n                values = cast_scalar_to_array((len(index), len(columns)),\n                    data, dtype=dtype)\n                mgr = self._init_ndarray(values, index, columns, dtype=\n                    values.dtype, copy=False)\n            else:\n                raise ValueError('DataFrame constructor not properly called!')\n        NDFrame.__init__(self, mgr, fastpath=True)\n\n    def _init_dict(self, data, index, columns, dtype=None):\n        \"\"\"\n        Segregate Series based on type and coerce into matrices.\n        Needs to handle a lot of exceptional cases.\n        \"\"\"\n        if columns is not None:\n            arrays = Series(data, index=columns, dtype=object)\n            data_names = arrays.index\n            missing = arrays.isnull()\n            if index is None:\n                index = extract_index(arrays[~missing])\n            else:\n                index = ensure_index(index)\n            if missing.any() and not is_integer_dtype(dtype):\n                if dtype is None or np.issubdtype(dtype, np.flexible):\n                    nan_dtype = object\n                else:\n                    nan_dtype = dtype\n                v = construct_1d_arraylike_from_scalar(np.nan, len(index),\n                    nan_dtype)\n                arrays.loc[missing] = [v] * missing.sum()\n        else:\n            keys = com.dict_keys_to_ordered_list(data)\n            columns = data_names = Index(keys)\n            arrays = [data[k] for k in keys]\n        return _arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)\n\n    def _init_ndarray(self, values, index, columns, dtype=None, copy=False):\n        if isinstance(values, Series):\n            if columns is None:\n                if values.name is not None:\n                    columns = [values.name]\n            if index is None:\n                index = values.index\n            else:\n                values = values.reindex(index)\n            if not len(values) and columns is not None and len(columns):\n                values = np.empty((0, 1), dtype=object)\n\n        def _get_axes(N, K, index=index, columns=columns):\n            if index is None:\n                index = ibase.default_index(N)\n            else:\n                index = ensure_index(index)\n            if columns is None:\n                columns = ibase.default_index(K)\n            else:\n                columns = ensure_index(columns)\n            return index, columns\n        if is_categorical_dtype(getattr(values, 'dtype', None)\n            ) or is_categorical_dtype(dtype):\n            if not hasattr(values, 'dtype'):\n                values = _prep_ndarray(values, copy=copy)\n                values = values.ravel()\n            elif copy:\n                values = values.copy()\n            index, columns = _get_axes(len(values), 1)\n            return _arrays_to_mgr([values], columns, index, columns, dtype=\n                dtype)\n        elif is_datetimetz(values) or is_extension_array_dtype(values):\n            if columns is None:\n                columns = [0]\n            return _arrays_to_mgr([values], columns, index, columns, dtype=\n                dtype)\n        values = _prep_ndarray(values, copy=copy)\n        if dtype is not None:\n            if not is_dtype_equal(values.dtype, dtype):\n                try:\n                    values = values.astype(dtype)\n                except Exception as orig:\n                    e = ValueError(\n                        \"failed to cast to '{dtype}' (Exception was: {orig})\"\n                        .format(dtype=dtype, orig=orig))\n                    raise_with_traceback(e)\n        index, columns = _get_axes(*values.shape)\n        values = values.T\n        if dtype is None and is_object_dtype(values):\n            values = maybe_infer_to_datetimelike(values)\n        return create_block_manager_from_blocks([values], [columns, index])\n\n    @property\n    def axes(self):\n        \"\"\"\n        Return a list representing the axes of the DataFrame.\n\n        It has the row axis labels and column axis labels as the only members.\n        They are returned in that order.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.axes\n        [RangeIndex(start=0, stop=2, step=1), Index(['coll', 'col2'],\n        dtype='object')]\n        \"\"\"\n        return [self.index, self.columns]\n\n    @property\n    def shape(self):\n        \"\"\"\n        Return a tuple representing the dimensionality of the DataFrame.\n\n        See Also\n        --------\n        ndarray.shape\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.shape\n        (2, 2)\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n        ...                    'col3': [5, 6]})\n        >>> df.shape\n        (2, 3)\n        \"\"\"\n        return len(self.index), len(self.columns)\n\n    def _repr_fits_vertical_(self):\n        \"\"\"\n        Check length against max_rows.\n        \"\"\"\n        max_rows = get_option('display.max_rows')\n        return len(self) <= max_rows\n\n    def _repr_fits_horizontal_(self, ignore_width=False):\n        \"\"\"\n        Check if full repr fits in horizontal boundaries imposed by the display\n        options width and max_columns. In case off non-interactive session, no\n        boundaries apply.\n\n        ignore_width is here so ipnb+HTML output can behave the way\n        users expect. display.max_columns remains in effect.\n        GH3541, GH3573\n        \"\"\"\n        width, height = console.get_console_size()\n        max_columns = get_option('display.max_columns')\n        nb_columns = len(self.columns)\n        if (max_columns and nb_columns > max_columns or not ignore_width and\n            width and nb_columns > width // 2):\n            return False\n        if ignore_width or not console.in_interactive_session():\n            return True\n        if get_option('display.width'\n            ) is not None or console.in_ipython_frontend():\n            max_rows = 1\n        else:\n            max_rows = get_option('display.max_rows')\n        buf = StringIO()\n        d = self\n        if not max_rows is None:\n            d = d.iloc[:min(max_rows, len(d))]\n        else:\n            return True\n        d.to_string(buf=buf)\n        value = buf.getvalue()\n        repr_width = max(len(l) for l in value.split('\\n'))\n        return repr_width < width\n\n    def _info_repr(self):\n        \"\"\"True if the repr should show the info view.\"\"\"\n        info_repr_option = get_option('display.large_repr') == 'info'\n        return info_repr_option and not (self._repr_fits_horizontal_() and\n            self._repr_fits_vertical_())\n\n    def __unicode__(self):\n        \"\"\"\n        Return a string representation for a particular DataFrame\n\n        Invoked by unicode(df) in py2 only. Yields a Unicode String in both\n        py2/py3.\n        \"\"\"\n        buf = StringIO(u(''))\n        if self._info_repr():\n            self.info(buf=buf)\n            return buf.getvalue()\n        max_rows = get_option('display.max_rows')\n        max_cols = get_option('display.max_columns')\n        show_dimensions = get_option('display.show_dimensions')\n        if get_option('display.expand_frame_repr'):\n            width, _ = console.get_console_size()\n        else:\n            width = None\n        self.to_string(buf=buf, max_rows=max_rows, max_cols=max_cols,\n            line_width=width, show_dimensions=show_dimensions)\n        return buf.getvalue()\n\n    def _repr_html_(self):\n        \"\"\"\n        Return a html representation for a particular DataFrame.\n        Mainly for IPython notebook.\n        \"\"\"\n        if console.in_qtconsole():\n            return None\n        if self._info_repr():\n            buf = StringIO(u(''))\n            self.info(buf=buf)\n            val = buf.getvalue().replace('<', '&lt;', 1)\n            val = val.replace('>', '&gt;', 1)\n            return '<pre>' + val + '</pre>'\n        if get_option('display.notebook_repr_html'):\n            max_rows = get_option('display.max_rows')\n            max_cols = get_option('display.max_columns')\n            show_dimensions = get_option('display.show_dimensions')\n            return self.to_html(max_rows=max_rows, max_cols=max_cols,\n                show_dimensions=show_dimensions, notebook=True)\n        else:\n            return None\n\n    @property\n    def style(self):\n        \"\"\"\n        Property returning a Styler object containing methods for\n        building a styled HTML representation fo the DataFrame.\n\n        See Also\n        --------\n        pandas.io.formats.style.Styler\n        \"\"\"\n        from pandas.io.formats.style import Styler\n        return Styler(self)\n\n    def iteritems(self):\n        \"\"\"\n        Iterator over (column name, Series) pairs.\n\n        See also\n        --------\n        iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n        itertuples : Iterate over DataFrame rows as namedtuples of the values.\n\n        \"\"\"\n        if self.columns.is_unique and hasattr(self, '_item_cache'):\n            for k in self.columns:\n                yield k, self._get_item_cache(k)\n        else:\n            for i, k in enumerate(self.columns):\n                yield k, self._ixs(i, axis=1)\n\n    def iterrows(self):\n        \"\"\"\n        Iterate over DataFrame rows as (index, Series) pairs.\n\n        Notes\n        -----\n\n        1. Because ``iterrows`` returns a Series for each row,\n           it does **not** preserve dtypes across the rows (dtypes are\n           preserved across columns for DataFrames). For example,\n\n           >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n           >>> row = next(df.iterrows())[1]\n           >>> row\n           int      1.0\n           float    1.5\n           Name: 0, dtype: float64\n           >>> print(row['int'].dtype)\n           float64\n           >>> print(df['int'].dtype)\n           int64\n\n           To preserve dtypes while iterating over the rows, it is better\n           to use :meth:`itertuples` which returns namedtuples of the values\n           and which is generally faster than ``iterrows``.\n\n        2. You should **never modify** something you are iterating over.\n           This is not guaranteed to work in all cases. Depending on the\n           data types, the iterator returns a copy and not a view, and writing\n           to it will have no effect.\n\n        Returns\n        -------\n        it : generator\n            A generator that iterates over the rows of the frame.\n\n        See also\n        --------\n        itertuples : Iterate over DataFrame rows as namedtuples of the values.\n        iteritems : Iterate over (column name, Series) pairs.\n\n        \"\"\"\n        columns = self.columns\n        klass = self._constructor_sliced\n        for k, v in zip(self.index, self.values):\n            s = klass(v, index=columns, name=k)\n            yield k, s\n\n    def itertuples(self, index=True, name='Pandas'):\n        \"\"\"\n        Iterate over DataFrame rows as namedtuples, with index value as first\n        element of the tuple.\n\n        Parameters\n        ----------\n        index : boolean, default True\n            If True, return the index as the first element of the tuple.\n        name : string, default \"Pandas\"\n            The name of the returned namedtuples or None to return regular\n            tuples.\n\n        Notes\n        -----\n        The column names will be renamed to positional names if they are\n        invalid Python identifiers, repeated, or start with an underscore.\n        With a large number of columns (>255), regular tuples are returned.\n\n        See also\n        --------\n        iterrows : Iterate over DataFrame rows as (index, Series) pairs.\n        iteritems : Iterate over (column name, Series) pairs.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [0.1, 0.2]},\n                              index=['a', 'b'])\n        >>> df\n           col1  col2\n        a     1   0.1\n        b     2   0.2\n        >>> for row in df.itertuples():\n        ...     print(row)\n        ...\n        Pandas(Index='a', col1=1, col2=0.10000000000000001)\n        Pandas(Index='b', col1=2, col2=0.20000000000000001)\n\n        \"\"\"\n        arrays = []\n        fields = []\n        if index:\n            arrays.append(self.index)\n            fields.append('Index')\n        arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))\n        if name is not None and len(self.columns) + index < 256:\n            try:\n                itertuple = collections.namedtuple(name, fields + list(self\n                    .columns), rename=True)\n                return map(itertuple._make, zip(*arrays))\n            except Exception:\n                pass\n        return zip(*arrays)\n    items = iteritems\n\n    def __len__(self):\n        \"\"\"Returns length of info axis, but here we use the index \"\"\"\n        return len(self.index)\n\n    def dot(self, other):\n        \"\"\"\n        Matrix multiplication with DataFrame or Series objects.  Can also be\n        called using `self @ other` in Python >= 3.5.\n\n        Parameters\n        ----------\n        other : DataFrame or Series\n\n        Returns\n        -------\n        dot_product : DataFrame or Series\n        \"\"\"\n        if isinstance(other, (Series, DataFrame)):\n            common = self.columns.union(other.index)\n            if len(common) > len(self.columns) or len(common) > len(other.index\n                ):\n                raise ValueError('matrices are not aligned')\n            left = self.reindex(columns=common, copy=False)\n            right = other.reindex(index=common, copy=False)\n            lvals = left.values\n            rvals = right.values\n        else:\n            left = self\n            lvals = self.values\n            rvals = np.asarray(other)\n            if lvals.shape[1] != rvals.shape[0]:\n                raise ValueError('Dot product shape mismatch, {l} vs {r}'.\n                    format(l=lvals.shape, r=rvals.shape))\n        if isinstance(other, DataFrame):\n            return self._constructor(np.dot(lvals, rvals), index=left.index,\n                columns=other.columns)\n        elif isinstance(other, Series):\n            return Series(np.dot(lvals, rvals), index=left.index)\n        elif isinstance(rvals, (np.ndarray, Index)):\n            result = np.dot(lvals, rvals)\n            if result.ndim == 2:\n                return self._constructor(result, index=left.index)\n            else:\n                return Series(result, index=left.index)\n        else:\n            raise TypeError('unsupported type: {oth}'.format(oth=type(other)))\n\n    def __matmul__(self, other):\n        \"\"\" Matrix multiplication using binary `@` operator in Python>=3.5 \"\"\"\n        return self.dot(other)\n\n    def __rmatmul__(self, other):\n        \"\"\" Matrix multiplication using binary `@` operator in Python>=3.5 \"\"\"\n        return self.T.dot(np.transpose(other)).T\n\n    @classmethod\n    def from_dict(cls, data, orient='columns', dtype=None, columns=None):\n        \"\"\"\n        Construct DataFrame from dict of array-like or dicts.\n\n        Creates DataFrame object from dictionary by columns or by index\n        allowing dtype specification.\n\n        Parameters\n        ----------\n        data : dict\n            Of the form {field : array-like} or {field : dict}.\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the passed dict\n            should be the columns of the resulting DataFrame, pass 'columns'\n            (default). Otherwise if the keys should be rows, pass 'index'.\n        dtype : dtype, default None\n            Data type to force, otherwise infer.\n        columns : list, default None\n            Column labels to use when ``orient='index'``. Raises a ValueError\n            if used with ``orient='columns'``.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        pandas.DataFrame\n\n        See Also\n        --------\n        DataFrame.from_records : DataFrame from ndarray (structured\n            dtype), list of tuples, dict, or DataFrame\n        DataFrame : DataFrame object creation using constructor\n\n        Examples\n        --------\n        By default the keys of the dict become the DataFrame columns:\n\n        >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data)\n           col_1 col_2\n        0      3     a\n        1      2     b\n        2      1     c\n        3      0     d\n\n        Specify ``orient='index'`` to create the DataFrame using dictionary\n        keys as rows:\n\n        >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data, orient='index')\n               0  1  2  3\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n\n        When using the 'index' orientation, the column names can be\n        specified manually:\n\n        >>> pd.DataFrame.from_dict(data, orient='index',\n        ...                        columns=['A', 'B', 'C', 'D'])\n               A  B  C  D\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n        \"\"\"\n        index = None\n        orient = orient.lower()\n        if orient == 'index':\n            if len(data) > 0:\n                if isinstance(list(data.values())[0], (Series, dict)):\n                    data = _from_nested_dict(data)\n                else:\n                    data, index = list(data.values()), list(data.keys())\n        elif orient == 'columns':\n            if columns is not None:\n                raise ValueError(\n                    \"cannot use columns parameter with orient='columns'\")\n        else:\n            raise ValueError('only recognize index or columns for orient')\n        return cls(data, index=index, columns=columns, dtype=dtype)\n\n    def to_dict(self, orient='dict', into=dict):\n        \"\"\"\n        Convert the DataFrame to a dictionary.\n\n        The type of the key-value pairs can be customized with the parameters\n        (see below).\n\n        Parameters\n        ----------\n        orient : str {'dict', 'list', 'series', 'split', 'records', 'index'}\n            Determines the type of the values of the dictionary.\n\n            - 'dict' (default) : dict like {column -> {index -> value}}\n            - 'list' : dict like {column -> [values]}\n            - 'series' : dict like {column -> Series(values)}\n            - 'split' : dict like\n              {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}\n            - 'records' : list like\n              [{column -> value}, ... , {column -> value}]\n            - 'index' : dict like {index -> {column -> value}}\n\n            Abbreviations are allowed. `s` indicates `series` and `sp`\n            indicates `split`.\n\n        into : class, default dict\n            The collections.Mapping subclass used for all Mappings\n            in the return value.  Can be the actual class or an empty\n            instance of the mapping type you want.  If you want a\n            collections.defaultdict, you must pass it initialized.\n\n            .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        result : collections.Mapping like {column -> {index -> value}}\n\n        See Also\n        --------\n        DataFrame.from_dict: create a DataFrame from a dictionary\n        DataFrame.to_json: convert a DataFrame to JSON format\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2],\n        ...                    'col2': [0.5, 0.75]},\n        ...                   index=['a', 'b'])\n        >>> df\n           col1  col2\n        a     1   0.50\n        b     2   0.75\n        >>> df.to_dict()\n        {'col1': {'a': 1, 'b': 2}, 'col2': {'a': 0.5, 'b': 0.75}}\n\n        You can specify the return orientation.\n\n        >>> df.to_dict('series')\n        {'col1': a    1\n                 b    2\n                 Name: col1, dtype: int64,\n         'col2': a    0.50\n                 b    0.75\n                 Name: col2, dtype: float64}\n\n        >>> df.to_dict('split')\n        {'index': ['a', 'b'], 'columns': ['col1', 'col2'],\n         'data': [[1.0, 0.5], [2.0, 0.75]]}\n\n        >>> df.to_dict('records')\n        [{'col1': 1.0, 'col2': 0.5}, {'col1': 2.0, 'col2': 0.75}]\n\n        >>> df.to_dict('index')\n        {'a': {'col1': 1.0, 'col2': 0.5}, 'b': {'col1': 2.0, 'col2': 0.75}}\n\n        You can also specify the mapping type.\n\n        >>> from collections import OrderedDict, defaultdict\n        >>> df.to_dict(into=OrderedDict)\n        OrderedDict([('col1', OrderedDict([('a', 1), ('b', 2)])),\n                     ('col2', OrderedDict([('a', 0.5), ('b', 0.75)]))])\n\n        If you want a `defaultdict`, you need to initialize it:\n\n        >>> dd = defaultdict(list)\n        >>> df.to_dict('records', into=dd)\n        [defaultdict(<class 'list'>, {'col1': 1.0, 'col2': 0.5}),\n         defaultdict(<class 'list'>, {'col1': 2.0, 'col2': 0.75})]\n        \"\"\"\n        if not self.columns.is_unique:\n            warnings.warn(\n                'DataFrame columns are not unique, some columns will be omitted.'\n                , UserWarning, stacklevel=2)\n        into_c = com.standardize_mapping(into)\n        if orient.lower().startswith('d'):\n            return into_c((k, v.to_dict(into)) for k, v in compat.iteritems\n                (self))\n        elif orient.lower().startswith('l'):\n            return into_c((k, v.tolist()) for k, v in compat.iteritems(self))\n        elif orient.lower().startswith('sp'):\n            return into_c((('index', self.index.tolist()), ('columns', self\n                .columns.tolist()), ('data', lib.map_infer(self.values.\n                ravel(), com.maybe_box_datetimelike).reshape(self.values.\n                shape).tolist())))\n        elif orient.lower().startswith('s'):\n            return into_c((k, com.maybe_box_datetimelike(v)) for k, v in\n                compat.iteritems(self))\n        elif orient.lower().startswith('r'):\n            return [into_c((k, com.maybe_box_datetimelike(v)) for k, v in\n                zip(self.columns, np.atleast_1d(row))) for row in self.values]\n        elif orient.lower().startswith('i'):\n            return into_c((t[0], dict(zip(self.columns, t[1:]))) for t in\n                self.itertuples())\n        else:\n            raise ValueError(\"orient '{o}' not understood\".format(o=orient))\n\n    def to_gbq(self, destination_table, project_id=None, chunksize=None,\n        reauth=False, if_exists='fail', private_key=None,\n        auth_local_webserver=False, table_schema=None, location=None,\n        progress_bar=True, verbose=None):\n        \"\"\"\n        Write a DataFrame to a Google BigQuery table.\n\n        This function requires the `pandas-gbq package\n        <https://pandas-gbq.readthedocs.io>`__.\n\n        See the `How to authenticate with Google BigQuery\n        <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\n        guide for authentication instructions.\n\n        Parameters\n        ----------\n        destination_table : str\n            Name of table to be written, in the form ``dataset.tablename``.\n        project_id : str, optional\n            Google BigQuery Account project ID. Optional when available from\n            the environment.\n        chunksize : int, optional\n            Number of rows to be inserted in each chunk from the dataframe.\n            Set to ``None`` to load the whole dataframe at once.\n        reauth : bool, default False\n            Force Google BigQuery to re-authenticate the user. This is useful\n            if multiple accounts are used.\n        if_exists : str, default 'fail'\n            Behavior when the destination table exists. Value can be one of:\n\n            ``'fail'``\n                If table exists, do nothing.\n            ``'replace'``\n                If table exists, drop it, recreate it, and insert data.\n            ``'append'``\n                If table exists, insert data. Create if does not exist.\n        private_key : str, optional\n            Service account private key in JSON format. Can be file path\n            or string contents. This is useful for remote server\n            authentication (eg. Jupyter/IPython notebook on remote host).\n        auth_local_webserver : bool, default False\n            Use the `local webserver flow`_ instead of the `console flow`_\n            when getting user credentials.\n\n            .. _local webserver flow:\n                http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n            .. _console flow:\n                http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n            *New in version 0.2.0 of pandas-gbq*.\n        table_schema : list of dicts, optional\n            List of BigQuery table fields to which according DataFrame\n            columns conform to, e.g. ``[{'name': 'col1', 'type':\n            'STRING'},...]``. If schema is not provided, it will be\n            generated according to dtypes of DataFrame columns. See\n            BigQuery API documentation on available names of a field.\n\n            *New in version 0.3.1 of pandas-gbq*.\n        location : str, optional\n            Location where the load job should run. See the `BigQuery locations\n            documentation\n            <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n            list of available locations. The location must match that of the\n            target dataset.\n\n            *New in version 0.5.0 of pandas-gbq*.\n        progress_bar : bool, default True\n            Use the library `tqdm` to show the progress bar for the upload,\n            chunk by chunk.\n\n            *New in version 0.5.0 of pandas-gbq*.\n        verbose : bool, deprecated\n            Deprecated in Pandas-GBQ 0.4.0. Use the `logging module\n            to adjust verbosity instead\n            <https://pandas-gbq.readthedocs.io/en/latest/intro.html#logging>`__.\n\n        See Also\n        --------\n        pandas_gbq.to_gbq : This function in the pandas-gbq library.\n        pandas.read_gbq : Read a DataFrame from Google BigQuery.\n        \"\"\"\n        from pandas.io import gbq\n        return gbq.to_gbq(self, destination_table, project_id=project_id,\n            chunksize=chunksize, reauth=reauth, if_exists=if_exists,\n            private_key=private_key, auth_local_webserver=\n            auth_local_webserver, table_schema=table_schema, location=\n            location, progress_bar=progress_bar, verbose=verbose)\n\n    @classmethod\n    def from_records(cls, data, index=None, exclude=None, columns=None,\n        coerce_float=False, nrows=None):\n        \"\"\"\n        Convert structured or record ndarray to DataFrame\n\n        Parameters\n        ----------\n        data : ndarray (structured dtype), list of tuples, dict, or DataFrame\n        index : string, list of fields, array-like\n            Field of array to use as the index, alternately a specific set of\n            input labels to use\n        exclude : sequence, default None\n            Columns or fields to exclude\n        columns : sequence, default None\n            Column names to use. If the passed data do not have names\n            associated with them, this argument provides names for the\n            columns. Otherwise this argument indicates the order of the columns\n            in the result (any names not found in the data will become all-NA\n            columns)\n        coerce_float : boolean, default False\n            Attempt to convert values of non-string, non-numeric objects (like\n            decimal.Decimal) to floating point, useful for SQL result sets\n        nrows : int, default None\n            Number of rows to read if data is an iterator\n\n        Returns\n        -------\n        df : DataFrame\n        \"\"\"\n        if columns is not None:\n            columns = ensure_index(columns)\n        if is_iterator(data):\n            if nrows == 0:\n                return cls()\n            try:\n                first_row = next(data)\n            except StopIteration:\n                return cls(index=index, columns=columns)\n            dtype = None\n            if hasattr(first_row, 'dtype') and first_row.dtype.names:\n                dtype = first_row.dtype\n            values = [first_row]\n            if nrows is None:\n                values += data\n            else:\n                values.extend(itertools.islice(data, nrows - 1))\n            if dtype is not None:\n                data = np.array(values, dtype=dtype)\n            else:\n                data = values\n        if isinstance(data, dict):\n            if columns is None:\n                columns = arr_columns = ensure_index(sorted(data))\n                arrays = [data[k] for k in columns]\n            else:\n                arrays = []\n                arr_columns = []\n                for k, v in compat.iteritems(data):\n                    if k in columns:\n                        arr_columns.append(k)\n                        arrays.append(v)\n                arrays, arr_columns = _reorder_arrays(arrays, arr_columns,\n                    columns)\n        elif isinstance(data, (np.ndarray, DataFrame)):\n            arrays, columns = _to_arrays(data, columns)\n            if columns is not None:\n                columns = ensure_index(columns)\n            arr_columns = columns\n        else:\n            arrays, arr_columns = _to_arrays(data, columns, coerce_float=\n                coerce_float)\n            arr_columns = ensure_index(arr_columns)\n            if columns is not None:\n                columns = ensure_index(columns)\n            else:\n                columns = arr_columns\n        if exclude is None:\n            exclude = set()\n        else:\n            exclude = set(exclude)\n        result_index = None\n        if index is not None:\n            if isinstance(index, compat.string_types) or not hasattr(index,\n                '__iter__'):\n                i = columns.get_loc(index)\n                exclude.add(index)\n                if len(arrays) > 0:\n                    result_index = Index(arrays[i], name=index)\n                else:\n                    result_index = Index([], name=index)\n            else:\n                try:\n                    to_remove = [arr_columns.get_loc(field) for field in index]\n                    index_data = [arrays[i] for i in to_remove]\n                    result_index = ensure_index_from_sequences(index_data,\n                        names=index)\n                    exclude.update(index)\n                except Exception:\n                    result_index = index\n        if any(exclude):\n            arr_exclude = [x for x in exclude if x in arr_columns]\n            to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n            arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n            arr_columns = arr_columns.drop(arr_exclude)\n            columns = columns.drop(exclude)\n        mgr = _arrays_to_mgr(arrays, arr_columns, result_index, columns)\n        return cls(mgr)\n\n    def to_records(self, index=True, convert_datetime64=None):\n        \"\"\"\n        Convert DataFrame to a NumPy record array.\n\n        Index will be put in the 'index' field of the record array if\n        requested.\n\n        Parameters\n        ----------\n        index : boolean, default True\n            Include index in resulting record array, stored in 'index' field.\n        convert_datetime64 : boolean, default None\n            .. deprecated:: 0.23.0\n\n            Whether to convert the index to datetime.datetime if it is a\n            DatetimeIndex.\n\n        Returns\n        -------\n        y : numpy.recarray\n\n        See Also\n        --------\n        DataFrame.from_records: convert structured or record ndarray\n            to DataFrame.\n        numpy.recarray: ndarray that allows field access using\n            attributes, analogous to typed columns in a\n            spreadsheet.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n        ...                   index=['a', 'b'])\n        >>> df\n           A     B\n        a  1  0.50\n        b  2  0.75\n        >>> df.to_records()\n        rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n                  dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n        The index can be excluded from the record array:\n\n        >>> df.to_records(index=False)\n        rec.array([(1, 0.5 ), (2, 0.75)],\n                  dtype=[('A', '<i8'), ('B', '<f8')])\n\n        By default, timestamps are converted to `datetime.datetime`:\n\n        >>> df.index = pd.date_range('2018-01-01 09:00', periods=2, freq='min')\n        >>> df\n                             A     B\n        2018-01-01 09:00:00  1  0.50\n        2018-01-01 09:01:00  2  0.75\n        >>> df.to_records()\n        rec.array([(datetime.datetime(2018, 1, 1, 9, 0), 1, 0.5 ),\n                   (datetime.datetime(2018, 1, 1, 9, 1), 2, 0.75)],\n                  dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n        The timestamp conversion can be disabled so NumPy's datetime64\n        data type is used instead:\n\n        >>> df.to_records(convert_datetime64=False)\n        rec.array([('2018-01-01T09:00:00.000000000', 1, 0.5 ),\n                   ('2018-01-01T09:01:00.000000000', 2, 0.75)],\n                  dtype=[('index', '<M8[ns]'), ('A', '<i8'), ('B', '<f8')])\n        \"\"\"\n        if convert_datetime64 is not None:\n            warnings.warn(\n                \"The 'convert_datetime64' parameter is deprecated and will be removed in a future version\"\n                , FutureWarning, stacklevel=2)\n        if index:\n            if is_datetime64_any_dtype(self.index) and convert_datetime64:\n                ix_vals = [self.index.to_pydatetime()]\n            elif isinstance(self.index, MultiIndex):\n                ix_vals = lmap(np.array, zip(*self.index.values))\n            else:\n                ix_vals = [self.index.values]\n            arrays = ix_vals + [self[c].get_values() for c in self.columns]\n            count = 0\n            index_names = list(self.index.names)\n            if isinstance(self.index, MultiIndex):\n                for i, n in enumerate(index_names):\n                    if n is None:\n                        index_names[i] = 'level_%d' % count\n                        count += 1\n            elif index_names[0] is None:\n                index_names = ['index']\n            names = lmap(compat.text_type, index_names) + lmap(compat.\n                text_type, self.columns)\n        else:\n            arrays = [self[c].get_values() for c in self.columns]\n            names = lmap(compat.text_type, self.columns)\n        formats = [v.dtype for v in arrays]\n        return np.rec.fromarrays(arrays, dtype={'names': names, 'formats':\n            formats})\n\n    @classmethod\n    def from_items(cls, items, columns=None, orient='columns'):\n        \"\"\"Construct a dataframe from a list of tuples\n\n        .. deprecated:: 0.23.0\n          `from_items` is deprecated and will be removed in a future version.\n          Use :meth:`DataFrame.from_dict(dict(items)) <DataFrame.from_dict>`\n          instead.\n          :meth:`DataFrame.from_dict(OrderedDict(items)) <DataFrame.from_dict>`\n          may be used to preserve the key order.\n\n        Convert (key, value) pairs to DataFrame. The keys will be the axis\n        index (usually the columns, but depends on the specified\n        orientation). The values should be arrays or Series.\n\n        Parameters\n        ----------\n        items : sequence of (key, value) pairs\n            Values should be arrays or Series.\n        columns : sequence of column labels, optional\n            Must be passed if orient='index'.\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the\n            input correspond to column labels, pass 'columns'\n            (default). Otherwise if the keys correspond to the index,\n            pass 'index'.\n\n        Returns\n        -------\n        frame : DataFrame\n        \"\"\"\n        warnings.warn(\n            'from_items is deprecated. Please use DataFrame.from_dict(dict(items), ...) instead. DataFrame.from_dict(OrderedDict(items)) may be used to preserve the key order.'\n            , FutureWarning, stacklevel=2)\n        keys, values = lzip(*items)\n        if orient == 'columns':\n            if columns is not None:\n                columns = ensure_index(columns)\n                idict = dict(items)\n                if len(idict) < len(items):\n                    if not columns.equals(ensure_index(keys)):\n                        raise ValueError(\n                            'With non-unique item names, passed columns must be identical'\n                            )\n                    arrays = values\n                else:\n                    arrays = [idict[k] for k in columns if k in idict]\n            else:\n                columns = ensure_index(keys)\n                arrays = values\n            try:\n                return cls._from_arrays(arrays, columns, None)\n            except ValueError:\n                if not is_nested_list_like(values):\n                    raise ValueError(\n                        'The value in each (key, value) pair must be an array, Series, or dict'\n                        )\n        elif orient == 'index':\n            if columns is None:\n                raise TypeError(\"Must pass columns with orient='index'\")\n            keys = ensure_index(keys)\n            try:\n                arr = np.array(values, dtype=object).T\n                data = [lib.maybe_convert_objects(v) for v in arr]\n                return cls._from_arrays(data, columns, keys)\n            except TypeError:\n                if not is_nested_list_like(values):\n                    raise ValueError(\n                        'The value in each (key, value) pair must be an array, Series, or dict'\n                        )\n        else:\n            raise ValueError(\"'orient' must be either 'columns' or 'index'\")\n\n    @classmethod\n    def _from_arrays(cls, arrays, columns, index, dtype=None):\n        mgr = _arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n        return cls(mgr)\n\n    @classmethod\n    def from_csv(cls, path, header=0, sep=',', index_col=0, parse_dates=\n        True, encoding=None, tupleize_cols=None, infer_datetime_format=False):\n        \"\"\"Read CSV file.\n\n        .. deprecated:: 0.21.0\n            Use :func:`pandas.read_csv` instead.\n\n        It is preferable to use the more powerful :func:`pandas.read_csv`\n        for most general purposes, but ``from_csv`` makes for an easy\n        roundtrip to and from a file (the exact counterpart of\n        ``to_csv``), especially with a DataFrame of time series data.\n\n        This method only differs from the preferred :func:`pandas.read_csv`\n        in some defaults:\n\n        - `index_col` is ``0`` instead of ``None`` (take first column as index\n          by default)\n        - `parse_dates` is ``True`` instead of ``False`` (try parsing the index\n          as datetime by default)\n\n        So a ``pd.DataFrame.from_csv(path)`` can be replaced by\n        ``pd.read_csv(path, index_col=0, parse_dates=True)``.\n\n        Parameters\n        ----------\n        path : string file path or file handle / StringIO\n        header : int, default 0\n            Row to use as header (skip prior rows)\n        sep : string, default ','\n            Field delimiter\n        index_col : int or sequence, default 0\n            Column to use for index. If a sequence is given, a MultiIndex\n            is used. Different default from read_table\n        parse_dates : boolean, default True\n            Parse dates. Different default from read_table\n        tupleize_cols : boolean, default False\n            write multi_index columns as a list of tuples (if True)\n            or new (expanded format) if False)\n        infer_datetime_format: boolean, default False\n            If True and `parse_dates` is True for a column, try to infer the\n            datetime format based on the first datetime string. If the format\n            can be inferred, there often will be a large parsing speed-up.\n\n        See also\n        --------\n        pandas.read_csv\n\n        Returns\n        -------\n        y : DataFrame\n\n        \"\"\"\n        warnings.warn(\n            'from_csv is deprecated. Please use read_csv(...) instead. Note that some of the default arguments are different, so please refer to the documentation for from_csv when changing your function calls'\n            , FutureWarning, stacklevel=2)\n        from pandas.io.parsers import read_csv\n        return read_csv(path, header=header, sep=sep, parse_dates=\n            parse_dates, index_col=index_col, encoding=encoding,\n            tupleize_cols=tupleize_cols, infer_datetime_format=\n            infer_datetime_format)\n\n    def to_sparse(self, fill_value=None, kind='block'):\n        \"\"\"\n        Convert to SparseDataFrame.\n\n        Implement the sparse version of the DataFrame meaning that any data\n        matching a specific value it's omitted in the representation.\n        The sparse DataFrame allows for a more efficient storage.\n\n        Parameters\n        ----------\n        fill_value : float, default None\n            The specific value that should be omitted in the representation.\n        kind : {'block', 'integer'}, default 'block'\n            The kind of the SparseIndex tracking where data is not equal to\n            the fill value:\n\n            - 'block' tracks only the locations and sizes of blocks of data.\n            - 'integer' keeps an array with all the locations of the data.\n\n            In most cases 'block' is recommended, since it's more memory\n            efficient.\n\n        Returns\n        -------\n        SparseDataFrame\n            The sparse representation of the DataFrame.\n\n        See Also\n        --------\n        DataFrame.to_dense :\n            Converts the DataFrame back to the its dense form.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([(np.nan, np.nan),\n        ...                    (1., np.nan),\n        ...                    (np.nan, 1.)])\n        >>> df\n             0    1\n        0  NaN  NaN\n        1  1.0  NaN\n        2  NaN  1.0\n        >>> type(df)\n        <class 'pandas.core.frame.DataFrame'>\n\n        >>> sdf = df.to_sparse()\n        >>> sdf\n             0    1\n        0  NaN  NaN\n        1  1.0  NaN\n        2  NaN  1.0\n        >>> type(sdf)\n        <class 'pandas.core.sparse.frame.SparseDataFrame'>\n        \"\"\"\n        from pandas.core.sparse.frame import SparseDataFrame\n        return SparseDataFrame(self._series, index=self.index, columns=self\n            .columns, default_kind=kind, default_fill_value=fill_value)\n\n    def to_panel(self):\n        \"\"\"\n        Transform long (stacked) format (DataFrame) into wide (3D, Panel)\n        format.\n\n        .. deprecated:: 0.20.0\n\n        Currently the index of the DataFrame must be a 2-level MultiIndex. This\n        may be generalized later\n\n        Returns\n        -------\n        panel : Panel\n        \"\"\"\n        if not isinstance(self.index, MultiIndex) or len(self.index.levels\n            ) != 2:\n            raise NotImplementedError('Only 2-level MultiIndex are supported.')\n        if not self.index.is_unique:\n            raise ValueError(\n                \"Can't convert non-uniquely indexed DataFrame to Panel\")\n        self._consolidate_inplace()\n        if self.index.lexsort_depth < 2:\n            selfsorted = self.sort_index(level=0)\n        else:\n            selfsorted = self\n        major_axis, minor_axis = selfsorted.index.levels\n        major_labels, minor_labels = selfsorted.index.labels\n        shape = len(major_axis), len(minor_axis)\n        major_axis = major_axis.copy()\n        major_axis.name = self.index.names[0]\n        minor_axis = minor_axis.copy()\n        minor_axis.name = self.index.names[1]\n        new_axes = [selfsorted.columns, major_axis, minor_axis]\n        new_mgr = selfsorted._data.reshape_nd(axes=new_axes, labels=[\n            major_labels, minor_labels], shape=shape, ref_items=selfsorted.\n            columns)\n        return self._constructor_expanddim(new_mgr)\n\n    @Appender(_shared_docs['to_excel'] % _shared_doc_kwargs)\n    def to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='',\n        float_format=None, columns=None, header=True, index=True,\n        index_label=None, startrow=0, startcol=0, engine=None, merge_cells=\n        True, encoding=None, inf_rep='inf', verbose=True, freeze_panes=None):\n        from pandas.io.formats.excel import ExcelFormatter\n        formatter = ExcelFormatter(self, na_rep=na_rep, cols=columns,\n            header=header, float_format=float_format, index=index,\n            index_label=index_label, merge_cells=merge_cells, inf_rep=inf_rep)\n        formatter.write(excel_writer, sheet_name=sheet_name, startrow=\n            startrow, startcol=startcol, freeze_panes=freeze_panes, engine=\n            engine)\n\n    @deprecate_kwarg(old_arg_name='encoding', new_arg_name=None)\n    def to_stata(self, fname, convert_dates=None, write_index=True,\n        encoding='latin-1', byteorder=None, time_stamp=None, data_label=\n        None, variable_labels=None, version=114, convert_strl=None):\n        \"\"\"\n        Export Stata binary dta files.\n\n        Parameters\n        ----------\n        fname : path (string), buffer or path object\n            string, path object (pathlib.Path or py._path.local.LocalPath) or\n            object implementing a binary write() functions. If using a buffer\n            then the buffer will not be automatically closed after the file\n            data has been written.\n        convert_dates : dict\n            Dictionary mapping columns containing datetime types to stata\n            internal format to use when writing the dates. Options are 'tc',\n            'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n            or a name. Datetime columns that do not have a conversion type\n            specified will be converted to 'tc'. Raises NotImplementedError if\n            a datetime column has timezone information.\n        write_index : bool\n            Write the index to Stata dataset.\n        encoding : str\n            Default is latin-1. Unicode is not supported.\n        byteorder : str\n            Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`.\n        time_stamp : datetime\n            A datetime to use as file creation date.  Default is the current\n            time.\n        data_label : str\n            A label for the data set.  Must be 80 characters or smaller.\n        variable_labels : dict\n            Dictionary containing columns as keys and variable labels as\n            values. Each label must be 80 characters or smaller.\n\n            .. versionadded:: 0.19.0\n\n        version : {114, 117}\n            Version to use in the output dta file.  Version 114 can be used\n            read by Stata 10 and later.  Version 117 can be read by Stata 13\n            or later. Version 114 limits string variables to 244 characters or\n            fewer while 117 allows strings with lengths up to 2,000,000\n            characters.\n\n            .. versionadded:: 0.23.0\n\n        convert_strl : list, optional\n            List of column names to convert to string columns to Stata StrL\n            format. Only available if version is 117.  Storing strings in the\n            StrL format can produce smaller dta files if strings have more than\n            8 characters and values are repeated.\n\n            .. versionadded:: 0.23.0\n\n        Raises\n        ------\n        NotImplementedError\n            * If datetimes contain timezone information\n            * Column dtype is not representable in Stata\n        ValueError\n            * Columns listed in convert_dates are neither datetime64[ns]\n              or datetime.datetime\n            * Column listed in convert_dates is not in DataFrame\n            * Categorical label contains more than 32,000 characters\n\n            .. versionadded:: 0.19.0\n\n        See Also\n        --------\n        pandas.read_stata : Import Stata data files\n        pandas.io.stata.StataWriter : low-level writer for Stata data files\n        pandas.io.stata.StataWriter117 : low-level writer for version 117 files\n\n        Examples\n        --------\n        >>> data.to_stata('./data_file.dta')\n\n        Or with dates\n\n        >>> data.to_stata('./date_data_file.dta', {2 : 'tw'})\n\n        Alternatively you can create an instance of the StataWriter class\n\n        >>> writer = StataWriter('./data_file.dta', data)\n        >>> writer.write_file()\n\n        With dates:\n\n        >>> writer = StataWriter('./date_data_file.dta', data, {2 : 'tw'})\n        >>> writer.write_file()\n        \"\"\"\n        kwargs = {}\n        if version not in (114, 117):\n            raise ValueError('Only formats 114 and 117 supported.')\n        if version == 114:\n            if convert_strl is not None:\n                raise ValueError(\n                    'strl support is only available when using format 117')\n            from pandas.io.stata import StataWriter as statawriter\n        else:\n            from pandas.io.stata import StataWriter117 as statawriter\n            kwargs['convert_strl'] = convert_strl\n        writer = statawriter(fname, self, convert_dates=convert_dates,\n            byteorder=byteorder, time_stamp=time_stamp, data_label=\n            data_label, write_index=write_index, variable_labels=\n            variable_labels, **kwargs)\n        writer.write_file()\n\n    def to_feather(self, fname):\n        \"\"\"\n        write out the binary feather-format for DataFrames\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        fname : str\n            string file path\n\n        \"\"\"\n        from pandas.io.feather_format import to_feather\n        to_feather(self, fname)\n\n    def to_parquet(self, fname, engine='auto', compression='snappy', **kwargs):\n        \"\"\"\n        Write a DataFrame to the binary parquet format.\n\n        .. versionadded:: 0.21.0\n\n        This function writes the dataframe as a `parquet file\n        <https://parquet.apache.org/>`_. You can choose different parquet\n        backends, and have the option of compression. See\n        :ref:`the user guide <io.parquet>` for more details.\n\n        Parameters\n        ----------\n        fname : str\n            String file path.\n        engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n            Parquet library to use. If 'auto', then the option\n            ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n            behavior is to try 'pyarrow', falling back to 'fastparquet' if\n            'pyarrow' is unavailable.\n        compression : {'snappy', 'gzip', 'brotli', None}, default 'snappy'\n            Name of the compression to use. Use ``None`` for no compression.\n        **kwargs\n            Additional arguments passed to the parquet library. See\n            :ref:`pandas io <io.parquet>` for more details.\n\n        See Also\n        --------\n        read_parquet : Read a parquet file.\n        DataFrame.to_csv : Write a csv file.\n        DataFrame.to_sql : Write to a sql table.\n        DataFrame.to_hdf : Write to hdf.\n\n        Notes\n        -----\n        This function requires either the `fastparquet\n        <https://pypi.org/project/fastparquet>`_ or `pyarrow\n        <https://arrow.apache.org/docs/python/>`_ library.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.to_parquet('df.parquet.gzip', compression='gzip')\n        >>> pd.read_parquet('df.parquet.gzip')\n           col1  col2\n        0     1     3\n        1     2     4\n        \"\"\"\n        from pandas.io.parquet import to_parquet\n        to_parquet(self, fname, engine, compression=compression, **kwargs)\n\n    @Substitution(header=\n        'Write out the column names. If a list of strings is given, it is assumed to be aliases for the column names'\n        )\n    @Substitution(shared_params=fmt.common_docstring, returns=fmt.\n        return_docstring)\n    def to_string(self, buf=None, columns=None, col_space=None, header=True,\n        index=True, na_rep='NaN', formatters=None, float_format=None,\n        sparsify=None, index_names=True, justify=None, line_width=None,\n        max_rows=None, max_cols=None, show_dimensions=False):\n        \"\"\"\n        Render a DataFrame to a console-friendly tabular output.\n\n        %(shared_params)s\n        line_width : int, optional\n            Width to wrap a line in characters.\n\n        %(returns)s\n\n        See Also\n        --------\n        to_html : Convert DataFrame to HTML.\n\n        Examples\n        --------\n        >>> d = {'col1' : [1, 2, 3], 'col2' : [4, 5, 6]}\n        >>> df = pd.DataFrame(d)\n        >>> print(df.to_string())\n           col1  col2\n        0     1     4\n        1     2     5\n        2     3     6\n        \"\"\"\n        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n            col_space=col_space, na_rep=na_rep, formatters=formatters,\n            float_format=float_format, sparsify=sparsify, justify=justify,\n            index_names=index_names, header=header, index=index, line_width\n            =line_width, max_rows=max_rows, max_cols=max_cols,\n            show_dimensions=show_dimensions)\n        formatter.to_string()\n        if buf is None:\n            result = formatter.buf.getvalue()\n            return result\n\n    @Substitution(header='whether to print column labels, default True')\n    @Substitution(shared_params=fmt.common_docstring, returns=fmt.\n        return_docstring)\n    def to_html(self, buf=None, columns=None, col_space=None, header=True,\n        index=True, na_rep='NaN', formatters=None, float_format=None,\n        sparsify=None, index_names=True, justify=None, bold_rows=True,\n        classes=None, escape=True, max_rows=None, max_cols=None,\n        show_dimensions=False, notebook=False, decimal='.', border=None,\n        table_id=None):\n        \"\"\"\n        Render a DataFrame as an HTML table.\n\n        %(shared_params)s\n        bold_rows : boolean, default True\n            Make the row labels bold in the output\n        classes : str or list or tuple, default None\n            CSS class(es) to apply to the resulting html table\n        escape : boolean, default True\n            Convert the characters <, >, and & to HTML-safe sequences.\n        notebook : {True, False}, default False\n            Whether the generated HTML is for IPython Notebook.\n        decimal : string, default '.'\n            Character recognized as decimal separator, e.g. ',' in Europe\n\n            .. versionadded:: 0.18.0\n\n        border : int\n            A ``border=border`` attribute is included in the opening\n            `<table>` tag. Default ``pd.options.html.border``.\n\n            .. versionadded:: 0.19.0\n\n        table_id : str, optional\n            A css id is included in the opening `<table>` tag if specified.\n\n            .. versionadded:: 0.23.0\n\n        %(returns)s\n\n        See Also\n        --------\n        to_string : Convert DataFrame to a string.\n        \"\"\"\n        if (justify is not None and justify not in fmt.\n            _VALID_JUSTIFY_PARAMETERS):\n            raise ValueError('Invalid value for justify parameter')\n        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n            col_space=col_space, na_rep=na_rep, formatters=formatters,\n            float_format=float_format, sparsify=sparsify, justify=justify,\n            index_names=index_names, header=header, index=index, bold_rows=\n            bold_rows, escape=escape, max_rows=max_rows, max_cols=max_cols,\n            show_dimensions=show_dimensions, decimal=decimal, table_id=table_id\n            )\n        formatter.to_html(classes=classes, notebook=notebook, border=border)\n        if buf is None:\n            return formatter.buf.getvalue()\n\n    def info(self, verbose=None, buf=None, max_cols=None, memory_usage=None,\n        null_counts=None):\n        \"\"\"\n        Print a concise summary of a DataFrame.\n\n        This method prints information about a DataFrame including\n        the index dtype and column dtypes, non-null values and memory usage.\n\n        Parameters\n        ----------\n        verbose : bool, optional\n            Whether to print the full summary. By default, the setting in\n            ``pandas.options.display.max_info_columns`` is followed.\n        buf : writable buffer, defaults to sys.stdout\n            Where to send the output. By default, the output is printed to\n            sys.stdout. Pass a writable buffer if you need to further process\n            the output.\n        max_cols : int, optional\n            When to switch from the verbose to the truncated output. If the\n            DataFrame has more than `max_cols` columns, the truncated output\n            is used. By default, the setting in\n            ``pandas.options.display.max_info_columns`` is used.\n        memory_usage : bool, str, optional\n            Specifies whether total memory usage of the DataFrame\n            elements (including the index) should be displayed. By default,\n            this follows the ``pandas.options.display.memory_usage`` setting.\n\n            True always show memory usage. False never shows memory usage.\n            A value of 'deep' is equivalent to \"True with deep introspection\".\n            Memory usage is shown in human-readable units (base-2\n            representation). Without deep introspection a memory estimation is\n            made based in column dtype and number of rows assuming values\n            consume the same memory amount for corresponding dtypes. With deep\n            memory introspection, a real memory usage calculation is performed\n            at the cost of computational resources.\n        null_counts : bool, optional\n            Whether to show the non-null counts. By default, this is shown\n            only if the frame is smaller than\n            ``pandas.options.display.max_info_rows`` and\n            ``pandas.options.display.max_info_columns``. A value of True always\n            shows the counts, and False never shows the counts.\n\n        Returns\n        -------\n        None\n            This method prints a summary of a DataFrame and returns None.\n\n        See Also\n        --------\n        DataFrame.describe: Generate descriptive statistics of DataFrame\n            columns.\n        DataFrame.memory_usage: Memory usage of DataFrame columns.\n\n        Examples\n        --------\n        >>> int_values = [1, 2, 3, 4, 5]\n        >>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n        >>> float_values = [0.0, 0.25, 0.5, 0.75, 1.0]\n        >>> df = pd.DataFrame({\"int_col\": int_values, \"text_col\": text_values,\n        ...                   \"float_col\": float_values})\n        >>> df\n           int_col text_col  float_col\n        0        1    alpha       0.00\n        1        2     beta       0.25\n        2        3    gamma       0.50\n        3        4    delta       0.75\n        4        5  epsilon       1.00\n\n        Prints information of all columns:\n\n        >>> df.info(verbose=True)\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 5 entries, 0 to 4\n        Data columns (total 3 columns):\n        int_col      5 non-null int64\n        text_col     5 non-null object\n        float_col    5 non-null float64\n        dtypes: float64(1), int64(1), object(1)\n        memory usage: 200.0+ bytes\n\n        Prints a summary of columns count and its dtypes but not per column\n        information:\n\n        >>> df.info(verbose=False)\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 5 entries, 0 to 4\n        Columns: 3 entries, int_col to float_col\n        dtypes: float64(1), int64(1), object(1)\n        memory usage: 200.0+ bytes\n\n        Pipe output of DataFrame.info to buffer instead of sys.stdout, get\n        buffer content and writes to a text file:\n\n        >>> import io\n        >>> buffer = io.StringIO()\n        >>> df.info(buf=buffer)\n        >>> s = buffer.getvalue()\n        >>> with open(\"df_info.txt\", \"w\", encoding=\"utf-8\") as f:\n        ...     f.write(s)\n        260\n\n        The `memory_usage` parameter allows deep introspection mode, specially\n        useful for big DataFrames and fine-tune memory optimization:\n\n        >>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)\n        >>> df = pd.DataFrame({\n        ...     'column_1': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n        ...     'column_2': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n        ...     'column_3': np.random.choice(['a', 'b', 'c'], 10 ** 6)\n        ... })\n        >>> df.info()\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 1000000 entries, 0 to 999999\n        Data columns (total 3 columns):\n        column_1    1000000 non-null object\n        column_2    1000000 non-null object\n        column_3    1000000 non-null object\n        dtypes: object(3)\n        memory usage: 22.9+ MB\n\n        >>> df.info(memory_usage='deep')\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 1000000 entries, 0 to 999999\n        Data columns (total 3 columns):\n        column_1    1000000 non-null object\n        column_2    1000000 non-null object\n        column_3    1000000 non-null object\n        dtypes: object(3)\n        memory usage: 188.8 MB\n        \"\"\"\n        if buf is None:\n            buf = sys.stdout\n        lines = []\n        lines.append(str(type(self)))\n        lines.append(self.index._summary())\n        if len(self.columns) == 0:\n            lines.append('Empty {name}'.format(name=type(self).__name__))\n            fmt.buffer_put_lines(buf, lines)\n            return\n        cols = self.columns\n        if max_cols is None:\n            max_cols = get_option('display.max_info_columns', len(self.\n                columns) + 1)\n        max_rows = get_option('display.max_info_rows', len(self) + 1)\n        if null_counts is None:\n            show_counts = len(self.columns) <= max_cols and len(self\n                ) < max_rows\n        else:\n            show_counts = null_counts\n        exceeds_info_cols = len(self.columns) > max_cols\n\n        def _verbose_repr():\n            lines.append('Data columns (total %d columns):' % len(self.columns)\n                )\n            space = max(len(pprint_thing(k)) for k in self.columns) + 4\n            counts = None\n            tmpl = '{count}{dtype}'\n            if show_counts:\n                counts = self.count()\n                if len(cols) != len(counts):\n                    raise AssertionError(\n                        'Columns must equal counts ({cols:d} != {counts:d})'\n                        .format(cols=len(cols), counts=len(counts)))\n                tmpl = '{count} non-null {dtype}'\n            dtypes = self.dtypes\n            for i, col in enumerate(self.columns):\n                dtype = dtypes.iloc[i]\n                col = pprint_thing(col)\n                count = ''\n                if show_counts:\n                    count = counts.iloc[i]\n                lines.append(_put_str(col, space) + tmpl.format(count=count,\n                    dtype=dtype))\n\n        def _non_verbose_repr():\n            lines.append(self.columns._summary(name='Columns'))\n\n        def _sizeof_fmt(num, size_qualifier):\n            for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n                if num < 1024.0:\n                    return '{num:3.1f}{size_q} {x}'.format(num=num, size_q=\n                        size_qualifier, x=x)\n                num /= 1024.0\n            return '{num:3.1f}{size_q} {pb}'.format(num=num, size_q=\n                size_qualifier, pb='PB')\n        if verbose:\n            _verbose_repr()\n        elif verbose is False:\n            _non_verbose_repr()\n        elif exceeds_info_cols:\n            _non_verbose_repr()\n        else:\n            _verbose_repr()\n        counts = self.get_dtype_counts()\n        dtypes = ['{k}({kk:d})'.format(k=k[0], kk=k[1]) for k in sorted(\n            compat.iteritems(counts))]\n        lines.append('dtypes: {types}'.format(types=', '.join(dtypes)))\n        if memory_usage is None:\n            memory_usage = get_option('display.memory_usage')\n        if memory_usage:\n            size_qualifier = ''\n            if memory_usage == 'deep':\n                deep = True\n            else:\n                deep = False\n                if 'object' in counts or self.index._is_memory_usage_qualified(\n                    ):\n                    size_qualifier = '+'\n            mem_usage = self.memory_usage(index=True, deep=deep).sum()\n            lines.append('memory usage: {mem}\\n'.format(mem=_sizeof_fmt(\n                mem_usage, size_qualifier)))\n        fmt.buffer_put_lines(buf, lines)\n\n    def memory_usage(self, index=True, deep=False):\n        \"\"\"\n        Return the memory usage of each column in bytes.\n\n        The memory usage can optionally include the contribution of\n        the index and elements of `object` dtype.\n\n        This value is displayed in `DataFrame.info` by default. This can be\n        suppressed by setting ``pandas.options.display.memory_usage`` to False.\n\n        Parameters\n        ----------\n        index : bool, default True\n            Specifies whether to include the memory usage of the DataFrame's\n            index in returned Series. If ``index=True`` the memory usage of the\n            index the first item in the output.\n        deep : bool, default False\n            If True, introspect the data deeply by interrogating\n            `object` dtypes for system-level memory consumption, and include\n            it in the returned values.\n\n        Returns\n        -------\n        sizes : Series\n            A Series whose index is the original column names and whose values\n            is the memory usage of each column in bytes.\n\n        See Also\n        --------\n        numpy.ndarray.nbytes : Total bytes consumed by the elements of an\n            ndarray.\n        Series.memory_usage : Bytes consumed by a Series.\n        pandas.Categorical : Memory-efficient array for string values with\n            many repeated values.\n        DataFrame.info : Concise summary of a DataFrame.\n\n        Examples\n        --------\n        >>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n        >>> data = dict([(t, np.ones(shape=5000).astype(t))\n        ...              for t in dtypes])\n        >>> df = pd.DataFrame(data)\n        >>> df.head()\n           int64  float64  complex128 object  bool\n        0      1      1.0      (1+0j)      1  True\n        1      1      1.0      (1+0j)      1  True\n        2      1      1.0      (1+0j)      1  True\n        3      1      1.0      (1+0j)      1  True\n        4      1      1.0      (1+0j)      1  True\n\n        >>> df.memory_usage()\n        Index            80\n        int64         40000\n        float64       40000\n        complex128    80000\n        object        40000\n        bool           5000\n        dtype: int64\n\n        >>> df.memory_usage(index=False)\n        int64         40000\n        float64       40000\n        complex128    80000\n        object        40000\n        bool           5000\n        dtype: int64\n\n        The memory footprint of `object` dtype columns is ignored by default:\n\n        >>> df.memory_usage(deep=True)\n        Index             80\n        int64          40000\n        float64        40000\n        complex128     80000\n        object        160000\n        bool            5000\n        dtype: int64\n\n        Use a Categorical for efficient storage of an object-dtype column with\n        many repeated values.\n\n        >>> df['object'].astype('category').memory_usage(deep=True)\n        5168\n        \"\"\"\n        result = Series([c.memory_usage(index=False, deep=deep) for col, c in\n            self.iteritems()], index=self.columns)\n        if index:\n            result = Series(self.index.memory_usage(deep=deep), index=['Index']\n                ).append(result)\n        return result\n\n    def transpose(self, *args, **kwargs):\n        \"\"\"\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        copy : bool, default False\n            If True, the underlying data is copied. Otherwise (default), no\n            copy is made if possible.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted for\n            compatibility with numpy.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5     8\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        \"\"\"\n        nv.validate_transpose(args, dict())\n        return super(DataFrame, self).transpose(1, 0, **kwargs)\n    T = property(transpose)\n\n    def _unpickle_frame_compat(self, state):\n        if len(state) == 2:\n            series, idx = state\n            columns = sorted(series)\n        else:\n            series, cols, idx = state\n            columns = com._unpickle_array(cols)\n        index = com._unpickle_array(idx)\n        self._data = self._init_dict(series, index, columns, None)\n\n    def _unpickle_matrix_compat(self, state):\n        (vals, idx, cols), object_state = state\n        index = com._unpickle_array(idx)\n        dm = DataFrame(vals, index=index, columns=com._unpickle_array(cols),\n            copy=False)\n        if object_state is not None:\n            ovals, _, ocols = object_state\n            objects = DataFrame(ovals, index=index, columns=com.\n                _unpickle_array(ocols), copy=False)\n            dm = dm.join(objects)\n        self._data = dm._data\n\n    def get_value(self, index, col, takeable=False):\n        \"\"\"Quickly retrieve single value at passed column and index\n\n        .. deprecated:: 0.21.0\n            Use .at[] or .iat[] accessors instead.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        value : scalar value\n        \"\"\"\n        warnings.warn(\n            'get_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead'\n            , FutureWarning, stacklevel=2)\n        return self._get_value(index, col, takeable=takeable)\n\n    def _get_value(self, index, col, takeable=False):\n        if takeable:\n            series = self._iget_item_cache(col)\n            return com.maybe_box_datetimelike(series._values[index])\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n        try:\n            return engine.get_value(series._values, index)\n        except (TypeError, ValueError):\n            col = self.columns.get_loc(col)\n            index = self.index.get_loc(index)\n            return self._get_value(index, col, takeable=True)\n    _get_value.__doc__ = get_value.__doc__\n\n    def set_value(self, index, col, value, takeable=False):\n        \"\"\"Put single value at passed column and index\n\n        .. deprecated:: 0.21.0\n            Use .at[] or .iat[] accessors instead.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        value : scalar value\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        frame : DataFrame\n            If label pair is contained, will be reference to calling DataFrame,\n            otherwise a new object\n        \"\"\"\n        warnings.warn(\n            'set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead'\n            , FutureWarning, stacklevel=2)\n        return self._set_value(index, col, value, takeable=takeable)\n\n    def _set_value(self, index, col, value, takeable=False):\n        try:\n            if takeable is True:\n                series = self._iget_item_cache(col)\n                return series._set_value(index, value, takeable=True)\n            series = self._get_item_cache(col)\n            engine = self.index._engine\n            engine.set_value(series._values, index, value)\n            return self\n        except (KeyError, TypeError):\n            self.loc[index, col] = value\n            self._item_cache.pop(col, None)\n            return self\n    _set_value.__doc__ = set_value.__doc__\n\n    def _ixs(self, i, axis=0):\n        \"\"\"\n        i : int, slice, or sequence of integers\n        axis : int\n        \"\"\"\n        if axis == 0:\n            \"\"\"\n            Notes\n            -----\n            If slice passed, the resulting data will be a view\n            \"\"\"\n            if isinstance(i, slice):\n                return self[i]\n            else:\n                label = self.index[i]\n                if isinstance(label, Index):\n                    result = self.take(i, axis=axis)\n                    copy = True\n                else:\n                    new_values = self._data.fast_xs(i)\n                    if is_scalar(new_values):\n                        return new_values\n                    copy = isinstance(new_values, np.ndarray\n                        ) and new_values.base is None\n                    result = self._constructor_sliced(new_values, index=\n                        self.columns, name=self.index[i], dtype=new_values.\n                        dtype)\n                result._set_is_copy(self, copy=copy)\n                return result\n        else:\n            \"\"\"\n            Notes\n            -----\n            If slice passed, the resulting data will be a view\n            \"\"\"\n            label = self.columns[i]\n            if isinstance(i, slice):\n                lab_slice = slice(label[0], label[-1])\n                return self.loc[:, lab_slice]\n            else:\n                if isinstance(label, Index):\n                    return self._take(i, axis=1)\n                index_len = len(self.index)\n                values = self._data.iget(i)\n                if index_len and not len(values):\n                    values = np.array([np.nan] * index_len, dtype=object)\n                result = self._box_col_values(values, label)\n                result._set_as_cached(label, self)\n                return result\n\n    def __getitem__(self, key):\n        key = com.apply_if_callable(key, self)\n        try:\n            if self.columns.is_unique and key in self.columns:\n                if self.columns.nlevels > 1:\n                    return self._getitem_multilevel(key)\n                return self._get_item_cache(key)\n        except (TypeError, ValueError):\n            pass\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            return self._slice(indexer, axis=0)\n        if isinstance(key, DataFrame):\n            return self._getitem_frame(key)\n        if com.is_bool_indexer(key):\n            return self._getitem_bool_array(key)\n        is_single_key = isinstance(key, tuple) or not is_list_like(key)\n        if is_single_key:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            indexer = self.columns.get_loc(key)\n            if is_integer(indexer):\n                indexer = [indexer]\n        else:\n            if is_iterator(key):\n                key = list(key)\n            indexer = self.loc._convert_to_indexer(key, axis=1,\n                raise_missing=True)\n        if getattr(indexer, 'dtype', None) == bool:\n            indexer = np.where(indexer)[0]\n        data = self._take(indexer, axis=1)\n        if is_single_key:\n            if data.shape[1] == 1 and not isinstance(self.columns, MultiIndex):\n                data = data[key]\n        return data\n\n    def _getitem_bool_array(self, key):\n        if isinstance(key, Series) and not key.index.equals(self.index):\n            warnings.warn(\n                'Boolean Series key will be reindexed to match DataFrame index.'\n                , UserWarning, stacklevel=3)\n        elif len(key) != len(self.index):\n            raise ValueError('Item wrong length %d instead of %d.' % (len(\n                key), len(self.index)))\n        key = check_bool_indexer(self.index, key)\n        indexer = key.nonzero()[0]\n        return self._take(indexer, axis=0)\n\n    def _getitem_multilevel(self, key):\n        loc = self.columns.get_loc(key)\n        if isinstance(loc, (slice, Series, np.ndarray, Index)):\n            new_columns = self.columns[loc]\n            result_columns = maybe_droplevels(new_columns, key)\n            if self._is_mixed_type:\n                result = self.reindex(columns=new_columns)\n                result.columns = result_columns\n            else:\n                new_values = self.values[:, loc]\n                result = self._constructor(new_values, index=self.index,\n                    columns=result_columns)\n                result = result.__finalize__(self)\n            if len(result.columns) == 1:\n                top = result.columns[0]\n                if isinstance(top, tuple):\n                    top = top[0]\n                if top == '':\n                    result = result['']\n                    if isinstance(result, Series):\n                        result = self._constructor_sliced(result, index=\n                            self.index, name=key)\n            result._set_is_copy(self)\n            return result\n        else:\n            return self._get_item_cache(key)\n\n    def _getitem_frame(self, key):\n        if key.values.size and not is_bool_dtype(key.values):\n            raise ValueError('Must pass DataFrame with boolean values only')\n        return self.where(key)\n\n    def query(self, expr, inplace=False, **kwargs):\n        \"\"\"Query the columns of a frame with a boolean expression.\n\n        Parameters\n        ----------\n        expr : string\n            The query string to evaluate.  You can refer to variables\n            in the environment by prefixing them with an '@' character like\n            ``@a + b``.\n        inplace : bool\n            Whether the query should modify the data in place or return\n            a modified copy\n\n            .. versionadded:: 0.18.0\n\n        kwargs : dict\n            See the documentation for :func:`pandas.eval` for complete details\n            on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n        Returns\n        -------\n        q : DataFrame\n\n        Notes\n        -----\n        The result of the evaluation of this expression is first passed to\n        :attr:`DataFrame.loc` and if that fails because of a\n        multidimensional key (e.g., a DataFrame) then the result will be passed\n        to :meth:`DataFrame.__getitem__`.\n\n        This method uses the top-level :func:`pandas.eval` function to\n        evaluate the passed query.\n\n        The :meth:`~pandas.DataFrame.query` method uses a slightly\n        modified Python syntax by default. For example, the ``&`` and ``|``\n        (bitwise) operators have the precedence of their boolean cousins,\n        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n        however the semantics are different.\n\n        You can change the semantics of the expression by passing the keyword\n        argument ``parser='python'``. This enforces the same semantics as\n        evaluation in Python space. Likewise, you can pass ``engine='python'``\n        to evaluate an expression using Python itself as a backend. This is not\n        recommended as it is inefficient compared to using ``numexpr`` as the\n        engine.\n\n        The :attr:`DataFrame.index` and\n        :attr:`DataFrame.columns` attributes of the\n        :class:`~pandas.DataFrame` instance are placed in the query namespace\n        by default, which allows you to treat both the index and columns of the\n        frame as a column in the frame.\n        The identifier ``index`` is used for the frame index; you can also\n        use the name of the index to identify it in a query. Please note that\n        Python keywords may not be used as identifiers.\n\n        For further details and examples see the ``query`` documentation in\n        :ref:`indexing <indexing.query>`.\n\n        See Also\n        --------\n        pandas.eval\n        DataFrame.eval\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.random.randn(10, 2), columns=list('ab'))\n        >>> df.query('a > b')\n        >>> df[df.a > df.b]  # same result as the previous expression\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(expr, compat.string_types):\n            msg = 'expr must be a string to be evaluated, {0} given'\n            raise ValueError(msg.format(type(expr)))\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        kwargs['target'] = None\n        res = self.eval(expr, **kwargs)\n        try:\n            new_data = self.loc[res]\n        except ValueError:\n            new_data = self[res]\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return new_data\n\n    def eval(self, expr, inplace=False, **kwargs):\n        \"\"\"\n        Evaluate a string describing operations on DataFrame columns.\n\n        Operates on columns only, not specific rows or elements.  This allows\n        `eval` to run arbitrary code, which can make you vulnerable to code\n        injection if you pass user input to this function.\n\n        Parameters\n        ----------\n        expr : str\n            The expression string to evaluate.\n        inplace : bool, default False\n            If the expression contains an assignment, whether to perform the\n            operation inplace and mutate the existing DataFrame. Otherwise,\n            a new DataFrame is returned.\n\n            .. versionadded:: 0.18.0.\n        kwargs : dict\n            See the documentation for :func:`~pandas.eval` for complete details\n            on the keyword arguments accepted by\n            :meth:`~pandas.DataFrame.query`.\n\n        Returns\n        -------\n        ndarray, scalar, or pandas object\n            The result of the evaluation.\n\n        See Also\n        --------\n        DataFrame.query : Evaluates a boolean expression to query the columns\n            of a frame.\n        DataFrame.assign : Can evaluate an expression or function to create new\n            values for a column.\n        pandas.eval : Evaluate a Python expression as a string using various\n            backends.\n\n        Notes\n        -----\n        For more details see the API documentation for :func:`~pandas.eval`.\n        For detailed examples see :ref:`enhancing performance with eval\n        <enhancingperf.eval>`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n        >>> df\n           A   B\n        0  1  10\n        1  2   8\n        2  3   6\n        3  4   4\n        4  5   2\n        >>> df.eval('A + B')\n        0    11\n        1    10\n        2     9\n        3     8\n        4     7\n        dtype: int64\n\n        Assignment is allowed though by default the original DataFrame is not\n        modified.\n\n        >>> df.eval('C = A + B')\n           A   B   C\n        0  1  10  11\n        1  2   8  10\n        2  3   6   9\n        3  4   4   8\n        4  5   2   7\n        >>> df\n           A   B\n        0  1  10\n        1  2   8\n        2  3   6\n        3  4   4\n        4  5   2\n\n        Use ``inplace=True`` to modify the original DataFrame.\n\n        >>> df.eval('C = A + B', inplace=True)\n        >>> df\n           A   B   C\n        0  1  10  11\n        1  2   8  10\n        2  3   6   9\n        3  4   4   8\n        4  5   2   7\n        \"\"\"\n        from pandas.core.computation.eval import eval as _eval\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        resolvers = kwargs.pop('resolvers', None)\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        if resolvers is None:\n            index_resolvers = self._get_index_resolvers()\n            resolvers = dict(self.iteritems()), index_resolvers\n        if 'target' not in kwargs:\n            kwargs['target'] = self\n        kwargs['resolvers'] = kwargs.get('resolvers', ()) + tuple(resolvers)\n        return _eval(expr, inplace=inplace, **kwargs)\n\n    def select_dtypes(self, include=None, exclude=None):\n        \"\"\"\n        Return a subset of the DataFrame's columns based on the column dtypes.\n\n        Parameters\n        ----------\n        include, exclude : scalar or list-like\n            A selection of dtypes or strings to be included/excluded. At least\n            one of these parameters must be supplied.\n\n        Raises\n        ------\n        ValueError\n            * If both of ``include`` and ``exclude`` are empty\n            * If ``include`` and ``exclude`` have overlapping elements\n            * If any kind of string dtype is passed in.\n\n        Returns\n        -------\n        subset : DataFrame\n            The subset of the frame including the dtypes in ``include`` and\n            excluding the dtypes in ``exclude``.\n\n        Notes\n        -----\n        * To select all *numeric* types, use ``np.number`` or ``'number'``\n        * To select strings you must use the ``object`` dtype, but note that\n          this will return *all* object dtype columns\n        * See the `numpy dtype hierarchy\n          <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n        * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n          ``'datetime64'``\n        * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n          ``'timedelta64'``\n        * To select Pandas categorical dtypes, use ``'category'``\n        * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n          0.20.0) or ``'datetime64[ns, tz]'``\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 2] * 3,\n        ...                    'b': [True, False] * 3,\n        ...                    'c': [1.0, 2.0] * 3})\n        >>> df\n                a      b  c\n        0       1   True  1.0\n        1       2  False  2.0\n        2       1   True  1.0\n        3       2  False  2.0\n        4       1   True  1.0\n        5       2  False  2.0\n\n        >>> df.select_dtypes(include='bool')\n           b\n        0  True\n        1  False\n        2  True\n        3  False\n        4  True\n        5  False\n\n        >>> df.select_dtypes(include=['float64'])\n           c\n        0  1.0\n        1  2.0\n        2  1.0\n        3  2.0\n        4  1.0\n        5  2.0\n\n        >>> df.select_dtypes(exclude=['int'])\n               b    c\n        0   True  1.0\n        1  False  2.0\n        2   True  1.0\n        3  False  2.0\n        4   True  1.0\n        5  False  2.0\n        \"\"\"\n        if not is_list_like(include):\n            include = (include,) if include is not None else ()\n        if not is_list_like(exclude):\n            exclude = (exclude,) if exclude is not None else ()\n        selection = tuple(map(frozenset, (include, exclude)))\n        if not any(selection):\n            raise ValueError(\n                'at least one of include or exclude must be nonempty')\n        include, exclude = map(lambda x: frozenset(map(\n            _get_dtype_from_object, x)), selection)\n        for dtypes in (include, exclude):\n            invalidate_string_dtypes(dtypes)\n        if not include.isdisjoint(exclude):\n            raise ValueError('include and exclude overlap on {inc_ex}'.\n                format(inc_ex=include & exclude))\n        include_these = Series(not bool(include), index=self.columns)\n        exclude_these = Series(not bool(exclude), index=self.columns)\n\n        def is_dtype_instance_mapper(idx, dtype):\n            return idx, functools.partial(issubclass, dtype.type)\n        for idx, f in itertools.starmap(is_dtype_instance_mapper, enumerate\n            (self.dtypes)):\n            if include:\n                include_these.iloc[idx] = any(map(f, include))\n            if exclude:\n                exclude_these.iloc[idx] = not any(map(f, exclude))\n        dtype_indexer = include_these & exclude_these\n        return self.loc[com.get_info_slice(self, dtype_indexer)]\n\n    def _box_item_values(self, key, values):\n        items = self.columns[self.columns.get_loc(key)]\n        if values.ndim == 2:\n            return self._constructor(values.T, columns=items, index=self.index)\n        else:\n            return self._box_col_values(values, items)\n\n    def _box_col_values(self, values, items):\n        \"\"\" provide boxed values for a column \"\"\"\n        klass = _get_sliced_frame_result_type(values, self)\n        return klass(values, index=self.index, name=items, fastpath=True)\n\n    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            return self._setitem_slice(indexer, value)\n        if isinstance(key, DataFrame) or getattr(key, 'ndim', None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        else:\n            self._set_item(key, value)\n\n    def _setitem_slice(self, key, value):\n        self._check_setitem_copy()\n        self.loc._setitem_with_indexer(key, value)\n\n    def _setitem_array(self, key, value):\n        if com.is_bool_indexer(key):\n            if len(key) != len(self.index):\n                raise ValueError('Item wrong length %d instead of %d!' % (\n                    len(key), len(self.index)))\n            key = check_bool_indexer(self.index, key)\n            indexer = key.nonzero()[0]\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer(indexer, value)\n        elif isinstance(value, DataFrame):\n            if len(value.columns) != len(key):\n                raise ValueError('Columns must be same length as key')\n            for k1, k2 in zip(key, value.columns):\n                self[k1] = value[k2]\n        else:\n            indexer = self.loc._convert_to_indexer(key, axis=1)\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer((slice(None), indexer), value)\n\n    def _setitem_frame(self, key, value):\n        if isinstance(key, np.ndarray):\n            if key.shape != self.shape:\n                raise ValueError('Array conditional must be same shape as self'\n                    )\n            key = self._constructor(key, **self._construct_axes_dict())\n        if key.values.size and not is_bool_dtype(key.values):\n            raise TypeError(\n                'Must pass DataFrame or 2-d ndarray with boolean values only')\n        self._check_inplace_setting(value)\n        self._check_setitem_copy()\n        self._where(-key, value, inplace=True)\n\n    def _ensure_valid_index(self, value):\n        \"\"\"\n        ensure that if we don't have an index, that we can create one from the\n        passed value\n        \"\"\"\n        if not len(self.index) and is_list_like(value):\n            try:\n                value = Series(value)\n            except:\n                raise ValueError(\n                    'Cannot set a frame with no defined index and a value that cannot be converted to a Series'\n                    )\n            self._data = self._data.reindex_axis(value.index.copy(), axis=1,\n                fill_value=np.nan)\n\n    def _set_item(self, key, value):\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(key, value)\n        NDFrame._set_item(self, key, value)\n        if len(self):\n            self._check_setitem_copy()\n\n    def insert(self, loc, column, value, allow_duplicates=False):\n        \"\"\"\n        Insert column into DataFrame at specified location.\n\n        Raises a ValueError if `column` is already contained in the DataFrame,\n        unless `allow_duplicates` is set to True.\n\n        Parameters\n        ----------\n        loc : int\n            Insertion index. Must verify 0 <= loc <= len(columns)\n        column : string, number, or hashable object\n            label of the inserted column\n        value : int, Series, or array-like\n        allow_duplicates : bool, optional\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(column, value, broadcast=False)\n        self._data.insert(loc, column, value, allow_duplicates=allow_duplicates\n            )\n\n    def assign(self, **kwargs):\n        \"\"\"\n        Assign new columns to a DataFrame.\n\n        Returns a new object with all original columns in addition to new ones.\n        Existing columns that are re-assigned will be overwritten.\n\n        Parameters\n        ----------\n        kwargs : keyword, value pairs\n            The column names are keywords. If the values are\n            callable, they are computed on the DataFrame and\n            assigned to the new columns. The callable must not\n            change input DataFrame (though pandas doesn't check it).\n            If the values are not callable, (e.g. a Series, scalar, or array),\n            they are simply assigned.\n\n        Returns\n        -------\n        df : DataFrame\n            A new DataFrame with the new columns in addition to\n            all the existing columns.\n\n        Notes\n        -----\n        Assigning multiple columns within the same ``assign`` is possible.\n        For Python 3.6 and above, later items in '\\\\*\\\\*kwargs' may refer to\n        newly created or modified columns in 'df'; items are computed and\n        assigned into 'df' in order.  For Python 3.5 and below, the order of\n        keyword arguments is not specified, you cannot refer to newly created\n        or modified columns. All items are computed first, and then assigned\n        in alphabetical order.\n\n        .. versionchanged :: 0.23.0\n\n           Keyword argument order is maintained for Python 3.6 and later.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 11), 'B': np.random.randn(10)})\n\n        Where the value is a callable, evaluated on `df`:\n\n        >>> df.assign(ln_A = lambda x: np.log(x.A))\n            A         B      ln_A\n        0   1  0.426905  0.000000\n        1   2 -0.780949  0.693147\n        2   3 -0.418711  1.098612\n        3   4 -0.269708  1.386294\n        4   5 -0.274002  1.609438\n        5   6 -0.500792  1.791759\n        6   7  1.649697  1.945910\n        7   8 -1.495604  2.079442\n        8   9  0.549296  2.197225\n        9  10 -0.758542  2.302585\n\n        Where the value already exists and is inserted:\n\n        >>> newcol = np.log(df['A'])\n        >>> df.assign(ln_A=newcol)\n            A         B      ln_A\n        0   1  0.426905  0.000000\n        1   2 -0.780949  0.693147\n        2   3 -0.418711  1.098612\n        3   4 -0.269708  1.386294\n        4   5 -0.274002  1.609438\n        5   6 -0.500792  1.791759\n        6   7  1.649697  1.945910\n        7   8 -1.495604  2.079442\n        8   9  0.549296  2.197225\n        9  10 -0.758542  2.302585\n\n        Where the keyword arguments depend on each other\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3]})\n\n        >>> df.assign(B=df.A, C=lambda x:x['A']+ x['B'])\n            A  B  C\n         0  1  1  2\n         1  2  2  4\n         2  3  3  6\n        \"\"\"\n        data = self.copy()\n        if PY36:\n            for k, v in kwargs.items():\n                data[k] = com.apply_if_callable(v, data)\n        else:\n            results = OrderedDict()\n            for k, v in kwargs.items():\n                results[k] = com.apply_if_callable(v, data)\n            results = sorted(results.items())\n            for k, v in results:\n                data[k] = v\n        return data\n\n    def _sanitize_column(self, key, value, broadcast=True):\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        key : object\n        value : scalar, Series, or array-like\n        broadcast : bool, default True\n            If ``key`` matches multiple duplicate column names in the\n            DataFrame, this parameter indicates whether ``value`` should be\n            tiled so that the returned array contains a (duplicated) column for\n            each occurrence of the key. If False, ``value`` will not be tiled.\n\n        Returns\n        -------\n        sanitized_column : numpy-array\n        \"\"\"\n\n        def reindexer(value):\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n                try:\n                    value = value.reindex(self.index)._values\n                except Exception as e:\n                    if not value.index.is_unique:\n                        raise e\n                    raise TypeError(\n                        'incompatible index of inserted column with frame index'\n                        )\n            return value\n        if isinstance(value, Series):\n            value = reindexer(value)\n        elif isinstance(value, DataFrame):\n            if isinstance(self.columns, MultiIndex) and key in self.columns:\n                loc = self.columns.get_loc(key)\n                if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                    cols = maybe_droplevels(self.columns[loc], key)\n                    if len(cols) and not cols.equals(value.columns):\n                        value = value.reindex(cols, axis=1)\n            value = reindexer(value).T\n        elif isinstance(value, ExtensionArray):\n            from pandas.core.series import _sanitize_index\n            value = value.copy()\n            value = _sanitize_index(value, self.index, copy=False)\n        elif isinstance(value, Index) or is_sequence(value):\n            from pandas.core.series import _sanitize_index\n            value = _sanitize_index(value, self.index, copy=False)\n            if not isinstance(value, (np.ndarray, Index)):\n                if isinstance(value, list) and len(value) > 0:\n                    value = maybe_convert_platform(value)\n                else:\n                    value = com.asarray_tuplesafe(value)\n            elif value.ndim == 2:\n                value = value.copy().T\n            elif isinstance(value, Index):\n                value = value.copy(deep=True)\n            else:\n                value = value.copy()\n            if is_object_dtype(value.dtype):\n                value = maybe_infer_to_datetimelike(value)\n        else:\n            infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n            value = cast_scalar_to_array(len(self.index), value)\n            value = maybe_cast_to_datetime(value, infer_dtype)\n        if is_extension_type(value) or is_extension_array_dtype(value):\n            return value\n        if broadcast and key in self.columns and value.ndim == 1:\n            if not self.columns.is_unique or isinstance(self.columns,\n                MultiIndex):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1))\n        return np.atleast_2d(np.asarray(value))\n\n    @property\n    def _series(self):\n        result = {}\n        for idx, item in enumerate(self.columns):\n            result[item] = Series(self._data.iget(idx), index=self.index,\n                name=item)\n        return result\n\n    def lookup(self, row_labels, col_labels):\n        \"\"\"Label-based \"fancy indexing\" function for DataFrame.\n        Given equal-length arrays of row and column labels, return an\n        array of the values corresponding to each (row, col) pair.\n\n        Parameters\n        ----------\n        row_labels : sequence\n            The row labels to use for lookup\n        col_labels : sequence\n            The column labels to use for lookup\n\n        Notes\n        -----\n        Akin to::\n\n            result = []\n            for row, col in zip(row_labels, col_labels):\n                result.append(df.get_value(row, col))\n\n        Examples\n        --------\n        values : ndarray\n            The found values\n\n        \"\"\"\n        n = len(row_labels)\n        if n != len(col_labels):\n            raise ValueError('Row labels must have same size as column labels')\n        thresh = 1000\n        if not self._is_mixed_type or n > thresh:\n            values = self.values\n            ridx = self.index.get_indexer(row_labels)\n            cidx = self.columns.get_indexer(col_labels)\n            if (ridx == -1).any():\n                raise KeyError('One or more row labels was not found')\n            if (cidx == -1).any():\n                raise KeyError('One or more column labels was not found')\n            flat_index = ridx * len(self.columns) + cidx\n            result = values.flat[flat_index]\n        else:\n            result = np.empty(n, dtype='O')\n            for i, (r, c) in enumerate(zip(row_labels, col_labels)):\n                result[i] = self._get_value(r, c)\n        if is_object_dtype(result):\n            result = lib.maybe_convert_objects(result)\n        return result\n\n    def _reindex_axes(self, axes, level, limit, tolerance, method,\n        fill_value, copy):\n        frame = self\n        columns = axes['columns']\n        if columns is not None:\n            frame = frame._reindex_columns(columns, method, copy, level,\n                fill_value, limit, tolerance)\n        index = axes['index']\n        if index is not None:\n            frame = frame._reindex_index(index, method, copy, level,\n                fill_value, limit, tolerance)\n        return frame\n\n    def _reindex_index(self, new_index, method, copy, level, fill_value=np.\n        nan, limit=None, tolerance=None):\n        new_index, indexer = self.index.reindex(new_index, method=method,\n            level=level, limit=limit, tolerance=tolerance)\n        return self._reindex_with_indexers({(0): [new_index, indexer]},\n            copy=copy, fill_value=fill_value, allow_dups=False)\n\n    def _reindex_columns(self, new_columns, method, copy, level, fill_value\n        =None, limit=None, tolerance=None):\n        new_columns, indexer = self.columns.reindex(new_columns, method=\n            method, level=level, limit=limit, tolerance=tolerance)\n        return self._reindex_with_indexers({(1): [new_columns, indexer]},\n            copy=copy, fill_value=fill_value, allow_dups=False)\n\n    def _reindex_multi(self, axes, copy, fill_value):\n        \"\"\" we are guaranteed non-Nones in the axes! \"\"\"\n        new_index, row_indexer = self.index.reindex(axes['index'])\n        new_columns, col_indexer = self.columns.reindex(axes['columns'])\n        if row_indexer is not None and col_indexer is not None:\n            indexer = row_indexer, col_indexer\n            new_values = algorithms.take_2d_multi(self.values, indexer,\n                fill_value=fill_value)\n            return self._constructor(new_values, index=new_index, columns=\n                new_columns)\n        else:\n            return self._reindex_with_indexers({(0): [new_index,\n                row_indexer], (1): [new_columns, col_indexer]}, copy=copy,\n                fill_value=fill_value)\n\n    @Appender(_shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n        fill_value=None, method=None, limit=None, fill_axis=0,\n        broadcast_axis=None):\n        return super(DataFrame, self).align(other, join=join, axis=axis,\n            level=level, copy=copy, fill_value=fill_value, method=method,\n            limit=limit, fill_axis=fill_axis, broadcast_axis=broadcast_axis)\n\n    @Appender(_shared_docs['reindex'] % _shared_doc_kwargs)\n    @rewrite_axis_style_signature('labels', [('method', None), ('copy', \n        True), ('level', None), ('fill_value', np.nan), ('limit', None), (\n        'tolerance', None)])\n    def reindex(self, *args, **kwargs):\n        axes = validate_axis_style_args(self, args, kwargs, 'labels', 'reindex'\n            )\n        kwargs.update(axes)\n        kwargs.pop('axis', None)\n        kwargs.pop('labels', None)\n        return super(DataFrame, self).reindex(**kwargs)\n\n    @Appender(_shared_docs['reindex_axis'] % _shared_doc_kwargs)\n    def reindex_axis(self, labels, axis=0, method=None, level=None, copy=\n        True, limit=None, fill_value=np.nan):\n        return super(DataFrame, self).reindex_axis(labels=labels, axis=axis,\n            method=method, level=level, copy=copy, limit=limit, fill_value=\n            fill_value)\n\n    def drop(self, labels=None, axis=0, index=None, columns=None, level=\n        None, inplace=False, errors='raise'):\n        \"\"\"\n        Drop specified labels from rows or columns.\n\n        Remove rows or columns by specifying label names and corresponding\n        axis, or by specifying directly index or column names. When using a\n        multi-index, labels on different levels can be removed by specifying\n        the level.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n            Index or column labels to drop.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Whether to drop labels from the index (0 or 'index') or\n            columns (1 or 'columns').\n        index, columns : single label or list-like\n            Alternative to specifying axis (``labels, axis=1``\n            is equivalent to ``columns=labels``).\n\n            .. versionadded:: 0.21.0\n        level : int or level name, optional\n            For MultiIndex, level from which the labels will be removed.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and only existing labels are\n            dropped.\n\n        Returns\n        -------\n        dropped : pandas.DataFrame\n\n        See Also\n        --------\n        DataFrame.loc : Label-location based indexer for selection by label.\n        DataFrame.dropna : Return DataFrame with labels on given axis omitted\n            where (all or any) data are missing\n        DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n            removed, optionally only considering certain columns\n        Series.drop : Return Series with specified index labels removed.\n\n        Raises\n        ------\n        KeyError\n            If none of the labels are found in the selected axis\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.arange(12).reshape(3,4),\n        ...                   columns=['A', 'B', 'C', 'D'])\n        >>> df\n           A  B   C   D\n        0  0  1   2   3\n        1  4  5   6   7\n        2  8  9  10  11\n\n        Drop columns\n\n        >>> df.drop(['B', 'C'], axis=1)\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        >>> df.drop(columns=['B', 'C'])\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        Drop a row by index\n\n        >>> df.drop([0, 1])\n           A  B   C   D\n        2  8  9  10  11\n\n        Drop columns and/or rows of MultiIndex DataFrame\n\n        >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n        ...                              ['speed', 'weight', 'length']],\n        ...                      labels=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n        ...                              [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n        >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n        ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n        ...                         [250, 150], [1.5, 0.8], [320, 250],\n        ...                         [1, 0.8], [0.3,0.2]])\n        >>> df\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n                length  1.5     1.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n                length  1.5     0.8\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n                length  0.3     0.2\n\n        >>> df.drop(index='cow', columns='small')\n                        big\n        lama    speed   45.0\n                weight  200.0\n                length  1.5\n        falcon  speed   320.0\n                weight  1.0\n                length  0.3\n\n        >>> df.drop(index='length', level=1)\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n        \"\"\"\n        return super(DataFrame, self).drop(labels=labels, axis=axis, index=\n            index, columns=columns, level=level, inplace=inplace, errors=errors\n            )\n\n    @rewrite_axis_style_signature('mapper', [('copy', True), ('inplace', \n        False), ('level', None)])\n    def rename(self, *args, **kwargs):\n        \"\"\"Alter axes labels.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        mapper, index, columns : dict-like or function, optional\n            dict-like or functions transformations to apply to\n            that axis' values. Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index`` and\n            ``columns``.\n        axis : int or str, optional\n            Axis to target with ``mapper``. Can be either the axis name\n            ('index', 'columns') or number (0, 1). The default is 'index'.\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n            Whether to return a new DataFrame. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        renamed : DataFrame\n\n        See Also\n        --------\n        pandas.DataFrame.rename_axis\n\n        Examples\n        --------\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n        \"\"\"\n        axes = validate_axis_style_args(self, args, kwargs, 'mapper', 'rename')\n        kwargs.update(axes)\n        kwargs.pop('axis', None)\n        kwargs.pop('mapper', None)\n        return super(DataFrame, self).rename(**kwargs)\n\n    @Substitution(**_shared_doc_kwargs)\n    @Appender(NDFrame.fillna.__doc__)\n    def fillna(self, value=None, method=None, axis=None, inplace=False,\n        limit=None, downcast=None, **kwargs):\n        return super(DataFrame, self).fillna(value=value, method=method,\n            axis=axis, inplace=inplace, limit=limit, downcast=downcast, **\n            kwargs)\n\n    @Appender(_shared_docs['replace'] % _shared_doc_kwargs)\n    def replace(self, to_replace=None, value=None, inplace=False, limit=\n        None, regex=False, method='pad'):\n        return super(DataFrame, self).replace(to_replace=to_replace, value=\n            value, inplace=inplace, limit=limit, regex=regex, method=method)\n\n    @Appender(_shared_docs['shift'] % _shared_doc_kwargs)\n    def shift(self, periods=1, freq=None, axis=0):\n        return super(DataFrame, self).shift(periods=periods, freq=freq,\n            axis=axis)\n\n    def set_index(self, keys, drop=True, append=False, inplace=False,\n        verify_integrity=False):\n        \"\"\"\n        Set the DataFrame index (row labels) using one or more existing\n        columns. By default yields a new object.\n\n        Parameters\n        ----------\n        keys : column label or list of column labels / arrays\n        drop : boolean, default True\n            Delete columns to be used as the new index\n        append : boolean, default False\n            Whether to append columns to existing index\n        inplace : boolean, default False\n            Modify the DataFrame in place (do not create a new object)\n        verify_integrity : boolean, default False\n            Check the new index for duplicates. Otherwise defer the check until\n            necessary. Setting to False will improve the performance of this\n            method\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n        ...                    'year': [2012, 2014, 2013, 2014],\n        ...                    'sale':[55, 40, 84, 31]})\n           month  sale  year\n        0  1      55    2012\n        1  4      40    2014\n        2  7      84    2013\n        3  10     31    2014\n\n        Set the index to become the 'month' column:\n\n        >>> df.set_index('month')\n               sale  year\n        month\n        1      55    2012\n        4      40    2014\n        7      84    2013\n        10     31    2014\n\n        Create a multi-index using columns 'year' and 'month':\n\n        >>> df.set_index(['year', 'month'])\n                    sale\n        year  month\n        2012  1     55\n        2014  4     40\n        2013  7     84\n        2014  10    31\n\n        Create a multi-index using a set of values and a column:\n\n        >>> df.set_index([[1, 2, 3, 4], 'year'])\n                 month  sale\n           year\n        1  2012  1      55\n        2  2014  4      40\n        3  2013  7      84\n        4  2014  10     31\n\n        Returns\n        -------\n        dataframe : DataFrame\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(keys, list):\n            keys = [keys]\n        if inplace:\n            frame = self\n        else:\n            frame = self.copy()\n        arrays = []\n        names = []\n        if append:\n            names = [x for x in self.index.names]\n            if isinstance(self.index, MultiIndex):\n                for i in range(self.index.nlevels):\n                    arrays.append(self.index._get_level_values(i))\n            else:\n                arrays.append(self.index)\n        to_remove = []\n        for col in keys:\n            if isinstance(col, MultiIndex):\n                for n in range(col.nlevels - 1):\n                    arrays.append(col._get_level_values(n))\n                level = col._get_level_values(col.nlevels - 1)\n                names.extend(col.names)\n            elif isinstance(col, Series):\n                level = col._values\n                names.append(col.name)\n            elif isinstance(col, Index):\n                level = col\n                names.append(col.name)\n            elif isinstance(col, (list, np.ndarray, Index)):\n                level = col\n                names.append(None)\n            else:\n                level = frame[col]._values\n                names.append(col)\n                if drop:\n                    to_remove.append(col)\n            arrays.append(level)\n        index = ensure_index_from_sequences(arrays, names)\n        if verify_integrity and not index.is_unique:\n            duplicates = index[index.duplicated()].unique()\n            raise ValueError('Index has duplicate keys: {dup}'.format(dup=\n                duplicates))\n        for c in to_remove:\n            del frame[c]\n        index._cleanup()\n        frame.index = index\n        if not inplace:\n            return frame\n\n    def reset_index(self, level=None, drop=False, inplace=False, col_level=\n        0, col_fill=''):\n        \"\"\"\n        For DataFrame with multi-level index, return new DataFrame with\n        labeling information in the columns under the index names, defaulting\n        to 'level_0', 'level_1', etc. if any are None. For a standard index,\n        the index name will be used (if set), otherwise a default 'index' or\n        'level_0' (if 'index' is already taken) will be used.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default None\n            Only remove the given levels from the index. Removes all levels by\n            default\n        drop : boolean, default False\n            Do not try to insert index into dataframe columns. This resets\n            the index to the default integer index.\n        inplace : boolean, default False\n            Modify the DataFrame in place (do not create a new object)\n        col_level : int or str, default 0\n            If the columns have multiple levels, determines which level the\n            labels are inserted into. By default it is inserted into the first\n            level.\n        col_fill : object, default ''\n            If the columns have multiple levels, determines how the other\n            levels are named. If None then the index name is repeated.\n\n        Returns\n        -------\n        resetted : DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('bird',    389.0),\n        ...                    ('bird',     24.0),\n        ...                    ('mammal',   80.5),\n        ...                    ('mammal', np.nan)],\n        ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n        ...                   columns=('class', 'max_speed'))\n        >>> df\n                 class  max_speed\n        falcon    bird      389.0\n        parrot    bird       24.0\n        lion    mammal       80.5\n        monkey  mammal        NaN\n\n        When we reset the index, the old index is added as a column, and a\n        new sequential index is used:\n\n        >>> df.reset_index()\n            index   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        We can use the `drop` parameter to avoid the old index being added as\n        a column:\n\n        >>> df.reset_index(drop=True)\n            class  max_speed\n        0    bird      389.0\n        1    bird       24.0\n        2  mammal       80.5\n        3  mammal        NaN\n\n        You can also use `reset_index` with `MultiIndex`.\n\n        >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n        ...                                    ('bird', 'parrot'),\n        ...                                    ('mammal', 'lion'),\n        ...                                    ('mammal', 'monkey')],\n        ...                                   names=['class', 'name'])\n        >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n        ...                                      ('species', 'type')])\n        >>> df = pd.DataFrame([(389.0, 'fly'),\n        ...                    ( 24.0, 'fly'),\n        ...                    ( 80.5, 'run'),\n        ...                    (np.nan, 'jump')],\n        ...                   index=index,\n        ...                   columns=columns)\n        >>> df\n                       speed species\n                         max    type\n        class  name\n        bird   falcon  389.0     fly\n               parrot   24.0     fly\n        mammal lion     80.5     run\n               monkey    NaN    jump\n\n        If the index has multiple levels, we can reset a subset of them:\n\n        >>> df.reset_index(level='class')\n                 class  speed species\n                          max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        If we are not dropping the index, by default, it is placed in the top\n        level. We can place it in another level:\n\n        >>> df.reset_index(level='class', col_level=1)\n                        speed species\n                 class    max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        When the index is inserted under another level, we can specify under\n        which one with the parameter `col_fill`:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                      species  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n\n        If we specify a nonexistent level for `col_fill`, it is created:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                        genus  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if inplace:\n            new_obj = self\n        else:\n            new_obj = self.copy()\n\n        def _maybe_casted_values(index, labels=None):\n            values = index._values\n            if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n                if values.dtype == np.object_:\n                    values = lib.maybe_convert_objects(values)\n            if labels is not None:\n                mask = labels == -1\n                if mask.all():\n                    values = np.empty(len(mask))\n                    values.fill(np.nan)\n                else:\n                    values = values.take(labels)\n                    if mask.any():\n                        values, changed = maybe_upcast_putmask(values, mask,\n                            np.nan)\n            return values\n        new_index = ibase.default_index(len(new_obj))\n        if level is not None:\n            if not isinstance(level, (tuple, list)):\n                level = [level]\n            level = [self.index._get_level_number(lev) for lev in level]\n            if len(level) < self.index.nlevels:\n                new_index = self.index.droplevel(level)\n        if not drop:\n            if isinstance(self.index, MultiIndex):\n                names = [(n if n is not None else 'level_%d' % i) for i, n in\n                    enumerate(self.index.names)]\n                to_insert = lzip(self.index.levels, self.index.labels)\n            else:\n                default = 'index' if 'index' not in self else 'level_0'\n                names = [default] if self.index.name is None else [self.\n                    index.name]\n                to_insert = (self.index, None),\n            multi_col = isinstance(self.columns, MultiIndex)\n            for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n                if not (level is None or i in level):\n                    continue\n                name = names[i]\n                if multi_col:\n                    col_name = list(name) if isinstance(name, tuple) else [name\n                        ]\n                    if col_fill is None:\n                        if len(col_name) not in (1, self.columns.nlevels):\n                            raise ValueError(\n                                'col_fill=None is incompatible with incomplete column name {}'\n                                .format(name))\n                        col_fill = col_name[0]\n                    lev_num = self.columns._get_level_number(col_level)\n                    name_lst = [col_fill] * lev_num + col_name\n                    missing = self.columns.nlevels - len(name_lst)\n                    name_lst += [col_fill] * missing\n                    name = tuple(name_lst)\n                level_values = _maybe_casted_values(lev, lab)\n                new_obj.insert(0, name, level_values)\n        new_obj.index = new_index\n        if not inplace:\n            return new_obj\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isna(self):\n        return super(DataFrame, self).isna()\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isnull(self):\n        return super(DataFrame, self).isnull()\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notna(self):\n        return super(DataFrame, self).notna()\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notnull(self):\n        return super(DataFrame, self).notnull()\n\n    def dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False\n        ):\n        \"\"\"\n        Remove missing values.\n\n        See the :ref:`User Guide <missing_data>` for more on which values are\n        considered missing, and how to work with missing data.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Determine if rows or columns which contain missing values are\n            removed.\n\n            * 0, or 'index' : Drop rows which contain missing values.\n            * 1, or 'columns' : Drop columns which contain missing value.\n\n            .. deprecated:: 0.23.0\n\n               Pass tuple or list to drop on multiple axes.\n               Only a single axis is allowed.\n\n        how : {'any', 'all'}, default 'any'\n            Determine if row or column is removed from DataFrame, when we have\n            at least one NA or all NA.\n\n            * 'any' : If any NA values are present, drop that row or column.\n            * 'all' : If all values are NA, drop that row or column.\n\n        thresh : int, optional\n            Require that many non-NA values.\n        subset : array-like, optional\n            Labels along other axis to consider, e.g. if you are dropping rows\n            these would be a list of columns to include.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame with NA entries dropped from it.\n\n        See Also\n        --------\n        DataFrame.isna: Indicate missing values.\n        DataFrame.notna : Indicate existing (non-missing) values.\n        DataFrame.fillna : Replace missing values.\n        Series.dropna : Drop missing values.\n        Index.dropna : Drop missing indices.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n        ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n        ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n        ...                             pd.NaT]})\n        >>> df\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Drop the rows where at least one element is missing.\n\n        >>> df.dropna()\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n\n        Drop the columns where at least one element is missing.\n\n        >>> df.dropna(axis='columns')\n               name\n        0    Alfred\n        1    Batman\n        2  Catwoman\n\n        Drop the rows where all elements are missing.\n\n        >>> df.dropna(how='all')\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Keep only the rows with at least 2 non-NA values.\n\n        >>> df.dropna(thresh=2)\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Define in which columns to look for missing values.\n\n        >>> df.dropna(subset=['name', 'born'])\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n\n        Keep the DataFrame with valid entries in the same variable.\n\n        >>> df.dropna(inplace=True)\n        >>> df\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if isinstance(axis, (tuple, list)):\n            msg = (\n                'supplying multiple axes to axis is deprecated and will be removed in a future version.'\n                )\n            warnings.warn(msg, FutureWarning, stacklevel=2)\n            result = self\n            for ax in axis:\n                result = result.dropna(how=how, thresh=thresh, subset=\n                    subset, axis=ax)\n        else:\n            axis = self._get_axis_number(axis)\n            agg_axis = 1 - axis\n            agg_obj = self\n            if subset is not None:\n                ax = self._get_axis(agg_axis)\n                indices = ax.get_indexer_for(subset)\n                check = indices == -1\n                if check.any():\n                    raise KeyError(list(np.compress(check, subset)))\n                agg_obj = self.take(indices, axis=agg_axis)\n            count = agg_obj.count(axis=agg_axis)\n            if thresh is not None:\n                mask = count >= thresh\n            elif how == 'any':\n                mask = count == len(agg_obj._get_axis(agg_axis))\n            elif how == 'all':\n                mask = count > 0\n            elif how is not None:\n                raise ValueError('invalid how option: {h}'.format(h=how))\n            else:\n                raise TypeError('must specify how or thresh')\n            result = self._take(mask.nonzero()[0], axis=axis)\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result\n\n    def drop_duplicates(self, subset=None, keep='first', inplace=False):\n        \"\"\"\n        Return DataFrame with duplicate rows removed, optionally only\n        considering certain columns\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns\n        keep : {'first', 'last', False}, default 'first'\n            - ``first`` : Drop duplicates except for the first occurrence.\n            - ``last`` : Drop duplicates except for the last occurrence.\n            - False : Drop all duplicates.\n        inplace : boolean, default False\n            Whether to drop duplicates in place or to return a copy\n\n        Returns\n        -------\n        deduplicated : DataFrame\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        duplicated = self.duplicated(subset, keep=keep)\n        if inplace:\n            inds, = (-duplicated).nonzero()\n            new_data = self._data.take(inds)\n            self._update_inplace(new_data)\n        else:\n            return self[-duplicated]\n\n    def duplicated(self, subset=None, keep='first'):\n        \"\"\"\n        Return boolean Series denoting duplicate rows, optionally only\n        considering certain columns\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns\n        keep : {'first', 'last', False}, default 'first'\n            - ``first`` : Mark duplicates as ``True`` except for the\n              first occurrence.\n            - ``last`` : Mark duplicates as ``True`` except for the\n              last occurrence.\n            - False : Mark all duplicates as ``True``.\n\n        Returns\n        -------\n        duplicated : Series\n        \"\"\"\n        from pandas.core.sorting import get_group_index\n        from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n\n        def f(vals):\n            labels, shape = algorithms.factorize(vals, size_hint=min(len(\n                self), _SIZE_HINT_LIMIT))\n            return labels.astype('i8', copy=False), len(shape)\n        if subset is None:\n            subset = self.columns\n        elif not np.iterable(subset) or isinstance(subset, compat.string_types\n            ) or isinstance(subset, tuple) and subset in self.columns:\n            subset = subset,\n        diff = Index(subset).difference(self.columns)\n        if not diff.empty:\n            raise KeyError(diff)\n        vals = (col.values for name, col in self.iteritems() if name in subset)\n        labels, shape = map(list, zip(*map(f, vals)))\n        ids = get_group_index(labels, shape, sort=False, xnull=False)\n        return Series(duplicated_int64(ids, keep), index=self.index)\n\n    @Appender(_shared_docs['sort_values'] % _shared_doc_kwargs)\n    def sort_values(self, by, axis=0, ascending=True, inplace=False, kind=\n        'quicksort', na_position='last'):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n        stacklevel = 2\n        if not isinstance(by, list):\n            by = [by]\n        if is_sequence(ascending) and len(by) != len(ascending):\n            raise ValueError(\n                'Length of ascending (%d) != length of by (%d)' % (len(\n                ascending), len(by)))\n        if len(by) > 1:\n            from pandas.core.sorting import lexsort_indexer\n            keys = []\n            for x in by:\n                k = self._get_label_or_level_values(x, axis=axis,\n                    stacklevel=stacklevel)\n                keys.append(k)\n            indexer = lexsort_indexer(keys, orders=ascending, na_position=\n                na_position)\n            indexer = ensure_platform_int(indexer)\n        else:\n            from pandas.core.sorting import nargsort\n            by = by[0]\n            k = self._get_label_or_level_values(by, axis=axis, stacklevel=\n                stacklevel)\n            if isinstance(ascending, (tuple, list)):\n                ascending = ascending[0]\n            indexer = nargsort(k, kind=kind, ascending=ascending,\n                na_position=na_position)\n        new_data = self._data.take(indexer, axis=self.\n            _get_block_manager_axis(axis), verify=False)\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    @Appender(_shared_docs['sort_index'] % _shared_doc_kwargs)\n    def sort_index(self, axis=0, level=None, ascending=True, inplace=False,\n        kind='quicksort', na_position='last', sort_remaining=True, by=None):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if by is not None:\n            warnings.warn(\n                'by argument to sort_index is deprecated, please use .sort_values(by=...)'\n                , FutureWarning, stacklevel=2)\n            if level is not None:\n                raise ValueError('unable to simultaneously sort by and level')\n            return self.sort_values(by, axis=axis, ascending=ascending,\n                inplace=inplace)\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n        labels = labels._sort_levels_monotonic()\n        if level is not None:\n            new_axis, indexer = labels.sortlevel(level, ascending=ascending,\n                sort_remaining=sort_remaining)\n        elif isinstance(labels, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n            indexer = lexsort_indexer(labels._get_labels_for_sorting(),\n                orders=ascending, na_position=na_position)\n        else:\n            from pandas.core.sorting import nargsort\n            if (ascending and labels.is_monotonic_increasing or not\n                ascending and labels.is_monotonic_decreasing):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n            indexer = nargsort(labels, kind=kind, ascending=ascending,\n                na_position=na_position)\n        baxis = self._get_block_manager_axis(axis)\n        new_data = self._data.take(indexer, axis=baxis, verify=False)\n        new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def sortlevel(self, level=0, axis=0, ascending=True, inplace=False,\n        sort_remaining=True):\n        \"\"\"Sort multilevel index by chosen axis and primary level. Data will be\n        lexicographically sorted by the chosen level followed by the other\n        levels (in order).\n\n        .. deprecated:: 0.20.0\n            Use :meth:`DataFrame.sort_index`\n\n\n        Parameters\n        ----------\n        level : int\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n        ascending : boolean, default True\n        inplace : boolean, default False\n            Sort the DataFrame without creating a new instance\n        sort_remaining : boolean, default True\n            Sort by the other levels too.\n\n        Returns\n        -------\n        sorted : DataFrame\n\n        See Also\n        --------\n        DataFrame.sort_index(level=...)\n\n        \"\"\"\n        warnings.warn('sortlevel is deprecated, use sort_index(level= ...)',\n            FutureWarning, stacklevel=2)\n        return self.sort_index(level=level, axis=axis, ascending=ascending,\n            inplace=inplace, sort_remaining=sort_remaining)\n\n    def nlargest(self, n, columns, keep='first'):\n        \"\"\"\n        Return the first `n` rows ordered by `columns` in descending order.\n\n        Return the first `n` rows with the largest values in `columns`, in\n        descending order. The columns that are not specified are returned as\n        well, but not used for ordering.\n\n        This method is equivalent to\n        ``df.sort_values(columns, ascending=False).head(n)``, but more\n        performant.\n\n        Parameters\n        ----------\n        n : int\n            Number of rows to return.\n        columns : label or list of labels\n            Column label(s) to order by.\n        keep : {'first', 'last', 'all'}, default 'first'\n            Where there are duplicate values:\n\n            - `first` : prioritize the first occurrence(s)\n            - `last` : prioritize the last occurrence(s)\n            - ``all`` : do not drop any duplicates, even it means\n                        selecting more than `n` items.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        DataFrame\n            The first `n` rows ordered by the given columns in descending\n            order.\n\n        See Also\n        --------\n        DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n            ascending order.\n        DataFrame.sort_values : Sort DataFrame by the values\n        DataFrame.head : Return the first `n` rows without re-ordering.\n\n        Notes\n        -----\n        This function cannot be used with all column types. For example, when\n        specifying columns with `object` or `category` dtypes, ``TypeError`` is\n        raised.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 10, 8, 11, 8, 2],\n        ...                    'b': list('abdcef'),\n        ...                    'c': [1.0, 2.0, np.nan, 3.0, 4.0, 9.0]})\n        >>> df\n            a  b    c\n        0   1  a  1.0\n        1  10  b  2.0\n        2   8  d  NaN\n        3  11  c  3.0\n        4   8  e  4.0\n        5   2  f  9.0\n\n        In the following example, we will use ``nlargest`` to select the three\n        rows having the largest values in column \"a\".\n\n        >>> df.nlargest(3, 'a')\n            a  b    c\n        3  11  c  3.0\n        1  10  b  2.0\n        2   8  d  NaN\n\n        When using ``keep='last'``, ties are resolved in reverse order:\n\n        >>> df.nlargest(3, 'a', keep='last')\n            a  b    c\n        3  11  c  3.0\n        1  10  b  2.0\n        4   8  e  4.0\n\n        When using ``keep='all'``, all duplicate items are maintained:\n\n        >>> df.nlargest(3, 'a', keep='all')\n            a  b    c\n        3  11  c  3.0\n        1  10  b  2.0\n        2   8  d  NaN\n        4   8  e  4.0\n\n        To order by the largest values in column \"a\" and then \"c\", we can\n        specify multiple columns like in the next example.\n\n        >>> df.nlargest(3, ['a', 'c'])\n            a  b    c\n        4   8  e  4.0\n        3  11  c  3.0\n        1  10  b  2.0\n\n        Attempting to use ``nlargest`` on non-numeric dtypes will raise a\n        ``TypeError``:\n\n        >>> df.nlargest(3, 'b')\n\n        Traceback (most recent call last):\n        TypeError: Column 'b' has dtype object, cannot use method 'nlargest'\n        \"\"\"\n        return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns\n            ).nlargest()\n\n    def nsmallest(self, n, columns, keep='first'):\n        \"\"\"Get the rows of a DataFrame sorted by the `n` smallest\n        values of `columns`.\n\n        Parameters\n        ----------\n        n : int\n            Number of items to retrieve\n        columns : list or str\n            Column name or names to order by\n        keep : {'first', 'last', 'all'}, default 'first'\n            Where there are duplicate values:\n\n            - ``first`` : take the first occurrence.\n            - ``last`` : take the last occurrence.\n            - ``all`` : do not drop any duplicates, even it means\n              selecting more than `n` items.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 10, 8, 11, 8, 2],\n        ...                    'b': list('abdcef'),\n        ...                    'c': [1.0, 2.0, np.nan, 3.0, 4.0, 9.0]})\n        >>> df\n            a  b    c\n        0   1  a  1.0\n        1  10  b  2.0\n        2   8  d  NaN\n        3  11  c  3.0\n        4   8  e  4.0\n        5   2  f  9.0\n\n        In the following example, we will use ``nsmallest`` to select the\n        three rows having the smallest values in column \"a\".\n\n        >>> df.nsmallest(3, 'a')\n           a  b    c\n        0  1  a  1.0\n        5  2  f  9.0\n        2  8  d  NaN\n\n        When using ``keep='last'``, ties are resolved in reverse order:\n\n        >>> df.nsmallest(3, 'a', keep='last')\n           a  b    c\n        0  1  a  1.0\n        5  2  f  9.0\n        4  8  e  4.0\n\n        When using ``keep='all'``, all duplicate items are maintained:\n\n        >>> df.nsmallest(3, 'a', keep='all')\n           a  b    c\n        0  1  a  1.0\n        5  2  f  9.0\n        2  8  d  NaN\n        4  8  e  4.0\n\n        To order by the largest values in column \"a\" and then \"c\", we can\n        specify multiple columns like in the next example.\n\n        >>> df.nsmallest(3, ['a', 'c'])\n           a  b    c\n        0  1  a  1.0\n        5  2  f  9.0\n        4  8  e  4.0\n\n        Attempting to use ``nsmallest`` on non-numeric dtypes will raise a\n        ``TypeError``:\n\n        >>> df.nsmallest(3, 'b')\n\n        Traceback (most recent call last):\n        TypeError: Column 'b' has dtype object, cannot use method 'nsmallest'\n        \"\"\"\n        return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns\n            ).nsmallest()\n\n    def swaplevel(self, i=-2, j=-1, axis=0):\n        \"\"\"\n        Swap levels i and j in a MultiIndex on a particular axis\n\n        Parameters\n        ----------\n        i, j : int, string (can be mixed)\n            Level of index to be swapped. Can pass level name as string.\n\n        Returns\n        -------\n        swapped : same type as caller (new object)\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n\n        \"\"\"\n        result = self.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            result.index = result.index.swaplevel(i, j)\n        else:\n            result.columns = result.columns.swaplevel(i, j)\n        return result\n\n    def reorder_levels(self, order, axis=0):\n        \"\"\"\n        Rearrange index levels using input order.\n        May not drop or duplicate levels\n\n        Parameters\n        ----------\n        order : list of int or list of str\n            List representing new level order. Reference level by number\n            (position) or by key (label).\n        axis : int\n            Where to reorder levels.\n\n        Returns\n        -------\n        type of caller (new object)\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if not isinstance(self._get_axis(axis), MultiIndex):\n            raise TypeError('Can only reorder levels on a hierarchical axis.')\n        result = self.copy()\n        if axis == 0:\n            result.index = result.index.reorder_levels(order)\n        else:\n            result.columns = result.columns.reorder_levels(order)\n        return result\n\n    def _combine_frame(self, other, func, fill_value=None, level=None):\n        this, other = self.align(other, join='outer', level=level, copy=False)\n        new_index, new_columns = this.index, this.columns\n\n        def _arith_op(left, right):\n            left, right = ops.fill_binop(left, right, fill_value)\n            return func(left, right)\n        if this._is_mixed_type or other._is_mixed_type:\n            return ops.dispatch_to_series(this, other, _arith_op)\n        else:\n            result = _arith_op(this.values, other.values)\n        return self._constructor(result, index=new_index, columns=\n            new_columns, copy=False)\n\n    def _combine_match_index(self, other, func, level=None):\n        left, right = self.align(other, join='outer', axis=0, level=level,\n            copy=False)\n        new_data = func(left.values.T, right.values).T\n        return self._constructor(new_data, index=left.index, columns=self.\n            columns, copy=False)\n\n    def _combine_match_columns(self, other, func, level=None, try_cast=True):\n        left, right = self.align(other, join='outer', axis=1, level=level,\n            copy=False)\n        new_data = left._data.eval(func=func, other=right, axes=[left.\n            columns, self.index], try_cast=try_cast)\n        return self._constructor(new_data)\n\n    def _combine_const(self, other, func, errors='raise', try_cast=True):\n        if lib.is_scalar(other) or np.ndim(other) == 0:\n            new_data = {i: func(self.iloc[:, i], other) for i, col in\n                enumerate(self.columns)}\n            result = self._constructor(new_data, index=self.index, copy=False)\n            result.columns = self.columns\n            return result\n        new_data = self._data.eval(func=func, other=other, errors=errors,\n            try_cast=try_cast)\n        return self._constructor(new_data)\n\n    def _compare_frame(self, other, func, str_rep):\n        import pandas.core.computation.expressions as expressions\n\n        def _compare(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(\n                a.columns))}\n        new_data = expressions.evaluate(_compare, str_rep, self, other)\n        result = self._constructor(data=new_data, index=self.index, copy=False)\n        result.columns = self.columns\n        return result\n\n    def combine(self, other, func, fill_value=None, overwrite=True):\n        \"\"\"\n        Perform column-wise combine with another DataFrame based on a\n        passed function.\n\n        Combines a DataFrame with `other` DataFrame using `func`\n        to element-wise combine columns. The row and column indexes of the\n        resulting DataFrame will be the union of the two.\n\n        Parameters\n        ----------\n        other : DataFrame\n            The DataFrame to merge column-wise.\n        func : function\n            Function that takes two series as inputs and return a Series or a\n            scalar. Used to merge the two dataframes column by columns.\n        fill_value : scalar value, default None\n            The value to fill NaNs with prior to passing any column to the\n            merge func.\n        overwrite : boolean, default True\n            If True, columns in `self` that do not exist in `other` will be\n            overwritten with NaNs.\n\n        Returns\n        -------\n        result : DataFrame\n\n        Examples\n        --------\n        Combine using a simple function that chooses the smaller column.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\n        >>> df1.combine(df2, take_smaller)\n           A  B\n        0  0  3\n        1  0  3\n\n        Example using a true element-wise combine function.\n\n        >>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine(df2, np.minimum)\n           A  B\n        0  1  2\n        1  0  3\n\n        Using `fill_value` fills Nones prior to passing the column to the\n        merge function.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine(df2, take_smaller, fill_value=-5)\n           A    B\n        0  0 -5.0\n        1  0  4.0\n\n        However, if the same element in both dataframes is None, that None\n        is preserved\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})\n        >>> df1.combine(df2, take_smaller, fill_value=-5)\n           A    B\n        0  0  NaN\n        1  0  3.0\n\n        Example that demonstrates the use of `overwrite` and behavior when\n        the axis differ between the dataframes.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1],}, index=[1, 2])\n        >>> df1.combine(df2, take_smaller)\n             A    B     C\n        0  NaN  NaN   NaN\n        1  NaN  3.0 -10.0\n        2  NaN  3.0   1.0\n\n        >>> df1.combine(df2, take_smaller, overwrite=False)\n             A    B     C\n        0  0.0  NaN   NaN\n        1  0.0  3.0 -10.0\n        2  NaN  3.0   1.0\n\n        Demonstrating the preference of the passed in dataframe.\n\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1],}, index=[1, 2])\n        >>> df2.combine(df1, take_smaller)\n           A    B   C\n        0  0.0  NaN NaN\n        1  0.0  3.0 NaN\n        2  NaN  3.0 NaN\n\n        >>> df2.combine(df1, take_smaller, overwrite=False)\n             A    B   C\n        0  0.0  NaN NaN\n        1  0.0  3.0 1.0\n        2  NaN  3.0 1.0\n\n        See Also\n        --------\n        DataFrame.combine_first : Combine two DataFrame objects and default to\n            non-null values in frame calling the method\n        \"\"\"\n        other_idxlen = len(other.index)\n        this, other = self.align(other, copy=False)\n        new_index = this.index\n        if other.empty and len(new_index) == len(self.index):\n            return self.copy()\n        if self.empty and len(other) == other_idxlen:\n            return other.copy()\n        new_columns = this.columns.union(other.columns)\n        do_fill = fill_value is not None\n        result = {}\n        for col in new_columns:\n            series = this[col]\n            otherSeries = other[col]\n            this_dtype = series.dtype\n            other_dtype = otherSeries.dtype\n            this_mask = isna(series)\n            other_mask = isna(otherSeries)\n            if not overwrite and other_mask.all():\n                result[col] = this[col].copy()\n                continue\n            if do_fill:\n                series = series.copy()\n                otherSeries = otherSeries.copy()\n                series[this_mask] = fill_value\n                otherSeries[other_mask] = fill_value\n            new_dtype = this_dtype\n            if not is_dtype_equal(this_dtype, other_dtype):\n                new_dtype = find_common_type([this_dtype, other_dtype])\n                if not is_dtype_equal(this_dtype, new_dtype):\n                    series = series.astype(new_dtype)\n                if not is_dtype_equal(other_dtype, new_dtype):\n                    otherSeries = otherSeries.astype(new_dtype)\n            needs_i8_conversion_i = needs_i8_conversion(new_dtype)\n            if needs_i8_conversion_i:\n                arr = func(series, otherSeries, True)\n            else:\n                arr = func(series, otherSeries)\n            arr = maybe_downcast_to_dtype(arr, this_dtype)\n            result[col] = arr\n        return self._constructor(result, index=new_index, columns=new_columns\n            )._convert(datetime=True, copy=False)\n\n    def combine_first(self, other):\n        \"\"\"\n        Update null elements with value in the same location in `other`.\n\n        Combine two DataFrame objects by filling null values in one DataFrame\n        with non-null values from other DataFrame. The row and column indexes\n        of the resulting DataFrame will be the union of the two.\n\n        Parameters\n        ----------\n        other : DataFrame\n            Provided DataFrame to use to fill null values.\n\n        Returns\n        -------\n        combined : DataFrame\n\n        Examples\n        --------\n\n        >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine_first(df2)\n             A    B\n        0  1.0  3.0\n        1  0.0  4.0\n\n        Null values still persist if the location of that null value\n        does not exist in `other`\n\n        >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])\n        >>> df1.combine_first(df2)\n             A    B    C\n        0  NaN  4.0  NaN\n        1  0.0  3.0  1.0\n        2  NaN  3.0  1.0\n\n        See Also\n        --------\n        DataFrame.combine : Perform series-wise operation on two DataFrames\n            using a given function\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n\n        def combiner(x, y, needs_i8_conversion=False):\n            x_values = x.values if hasattr(x, 'values') else x\n            y_values = y.values if hasattr(y, 'values') else y\n            if needs_i8_conversion:\n                mask = isna(x)\n                x_values = x_values.view('i8')\n                y_values = y_values.view('i8')\n            else:\n                mask = isna(x_values)\n            return expressions.where(mask, y_values, x_values)\n        return self.combine(other, combiner, overwrite=False)\n\n    def update(self, other, join='left', overwrite=True, filter_func=None,\n        raise_conflict=False):\n        \"\"\"\n        Modify in place using non-NA values from another DataFrame.\n\n        Aligns on indices. There is no return value.\n\n        Parameters\n        ----------\n        other : DataFrame, or object coercible into a DataFrame\n            Should have at least one matching index/column label\n            with the original DataFrame. If a Series is passed,\n            its name attribute must be set, and that will be\n            used as the column name to align with the original DataFrame.\n        join : {'left'}, default 'left'\n            Only left join is implemented, keeping the index and columns of the\n            original object.\n        overwrite : bool, default True\n            How to handle non-NA values for overlapping keys:\n\n            * True: overwrite original DataFrame's values\n              with values from `other`.\n            * False: only update values that are NA in\n              the original DataFrame.\n\n        filter_func : callable(1d-array) -> boolean 1d-array, optional\n            Can choose to replace values other than NA. Return True for values\n            that should be updated.\n        raise_conflict : bool, default False\n            If True, will raise a ValueError if the DataFrame and `other`\n            both contain non-NA data in the same place.\n\n        Raises\n        ------\n        ValueError\n            When `raise_conflict` is True and there's overlapping non-NA data.\n\n        See Also\n        --------\n        dict.update : Similar method for dictionaries.\n        DataFrame.merge : For column(s)-on-columns(s) operations.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, 5, 6],\n        ...                        'C': [7, 8, 9]})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        The DataFrame's length does not increase as a result of the update,\n        only values at matching index/column labels are updated.\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  d\n        1  b  e\n        2  c  f\n\n        For Series, it's name attribute must be set.\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n        >>> df.update(new_column)\n        >>> df\n           A  B\n        0  a  d\n        1  b  y\n        2  c  e\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  x\n        1  b  d\n        2  c  e\n\n        If `other` contains NaNs the corresponding values are not updated\n        in the original dataframe.\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n        >>> df.update(new_df)\n        >>> df\n           A      B\n        0  1    4.0\n        1  2  500.0\n        2  3    6.0\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n        if join != 'left':\n            raise NotImplementedError('Only left join is supported')\n        if not isinstance(other, DataFrame):\n            other = DataFrame(other)\n        other = other.reindex_like(self)\n        for col in self.columns:\n            this = self[col].values\n            that = other[col].values\n            if filter_func is not None:\n                with np.errstate(all='ignore'):\n                    mask = ~filter_func(this) | isna(that)\n            else:\n                if raise_conflict:\n                    mask_this = notna(that)\n                    mask_that = notna(this)\n                    if any(mask_this & mask_that):\n                        raise ValueError('Data overlaps.')\n                if overwrite:\n                    mask = isna(that)\n                else:\n                    mask = notna(this)\n            if mask.all():\n                continue\n            self[col] = expressions.where(mask, this, that)\n    _shared_docs['pivot'] = \"\"\"\n        Return reshaped DataFrame organized by given index / column values.\n\n        Reshape data (produce a \"pivot\" table) based on column values. Uses\n        unique values from specified `index` / `columns` to form axes of the\n        resulting DataFrame. This function does not support data\n        aggregation, multiple values will result in a MultiIndex in the\n        columns. See the :ref:`User Guide <reshaping>` for more on reshaping.\n\n        Parameters\n        ----------%s\n        index : string or object, optional\n            Column to use to make new frame's index. If None, uses\n            existing index.\n        columns : string or object\n            Column to use to make new frame's columns.\n        values : string, object or a list of the previous, optional\n            Column(s) to use for populating new frame's values. If not\n            specified, all remaining columns will be used and the result will\n            have hierarchically indexed columns.\n\n            .. versionchanged :: 0.23.0\n               Also accept list of column names.\n\n        Returns\n        -------\n        DataFrame\n            Returns reshaped DataFrame.\n\n        Raises\n        ------\n        ValueError:\n            When there are any `index`, `columns` combinations with multiple\n            values. `DataFrame.pivot_table` when you need to aggregate.\n\n        See Also\n        --------\n        DataFrame.pivot_table : generalization of pivot that can handle\n            duplicate values for one index/column pair.\n        DataFrame.unstack : pivot based on the index values instead of a\n            column.\n\n        Notes\n        -----\n        For finer-tuned control, see hierarchical indexing documentation along\n        with the related stack/unstack methods.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',\n        ...                            'two'],\n        ...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n        ...                    'baz': [1, 2, 3, 4, 5, 6],\n        ...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n        >>> df\n            foo   bar  baz  zoo\n        0   one   A    1    x\n        1   one   B    2    y\n        2   one   C    3    z\n        3   two   A    4    q\n        4   two   B    5    w\n        5   two   C    6    t\n\n        >>> df.pivot(index='foo', columns='bar', values='baz')\n        bar  A   B   C\n        foo\n        one  1   2   3\n        two  4   5   6\n\n        >>> df.pivot(index='foo', columns='bar')['baz']\n        bar  A   B   C\n        foo\n        one  1   2   3\n        two  4   5   6\n\n        >>> df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])\n              baz       zoo\n        bar   A  B  C   A  B  C\n        foo\n        one   1  2  3   x  y  z\n        two   4  5  6   q  w  t\n\n        A ValueError is raised if there are any duplicates.\n\n        >>> df = pd.DataFrame({\"foo\": ['one', 'one', 'two', 'two'],\n        ...                    \"bar\": ['A', 'A', 'B', 'C'],\n        ...                    \"baz\": [1, 2, 3, 4]})\n        >>> df\n           foo bar  baz\n        0  one   A    1\n        1  one   A    2\n        2  two   B    3\n        3  two   C    4\n\n        Notice that the first two rows are the same for our `index`\n        and `columns` arguments.\n\n        >>> df.pivot(index='foo', columns='bar', values='baz')\n        Traceback (most recent call last):\n           ...\n        ValueError: Index contains duplicate entries, cannot reshape\n        \"\"\"\n\n    @Substitution('')\n    @Appender(_shared_docs['pivot'])\n    def pivot(self, index=None, columns=None, values=None):\n        from pandas.core.reshape.pivot import pivot\n        return pivot(self, index=index, columns=columns, values=values)\n    _shared_docs['pivot_table'] = \"\"\"\n        Create a spreadsheet-style pivot table as a DataFrame. The levels in\n        the pivot table will be stored in MultiIndex objects (hierarchical\n        indexes) on the index and columns of the result DataFrame\n\n        Parameters\n        ----------%s\n        values : column to aggregate, optional\n        index : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table index.  If an array is passed,\n            it is being used as the same manner as column values.\n        columns : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table column.  If an array is passed,\n            it is being used as the same manner as column values.\n        aggfunc : function, list of functions, dict, default numpy.mean\n            If list of functions passed, the resulting pivot table will have\n            hierarchical columns whose top level are the function names\n            (inferred from the function objects themselves)\n            If dict is passed, the key is column to aggregate and value\n            is function or list of functions\n        fill_value : scalar, default None\n            Value to replace missing values with\n        margins : boolean, default False\n            Add all row / columns (e.g. for subtotal / grand totals)\n        dropna : boolean, default True\n            Do not include columns whose entries are all NaN\n        margins_name : string, default 'All'\n            Name of the row / column that will contain the totals\n            when margins is True.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n        ...                          \"bar\", \"bar\", \"bar\", \"bar\"],\n        ...                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n        ...                          \"one\", \"one\", \"two\", \"two\"],\n        ...                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n        ...                          \"small\", \"large\", \"small\", \"small\",\n        ...                          \"large\"],\n        ...                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7]})\n        >>> df\n             A    B      C  D\n        0  foo  one  small  1\n        1  foo  one  large  2\n        2  foo  one  large  2\n        3  foo  two  small  3\n        4  foo  two  small  3\n        5  bar  one  large  4\n        6  bar  one  small  5\n        7  bar  two  small  6\n        8  bar  two  large  7\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum)\n        >>> table\n        C        large  small\n        A   B\n        bar one    4.0    5.0\n            two    7.0    6.0\n        foo one    4.0    1.0\n            two    NaN    6.0\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum)\n        >>> table\n        C        large  small\n        A   B\n        bar one    4.0    5.0\n            two    7.0    6.0\n        foo one    4.0    1.0\n            two    NaN    6.0\n\n        >>> table = pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n        ...                     aggfunc={'D': np.mean,\n        ...                              'E': [min, max, np.mean]})\n        >>> table\n                          D   E\n                       mean max median min\n        A   C\n        bar large  5.500000  16   14.5  13\n            small  5.500000  15   14.5  14\n        foo large  2.000000  10    9.5   9\n            small  2.333333  12   11.0   8\n\n        Returns\n        -------\n        table : DataFrame\n\n        See also\n        --------\n        DataFrame.pivot : pivot without aggregation that can handle\n            non-numeric data\n        \"\"\"\n\n    @Substitution('')\n    @Appender(_shared_docs['pivot_table'])\n    def pivot_table(self, values=None, index=None, columns=None, aggfunc=\n        'mean', fill_value=None, margins=False, dropna=True, margins_name='All'\n        ):\n        from pandas.core.reshape.pivot import pivot_table\n        return pivot_table(self, values=values, index=index, columns=\n            columns, aggfunc=aggfunc, fill_value=fill_value, margins=\n            margins, dropna=dropna, margins_name=margins_name)\n\n    def stack(self, level=-1, dropna=True):\n        \"\"\"\n        Stack the prescribed level(s) from columns to index.\n\n        Return a reshaped DataFrame or Series having a multi-level\n        index with one or more new inner-most levels compared to the current\n        DataFrame. The new inner-most levels are created by pivoting the\n        columns of the current dataframe:\n\n          - if the columns have a single level, the output is a Series;\n          - if the columns have multiple levels, the new index\n            level(s) is (are) taken from the prescribed level(s) and\n            the output is a DataFrame.\n\n        The new index levels are sorted.\n\n        Parameters\n        ----------\n        level : int, str, list, default -1\n            Level(s) to stack from the column axis onto the index\n            axis, defined as one index or label, or a list of indices\n            or labels.\n        dropna : bool, default True\n            Whether to drop rows in the resulting Frame/Series with\n            missing values. Stacking a column level onto the index\n            axis can create combinations of index and column values\n            that are missing from the original dataframe. See Examples\n            section.\n\n        Returns\n        -------\n        DataFrame or Series\n            Stacked dataframe or series.\n\n        See Also\n        --------\n        DataFrame.unstack : Unstack prescribed level(s) from index axis\n             onto column axis.\n        DataFrame.pivot : Reshape dataframe from long format to wide\n             format.\n        DataFrame.pivot_table : Create a spreadsheet-style pivot table\n             as a DataFrame.\n\n        Notes\n        -----\n        The function is named by analogy with a collection of books\n        being re-organised from being side by side on a horizontal\n        position (the columns of the dataframe) to being stacked\n        vertically on top of of each other (in the index of the\n        dataframe).\n\n        Examples\n        --------\n        **Single level columns**\n\n        >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=['weight', 'height'])\n\n        Stacking a dataframe with a single level column axis returns a Series:\n\n        >>> df_single_level_cols\n             weight height\n        cat       0      1\n        dog       2      3\n        >>> df_single_level_cols.stack()\n        cat  weight    0\n             height    1\n        dog  weight    2\n             height    3\n        dtype: int64\n\n        **Multi level columns: simple case**\n\n        >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('weight', 'pounds')])\n        >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol1)\n\n        Stacking a dataframe with a multi-level column axis:\n\n        >>> df_multi_level_cols1\n             weight\n                 kg    pounds\n        cat       1        2\n        dog       2        4\n        >>> df_multi_level_cols1.stack()\n                    weight\n        cat kg           1\n            pounds       2\n        dog kg           2\n            pounds       4\n\n        **Missing values**\n\n        >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('height', 'm')])\n        >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        It is common to have missing values when stacking a dataframe\n        with multi-level columns, as the stacked dataframe typically\n        has more values than the original dataframe. Missing values\n        are filled with NaNs:\n\n        >>> df_multi_level_cols2\n            weight height\n                kg      m\n        cat    1.0    2.0\n        dog    3.0    4.0\n        >>> df_multi_level_cols2.stack()\n                height  weight\n        cat kg     NaN     1.0\n            m      2.0     NaN\n        dog kg     NaN     3.0\n            m      4.0     NaN\n\n        **Prescribing the level(s) to be stacked**\n\n        The first parameter controls which level or levels are stacked:\n\n        >>> df_multi_level_cols2.stack(0)\n                     kg    m\n        cat height  NaN  2.0\n            weight  1.0  NaN\n        dog height  NaN  4.0\n            weight  3.0  NaN\n        >>> df_multi_level_cols2.stack([0, 1])\n        cat  height  m     2.0\n             weight  kg    1.0\n        dog  height  m     4.0\n             weight  kg    3.0\n        dtype: float64\n\n        **Dropping missing values**\n\n        >>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        Note that rows where all values are missing are dropped by\n        default but this behaviour can be controlled via the dropna\n        keyword parameter:\n\n        >>> df_multi_level_cols3\n            weight height\n                kg      m\n        cat    NaN    1.0\n        dog    2.0    3.0\n        >>> df_multi_level_cols3.stack(dropna=False)\n                height  weight\n        cat kg     NaN     NaN\n            m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        >>> df_multi_level_cols3.stack(dropna=True)\n                height  weight\n        cat m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        \"\"\"\n        from pandas.core.reshape.reshape import stack, stack_multiple\n        if isinstance(level, (tuple, list)):\n            return stack_multiple(self, level, dropna=dropna)\n        else:\n            return stack(self, level, dropna=dropna)\n\n    def unstack(self, level=-1, fill_value=None):\n        \"\"\"\n        Pivot a level of the (necessarily hierarchical) index labels, returning\n        a DataFrame having a new level of column labels whose inner-most level\n        consists of the pivoted index labels. If the index is not a MultiIndex,\n        the output will be a Series (the analogue of stack when the columns are\n        not a MultiIndex).\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, string, or list of these, default -1 (last level)\n            Level(s) of index to unstack, can pass level name\n        fill_value : replace NaN with this value if the unstack produces\n            missing values\n\n            .. versionadded:: 0.18.0\n\n        See also\n        --------\n        DataFrame.pivot : Pivot a table based on column values.\n        DataFrame.stack : Pivot a level of the column labels (inverse operation\n            from `unstack`).\n\n        Examples\n        --------\n        >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n        ...                                    ('two', 'a'), ('two', 'b')])\n        >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n        >>> s\n        one  a   1.0\n             b   2.0\n        two  a   3.0\n             b   4.0\n        dtype: float64\n\n        >>> s.unstack(level=-1)\n             a   b\n        one  1.0  2.0\n        two  3.0  4.0\n\n        >>> s.unstack(level=0)\n           one  two\n        a  1.0   3.0\n        b  2.0   4.0\n\n        >>> df = s.unstack(level=0)\n        >>> df.unstack()\n        one  a  1.0\n             b  2.0\n        two  a  3.0\n             b  4.0\n        dtype: float64\n\n        Returns\n        -------\n        unstacked : DataFrame or Series\n        \"\"\"\n        from pandas.core.reshape.reshape import unstack\n        return unstack(self, level, fill_value)\n    _shared_docs['melt'] = \"\"\"\n    \"Unpivots\" a DataFrame from wide format to long format, optionally\n    leaving identifier variables set.\n\n    This function is useful to massage a DataFrame into a format where one\n    or more columns are identifier variables (`id_vars`), while all other\n    columns, considered measured variables (`value_vars`), are \"unpivoted\" to\n    the row axis, leaving just two non-identifier columns, 'variable' and\n    'value'.\n\n    %(versionadded)s\n    Parameters\n    ----------\n    frame : DataFrame\n    id_vars : tuple, list, or ndarray, optional\n        Column(s) to use as identifier variables.\n    value_vars : tuple, list, or ndarray, optional\n        Column(s) to unpivot. If not specified, uses all columns that\n        are not set as `id_vars`.\n    var_name : scalar\n        Name to use for the 'variable' column. If None it uses\n        ``frame.columns.name`` or 'variable'.\n    value_name : scalar, default 'value'\n        Name to use for the 'value' column.\n    col_level : int or string, optional\n        If columns are a MultiIndex then use this level to melt.\n\n    See also\n    --------\n    %(other)s\n    pivot_table\n    DataFrame.pivot\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},\n    ...                    'B': {0: 1, 1: 3, 2: 5},\n    ...                    'C': {0: 2, 1: 4, 2: 6}})\n    >>> df\n       A  B  C\n    0  a  1  2\n    1  b  3  4\n    2  c  5  6\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B', 'C'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n    3  a        C      2\n    4  b        C      4\n    5  c        C      6\n\n    The names of 'variable' and 'value' columns can be customized:\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B'],\n    ...         var_name='myVarname', value_name='myValname')\n       A myVarname  myValname\n    0  a         B          1\n    1  b         B          3\n    2  c         B          5\n\n    If you have multi-index columns:\n\n    >>> df.columns = [list('ABC'), list('DEF')]\n    >>> df\n       A  B  C\n       D  E  F\n    0  a  1  2\n    1  b  3  4\n    2  c  5  6\n\n    >>> %(caller)scol_level=0, id_vars=['A'], value_vars=['B'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n\n    >>> %(caller)sid_vars=[('A', 'D')], value_vars=[('B', 'E')])\n      (A, D) variable_0 variable_1  value\n    0      a          B          E      1\n    1      b          B          E      3\n    2      c          B          E      5\n\n    \"\"\"\n\n    @Appender(_shared_docs['melt'] % dict(caller='df.melt(', versionadded=\n        \"\"\".. versionadded:: 0.20.0\n\"\"\", other='melt'))\n    def melt(self, id_vars=None, value_vars=None, var_name=None, value_name\n        ='value', col_level=None):\n        from pandas.core.reshape.melt import melt\n        return melt(self, id_vars=id_vars, value_vars=value_vars, var_name=\n            var_name, value_name=value_name, col_level=col_level)\n\n    def diff(self, periods=1, axis=0):\n        \"\"\"\n        First discrete difference of element.\n\n        Calculates the difference of a DataFrame element compared with another\n        element in the DataFrame (default is the element in the same column\n        of the previous row).\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for calculating difference, accepts negative\n            values.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Take difference over rows (0) or columns (1).\n\n            .. versionadded:: 0.16.1.\n\n        Returns\n        -------\n        diffed : DataFrame\n\n        See Also\n        --------\n        Series.diff: First discrete difference for a Series.\n        DataFrame.pct_change: Percent change over given number of periods.\n        DataFrame.shift: Shift index by desired number of periods with an\n            optional time freq.\n\n        Examples\n        --------\n        Difference with previous row\n\n        >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n        ...                    'b': [1, 1, 2, 3, 5, 8],\n        ...                    'c': [1, 4, 9, 16, 25, 36]})\n        >>> df\n           a  b   c\n        0  1  1   1\n        1  2  1   4\n        2  3  2   9\n        3  4  3  16\n        4  5  5  25\n        5  6  8  36\n\n        >>> df.diff()\n             a    b     c\n        0  NaN  NaN   NaN\n        1  1.0  0.0   3.0\n        2  1.0  1.0   5.0\n        3  1.0  1.0   7.0\n        4  1.0  2.0   9.0\n        5  1.0  3.0  11.0\n\n        Difference with previous column\n\n        >>> df.diff(axis=1)\n            a    b     c\n        0 NaN  0.0   0.0\n        1 NaN -1.0   3.0\n        2 NaN -1.0   7.0\n        3 NaN -1.0  13.0\n        4 NaN  0.0  20.0\n        5 NaN  2.0  28.0\n\n        Difference with 3rd previous row\n\n        >>> df.diff(periods=3)\n             a    b     c\n        0  NaN  NaN   NaN\n        1  NaN  NaN   NaN\n        2  NaN  NaN   NaN\n        3  3.0  2.0  15.0\n        4  3.0  4.0  21.0\n        5  3.0  6.0  27.0\n\n        Difference with following row\n\n        >>> df.diff(periods=-1)\n             a    b     c\n        0 -1.0  0.0  -3.0\n        1 -1.0 -1.0  -5.0\n        2 -1.0 -1.0  -7.0\n        3 -1.0 -2.0  -9.0\n        4 -1.0 -3.0 -11.0\n        5  NaN  NaN   NaN\n        \"\"\"\n        bm_axis = self._get_block_manager_axis(axis)\n        new_data = self._data.diff(n=periods, axis=bm_axis)\n        return self._constructor(new_data)\n\n    def _gotitem(self, key, ndim, subset=None):\n        \"\"\"\n        sub-classes to define\n        return a sliced object\n\n        Parameters\n        ----------\n        key : string / list of selections\n        ndim : 1,2\n            requested ndim of result\n        subset : object, default None\n            subset to act on\n        \"\"\"\n        if subset is None:\n            subset = self\n        elif subset.ndim == 1:\n            return subset\n        return subset[key]\n    _agg_doc = dedent(\n        \"\"\"\n    The aggregation operations are always performed over an axis, either the\n    index (default) or the column axis. This behavior is different from\n    `numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n    `var`), where the default is to compute the aggregation of the flattened\n    array, e.g., ``numpy.mean(arr_2d)`` as opposed to ``numpy.mean(arr_2d,\n    axis=0)``.\n\n    `agg` is an alias for `aggregate`. Use the alias.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2, 3],\n    ...                    [4, 5, 6],\n    ...                    [7, 8, 9],\n    ...                    [np.nan, np.nan, np.nan]],\n    ...                   columns=['A', 'B', 'C'])\n\n    Aggregate these functions over the rows.\n\n    >>> df.agg(['sum', 'min'])\n            A     B     C\n    sum  12.0  15.0  18.0\n    min   1.0   2.0   3.0\n\n    Different aggregations per column.\n\n    >>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n            A    B\n    max   NaN  8.0\n    min   1.0  2.0\n    sum  12.0  NaN\n\n    Aggregate over the columns.\n\n    >>> df.agg(\"mean\", axis=\"columns\")\n    0    2.0\n    1    5.0\n    2    8.0\n    3    NaN\n    dtype: float64\n\n    See also\n    --------\n    DataFrame.apply : Perform any type of operations.\n    DataFrame.transform : Perform transformation type operations.\n    pandas.core.groupby.GroupBy : Perform operations over groups.\n    pandas.core.resample.Resampler : Perform operations over resampled bins.\n    pandas.core.window.Rolling : Perform operations over rolling window.\n    pandas.core.window.Expanding : Perform operations over expanding window.\n    pandas.core.window.EWM : Perform operation over exponential weighted\n        window.\n    \"\"\"\n        )\n\n    @Appender(_agg_doc)\n    @Appender(_shared_docs['aggregate'] % dict(versionadded=\n        '.. versionadded:: 0.20.0', **_shared_doc_kwargs))\n    def aggregate(self, func, axis=0, *args, **kwargs):\n        axis = self._get_axis_number(axis)\n        result = None\n        try:\n            result, how = self._aggregate(func, *args, axis=axis, **kwargs)\n        except TypeError:\n            pass\n        if result is None:\n            return self.apply(func, axis=axis, args=args, **kwargs)\n        return result\n\n    def _aggregate(self, arg, axis=0, *args, **kwargs):\n        if axis == 1:\n            result, how = super(DataFrame, self.T)._aggregate(arg, *args,\n                **kwargs)\n            result = result.T if result is not None else result\n            return result, how\n        return super(DataFrame, self)._aggregate(arg, *args, **kwargs)\n    agg = aggregate\n\n    @Appender(_shared_docs['transform'] % _shared_doc_kwargs)\n    def transform(self, func, axis=0, *args, **kwargs):\n        axis = self._get_axis_number(axis)\n        if axis == 1:\n            return super(DataFrame, self.T).transform(func, *args, **kwargs).T\n        return super(DataFrame, self).transform(func, *args, **kwargs)\n\n    def apply(self, func, axis=0, broadcast=None, raw=False, reduce=None,\n        result_type=None, args=(), **kwds):\n        \"\"\"\n        Apply a function along an axis of the DataFrame.\n\n        Objects passed to the function are Series objects whose index is\n        either the DataFrame's index (``axis=0``) or the DataFrame's columns\n        (``axis=1``). By default (``result_type=None``), the final return type\n        is inferred from the return type of the applied function. Otherwise,\n        it depends on the `result_type` argument.\n\n        Parameters\n        ----------\n        func : function\n            Function to apply to each column or row.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis along which the function is applied:\n\n            * 0 or 'index': apply function to each column.\n            * 1 or 'columns': apply function to each row.\n        broadcast : bool, optional\n            Only relevant for aggregation functions:\n\n            * ``False`` or ``None`` : returns a Series whose length is the\n              length of the index or the number of columns (based on the\n              `axis` parameter)\n            * ``True`` : results will be broadcast to the original shape\n              of the frame, the original index and columns will be retained.\n\n            .. deprecated:: 0.23.0\n               This argument will be removed in a future version, replaced\n               by result_type='broadcast'.\n\n        raw : bool, default False\n            * ``False`` : passes each row or column as a Series to the\n              function.\n            * ``True`` : the passed function will receive ndarray objects\n              instead.\n              If you are just applying a NumPy reduction function this will\n              achieve much better performance.\n        reduce : bool or None, default None\n            Try to apply reduction procedures. If the DataFrame is empty,\n            `apply` will use `reduce` to determine whether the result\n            should be a Series or a DataFrame. If ``reduce=None`` (the\n            default), `apply`'s return value will be guessed by calling\n            `func` on an empty Series\n            (note: while guessing, exceptions raised by `func` will be\n            ignored).\n            If ``reduce=True`` a Series will always be returned, and if\n            ``reduce=False`` a DataFrame will always be returned.\n\n            .. deprecated:: 0.23.0\n               This argument will be removed in a future version, replaced\n               by ``result_type='reduce'``.\n\n        result_type : {'expand', 'reduce', 'broadcast', None}, default None\n            These only act when ``axis=1`` (columns):\n\n            * 'expand' : list-like results will be turned into columns.\n            * 'reduce' : returns a Series if possible rather than expanding\n              list-like results. This is the opposite of 'expand'.\n            * 'broadcast' : results will be broadcast to the original shape\n              of the DataFrame, the original index and columns will be\n              retained.\n\n            The default behaviour (None) depends on the return value of the\n            applied function: list-like results will be returned as a Series\n            of those. However if the apply function returns a Series these\n            are expanded to columns.\n\n            .. versionadded:: 0.23.0\n\n        args : tuple\n            Positional arguments to pass to `func` in addition to the\n            array/series.\n        **kwds\n            Additional keyword arguments to pass as keywords arguments to\n            `func`.\n\n        Notes\n        -----\n        In the current implementation apply calls `func` twice on the\n        first column/row to decide whether it can take a fast or slow\n        code path. This can lead to unexpected behavior if `func` has\n        side-effects, as they will take effect twice for the first\n        column/row.\n\n        See also\n        --------\n        DataFrame.applymap: For elementwise operations\n        DataFrame.aggregate: only perform aggregating type operations\n        DataFrame.transform: only perform transforming type operations\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[4, 9],] * 3, columns=['A', 'B'])\n        >>> df\n           A  B\n        0  4  9\n        1  4  9\n        2  4  9\n\n        Using a numpy universal function (in this case the same as\n        ``np.sqrt(df)``):\n\n        >>> df.apply(np.sqrt)\n             A    B\n        0  2.0  3.0\n        1  2.0  3.0\n        2  2.0  3.0\n\n        Using a reducing function on either axis\n\n        >>> df.apply(np.sum, axis=0)\n        A    12\n        B    27\n        dtype: int64\n\n        >>> df.apply(np.sum, axis=1)\n        0    13\n        1    13\n        2    13\n        dtype: int64\n\n        Retuning a list-like will result in a Series\n\n        >>> df.apply(lambda x: [1, 2], axis=1)\n        0    [1, 2]\n        1    [1, 2]\n        2    [1, 2]\n        dtype: object\n\n        Passing result_type='expand' will expand list-like results\n        to columns of a Dataframe\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n           0  1\n        0  1  2\n        1  1  2\n        2  1  2\n\n        Returning a Series inside the function is similar to passing\n        ``result_type='expand'``. The resulting column names\n        will be the Series index.\n\n        >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n           foo  bar\n        0    1    2\n        1    1    2\n        2    1    2\n\n        Passing ``result_type='broadcast'`` will ensure the same shape\n        result, whether list-like or scalar is returned by the function,\n        and broadcast it along the axis. The resulting column names will\n        be the originals.\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n           A  B\n        0  1  2\n        1  1  2\n        2  1  2\n\n        Returns\n        -------\n        applied : Series or DataFrame\n        \"\"\"\n        from pandas.core.apply import frame_apply\n        op = frame_apply(self, func=func, axis=axis, broadcast=broadcast,\n            raw=raw, reduce=reduce, result_type=result_type, args=args,\n            kwds=kwds)\n        return op.get_result()\n\n    def applymap(self, func):\n        \"\"\"\n        Apply a function to a Dataframe elementwise.\n\n        This method applies a function that accepts and returns a scalar\n        to every element of a DataFrame.\n\n        Parameters\n        ----------\n        func : callable\n            Python function, returns a single value from a single value.\n\n        Returns\n        -------\n        DataFrame\n            Transformed DataFrame.\n\n        See also\n        --------\n        DataFrame.apply : Apply a function along input axis of DataFrame\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n        >>> df\n               0      1\n        0  1.000  2.120\n        1  3.356  4.567\n\n        >>> df.applymap(lambda x: len(str(x)))\n           0  1\n        0  3  4\n        1  5  5\n\n        Note that a vectorized version of `func` often exists, which will\n        be much faster. You could square each number elementwise.\n\n        >>> df.applymap(lambda x: x**2)\n                   0          1\n        0   1.000000   4.494400\n        1  11.262736  20.857489\n\n        But it's better to avoid applymap in that case.\n\n        >>> df ** 2\n                   0          1\n        0   1.000000   4.494400\n        1  11.262736  20.857489\n        \"\"\"\n\n        def infer(x):\n            if x.empty:\n                return lib.map_infer(x, func)\n            return lib.map_infer(x.astype(object).values, func)\n        return self.apply(infer)\n\n    def append(self, other, ignore_index=False, verify_integrity=False,\n        sort=None):\n        \"\"\"\n        Append rows of `other` to the end of caller, returning a new object.\n\n        Columns in `other` that are not in the caller are added as new columns.\n\n        Parameters\n        ----------\n        other : DataFrame or Series/dict-like object, or list of these\n            The data to append.\n        ignore_index : boolean, default False\n            If True, do not use the index labels.\n        verify_integrity : boolean, default False\n            If True, raise ValueError on creating index with duplicates.\n        sort : boolean, default None\n            Sort columns if the columns of `self` and `other` are not aligned.\n            The default sorting is deprecated and will change to not-sorting\n            in a future version of pandas. Explicitly pass ``sort=True`` to\n            silence the warning and sort. Explicitly pass ``sort=False`` to\n            silence the warning and not sort.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        appended : DataFrame\n\n        Notes\n        -----\n        If a list of dict/series is passed and the keys are all contained in\n        the DataFrame's index, the order of the columns in the resulting\n        DataFrame will be unchanged.\n\n        Iteratively appending rows to a DataFrame can be more computationally\n        intensive than a single concatenate. A better solution is to append\n        those rows to a list and then concatenate the list with the original\n        DataFrame all at once.\n\n        See also\n        --------\n        pandas.concat : General function to concatenate DataFrame, Series\n            or Panel objects\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n        >>> df\n           A  B\n        0  1  2\n        1  3  4\n        >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n        >>> df.append(df2)\n           A  B\n        0  1  2\n        1  3  4\n        0  5  6\n        1  7  8\n\n        With `ignore_index` set to True:\n\n        >>> df.append(df2, ignore_index=True)\n           A  B\n        0  1  2\n        1  3  4\n        2  5  6\n        3  7  8\n\n        The following, while not recommended methods for generating DataFrames,\n        show two ways to generate a DataFrame from multiple data sources.\n\n        Less efficient:\n\n        >>> df = pd.DataFrame(columns=['A'])\n        >>> for i in range(5):\n        ...     df = df.append({'A': i}, ignore_index=True)\n        >>> df\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n\n        More efficient:\n\n        >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n        ...           ignore_index=True)\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n        \"\"\"\n        if isinstance(other, (Series, dict)):\n            if isinstance(other, dict):\n                other = Series(other)\n            if other.name is None and not ignore_index:\n                raise TypeError(\n                    'Can only append a Series if ignore_index=True or if the Series has a name'\n                    )\n            if other.name is None:\n                index = None\n            else:\n                index = Index([other.name], name=self.index.name)\n            idx_diff = other.index.difference(self.columns)\n            try:\n                combined_columns = self.columns.append(idx_diff)\n            except TypeError:\n                combined_columns = self.columns.astype(object).append(idx_diff)\n            other = other.reindex(combined_columns, copy=False)\n            other = DataFrame(other.values.reshape((1, len(other))), index=\n                index, columns=combined_columns)\n            other = other._convert(datetime=True, timedelta=True)\n            if not self.columns.equals(combined_columns):\n                self = self.reindex(columns=combined_columns)\n        elif isinstance(other, list) and not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.loc[:, self.columns]\n        from pandas.core.reshape.concat import concat\n        if isinstance(other, (list, tuple)):\n            to_concat = [self] + other\n        else:\n            to_concat = [self, other]\n        return concat(to_concat, ignore_index=ignore_index,\n            verify_integrity=verify_integrity, sort=sort)\n\n    def join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort\n        =False):\n        \"\"\"\n        Join columns with other DataFrame either on index or on a key\n        column. Efficiently Join multiple DataFrame objects by index at once by\n        passing a list.\n\n        Parameters\n        ----------\n        other : DataFrame, Series with name field set, or list of DataFrame\n            Index should be similar to one of the columns in this one. If a\n            Series is passed, its name attribute must be set, and that will be\n            used as the column name in the resulting joined DataFrame\n        on : name, tuple/list of names, or array-like\n            Column or index level name(s) in the caller to join on the index\n            in `other`, otherwise joins index-on-index. If multiple\n            values given, the `other` DataFrame must have a MultiIndex. Can\n            pass an array as the join key if it is not already contained in\n            the calling DataFrame. Like an Excel VLOOKUP operation\n        how : {'left', 'right', 'outer', 'inner'}, default: 'left'\n            How to handle the operation of the two objects.\n\n            * left: use calling frame's index (or column if on is specified)\n            * right: use other frame's index\n            * outer: form union of calling frame's index (or column if on is\n              specified) with other frame's index, and sort it\n              lexicographically\n            * inner: form intersection of calling frame's index (or column if\n              on is specified) with other frame's index, preserving the order\n              of the calling's one\n        lsuffix : string\n            Suffix to use from left frame's overlapping columns\n        rsuffix : string\n            Suffix to use from right frame's overlapping columns\n        sort : boolean, default False\n            Order result DataFrame lexicographically by the join key. If False,\n            the order of the join key depends on the join type (how keyword)\n\n        Notes\n        -----\n        on, lsuffix, and rsuffix options are not supported when passing a list\n        of DataFrame objects\n\n        Support for specifying index levels as the `on` parameter was added\n        in version 0.23.0\n\n        Examples\n        --------\n        >>> caller = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n        ...                        'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n        >>> caller\n            A key\n        0  A0  K0\n        1  A1  K1\n        2  A2  K2\n        3  A3  K3\n        4  A4  K4\n        5  A5  K5\n\n        >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n        ...                       'B': ['B0', 'B1', 'B2']})\n\n        >>> other\n            B key\n        0  B0  K0\n        1  B1  K1\n        2  B2  K2\n\n        Join DataFrames using their indexes.\n\n        >>> caller.join(other, lsuffix='_caller', rsuffix='_other')\n\n        >>>     A key_caller    B key_other\n            0  A0         K0   B0        K0\n            1  A1         K1   B1        K1\n            2  A2         K2   B2        K2\n            3  A3         K3  NaN       NaN\n            4  A4         K4  NaN       NaN\n            5  A5         K5  NaN       NaN\n\n\n        If we want to join using the key columns, we need to set key to be\n        the index in both caller and other. The joined DataFrame will have\n        key as its index.\n\n        >>> caller.set_index('key').join(other.set_index('key'))\n\n        >>>      A    B\n            key\n            K0   A0   B0\n            K1   A1   B1\n            K2   A2   B2\n            K3   A3  NaN\n            K4   A4  NaN\n            K5   A5  NaN\n\n        Another option to join using the key columns is to use the on\n        parameter. DataFrame.join always uses other's index but we can use any\n        column in the caller. This method preserves the original caller's\n        index in the result.\n\n        >>> caller.join(other.set_index('key'), on='key')\n\n        >>>     A key    B\n            0  A0  K0   B0\n            1  A1  K1   B1\n            2  A2  K2   B2\n            3  A3  K3  NaN\n            4  A4  K4  NaN\n            5  A5  K5  NaN\n\n\n        See also\n        --------\n        DataFrame.merge : For column(s)-on-columns(s) operations\n\n        Returns\n        -------\n        joined : DataFrame\n        \"\"\"\n        return self._join_compat(other, on=on, how=how, lsuffix=lsuffix,\n            rsuffix=rsuffix, sort=sort)\n\n    def _join_compat(self, other, on=None, how='left', lsuffix='', rsuffix=\n        '', sort=False):\n        from pandas.core.reshape.merge import merge\n        from pandas.core.reshape.concat import concat\n        if isinstance(other, Series):\n            if other.name is None:\n                raise ValueError('Other Series must have a name')\n            other = DataFrame({other.name: other})\n        if isinstance(other, DataFrame):\n            return merge(self, other, left_on=on, how=how, left_index=on is\n                None, right_index=True, suffixes=(lsuffix, rsuffix), sort=sort)\n        else:\n            if on is not None:\n                raise ValueError(\n                    'Joining multiple DataFrames only supported for joining on index'\n                    )\n            frames = [self] + list(other)\n            can_concat = all(df.index.is_unique for df in frames)\n            if can_concat:\n                if how == 'left':\n                    how = 'outer'\n                    join_axes = [self.index]\n                else:\n                    join_axes = None\n                return concat(frames, axis=1, join=how, join_axes=join_axes,\n                    verify_integrity=True)\n            joined = frames[0]\n            for frame in frames[1:]:\n                joined = merge(joined, frame, how=how, left_index=True,\n                    right_index=True)\n            return joined\n\n    @Substitution('')\n    @Appender(_merge_doc, indents=2)\n    def merge(self, right, how='inner', on=None, left_on=None, right_on=\n        None, left_index=False, right_index=False, sort=False, suffixes=(\n        '_x', '_y'), copy=True, indicator=False, validate=None):\n        from pandas.core.reshape.merge import merge\n        return merge(self, right, how=how, on=on, left_on=left_on, right_on\n            =right_on, left_index=left_index, right_index=right_index, sort\n            =sort, suffixes=suffixes, copy=copy, indicator=indicator,\n            validate=validate)\n\n    def round(self, decimals=0, *args, **kwargs):\n        \"\"\"\n        Round a DataFrame to a variable number of decimal places.\n\n        Parameters\n        ----------\n        decimals : int, dict, Series\n            Number of decimal places to round each column to. If an int is\n            given, round each column to the same number of places.\n            Otherwise dict and Series round to variable numbers of places.\n            Column names should be in the keys if `decimals` is a\n            dict-like, or in the index if `decimals` is a Series. Any\n            columns not included in `decimals` will be left as is. Elements\n            of `decimals` which are not columns of the input will be\n            ignored.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.random.random([3, 3]),\n        ...     columns=['A', 'B', 'C'], index=['first', 'second', 'third'])\n        >>> df\n                       A         B         C\n        first   0.028208  0.992815  0.173891\n        second  0.038683  0.645646  0.577595\n        third   0.877076  0.149370  0.491027\n        >>> df.round(2)\n                   A     B     C\n        first   0.03  0.99  0.17\n        second  0.04  0.65  0.58\n        third   0.88  0.15  0.49\n        >>> df.round({'A': 1, 'C': 2})\n                  A         B     C\n        first   0.0  0.992815  0.17\n        second  0.0  0.645646  0.58\n        third   0.9  0.149370  0.49\n        >>> decimals = pd.Series([1, 0, 2], index=['A', 'B', 'C'])\n        >>> df.round(decimals)\n                  A  B     C\n        first   0.0  1  0.17\n        second  0.0  1  0.58\n        third   0.9  0  0.49\n\n        Returns\n        -------\n        DataFrame object\n\n        See Also\n        --------\n        numpy.around\n        Series.round\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n\n        def _dict_round(df, decimals):\n            for col, vals in df.iteritems():\n                try:\n                    yield _series_round(vals, decimals[col])\n                except KeyError:\n                    yield vals\n\n        def _series_round(s, decimals):\n            if is_integer_dtype(s) or is_float_dtype(s):\n                return s.round(decimals)\n            return s\n        nv.validate_round(args, kwargs)\n        if isinstance(decimals, (dict, Series)):\n            if isinstance(decimals, Series):\n                if not decimals.index.is_unique:\n                    raise ValueError('Index of decimals must be unique')\n            new_cols = [col for col in _dict_round(self, decimals)]\n        elif is_integer(decimals):\n            new_cols = [_series_round(v, decimals) for _, v in self.iteritems()\n                ]\n        else:\n            raise TypeError(\n                'decimals must be an integer, a dict-like or a Series')\n        if len(new_cols) > 0:\n            return self._constructor(concat(new_cols, axis=1), index=self.\n                index, columns=self.columns)\n        else:\n            return self\n\n    def corr(self, method='pearson', min_periods=1):\n        \"\"\"\n        Compute pairwise correlation of columns, excluding NA/null values\n\n        Parameters\n        ----------\n        method : {'pearson', 'kendall', 'spearman'}\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result. Currently only available for pearson\n            and spearman correlation\n\n        Returns\n        -------\n        y : DataFrame\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.values\n        if method == 'pearson':\n            correl = libalgos.nancorr(ensure_float64(mat), minp=min_periods)\n        elif method == 'spearman':\n            correl = libalgos.nancorr_spearman(ensure_float64(mat), minp=\n                min_periods)\n        else:\n            if min_periods is None:\n                min_periods = 1\n            mat = ensure_float64(mat).T\n            corrf = nanops.get_corr_func(method)\n            K = len(cols)\n            correl = np.empty((K, K), dtype=float)\n            mask = np.isfinite(mat)\n            for i, ac in enumerate(mat):\n                for j, bc in enumerate(mat):\n                    if i > j:\n                        continue\n                    valid = mask[i] & mask[j]\n                    if valid.sum() < min_periods:\n                        c = np.nan\n                    elif i == j:\n                        c = 1.0\n                    elif not valid.all():\n                        c = corrf(ac[valid], bc[valid])\n                    else:\n                        c = corrf(ac, bc)\n                    correl[i, j] = c\n                    correl[j, i] = c\n        return self._constructor(correl, index=idx, columns=cols)\n\n    def cov(self, min_periods=None):\n        \"\"\"\n        Compute pairwise covariance of columns, excluding NA/null values.\n\n        Compute the pairwise covariance among the series of a DataFrame.\n        The returned data frame is the `covariance matrix\n        <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\n        of the DataFrame.\n\n        Both NA and null values are automatically excluded from the\n        calculation. (See the note below about bias from missing values.)\n        A threshold can be set for the minimum number of\n        observations for each value created. Comparisons with observations\n        below this threshold will be returned as ``NaN``.\n\n        This method is generally used for the analysis of time series data to\n        understand the relationship between different measures\n        across time.\n\n        Parameters\n        ----------\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result.\n\n        Returns\n        -------\n        DataFrame\n            The covariance matrix of the series of the DataFrame.\n\n        See Also\n        --------\n        pandas.Series.cov : compute covariance with another Series\n        pandas.core.window.EWM.cov: exponential weighted sample covariance\n        pandas.core.window.Expanding.cov : expanding sample covariance\n        pandas.core.window.Rolling.cov : rolling sample covariance\n\n        Notes\n        -----\n        Returns the covariance matrix of the DataFrame's time series.\n        The covariance is normalized by N-1.\n\n        For DataFrames that have Series that are missing data (assuming that\n        data is `missing at random\n        <https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\n        the returned covariance matrix will be an unbiased estimate\n        of the variance and covariance between the member Series.\n\n        However, for many applications this estimate may not be acceptable\n        because the estimate covariance matrix is not guaranteed to be positive\n        semi-definite. This could lead to estimate correlations having\n        absolute values which are greater than one, and/or a non-invertible\n        covariance matrix. See `Estimation of covariance matrices\n        <http://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\n        matrices>`__ for more details.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n        ...                   columns=['dogs', 'cats'])\n        >>> df.cov()\n                  dogs      cats\n        dogs  0.666667 -1.000000\n        cats -1.000000  1.666667\n\n        >>> np.random.seed(42)\n        >>> df = pd.DataFrame(np.random.randn(1000, 5),\n        ...                   columns=['a', 'b', 'c', 'd', 'e'])\n        >>> df.cov()\n                  a         b         c         d         e\n        a  0.998438 -0.020161  0.059277 -0.008943  0.014144\n        b -0.020161  1.059352 -0.008543 -0.024738  0.009826\n        c  0.059277 -0.008543  1.010670 -0.001486 -0.000271\n        d -0.008943 -0.024738 -0.001486  0.921297 -0.013692\n        e  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n        **Minimum number of periods**\n\n        This method also supports an optional ``min_periods`` keyword\n        that specifies the required minimum number of non-NA observations for\n        each column pair in order to have a valid result:\n\n        >>> np.random.seed(42)\n        >>> df = pd.DataFrame(np.random.randn(20, 3),\n        ...                   columns=['a', 'b', 'c'])\n        >>> df.loc[df.index[:5], 'a'] = np.nan\n        >>> df.loc[df.index[5:10], 'b'] = np.nan\n        >>> df.cov(min_periods=12)\n                  a         b         c\n        a  0.316741       NaN -0.150812\n        b       NaN  1.248003  0.191417\n        c -0.150812  0.191417  0.895202\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.values\n        if notna(mat).all():\n            if min_periods is not None and min_periods > len(mat):\n                baseCov = np.empty((mat.shape[1], mat.shape[1]))\n                baseCov.fill(np.nan)\n            else:\n                baseCov = np.cov(mat.T)\n            baseCov = baseCov.reshape((len(cols), len(cols)))\n        else:\n            baseCov = libalgos.nancorr(ensure_float64(mat), cov=True, minp=\n                min_periods)\n        return self._constructor(baseCov, index=idx, columns=cols)\n\n    def corrwith(self, other, axis=0, drop=False):\n        \"\"\"\n        Compute pairwise correlation between rows or columns of two DataFrame\n        objects.\n\n        Parameters\n        ----------\n        other : DataFrame, Series\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' to compute column-wise, 1 or 'columns' for row-wise\n        drop : boolean, default False\n            Drop missing indices from result, default returns union of all\n\n        Returns\n        -------\n        correls : Series\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        this = self._get_numeric_data()\n        if isinstance(other, Series):\n            return this.apply(other.corr, axis=axis)\n        other = other._get_numeric_data()\n        left, right = this.align(other, join='inner', copy=False)\n        left = left + right * 0\n        right = right + left * 0\n        if axis == 1:\n            left = left.T\n            right = right.T\n        ldem = left - left.mean()\n        rdem = right - right.mean()\n        num = (ldem * rdem).sum()\n        dom = (left.count() - 1) * left.std() * right.std()\n        correl = num / dom\n        if not drop:\n            raxis = 1 if axis == 0 else 0\n            result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n            correl = correl.reindex(result_index)\n        return correl\n\n    def count(self, axis=0, level=None, numeric_only=False):\n        \"\"\"\n        Count non-NA cells for each column or row.\n\n        The values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\n        on `pandas.options.mode.use_inf_as_na`) are considered NA.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            If 0 or 'index' counts are generated for each column.\n            If 1 or 'columns' counts are generated for each **row**.\n        level : int or str, optional\n            If the axis is a `MultiIndex` (hierarchical), count along a\n            particular `level`, collapsing into a `DataFrame`.\n            A `str` specifies the level name.\n        numeric_only : boolean, default False\n            Include only `float`, `int` or `boolean` data.\n\n        Returns\n        -------\n        Series or DataFrame\n            For each column/row the number of non-NA/null entries.\n            If `level` is specified returns a `DataFrame`.\n\n        See Also\n        --------\n        Series.count: number of non-NA elements in a Series\n        DataFrame.shape: number of DataFrame rows and columns (including NA\n            elements)\n        DataFrame.isna: boolean same-sized DataFrame showing places of NA\n            elements\n\n        Examples\n        --------\n        Constructing DataFrame from a dictionary:\n\n        >>> df = pd.DataFrame({\"Person\":\n        ...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n        ...                    \"Age\": [24., np.nan, 21., 33, 26],\n        ...                    \"Single\": [False, True, True, True, False]})\n        >>> df\n           Person   Age  Single\n        0    John  24.0   False\n        1    Myla   NaN    True\n        2   Lewis  21.0    True\n        3    John  33.0    True\n        4    Myla  26.0   False\n\n        Notice the uncounted NA values:\n\n        >>> df.count()\n        Person    5\n        Age       4\n        Single    5\n        dtype: int64\n\n        Counts for each **row**:\n\n        >>> df.count(axis='columns')\n        0    3\n        1    2\n        2    3\n        3    3\n        4    3\n        dtype: int64\n\n        Counts for one level of a `MultiIndex`:\n\n        >>> df.set_index([\"Person\", \"Single\"]).count(level=\"Person\")\n                Age\n        Person\n        John      2\n        Lewis     1\n        Myla      1\n\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if level is not None:\n            return self._count_level(level, axis=axis, numeric_only=\n                numeric_only)\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n        if len(frame._get_axis(axis)) == 0:\n            result = Series(0, index=frame._get_agg_axis(axis))\n        elif frame._is_mixed_type or frame._data.any_extension_types:\n            result = notna(frame).sum(axis=axis)\n        else:\n            series_counts = notna(frame).sum(axis=axis)\n            counts = series_counts.values\n            result = Series(counts, index=frame._get_agg_axis(axis))\n        return result.astype('int64')\n\n    def _count_level(self, level, axis=0, numeric_only=False):\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n        count_axis = frame._get_axis(axis)\n        agg_axis = frame._get_agg_axis(axis)\n        if not isinstance(count_axis, MultiIndex):\n            raise TypeError('Can only count levels on hierarchical {ax}.'.\n                format(ax=self._get_axis_name(axis)))\n        if frame._is_mixed_type:\n            mask = notna(frame).values\n        else:\n            mask = notna(frame.values)\n        if axis == 1:\n            mask = mask.T\n        if isinstance(level, compat.string_types):\n            level = count_axis._get_level_number(level)\n        level_index = count_axis.levels[level]\n        labels = ensure_int64(count_axis.labels[level])\n        counts = lib.count_level_2d(mask, labels, len(level_index), axis=0)\n        result = DataFrame(counts, index=level_index, columns=agg_axis)\n        if axis == 1:\n            return result.T\n        else:\n            return result\n\n    def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None,\n        filter_type=None, **kwds):\n        if axis is None and filter_type == 'bool':\n            labels = None\n            constructor = None\n        else:\n            axis = self._get_axis_number(axis)\n            labels = self._get_agg_axis(axis)\n            constructor = self._constructor\n\n        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)\n        if axis == 1 and self._is_mixed_type and self._is_datelike_mixed_type:\n            numeric_only = True\n        if numeric_only is None:\n            try:\n                values = self.values\n                result = f(values)\n                if filter_type == 'bool' and is_object_dtype(values\n                    ) and axis is None:\n                    result = np.bool_(result)\n            except Exception as e:\n                if filter_type is None and axis == 0:\n                    try:\n                        from pandas.core.apply import frame_apply\n                        opa = frame_apply(self, func=f, result_type=\n                            'expand', ignore_failures=True)\n                        result = opa.get_result()\n                        if result.ndim == self.ndim:\n                            result = result.iloc[0]\n                        return result\n                    except Exception:\n                        pass\n                if filter_type is None or filter_type == 'numeric':\n                    data = self._get_numeric_data()\n                elif filter_type == 'bool':\n                    data = self._get_bool_data()\n                else:\n                    e = NotImplementedError(\n                        'Handling exception with filter_type {f} notimplemented.'\n                        .format(f=filter_type))\n                    raise_with_traceback(e)\n                with np.errstate(all='ignore'):\n                    result = f(data.values)\n                labels = data._get_agg_axis(axis)\n        else:\n            if numeric_only:\n                if filter_type is None or filter_type == 'numeric':\n                    data = self._get_numeric_data()\n                elif filter_type == 'bool':\n                    data = self._get_bool_data()\n                else:\n                    msg = (\n                        'Generating numeric_only data with filter_type {f}not supported.'\n                        .format(f=filter_type))\n                    raise NotImplementedError(msg)\n                values = data.values\n                labels = data._get_agg_axis(axis)\n            else:\n                values = self.values\n            result = f(values)\n        if hasattr(result, 'dtype') and is_object_dtype(result.dtype):\n            try:\n                if filter_type is None or filter_type == 'numeric':\n                    result = result.astype(np.float64)\n                elif filter_type == 'bool' and notna(result).all():\n                    result = result.astype(np.bool_)\n            except (ValueError, TypeError):\n                if axis == 0:\n                    result = coerce_to_dtypes(result, self.dtypes)\n        if constructor is not None:\n            result = Series(result, index=labels)\n        return result\n\n    def nunique(self, axis=0, dropna=True):\n        \"\"\"\n        Return Series with number of distinct observations over requested\n        axis.\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n        dropna : boolean, default True\n            Don't include NaN in the counts.\n\n        Returns\n        -------\n        nunique : Series\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n        >>> df.nunique()\n        A    3\n        B    1\n\n        >>> df.nunique(axis=1)\n        0    1\n        1    2\n        2    2\n        \"\"\"\n        return self.apply(Series.nunique, axis=axis, dropna=dropna)\n\n    def idxmin(self, axis=0, skipna=True):\n        \"\"\"\n        Return index of first occurrence of minimum over requested axis.\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        skipna : boolean, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        Returns\n        -------\n        idxmin : Series\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmin``.\n\n        See Also\n        --------\n        Series.idxmin\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmin(self.values, axis=axis, skipna=skipna)\n        index = self._get_axis(axis)\n        result = [(index[i] if i >= 0 else np.nan) for i in indices]\n        return Series(result, index=self._get_agg_axis(axis))\n\n    def idxmax(self, axis=0, skipna=True):\n        \"\"\"\n        Return index of first occurrence of maximum over requested axis.\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        skipna : boolean, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        Returns\n        -------\n        idxmax : Series\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmax``.\n\n        See Also\n        --------\n        Series.idxmax\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmax(self.values, axis=axis, skipna=skipna)\n        index = self._get_axis(axis)\n        result = [(index[i] if i >= 0 else np.nan) for i in indices]\n        return Series(result, index=self._get_agg_axis(axis))\n\n    def _get_agg_axis(self, axis_num):\n        \"\"\" let's be explicit about this \"\"\"\n        if axis_num == 0:\n            return self.columns\n        elif axis_num == 1:\n            return self.index\n        else:\n            raise ValueError('Axis must be 0 or 1 (got %r)' % axis_num)\n\n    def mode(self, axis=0, numeric_only=False, dropna=True):\n        \"\"\"\n        Gets the mode(s) of each element along the axis selected. Adds a row\n        for each mode per label, fills in gaps with nan.\n\n        Note that there could be multiple values returned for the selected\n        axis (when more than one item share the maximum frequency), which is\n        the reason why a dataframe is returned. If you want to impute missing\n        values with the mode in a dataframe ``df``, you can just do this:\n        ``df.fillna(df.mode().iloc[0])``\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            * 0 or 'index' : get mode of each column\n            * 1 or 'columns' : get mode of each row\n        numeric_only : boolean, default False\n            if True, only apply to numeric columns\n        dropna : boolean, default True\n            Don't consider counts of NaN/NaT.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        modes : DataFrame (sorted)\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 1, 2, 1, 2, 3]})\n        >>> df.mode()\n           A\n        0  1\n        1  2\n        \"\"\"\n        data = self if not numeric_only else self._get_numeric_data()\n\n        def f(s):\n            return s.mode(dropna=dropna)\n        return data.apply(f, axis=axis)\n\n    def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear'\n        ):\n        \"\"\"\n        Return values at the given quantile over requested axis, a la\n        numpy.percentile.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            0 <= q <= 1, the quantile(s) to compute\n        axis : {0, 1, 'index', 'columns'} (default 0)\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        numeric_only : boolean, default True\n            If False, the quantile of datetime and timedelta data will be\n            computed as well\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            .. versionadded:: 0.18.0\n\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n            * linear: `i + (j - i) * fraction`, where `fraction` is the\n              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2.\n\n        Returns\n        -------\n        quantiles : Series or DataFrame\n\n            - If ``q`` is an array, a DataFrame will be returned where the\n              index is ``q``, the columns are the columns of self, and the\n              values are the quantiles.\n            - If ``q`` is a float, a Series will be returned where the\n              index is the columns of self and the values are the quantiles.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n                              columns=['a', 'b'])\n        >>> df.quantile(.1)\n        a    1.3\n        b    3.7\n        dtype: float64\n        >>> df.quantile([.1, .5])\n               a     b\n        0.1  1.3   3.7\n        0.5  2.5  55.0\n\n        Specifying `numeric_only=False` will also compute the quantile of\n        datetime and timedelta data.\n\n        >>> df = pd.DataFrame({'A': [1, 2],\n                               'B': [pd.Timestamp('2010'),\n                                     pd.Timestamp('2011')],\n                               'C': [pd.Timedelta('1 days'),\n                                     pd.Timedelta('2 days')]})\n        >>> df.quantile(0.5, numeric_only=False)\n        A                    1.5\n        B    2010-07-02 12:00:00\n        C        1 days 12:00:00\n        Name: 0.5, dtype: object\n\n        See Also\n        --------\n        pandas.core.window.Rolling.quantile\n        \"\"\"\n        self._check_percentile(q)\n        data = self._get_numeric_data() if numeric_only else self\n        axis = self._get_axis_number(axis)\n        is_transposed = axis == 1\n        if is_transposed:\n            data = data.T\n        result = data._data.quantile(qs=q, axis=1, interpolation=\n            interpolation, transposed=is_transposed)\n        if result.ndim == 2:\n            result = self._constructor(result)\n        else:\n            result = self._constructor_sliced(result, name=q)\n        if is_transposed:\n            result = result.T\n        return result\n\n    def to_timestamp(self, freq=None, how='start', axis=0, copy=True):\n        \"\"\"\n        Cast to DatetimeIndex of timestamps, at *beginning* of period\n\n        Parameters\n        ----------\n        freq : string, default frequency of PeriodIndex\n            Desired frequency\n        how : {'s', 'e', 'start', 'end'}\n            Convention for converting period to timestamp; start of period\n            vs. end\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default)\n        copy : boolean, default True\n            If false then underlying input data is not copied\n\n        Returns\n        -------\n        df : DataFrame with DatetimeIndex\n        \"\"\"\n        new_data = self._data\n        if copy:\n            new_data = new_data.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            new_data.set_axis(1, self.index.to_timestamp(freq=freq, how=how))\n        elif axis == 1:\n            new_data.set_axis(0, self.columns.to_timestamp(freq=freq, how=how))\n        else:\n            raise AssertionError('Axis must be 0 or 1. Got {ax!s}'.format(\n                ax=axis))\n        return self._constructor(new_data)\n\n    def to_period(self, freq=None, axis=0, copy=True):\n        \"\"\"\n        Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n        frequency (inferred from index if not passed)\n\n        Parameters\n        ----------\n        freq : string, default\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default)\n        copy : boolean, default True\n            If False then underlying input data is not copied\n\n        Returns\n        -------\n        ts : TimeSeries with PeriodIndex\n        \"\"\"\n        new_data = self._data\n        if copy:\n            new_data = new_data.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            new_data.set_axis(1, self.index.to_period(freq=freq))\n        elif axis == 1:\n            new_data.set_axis(0, self.columns.to_period(freq=freq))\n        else:\n            raise AssertionError('Axis must be 0 or 1. Got {ax!s}'.format(\n                ax=axis))\n        return self._constructor(new_data)\n\n    def isin(self, values):\n        \"\"\"\n        Return boolean DataFrame showing whether each element in the\n        DataFrame is contained in values.\n\n        Parameters\n        ----------\n        values : iterable, Series, DataFrame or dictionary\n            The result will only be true at a location if all the\n            labels match. If `values` is a Series, that's the index. If\n            `values` is a dictionary, the keys must be the column names,\n            which must match. If `values` is a DataFrame,\n            then both the index and column labels must match.\n\n        Returns\n        -------\n\n        DataFrame of booleans\n\n        Examples\n        --------\n        When ``values`` is a list:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})\n        >>> df.isin([1, 3, 12, 'a'])\n               A      B\n        0   True   True\n        1  False  False\n        2   True  False\n\n        When ``values`` is a dict:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 4, 7]})\n        >>> df.isin({'A': [1, 3], 'B': [4, 7, 12]})\n               A      B\n        0   True  False  # Note that B didn't match the 1 here.\n        1  False   True\n        2   True   True\n\n        When ``values`` is a Series or DataFrame:\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': ['a', 'b', 'f']})\n        >>> df2 = pd.DataFrame({'A': [1, 3, 3, 2], 'B': ['e', 'f', 'f', 'e']})\n        >>> df.isin(df2)\n               A      B\n        0   True  False\n        1  False  False  # Column A in `df2` has a 3, but not at index 1.\n        2   True   True\n        \"\"\"\n        if isinstance(values, dict):\n            from pandas.core.reshape.concat import concat\n            values = collections.defaultdict(list, values)\n            return concat((self.iloc[:, [i]].isin(values[col]) for i, col in\n                enumerate(self.columns)), axis=1)\n        elif isinstance(values, Series):\n            if not values.index.is_unique:\n                raise ValueError('cannot compute isin with a duplicate axis.')\n            return self.eq(values.reindex_like(self), axis='index')\n        elif isinstance(values, DataFrame):\n            if not (values.columns.is_unique and values.index.is_unique):\n                raise ValueError('cannot compute isin with a duplicate axis.')\n            return self.eq(values.reindex_like(self))\n        else:\n            if not is_list_like(values):\n                raise TypeError(\n                    'only list-like or dict-like objects are allowed to be passed to DataFrame.isin(), you passed a {0!r}'\n                    .format(type(values).__name__))\n            return DataFrame(algorithms.isin(self.values.ravel(), values).\n                reshape(self.shape), self.index, self.columns)\n    plot = CachedAccessor('plot', gfx.FramePlotMethods)\n    hist = gfx.hist_frame\n    boxplot = gfx.boxplot_frame\n",
                        "belong_class_name": "DataFrame",
                        "belong_class_init": "def __init__(self, data=None, index=None, columns=None, dtype=None, copy=False\n    ):\n    if data is None:\n        data = {}\n    if dtype is not None:\n        dtype = self._validate_dtype(dtype)\n    if isinstance(data, DataFrame):\n        data = data._data\n    if isinstance(data, BlockManager):\n        mgr = self._init_mgr(data, axes=dict(index=index, columns=columns),\n            dtype=dtype, copy=copy)\n    elif isinstance(data, dict):\n        mgr = self._init_dict(data, index, columns, dtype=dtype)\n    elif isinstance(data, ma.MaskedArray):\n        import numpy.ma.mrecords as mrecords\n        if isinstance(data, mrecords.MaskedRecords):\n            mgr = _masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n        else:\n            mask = ma.getmaskarray(data)\n            if mask.any():\n                data, fill_value = maybe_upcast(data, copy=True)\n                data[mask] = fill_value\n            else:\n                data = data.copy()\n            mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                copy=copy)\n    elif isinstance(data, (np.ndarray, Series, Index)):\n        if data.dtype.names:\n            data_columns = list(data.dtype.names)\n            data = {k: data[k] for k in data_columns}\n            if columns is None:\n                columns = data_columns\n            mgr = self._init_dict(data, index, columns, dtype=dtype)\n        elif getattr(data, 'name', None) is not None:\n            mgr = self._init_dict({data.name: data}, index, columns, dtype=\n                dtype)\n        else:\n            mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                copy=copy)\n    elif isinstance(data, collections.Iterable) and not isinstance(data,\n        string_and_binary_types):\n        if not isinstance(data, collections.Sequence):\n            data = list(data)\n        if len(data) > 0:\n            if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                if is_named_tuple(data[0]) and columns is None:\n                    columns = data[0]._fields\n                arrays, columns = _to_arrays(data, columns, dtype=dtype)\n                columns = ensure_index(columns)\n                if index is None:\n                    if isinstance(data[0], Series):\n                        index = _get_names_from_index(data)\n                    elif isinstance(data[0], Categorical):\n                        index = ibase.default_index(len(data[0]))\n                    else:\n                        index = ibase.default_index(len(data))\n                mgr = _arrays_to_mgr(arrays, columns, index, columns, dtype\n                    =dtype)\n            else:\n                mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n                    copy=copy)\n        else:\n            mgr = self._init_dict({}, index, columns, dtype=dtype)\n    else:\n        try:\n            arr = np.array(data, dtype=dtype, copy=copy)\n        except (ValueError, TypeError) as e:\n            exc = TypeError(\n                'DataFrame constructor called with incompatible data and dtype: {e}'\n                .format(e=e))\n            raise_with_traceback(exc)\n        if arr.ndim == 0 and index is not None and columns is not None:\n            values = cast_scalar_to_array((len(index), len(columns)), data,\n                dtype=dtype)\n            mgr = self._init_ndarray(values, index, columns, dtype=values.\n                dtype, copy=False)\n        else:\n            raise ValueError('DataFrame constructor not properly called!')\n    NDFrame.__init__(self, mgr, fastpath=True)\n",
                        "called_function_name": "radd",
                        "called_function_content": "def _combine_const(self, other, func, errors='raise', try_cast=True):\n    if lib.is_scalar(other) or np.ndim(other) == 0:\n        new_data = {i: func(self.iloc[:, i], other) for i, col in enumerate\n            (self.columns)}\n        result = self._constructor(new_data, index=self.index, copy=False)\n        result.columns = self.columns\n        return result\n    new_data = self._data.eval(func=func, other=other, errors=errors,\n        try_cast=try_cast)\n    return self._constructor(new_data)\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(left, right)",
                        "split_result": "failure"
                    },
                    {
                        "function_name": "radd",
                        "function_content": "def radd(left, right):\n    return right + left\n",
                        "function_parameter": "(left, right)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "dispatch_to_extension_op",
                        "called_function_content": "def radd(left, right):\n    return right + left\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(op, left, right)",
                        "split_result": "failure"
                    },
                    {
                        "function_name": "dispatch_to_extension_op",
                        "function_content": "def dispatch_to_extension_op(op, left, right):\n    \"\"\"\n    Assume that left or right is a Series backed by an ExtensionArray,\n    apply the operator defined by op.\n    \"\"\"\n    if is_extension_array_dtype(left):\n        new_left = left.values\n        if isinstance(right, np.ndarray):\n            new_right = lib.item_from_zerodim(right)\n            if is_scalar(new_right):\n                new_right = [new_right]\n            new_right = list(new_right)\n        elif is_extension_array_dtype(right) and type(left) != type(right):\n            new_right = list(new_right)\n        else:\n            new_right = right\n    else:\n        new_left = list(left.values)\n        new_right = right\n    res_values = op(new_left, new_right)\n    res_name = get_op_result_name(left, right)\n    if op.__name__ == 'divmod':\n        return _construct_divmod_result(left, res_values, left.index, res_name)\n    return _construct_result(left, res_values, left.index, res_name)\n",
                        "function_parameter": "(op, left, right)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "radd",
                        "called_function_content": "def dispatch_to_extension_op(op, left, right):\n    \"\"\"\n    Assume that left or right is a Series backed by an ExtensionArray,\n    apply the operator defined by op.\n    \"\"\"\n    if is_extension_array_dtype(left):\n        new_left = left.values\n        if isinstance(right, np.ndarray):\n            new_right = lib.item_from_zerodim(right)\n            if is_scalar(new_right):\n                new_right = [new_right]\n            new_right = list(new_right)\n        elif is_extension_array_dtype(right) and type(left) != type(right):\n            new_right = list(new_right)\n        else:\n            new_right = right\n    else:\n        new_left = list(left.values)\n        new_right = right\n    res_values = op(new_left, new_right)\n    res_name = get_op_result_name(left, right)\n    if op.__name__ == 'divmod':\n        return _construct_divmod_result(left, res_values, left.index, res_name)\n    return _construct_result(left, res_values, left.index, res_name)\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(left, right)",
                        "split_result": "failure"
                    },
                    {
                        "function_name": "radd",
                        "function_content": "def radd(left, right):\n    return right + left\n",
                        "function_parameter": "(left, right)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ]
            ]
        },
        "pandas-22804_normalize": {
            "pytest pandas/tests/io/json/test_normalize.py::TestJSONNormalize::test_nested_object_record_path": [
                [
                    {
                        "function_name": "test_nested_object_record_path",
                        "function_content": "def test_nested_object_record_path(self):\n    data = {'state': 'Florida', 'info': {'governor': 'Rick Scott',\n        'counties': [{'name': 'Dade', 'population': 12345}, {'name':\n        'Broward', 'population': 40000}, {'name': 'Palm Beach',\n        'population': 60000}]}}\n    result = json_normalize(data, record_path=['info', 'counties'])\n    expected = DataFrame([['Dade', 12345], ['Broward', 40000], [\n        'Palm Beach', 60000]], columns=['name', 'population'])\n    tm.assert_frame_equal(result, expected)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class TestJSONNormalize(object):\n\n    def test_simple_records(self):\n        recs = [{'a': 1, 'b': 2, 'c': 3}, {'a': 4, 'b': 5, 'c': 6}, {'a': 7,\n            'b': 8, 'c': 9}, {'a': 10, 'b': 11, 'c': 12}]\n        result = json_normalize(recs)\n        expected = DataFrame(recs)\n        tm.assert_frame_equal(result, expected)\n\n    def test_simple_normalize(self, state_data):\n        result = json_normalize(state_data[0], 'counties')\n        expected = DataFrame(state_data[0]['counties'])\n        tm.assert_frame_equal(result, expected)\n        result = json_normalize(state_data, 'counties')\n        expected = []\n        for rec in state_data:\n            expected.extend(rec['counties'])\n        expected = DataFrame(expected)\n        tm.assert_frame_equal(result, expected)\n        result = json_normalize(state_data, 'counties', meta='state')\n        expected['state'] = np.array(['Florida', 'Ohio']).repeat([3, 2])\n        tm.assert_frame_equal(result, expected)\n\n    def test_empty_array(self):\n        result = json_normalize([])\n        expected = DataFrame()\n        tm.assert_frame_equal(result, expected)\n\n    def test_simple_normalize_with_separator(self, deep_nested):\n        result = json_normalize({'A': {'A': 1, 'B': 2}})\n        expected = DataFrame([[1, 2]], columns=['A.A', 'A.B'])\n        tm.assert_frame_equal(result.reindex_like(expected), expected)\n        result = json_normalize({'A': {'A': 1, 'B': 2}}, sep='_')\n        expected = DataFrame([[1, 2]], columns=['A_A', 'A_B'])\n        tm.assert_frame_equal(result.reindex_like(expected), expected)\n        result = json_normalize({'A': {'A': 1, 'B': 2}}, sep=u'\u03c3')\n        expected = DataFrame([[1, 2]], columns=[u'A\u03c3A', u'A\u03c3B'])\n        tm.assert_frame_equal(result.reindex_like(expected), expected)\n        result = json_normalize(deep_nested, ['states', 'cities'], meta=[\n            'country', ['states', 'name']], sep='_')\n        expected = Index(['name', 'pop', 'country', 'states_name']\n            ).sort_values()\n        assert result.columns.sort_values().equals(expected)\n\n    def test_value_array_record_prefix(self):\n        result = json_normalize({'A': [1, 2]}, 'A', record_prefix='Prefix.')\n        expected = DataFrame([[1], [2]], columns=['Prefix.0'])\n        tm.assert_frame_equal(result, expected)\n\n    def test_nested_object_record_path(self):\n        data = {'state': 'Florida', 'info': {'governor': 'Rick Scott',\n            'counties': [{'name': 'Dade', 'population': 12345}, {'name':\n            'Broward', 'population': 40000}, {'name': 'Palm Beach',\n            'population': 60000}]}}\n        result = json_normalize(data, record_path=['info', 'counties'])\n        expected = DataFrame([['Dade', 12345], ['Broward', 40000], [\n            'Palm Beach', 60000]], columns=['name', 'population'])\n        tm.assert_frame_equal(result, expected)\n\n    def test_more_deeply_nested(self, deep_nested):\n        result = json_normalize(deep_nested, ['states', 'cities'], meta=[\n            'country', ['states', 'name']])\n        ex_data = {'country': ['USA'] * 4 + ['Germany'] * 3, 'states.name':\n            ['California', 'California', 'Ohio', 'Ohio', 'Bayern',\n            'Nordrhein-Westfalen', 'Nordrhein-Westfalen'], 'name': [\n            'San Francisco', 'Los Angeles', 'Columbus', 'Cleveland',\n            'Munich', 'Duesseldorf', 'Koeln'], 'pop': [12345, 12346, 1234, \n            1236, 12347, 1238, 1239]}\n        expected = DataFrame(ex_data, columns=result.columns)\n        tm.assert_frame_equal(result, expected)\n\n    def test_shallow_nested(self):\n        data = [{'state': 'Florida', 'shortname': 'FL', 'info': {'governor':\n            'Rick Scott'}, 'counties': [{'name': 'Dade', 'population': \n            12345}, {'name': 'Broward', 'population': 40000}, {'name':\n            'Palm Beach', 'population': 60000}]}, {'state': 'Ohio',\n            'shortname': 'OH', 'info': {'governor': 'John Kasich'},\n            'counties': [{'name': 'Summit', 'population': 1234}, {'name':\n            'Cuyahoga', 'population': 1337}]}]\n        result = json_normalize(data, 'counties', ['state', 'shortname', [\n            'info', 'governor']])\n        ex_data = {'name': ['Dade', 'Broward', 'Palm Beach', 'Summit',\n            'Cuyahoga'], 'state': ['Florida'] * 3 + ['Ohio'] * 2,\n            'shortname': ['FL', 'FL', 'FL', 'OH', 'OH'], 'info.governor': [\n            'Rick Scott'] * 3 + ['John Kasich'] * 2, 'population': [12345, \n            40000, 60000, 1234, 1337]}\n        expected = DataFrame(ex_data, columns=result.columns)\n        tm.assert_frame_equal(result, expected)\n\n    def test_meta_name_conflict(self):\n        data = [{'foo': 'hello', 'bar': 'there', 'data': [{'foo':\n            'something', 'bar': 'else'}, {'foo': 'something2', 'bar':\n            'else2'}]}]\n        with pytest.raises(ValueError):\n            json_normalize(data, 'data', meta=['foo', 'bar'])\n        result = json_normalize(data, 'data', meta=['foo', 'bar'],\n            meta_prefix='meta')\n        for val in ['metafoo', 'metabar', 'foo', 'bar']:\n            assert val in result\n\n    def test_meta_parameter_not_modified(self):\n        data = [{'foo': 'hello', 'bar': 'there', 'data': [{'foo':\n            'something', 'bar': 'else'}, {'foo': 'something2', 'bar':\n            'else2'}]}]\n        COLUMNS = ['foo', 'bar']\n        result = json_normalize(data, 'data', meta=COLUMNS, meta_prefix='meta')\n        assert COLUMNS == ['foo', 'bar']\n        for val in ['metafoo', 'metabar', 'foo', 'bar']:\n            assert val in result\n\n    def test_record_prefix(self, state_data):\n        result = json_normalize(state_data[0], 'counties')\n        expected = DataFrame(state_data[0]['counties'])\n        tm.assert_frame_equal(result, expected)\n        result = json_normalize(state_data, 'counties', meta='state',\n            record_prefix='county_')\n        expected = []\n        for rec in state_data:\n            expected.extend(rec['counties'])\n        expected = DataFrame(expected)\n        expected = expected.rename(columns=lambda x: 'county_' + x)\n        expected['state'] = np.array(['Florida', 'Ohio']).repeat([3, 2])\n        tm.assert_frame_equal(result, expected)\n\n    def test_non_ascii_key(self):\n        if compat.PY3:\n            testjson = (b'[{\"\\xc3\\x9cnic\\xc3\\xb8de\":0,\"sub\":{\"A\":1, \"B\":2}},' +\n                b'{\"\\xc3\\x9cnic\\xc3\\xb8de\":1,\"sub\":{\"A\":3, \"B\":4}}]').decode(\n                'utf8')\n        else:\n            testjson = (\n                '[{\"\u00c3\\x9cnic\u00c3\u00b8de\":0,\"sub\":{\"A\":1, \"B\":2}},{\"\u00c3\\x9cnic\u00c3\u00b8de\":1,\"sub\":{\"A\":3, \"B\":4}}]'\n                )\n        testdata = {u'sub.A': [1, 3], u'sub.B': [2, 4],\n            b'\\xc3\\x9cnic\\xc3\\xb8de'.decode('utf8'): [0, 1]}\n        expected = DataFrame(testdata)\n        result = json_normalize(json.loads(testjson))\n        tm.assert_frame_equal(result, expected)\n\n    def test_missing_field(self, author_missing_data):\n        result = json_normalize(author_missing_data)\n        ex_data = [{'info': np.nan, 'author_name.first': np.nan,\n            'author_name.last_name': np.nan, 'info.created_at': np.nan,\n            'info.last_updated': np.nan}, {'info': None,\n            'author_name.first': 'Jane', 'author_name.last_name': 'Doe',\n            'info.created_at': '11/08/1993', 'info.last_updated': '26/05/2012'}\n            ]\n        expected = DataFrame(ex_data)\n        tm.assert_frame_equal(result, expected)\n",
                        "belong_class_name": "TestJSONNormalize",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "json_normalize",
                        "function_content": "def json_normalize(data, record_path=None, meta=None, meta_prefix=None,\n    record_prefix=None, errors='raise', sep='.'):\n    \"\"\"\n    Normalize semi-structured JSON data into a flat table.\n\n    Parameters\n    ----------\n    data : dict or list of dicts\n        Unserialized JSON objects\n    record_path : string or list of strings, default None\n        Path in each object to list of records. If not passed, data will be\n        assumed to be an array of records\n    meta : list of paths (string or list of strings), default None\n        Fields to use as metadata for each record in resulting table\n    meta_prefix : string, default None\n    record_prefix : string, default None\n        If True, prefix records with dotted (?) path, e.g. foo.bar.field if\n        path to records is ['foo', 'bar']\n    errors : {'raise', 'ignore'}, default 'raise'\n\n        * 'ignore' : will ignore KeyError if keys listed in meta are not\n          always present\n        * 'raise' : will raise KeyError if keys listed in meta are not\n          always present\n\n        .. versionadded:: 0.20.0\n\n    sep : string, default '.'\n        Nested records will generate names separated by sep,\n        e.g., for sep='.', { 'foo' : { 'bar' : 0 } } -> foo.bar\n\n        .. versionadded:: 0.20.0\n\n    Returns\n    -------\n    frame : DataFrame\n\n    Examples\n    --------\n\n    >>> from pandas.io.json import json_normalize\n    >>> data = [{'id': 1, 'name': {'first': 'Coleen', 'last': 'Volk'}},\n    ...         {'name': {'given': 'Mose', 'family': 'Regner'}},\n    ...         {'id': 2, 'name': 'Faye Raker'}]\n    >>> json_normalize(data)\n        id        name name.family name.first name.given name.last\n    0  1.0         NaN         NaN     Coleen        NaN      Volk\n    1  NaN         NaN      Regner        NaN       Mose       NaN\n    2  2.0  Faye Raker         NaN        NaN        NaN       NaN\n\n    >>> data = [{'state': 'Florida',\n    ...          'shortname': 'FL',\n    ...          'info': {\n    ...               'governor': 'Rick Scott'\n    ...          },\n    ...          'counties': [{'name': 'Dade', 'population': 12345},\n    ...                      {'name': 'Broward', 'population': 40000},\n    ...                      {'name': 'Palm Beach', 'population': 60000}]},\n    ...         {'state': 'Ohio',\n    ...          'shortname': 'OH',\n    ...          'info': {\n    ...               'governor': 'John Kasich'\n    ...          },\n    ...          'counties': [{'name': 'Summit', 'population': 1234},\n    ...                       {'name': 'Cuyahoga', 'population': 1337}]}]\n    >>> result = json_normalize(data, 'counties', ['state', 'shortname',\n    ...                                           ['info', 'governor']])\n    >>> result\n             name  population info.governor    state shortname\n    0        Dade       12345    Rick Scott  Florida        FL\n    1     Broward       40000    Rick Scott  Florida        FL\n    2  Palm Beach       60000    Rick Scott  Florida        FL\n    3      Summit        1234   John Kasich     Ohio        OH\n    4    Cuyahoga        1337   John Kasich     Ohio        OH\n\n    >>> data = {'A': [1, 2]}\n    >>> json_normalize(data, 'A', record_prefix='Prefix.')\n        Prefix.0\n    0          1\n    1          2\n    \"\"\"\n\n    def _pull_field(js, spec):\n        result = js\n        if isinstance(spec, list):\n            for field in spec:\n                result = result[field]\n        else:\n            result = result[spec]\n        return result\n    if isinstance(data, list) and not data:\n        return DataFrame()\n    if isinstance(data, dict):\n        data = [data]\n    if record_path is None:\n        if any([isinstance(x, dict) for x in compat.itervalues(y)] for y in\n            data):\n            data = nested_to_record(data, sep=sep)\n        return DataFrame(data)\n    elif not isinstance(record_path, list):\n        record_path = [record_path]\n    if meta is None:\n        meta = []\n    elif not isinstance(meta, list):\n        meta = [meta]\n    meta = [(m if isinstance(m, list) else [m]) for m in meta]\n    records = []\n    lengths = []\n    meta_vals = defaultdict(list)\n    if not isinstance(sep, compat.string_types):\n        sep = str(sep)\n    meta_keys = [sep.join(val) for val in meta]\n\n    def _recursive_extract(data, path, seen_meta, level=0):\n        if len(path) > 1:\n            for obj in data:\n                for val, key in zip(meta, meta_keys):\n                    if level + 1 == len(val):\n                        seen_meta[key] = _pull_field(obj, val[-1])\n                _recursive_extract(obj[path[0]], path[1:], seen_meta, level\n                    =level + 1)\n        else:\n            for obj in data:\n                recs = _pull_field(obj, path[0])\n                lengths.append(len(recs))\n                for val, key in zip(meta, meta_keys):\n                    if level + 1 > len(val):\n                        meta_val = seen_meta[key]\n                    else:\n                        try:\n                            meta_val = _pull_field(obj, val[level:])\n                        except KeyError as e:\n                            if errors == 'ignore':\n                                meta_val = np.nan\n                            else:\n                                raise KeyError(\n                                    \"Try running with errors='ignore' as key {err} is not always present\"\n                                    .format(err=e))\n                    meta_vals[key].append(meta_val)\n                records.extend(recs)\n    _recursive_extract(data, record_path, {}, level=0)\n    result = DataFrame(records)\n    if record_prefix is not None:\n        result = result.rename(columns=lambda x: '{p}{c}'.format(p=\n            record_prefix, c=x))\n    for k, v in compat.iteritems(meta_vals):\n        if meta_prefix is not None:\n            k = meta_prefix + k\n        if k in result:\n            raise ValueError(\n                'Conflicting metadata name {name}, need distinguishing prefix '\n                .format(name=k))\n        result[k] = np.array(v).repeat(lengths)\n    return result\n",
                        "function_parameter": "(data, record_path=None, meta=None, meta_prefix=None,\n    record_prefix=None, errors='raise', sep='.')",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "_recursive_extract",
                        "called_function_content": "def json_normalize(data, record_path=None, meta=None, meta_prefix=None,\n    record_prefix=None, errors='raise', sep='.'):\n    \"\"\"\n    Normalize semi-structured JSON data into a flat table.\n\n    Parameters\n    ----------\n    data : dict or list of dicts\n        Unserialized JSON objects\n    record_path : string or list of strings, default None\n        Path in each object to list of records. If not passed, data will be\n        assumed to be an array of records\n    meta : list of paths (string or list of strings), default None\n        Fields to use as metadata for each record in resulting table\n    meta_prefix : string, default None\n    record_prefix : string, default None\n        If True, prefix records with dotted (?) path, e.g. foo.bar.field if\n        path to records is ['foo', 'bar']\n    errors : {'raise', 'ignore'}, default 'raise'\n\n        * 'ignore' : will ignore KeyError if keys listed in meta are not\n          always present\n        * 'raise' : will raise KeyError if keys listed in meta are not\n          always present\n\n        .. versionadded:: 0.20.0\n\n    sep : string, default '.'\n        Nested records will generate names separated by sep,\n        e.g., for sep='.', { 'foo' : { 'bar' : 0 } } -> foo.bar\n\n        .. versionadded:: 0.20.0\n\n    Returns\n    -------\n    frame : DataFrame\n\n    Examples\n    --------\n\n    >>> from pandas.io.json import json_normalize\n    >>> data = [{'id': 1, 'name': {'first': 'Coleen', 'last': 'Volk'}},\n    ...         {'name': {'given': 'Mose', 'family': 'Regner'}},\n    ...         {'id': 2, 'name': 'Faye Raker'}]\n    >>> json_normalize(data)\n        id        name name.family name.first name.given name.last\n    0  1.0         NaN         NaN     Coleen        NaN      Volk\n    1  NaN         NaN      Regner        NaN       Mose       NaN\n    2  2.0  Faye Raker         NaN        NaN        NaN       NaN\n\n    >>> data = [{'state': 'Florida',\n    ...          'shortname': 'FL',\n    ...          'info': {\n    ...               'governor': 'Rick Scott'\n    ...          },\n    ...          'counties': [{'name': 'Dade', 'population': 12345},\n    ...                      {'name': 'Broward', 'population': 40000},\n    ...                      {'name': 'Palm Beach', 'population': 60000}]},\n    ...         {'state': 'Ohio',\n    ...          'shortname': 'OH',\n    ...          'info': {\n    ...               'governor': 'John Kasich'\n    ...          },\n    ...          'counties': [{'name': 'Summit', 'population': 1234},\n    ...                       {'name': 'Cuyahoga', 'population': 1337}]}]\n    >>> result = json_normalize(data, 'counties', ['state', 'shortname',\n    ...                                           ['info', 'governor']])\n    >>> result\n             name  population info.governor    state shortname\n    0        Dade       12345    Rick Scott  Florida        FL\n    1     Broward       40000    Rick Scott  Florida        FL\n    2  Palm Beach       60000    Rick Scott  Florida        FL\n    3      Summit        1234   John Kasich     Ohio        OH\n    4    Cuyahoga        1337   John Kasich     Ohio        OH\n\n    >>> data = {'A': [1, 2]}\n    >>> json_normalize(data, 'A', record_prefix='Prefix.')\n        Prefix.0\n    0          1\n    1          2\n    \"\"\"\n\n    def _pull_field(js, spec):\n        result = js\n        if isinstance(spec, list):\n            for field in spec:\n                result = result[field]\n        else:\n            result = result[spec]\n        return result\n    if isinstance(data, list) and not data:\n        return DataFrame()\n    if isinstance(data, dict):\n        data = [data]\n    if record_path is None:\n        if any([isinstance(x, dict) for x in compat.itervalues(y)] for y in\n            data):\n            data = nested_to_record(data, sep=sep)\n        return DataFrame(data)\n    elif not isinstance(record_path, list):\n        record_path = [record_path]\n    if meta is None:\n        meta = []\n    elif not isinstance(meta, list):\n        meta = [meta]\n    meta = [(m if isinstance(m, list) else [m]) for m in meta]\n    records = []\n    lengths = []\n    meta_vals = defaultdict(list)\n    if not isinstance(sep, compat.string_types):\n        sep = str(sep)\n    meta_keys = [sep.join(val) for val in meta]\n\n    def _recursive_extract(data, path, seen_meta, level=0):\n        if len(path) > 1:\n            for obj in data:\n                for val, key in zip(meta, meta_keys):\n                    if level + 1 == len(val):\n                        seen_meta[key] = _pull_field(obj, val[-1])\n                _recursive_extract(obj[path[0]], path[1:], seen_meta, level\n                    =level + 1)\n        else:\n            for obj in data:\n                recs = _pull_field(obj, path[0])\n                lengths.append(len(recs))\n                for val, key in zip(meta, meta_keys):\n                    if level + 1 > len(val):\n                        meta_val = seen_meta[key]\n                    else:\n                        try:\n                            meta_val = _pull_field(obj, val[level:])\n                        except KeyError as e:\n                            if errors == 'ignore':\n                                meta_val = np.nan\n                            else:\n                                raise KeyError(\n                                    \"Try running with errors='ignore' as key {err} is not always present\"\n                                    .format(err=e))\n                    meta_vals[key].append(meta_val)\n                records.extend(recs)\n    _recursive_extract(data, record_path, {}, level=0)\n",
                        "called_arguments": "(data, record_path, {}, level=0)",
                        "called_function_parameter": "(data, path, seen_meta, level=0)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_recursive_extract",
                        "function_content": "def _recursive_extract(data, path, seen_meta, level=0):\n    if len(path) > 1:\n        for obj in data:\n            for val, key in zip(meta, meta_keys):\n                if level + 1 == len(val):\n                    seen_meta[key] = _pull_field(obj, val[-1])\n            _recursive_extract(obj[path[0]], path[1:], seen_meta, level=\n                level + 1)\n    else:\n        for obj in data:\n            recs = _pull_field(obj, path[0])\n            lengths.append(len(recs))\n            for val, key in zip(meta, meta_keys):\n                if level + 1 > len(val):\n                    meta_val = seen_meta[key]\n                else:\n                    try:\n                        meta_val = _pull_field(obj, val[level:])\n                    except KeyError as e:\n                        if errors == 'ignore':\n                            meta_val = np.nan\n                        else:\n                            raise KeyError(\n                                \"Try running with errors='ignore' as key {err} is not always present\"\n                                .format(err=e))\n                meta_vals[key].append(meta_val)\n            records.extend(recs)\n",
                        "function_parameter": "(data, path, seen_meta, level=0)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "_recursive_extract",
                        "called_function_content": "def _recursive_extract(data, path, seen_meta, level=0):\n    if len(path) > 1:\n        for obj in data:\n            for val, key in zip(meta, meta_keys):\n                if level + 1 == len(val):\n                    seen_meta[key] = _pull_field(obj, val[-1])\n            _recursive_extract(obj[path[0]], path[1:], seen_meta, level=\n                level + 1)\n",
                        "called_arguments": "(obj[path[0]], path[1:], seen_meta, level=\n                level + 1)",
                        "called_function_parameter": "(data, path, seen_meta, level=0)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_recursive_extract",
                        "function_content": "def _recursive_extract(data, path, seen_meta, level=0):\n    if len(path) > 1:\n        for obj in data:\n            for val, key in zip(meta, meta_keys):\n                if level + 1 == len(val):\n                    seen_meta[key] = _pull_field(obj, val[-1])\n            _recursive_extract(obj[path[0]], path[1:], seen_meta, level=\n                level + 1)\n    else:\n        for obj in data:\n            recs = _pull_field(obj, path[0])\n            lengths.append(len(recs))\n            for val, key in zip(meta, meta_keys):\n                if level + 1 > len(val):\n                    meta_val = seen_meta[key]\n                else:\n                    try:\n                        meta_val = _pull_field(obj, val[level:])\n                    except KeyError as e:\n                        if errors == 'ignore':\n                            meta_val = np.nan\n                        else:\n                            raise KeyError(\n                                \"Try running with errors='ignore' as key {err} is not always present\"\n                                .format(err=e))\n                meta_vals[key].append(meta_val)\n            records.extend(recs)\n",
                        "function_parameter": "(data, path, seen_meta, level=0)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "_pull_field",
                        "called_function_content": "def _recursive_extract(data, path, seen_meta, level=0):\n    if len(path) > 1:\n        for obj in data:\n            for val, key in zip(meta, meta_keys):\n                if level + 1 == len(val):\n                    seen_meta[key] = _pull_field(obj, val[-1])\n",
                        "called_arguments": "(obj, val[-1])",
                        "called_function_parameter": "(js, spec)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_pull_field",
                        "function_content": "def _pull_field(js, spec):\n    result = js\n    if isinstance(spec, list):\n        for field in spec:\n            result = result[field]\n    else:\n        result = result[spec]\n    return result\n",
                        "function_parameter": "(js, spec)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ]
            ]
        },
        "pandas-24572_html": {
            "pytest pandas/tests/io/formats/test_to_html.py::TestToHTML::test_to_html_truncate_multi_index_sparse_off": [
                [
                    {
                        "function_name": "test_to_html_truncate_multi_index_sparse_off",
                        "function_content": "def test_to_html_truncate_multi_index_sparse_off(self, datapath):\n    arrays = [['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'], [\n        'one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]\n    df = DataFrame(index=arrays, columns=arrays)\n    result = df.to_html(max_rows=7, max_cols=7, sparsify=False)\n    expected = expected_html(datapath, 'truncate_multi_index_sparse_off')\n    assert result == expected\n",
                        "function_parameter": "(self, datapath)",
                        "belong_class_content": "class TestToHTML(object):\n\n    def test_to_html_with_col_space(self):\n\n        def check_with_width(df, col_space):\n            html = df.to_html(col_space=col_space)\n            hdrs = [x for x in html.split('\\\\n') if re.search('<th[>\\\\s]', x)]\n            assert len(hdrs) > 0\n            for h in hdrs:\n                assert 'min-width' in h\n                assert str(col_space) in h\n        df = DataFrame(np.random.random(size=(1, 3)))\n        check_with_width(df, 30)\n        check_with_width(df, 50)\n\n    def test_to_html_with_empty_string_label(self):\n        data = {'c1': ['a', 'b'], 'c2': ['a', ''], 'data': [1, 2]}\n        df = DataFrame(data).set_index(['c1', 'c2'])\n        result = df.to_html()\n        assert 'rowspan' not in result\n\n    def test_to_html_unicode(self, datapath):\n        df = DataFrame({u('\u03c3'): np.arange(10.0)})\n        expected = expected_html(datapath, 'unicode_1')\n        assert df.to_html() == expected\n        df = DataFrame({'A': [u('\u03c3')]})\n        expected = expected_html(datapath, 'unicode_2')\n        assert df.to_html() == expected\n\n    def test_to_html_decimal(self, datapath):\n        df = DataFrame({'A': [6.0, 3.1, 2.2]})\n        result = df.to_html(decimal=',')\n        expected = expected_html(datapath, 'gh12031_expected_output')\n        assert result == expected\n\n    def test_to_html_escaped(self, datapath):\n        a = 'str<ing1 &amp;'\n        b = 'stri>ng2 &amp;'\n        test_dict = {'co<l1': {a: \"<type 'str'>\", b: \"<type 'str'>\"},\n            'co>l2': {a: \"<type 'str'>\", b: \"<type 'str'>\"}}\n        result = DataFrame(test_dict).to_html()\n        expected = expected_html(datapath, 'escaped')\n        assert result == expected\n\n    def test_to_html_escape_disabled(self, datapath):\n        a = 'str<ing1 &amp;'\n        b = 'stri>ng2 &amp;'\n        test_dict = {'co<l1': {a: '<b>bold</b>', b: '<b>bold</b>'}, 'co>l2':\n            {a: '<b>bold</b>', b: '<b>bold</b>'}}\n        result = DataFrame(test_dict).to_html(escape=False)\n        expected = expected_html(datapath, 'escape_disabled')\n        assert result == expected\n\n    def test_to_html_multiindex_index_false(self, datapath):\n        df = DataFrame({'a': range(2), 'b': range(3, 5), 'c': range(5, 7),\n            'd': range(3, 5)})\n        df.columns = MultiIndex.from_product([['a', 'b'], ['c', 'd']])\n        result = df.to_html(index=False)\n        expected = expected_html(datapath, 'gh8452_expected_output')\n        assert result == expected\n        df.index = Index(df.index.values, name='idx')\n        result = df.to_html(index=False)\n        assert result == expected\n\n    def test_to_html_multiindex_sparsify_false_multi_sparse(self, datapath):\n        with option_context('display.multi_sparse', False):\n            index = MultiIndex.from_arrays([[0, 0, 1, 1], [0, 1, 0, 1]],\n                names=['foo', None])\n            df = DataFrame([[0, 1], [2, 3], [4, 5], [6, 7]], index=index)\n            result = df.to_html()\n            expected = expected_html(datapath,\n                'multiindex_sparsify_false_multi_sparse_1')\n            assert result == expected\n            df = DataFrame([[0, 1], [2, 3], [4, 5], [6, 7]], columns=index[\n                ::2], index=index)\n            result = df.to_html()\n            expected = expected_html(datapath,\n                'multiindex_sparsify_false_multi_sparse_2')\n            assert result == expected\n\n    def test_to_html_multiindex_sparsify(self, datapath):\n        index = MultiIndex.from_arrays([[0, 0, 1, 1], [0, 1, 0, 1]], names=\n            ['foo', None])\n        df = DataFrame([[0, 1], [2, 3], [4, 5], [6, 7]], index=index)\n        result = df.to_html()\n        expected = expected_html(datapath, 'multiindex_sparsify_1')\n        assert result == expected\n        df = DataFrame([[0, 1], [2, 3], [4, 5], [6, 7]], columns=index[::2],\n            index=index)\n        result = df.to_html()\n        expected = expected_html(datapath, 'multiindex_sparsify_2')\n        assert result == expected\n\n    def test_to_html_multiindex_odd_even_truncate(self, datapath):\n        mi = MultiIndex.from_product([[100, 200, 300], [10, 20, 30], [1, 2,\n            3, 4, 5, 6, 7]], names=['a', 'b', 'c'])\n        df = DataFrame({'n': range(len(mi))}, index=mi)\n        result = df.to_html(max_rows=60)\n        expected = expected_html(datapath, 'gh14882_expected_output_1')\n        assert result == expected\n        result = df.to_html(max_rows=56)\n        expected = expected_html(datapath, 'gh14882_expected_output_2')\n        assert result == expected\n\n    def test_to_html_index_formatter(self, datapath):\n        df = DataFrame([[0, 1], [2, 3], [4, 5], [6, 7]], columns=['foo',\n            None], index=lrange(4))\n        f = lambda x: 'abcd'[x]\n        result = df.to_html(formatters={'__index__': f})\n        expected = expected_html(datapath, 'index_formatter')\n        assert result == expected\n\n    def test_to_html_datetime64_monthformatter(self, datapath):\n        months = [datetime(2016, 1, 1), datetime(2016, 2, 2)]\n        x = DataFrame({'months': months})\n\n        def format_func(x):\n            return x.strftime('%Y-%m')\n        result = x.to_html(formatters={'months': format_func})\n        expected = expected_html(datapath, 'datetime64_monthformatter')\n        assert result == expected\n\n    def test_to_html_datetime64_hourformatter(self, datapath):\n        x = DataFrame({'hod': pd.to_datetime(['10:10:10.100',\n            '12:12:12.120'], format='%H:%M:%S.%f')})\n\n        def format_func(x):\n            return x.strftime('%H:%M')\n        result = x.to_html(formatters={'hod': format_func})\n        expected = expected_html(datapath, 'datetime64_hourformatter')\n        assert result == expected\n\n    def test_to_html_regression_GH6098(self):\n        df = DataFrame({u('cl\u00e91'): [u('a'), u('a'), u('b'), u('b'), u('a')],\n            u('cl\u00e92'): [u('1er'), u('2\u00e8me'), u('1er'), u('2\u00e8me'), u('1er')],\n            'donn\u00e9es1': np.random.randn(5), 'donn\u00e9es2': np.random.randn(5)})\n        df.pivot_table(index=[u('cl\u00e91')], columns=[u('cl\u00e92')])._repr_html_()\n\n    def test_to_html_truncate(self, datapath):\n        index = pd.date_range(start='20010101', freq='D', periods=20)\n        df = DataFrame(index=index, columns=range(20))\n        result = df.to_html(max_rows=8, max_cols=4)\n        expected = expected_html(datapath, 'truncate')\n        assert result == expected\n\n    def test_to_html_truncate_multi_index(self, datapath):\n        arrays = [['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'],\n            ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]\n        df = DataFrame(index=arrays, columns=arrays)\n        result = df.to_html(max_rows=7, max_cols=7)\n        expected = expected_html(datapath, 'truncate_multi_index')\n        assert result == expected\n\n    def test_to_html_truncate_multi_index_sparse_off(self, datapath):\n        arrays = [['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'],\n            ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]\n        df = DataFrame(index=arrays, columns=arrays)\n        result = df.to_html(max_rows=7, max_cols=7, sparsify=False)\n        expected = expected_html(datapath, 'truncate_multi_index_sparse_off')\n        assert result == expected\n\n    def test_to_html_border(self):\n        df = DataFrame({'A': [1, 2]})\n        result = df.to_html()\n        assert 'border=\"1\"' in result\n\n    def test_to_html_border_option(self):\n        df = DataFrame({'A': [1, 2]})\n        with option_context('display.html.border', 0):\n            result = df.to_html()\n            assert 'border=\"0\"' in result\n            assert 'border=\"0\"' in df._repr_html_()\n\n    def test_to_html_border_zero(self):\n        df = DataFrame({'A': [1, 2]})\n        result = df.to_html(border=0)\n        assert 'border=\"0\"' in result\n\n    def test_display_option_warning(self):\n        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n            pd.options.html.border\n\n    def test_to_html(self):\n        biggie = DataFrame({'A': np.random.randn(200), 'B': tm.\n            makeStringIndex(200)}, index=lrange(200))\n        biggie.loc[:20, 'A'] = np.nan\n        biggie.loc[:20, 'B'] = np.nan\n        s = biggie.to_html()\n        buf = StringIO()\n        retval = biggie.to_html(buf=buf)\n        assert retval is None\n        assert buf.getvalue() == s\n        assert isinstance(s, compat.string_types)\n        biggie.to_html(columns=['B', 'A'], col_space=17)\n        biggie.to_html(columns=['B', 'A'], formatters={'A': lambda x:\n            '{x:.1f}'.format(x=x)})\n        biggie.to_html(columns=['B', 'A'], float_format=str)\n        biggie.to_html(columns=['B', 'A'], col_space=12, float_format=str)\n        frame = DataFrame(index=np.arange(200))\n        frame.to_html()\n\n    def test_to_html_filename(self):\n        biggie = DataFrame({'A': np.random.randn(200), 'B': tm.\n            makeStringIndex(200)}, index=lrange(200))\n        biggie.loc[:20, 'A'] = np.nan\n        biggie.loc[:20, 'B'] = np.nan\n        with tm.ensure_clean('test.html') as path:\n            biggie.to_html(path)\n            with open(path, 'r') as f:\n                s = biggie.to_html()\n                s2 = f.read()\n                assert s == s2\n        frame = DataFrame(index=np.arange(200))\n        with tm.ensure_clean('test.html') as path:\n            frame.to_html(path)\n            with open(path, 'r') as f:\n                assert frame.to_html() == f.read()\n\n    def test_to_html_with_no_bold(self):\n        x = DataFrame({'x': np.random.randn(5)})\n        ashtml = x.to_html(bold_rows=False)\n        assert '<strong' not in ashtml[ashtml.find('</thead>')]\n\n    def test_to_html_columns_arg(self):\n        frame = DataFrame(tm.getSeriesData())\n        result = frame.to_html(columns=['A'])\n        assert '<th>B</th>' not in result\n\n    def test_to_html_multiindex(self, datapath):\n        columns = MultiIndex.from_tuples(list(zip(np.arange(2).repeat(2),\n            np.mod(lrange(4), 2))), names=['CL0', 'CL1'])\n        df = DataFrame([list('abcd'), list('efgh')], columns=columns)\n        result = df.to_html(justify='left')\n        expected = expected_html(datapath, 'multiindex_1')\n        assert result == expected\n        columns = MultiIndex.from_tuples(list(zip(range(4), np.mod(lrange(4\n            ), 2))))\n        df = DataFrame([list('abcd'), list('efgh')], columns=columns)\n        result = df.to_html(justify='right')\n        expected = expected_html(datapath, 'multiindex_2')\n        assert result == expected\n\n    @pytest.mark.parametrize('justify', fmt._VALID_JUSTIFY_PARAMETERS)\n    def test_to_html_justify(self, justify, datapath):\n        df = DataFrame({'A': [6, 30000, 2], 'B': [1, 2, 70000], 'C': [\n            223442, 0, 1]}, columns=['A', 'B', 'C'])\n        result = df.to_html(justify=justify)\n        expected = expected_html(datapath, 'justify').format(justify=justify)\n        assert result == expected\n\n    @pytest.mark.parametrize('justify', ['super-right', 'small-left',\n        'noinherit', 'tiny', 'pandas'])\n    def test_to_html_invalid_justify(self, justify):\n        df = DataFrame()\n        msg = 'Invalid value for justify parameter'\n        with pytest.raises(ValueError, match=msg):\n            df.to_html(justify=justify)\n\n    def test_to_html_index(self, datapath):\n        index = ['foo', 'bar', 'baz']\n        df = DataFrame({'A': [1, 2, 3], 'B': [1.2, 3.4, 5.6], 'C': ['one',\n            'two', np.nan]}, columns=['A', 'B', 'C'], index=index)\n        expected_with_index = expected_html(datapath, 'index_1')\n        assert df.to_html() == expected_with_index\n        expected_without_index = expected_html(datapath, 'index_2')\n        result = df.to_html(index=False)\n        for i in index:\n            assert i not in result\n        assert result == expected_without_index\n        df.index = Index(['foo', 'bar', 'baz'], name='idx')\n        expected_with_index = expected_html(datapath, 'index_3')\n        assert df.to_html() == expected_with_index\n        assert df.to_html(index=False) == expected_without_index\n        tuples = [('foo', 'car'), ('foo', 'bike'), ('bar', 'car')]\n        df.index = MultiIndex.from_tuples(tuples)\n        expected_with_index = expected_html(datapath, 'index_4')\n        assert df.to_html() == expected_with_index\n        result = df.to_html(index=False)\n        for i in ['foo', 'bar', 'car', 'bike']:\n            assert i not in result\n        assert result == expected_without_index\n        df.index = MultiIndex.from_tuples(tuples, names=['idx1', 'idx2'])\n        expected_with_index = expected_html(datapath, 'index_5')\n        assert df.to_html() == expected_with_index\n        assert df.to_html(index=False) == expected_without_index\n\n    def test_to_html_with_classes(self, datapath):\n        df = DataFrame()\n        result = df.to_html(classes='sortable draggable')\n        expected = expected_html(datapath, 'with_classes')\n        assert result == expected\n        result = df.to_html(classes=['sortable', 'draggable'])\n        assert result == expected\n\n    def test_to_html_no_index_max_rows(self, datapath):\n        df = DataFrame({'A': [1, 2, 3, 4]})\n        result = df.to_html(index=False, max_rows=1)\n        expected = expected_html(datapath, 'gh14998_expected_output')\n        assert result == expected\n\n    def test_to_html_multiindex_max_cols(self, datapath):\n        index = MultiIndex(levels=[['ba', 'bb', 'bc'], ['ca', 'cb', 'cc']],\n            codes=[[0, 1, 2], [0, 1, 2]], names=['b', 'c'])\n        columns = MultiIndex(levels=[['d'], ['aa', 'ab', 'ac']], codes=[[0,\n            0, 0], [0, 1, 2]], names=[None, 'a'])\n        data = np.array([[1.0, np.nan, np.nan], [np.nan, 2.0, np.nan], [np.\n            nan, np.nan, 3.0]])\n        df = DataFrame(data, index, columns)\n        result = df.to_html(max_cols=2)\n        expected = expected_html(datapath, 'gh6131_expected_output')\n        assert result == expected\n\n    def test_to_html_multi_indexes_index_false(self, datapath):\n        df = DataFrame({'a': range(10), 'b': range(10, 20), 'c': range(10, \n            20), 'd': range(10, 20)})\n        df.columns = MultiIndex.from_product([['a', 'b'], ['c', 'd']])\n        df.index = MultiIndex.from_product([['a', 'b'], ['c', 'd', 'e', 'f',\n            'g']])\n        result = df.to_html(index=False)\n        expected = expected_html(datapath, 'gh22579_expected_output')\n        assert result == expected\n\n    @pytest.mark.parametrize('index_names', [True, False])\n    @pytest.mark.parametrize('header', [True, False])\n    @pytest.mark.parametrize('index', [True, False])\n    @pytest.mark.parametrize('column_index, column_type', [(Index([0, 1]),\n        'unnamed_standard'), (Index([0, 1], name='columns.name'),\n        'named_standard'), (MultiIndex.from_product([['a'], ['b', 'c']]),\n        'unnamed_multi'), (MultiIndex.from_product([['a'], ['b', 'c']],\n        names=['columns.name.0', 'columns.name.1']), 'named_multi')])\n    @pytest.mark.parametrize('row_index, row_type', [(Index([0, 1]),\n        'unnamed_standard'), (Index([0, 1], name='index.name'),\n        'named_standard'), (MultiIndex.from_product([['a'], ['b', 'c']]),\n        'unnamed_multi'), (MultiIndex.from_product([['a'], ['b', 'c']],\n        names=['index.name.0', 'index.name.1']), 'named_multi')])\n    def test_to_html_basic_alignment(self, datapath, row_index, row_type,\n        column_index, column_type, index, header, index_names):\n        df = DataFrame(np.zeros((2, 2), dtype=int), index=row_index,\n            columns=column_index)\n        result = df.to_html(index=index, header=header, index_names=index_names\n            )\n        if not index:\n            row_type = 'none'\n        elif not index_names and row_type.startswith('named'):\n            row_type = 'un' + row_type\n        if not header:\n            column_type = 'none'\n        elif not index_names and column_type.startswith('named'):\n            column_type = 'un' + column_type\n        filename = 'index_' + row_type + '_columns_' + column_type\n        expected = expected_html(datapath, filename)\n        assert result == expected\n\n    @pytest.mark.parametrize('index_names', [True, False])\n    @pytest.mark.parametrize('header', [True, False])\n    @pytest.mark.parametrize('index', [True, False])\n    @pytest.mark.parametrize('column_index, column_type', [(Index(np.arange\n        (8)), 'unnamed_standard'), (Index(np.arange(8), name='columns.name'\n        ), 'named_standard'), (MultiIndex.from_product([['a', 'b'], ['c',\n        'd'], ['e', 'f']]), 'unnamed_multi'), (MultiIndex.from_product([[\n        'a', 'b'], ['c', 'd'], ['e', 'f']], names=['foo', None, 'baz']),\n        'named_multi')])\n    @pytest.mark.parametrize('row_index, row_type', [(Index(np.arange(8)),\n        'unnamed_standard'), (Index(np.arange(8), name='index.name'),\n        'named_standard'), (MultiIndex.from_product([['a', 'b'], ['c', 'd'],\n        ['e', 'f']]), 'unnamed_multi'), (MultiIndex.from_product([['a', 'b'\n        ], ['c', 'd'], ['e', 'f']], names=['foo', None, 'baz']),\n        'named_multi')])\n    def test_to_html_alignment_with_truncation(self, datapath, row_index,\n        row_type, column_index, column_type, index, header, index_names):\n        df = DataFrame(np.arange(64).reshape(8, 8), index=row_index,\n            columns=column_index)\n        result = df.to_html(max_rows=4, max_cols=4, index=index, header=\n            header, index_names=index_names)\n        if not index:\n            row_type = 'none'\n        elif not index_names and row_type.startswith('named'):\n            row_type = 'un' + row_type\n        if not header:\n            column_type = 'none'\n        elif not index_names and column_type.startswith('named'):\n            column_type = 'un' + column_type\n        filename = 'trunc_df_index_' + row_type + '_columns_' + column_type\n        expected = expected_html(datapath, filename)\n        assert result == expected\n\n    @pytest.mark.parametrize('index', [False, 0])\n    def test_to_html_truncation_index_false_max_rows(self, datapath, index):\n        data = [[1.764052, 0.400157], [0.978738, 2.240893], [1.867558, -\n            0.977278], [0.950088, -0.151357], [-0.103219, 0.410599]]\n        df = DataFrame(data)\n        result = df.to_html(max_rows=4, index=index)\n        expected = expected_html(datapath, 'gh15019_expected_output')\n        assert result == expected\n\n    @pytest.mark.parametrize('index', [False, 0])\n    @pytest.mark.parametrize('col_index_named, expected_output', [(False,\n        'gh22783_expected_output'), (True, 'gh22783_named_columns_index')])\n    def test_to_html_truncation_index_false_max_cols(self, datapath, index,\n        col_index_named, expected_output):\n        data = [[1.764052, 0.400157, 0.978738, 2.240893, 1.867558], [-\n            0.977278, 0.950088, -0.151357, -0.103219, 0.410599]]\n        df = DataFrame(data)\n        if col_index_named:\n            df.columns.rename('columns.name', inplace=True)\n        result = df.to_html(max_cols=4, index=index)\n        expected = expected_html(datapath, expected_output)\n        assert result == expected\n\n    def test_to_html_notebook_has_style(self):\n        df = DataFrame({'A': [1, 2, 3]})\n        result = df.to_html(notebook=True)\n        assert 'tbody tr th:only-of-type' in result\n        assert 'vertical-align: middle;' in result\n        assert 'thead th' in result\n\n    def test_to_html_notebook_has_no_style(self):\n        df = DataFrame({'A': [1, 2, 3]})\n        result = df.to_html()\n        assert 'tbody tr th:only-of-type' not in result\n        assert 'vertical-align: middle;' not in result\n        assert 'thead th' not in result\n\n    def test_to_html_with_index_names_false(self):\n        df = DataFrame({'A': [1, 2]}, index=Index(['a', 'b'], name=\n            'myindexname'))\n        result = df.to_html(index_names=False)\n        assert 'myindexname' not in result\n\n    def test_to_html_with_id(self):\n        df = DataFrame({'A': [1, 2]}, index=Index(['a', 'b'], name=\n            'myindexname'))\n        result = df.to_html(index_names=False, table_id='TEST_ID')\n        assert ' id=\"TEST_ID\"' in result\n\n    def test_to_html_float_format_no_fixed_width(self, datapath):\n        df = DataFrame({'x': [0.19999]})\n        expected = expected_html(datapath, 'gh21625_expected_output')\n        assert df.to_html(float_format='%.3f') == expected\n        df = DataFrame({'x': [100.0]})\n        expected = expected_html(datapath, 'gh22270_expected_output')\n        assert df.to_html(float_format='%.0f') == expected\n\n    @pytest.mark.parametrize('render_links, file_name', [(True,\n        'render_links_true'), (False, 'render_links_false')])\n    def test_to_html_render_links(self, render_links, file_name, datapath):\n        data = [[0, 'http://pandas.pydata.org/?q1=a&q2=b', 'pydata.org'], [\n            0, 'www.pydata.org', 'pydata.org']]\n        df = DataFrame(data, columns=['foo', 'bar', None])\n        result = df.to_html(render_links=render_links)\n        expected = expected_html(datapath, file_name)\n        assert result == expected\n",
                        "belong_class_name": "TestToHTML",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "to_html",
                        "function_content": "@Substitution(header='Whether to print column labels, default True')\n@Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\ndef to_html(self, buf=None, columns=None, col_space=None, header=True,\n    index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=\n    None, index_names=True, justify=None, max_rows=None, max_cols=None,\n    show_dimensions=False, decimal='.', bold_rows=True, classes=None,\n    escape=True, notebook=False, border=None, table_id=None, render_links=False\n    ):\n    \"\"\"\n        Render a DataFrame as an HTML table.\n        %(shared_params)s\n        bold_rows : bool, default True\n            Make the row labels bold in the output.\n        classes : str or list or tuple, default None\n            CSS class(es) to apply to the resulting html table.\n        escape : bool, default True\n            Convert the characters <, >, and & to HTML-safe sequences.\n        notebook : {True, False}, default False\n            Whether the generated HTML is for IPython Notebook.\n        border : int\n            A ``border=border`` attribute is included in the opening\n            `<table>` tag. Default ``pd.options.html.border``.\n\n            .. versionadded:: 0.19.0\n\n        table_id : str, optional\n            A css id is included in the opening `<table>` tag if specified.\n\n            .. versionadded:: 0.23.0\n\n        render_links : bool, default False\n            Convert URLs to HTML links.\n\n            .. versionadded:: 0.24.0\n\n        %(returns)s\n        See Also\n        --------\n        to_string : Convert DataFrame to a string.\n        \"\"\"\n    if justify is not None and justify not in fmt._VALID_JUSTIFY_PARAMETERS:\n        raise ValueError('Invalid value for justify parameter')\n    formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n        col_space=col_space, na_rep=na_rep, formatters=formatters,\n        float_format=float_format, sparsify=sparsify, justify=justify,\n        index_names=index_names, header=header, index=index, bold_rows=\n        bold_rows, escape=escape, max_rows=max_rows, max_cols=max_cols,\n        show_dimensions=show_dimensions, decimal=decimal, table_id=table_id,\n        render_links=render_links)\n    formatter.to_html(classes=classes, notebook=notebook, border=border)\n    if buf is None:\n        return formatter.buf.getvalue()\n",
                        "function_parameter": "(self, buf=None, columns=None, col_space=None, header=True,\n    index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=\n    None, index_names=True, justify=None, max_rows=None, max_cols=None,\n    show_dimensions=False, decimal='.', bold_rows=True, classes=None,\n    escape=True, notebook=False, border=None, table_id=None, render_links=False\n    )",
                        "belong_class_content": "class DataFrame(NDFrame):\n    \"\"\"\n    Two-dimensional size-mutable, potentially heterogeneous tabular data\n    structure with labeled axes (rows and columns). Arithmetic operations\n    align on both row and column labels. Can be thought of as a dict-like\n    container for Series objects. The primary pandas data structure.\n\n    Parameters\n    ----------\n    data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n        Dict can contain Series, arrays, constants, or list-like objects\n\n        .. versionchanged :: 0.23.0\n           If data is a dict, argument order is maintained for Python 3.6\n           and later.\n\n    index : Index or array-like\n        Index to use for resulting frame. Will default to RangeIndex if\n        no indexing information part of input data and no index provided\n    columns : Index or array-like\n        Column labels to use for resulting frame. Will default to\n        RangeIndex (0, 1, 2, ..., n) if no column labels are provided\n    dtype : dtype, default None\n        Data type to force. Only a single dtype is allowed. If None, infer\n    copy : boolean, default False\n        Copy data from inputs. Only affects DataFrame / 2d ndarray input\n\n    See Also\n    --------\n    DataFrame.from_records : Constructor from tuples, also record arrays.\n    DataFrame.from_dict : From dicts of Series, arrays, or dicts.\n    DataFrame.from_items : From sequence of (key, value) pairs\n        pandas.read_csv, pandas.read_table, pandas.read_clipboard.\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary.\n\n    >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df = pd.DataFrame(data=d)\n    >>> df\n       col1  col2\n    0     1     3\n    1     2     4\n\n    Notice that the inferred dtype is int64.\n\n    >>> df.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n\n    To enforce a single dtype:\n\n    >>> df = pd.DataFrame(data=d, dtype=np.int8)\n    >>> df.dtypes\n    col1    int8\n    col2    int8\n    dtype: object\n\n    Constructing DataFrame from numpy ndarray:\n\n    >>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n    ...                    columns=['a', 'b', 'c'])\n    >>> df2\n       a  b  c\n    0  1  2  3\n    1  4  5  6\n    2  7  8  9\n    \"\"\"\n\n    @property\n    def _constructor(self):\n        return DataFrame\n    _constructor_sliced = Series\n    _deprecations = NDFrame._deprecations | frozenset(['get_value',\n        'set_value', 'from_csv', 'from_items'])\n    _accessors = set()\n\n    @property\n    def _constructor_expanddim(self):\n        from pandas.core.panel import Panel\n        return Panel\n\n    def __init__(self, data=None, index=None, columns=None, dtype=None,\n        copy=False):\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n        if isinstance(data, DataFrame):\n            data = data._data\n        if isinstance(data, BlockManager):\n            mgr = self._init_mgr(data, axes=dict(index=index, columns=\n                columns), dtype=dtype, copy=copy)\n        elif isinstance(data, dict):\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif isinstance(data, ma.MaskedArray):\n            import numpy.ma.mrecords as mrecords\n            if isinstance(data, mrecords.MaskedRecords):\n                mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy\n                    )\n            else:\n                mask = ma.getmaskarray(data)\n                if mask.any():\n                    data, fill_value = maybe_upcast(data, copy=True)\n                    data[mask] = fill_value\n                else:\n                    data = data.copy()\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy\n                    )\n        elif isinstance(data, (np.ndarray, Series, Index)):\n            if data.dtype.names:\n                data_columns = list(data.dtype.names)\n                data = {k: data[k] for k in data_columns}\n                if columns is None:\n                    columns = data_columns\n                mgr = init_dict(data, index, columns, dtype=dtype)\n            elif getattr(data, 'name', None) is not None:\n                mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy\n                    )\n        elif isinstance(data, compat.Iterable) and not isinstance(data,\n            string_and_binary_types):\n            if not isinstance(data, compat.Sequence):\n                data = list(data)\n            if len(data) > 0:\n                if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                    if is_named_tuple(data[0]) and columns is None:\n                        columns = data[0]._fields\n                    arrays, columns = to_arrays(data, columns, dtype=dtype)\n                    columns = ensure_index(columns)\n                    if index is None:\n                        if isinstance(data[0], Series):\n                            index = get_names_from_index(data)\n                        elif isinstance(data[0], Categorical):\n                            index = ibase.default_index(len(data[0]))\n                        else:\n                            index = ibase.default_index(len(data))\n                    mgr = arrays_to_mgr(arrays, columns, index, columns,\n                        dtype=dtype)\n                else:\n                    mgr = init_ndarray(data, index, columns, dtype=dtype,\n                        copy=copy)\n            else:\n                mgr = init_dict({}, index, columns, dtype=dtype)\n        else:\n            try:\n                arr = np.array(data, dtype=dtype, copy=copy)\n            except (ValueError, TypeError) as e:\n                exc = TypeError(\n                    'DataFrame constructor called with incompatible data and dtype: {e}'\n                    .format(e=e))\n                raise_with_traceback(exc)\n            if arr.ndim == 0 and index is not None and columns is not None:\n                values = cast_scalar_to_array((len(index), len(columns)),\n                    data, dtype=dtype)\n                mgr = init_ndarray(values, index, columns, dtype=values.\n                    dtype, copy=False)\n            else:\n                raise ValueError('DataFrame constructor not properly called!')\n        NDFrame.__init__(self, mgr, fastpath=True)\n\n    @property\n    def axes(self):\n        \"\"\"\n        Return a list representing the axes of the DataFrame.\n\n        It has the row axis labels and column axis labels as the only members.\n        They are returned in that order.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.axes\n        [RangeIndex(start=0, stop=2, step=1), Index(['coll', 'col2'],\n        dtype='object')]\n        \"\"\"\n        return [self.index, self.columns]\n\n    @property\n    def shape(self):\n        \"\"\"\n        Return a tuple representing the dimensionality of the DataFrame.\n\n        See Also\n        --------\n        ndarray.shape\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.shape\n        (2, 2)\n\n        >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n        ...                    'col3': [5, 6]})\n        >>> df.shape\n        (2, 3)\n        \"\"\"\n        return len(self.index), len(self.columns)\n\n    @property\n    def _is_homogeneous_type(self):\n        \"\"\"\n        Whether all the columns in a DataFrame have the same type.\n\n        Returns\n        -------\n        bool\n\n        Examples\n        --------\n        >>> DataFrame({\"A\": [1, 2], \"B\": [3, 4]})._is_homogeneous_type\n        True\n        >>> DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.0]})._is_homogeneous_type\n        False\n\n        Items with the same type but different sizes are considered\n        different types.\n\n        >>> DataFrame({\n        ...    \"A\": np.array([1, 2], dtype=np.int32),\n        ...    \"B\": np.array([1, 2], dtype=np.int64)})._is_homogeneous_type\n        False\n        \"\"\"\n        if self._data.any_extension_types:\n            return len({block.dtype for block in self._data.blocks}) == 1\n        else:\n            return not self._data.is_mixed_type\n\n    def _repr_fits_vertical_(self):\n        \"\"\"\n        Check length against max_rows.\n        \"\"\"\n        max_rows = get_option('display.max_rows')\n        return len(self) <= max_rows\n\n    def _repr_fits_horizontal_(self, ignore_width=False):\n        \"\"\"\n        Check if full repr fits in horizontal boundaries imposed by the display\n        options width and max_columns.\n\n        In case off non-interactive session, no boundaries apply.\n\n        `ignore_width` is here so ipnb+HTML output can behave the way\n        users expect. display.max_columns remains in effect.\n        GH3541, GH3573\n        \"\"\"\n        width, height = console.get_console_size()\n        max_columns = get_option('display.max_columns')\n        nb_columns = len(self.columns)\n        if (max_columns and nb_columns > max_columns or not ignore_width and\n            width and nb_columns > width // 2):\n            return False\n        if ignore_width or not console.in_interactive_session():\n            return True\n        if get_option('display.width'\n            ) is not None or console.in_ipython_frontend():\n            max_rows = 1\n        else:\n            max_rows = get_option('display.max_rows')\n        buf = StringIO()\n        d = self\n        if not max_rows is None:\n            d = d.iloc[:min(max_rows, len(d))]\n        else:\n            return True\n        d.to_string(buf=buf)\n        value = buf.getvalue()\n        repr_width = max(len(l) for l in value.split('\\n'))\n        return repr_width < width\n\n    def _info_repr(self):\n        \"\"\"\n        True if the repr should show the info view.\n        \"\"\"\n        info_repr_option = get_option('display.large_repr') == 'info'\n        return info_repr_option and not (self._repr_fits_horizontal_() and\n            self._repr_fits_vertical_())\n\n    def __unicode__(self):\n        \"\"\"\n        Return a string representation for a particular DataFrame.\n\n        Invoked by unicode(df) in py2 only. Yields a Unicode String in both\n        py2/py3.\n        \"\"\"\n        buf = StringIO(u(''))\n        if self._info_repr():\n            self.info(buf=buf)\n            return buf.getvalue()\n        max_rows = get_option('display.max_rows')\n        max_cols = get_option('display.max_columns')\n        show_dimensions = get_option('display.show_dimensions')\n        if get_option('display.expand_frame_repr'):\n            width, _ = console.get_console_size()\n        else:\n            width = None\n        self.to_string(buf=buf, max_rows=max_rows, max_cols=max_cols,\n            line_width=width, show_dimensions=show_dimensions)\n        return buf.getvalue()\n\n    def _repr_html_(self):\n        \"\"\"\n        Return a html representation for a particular DataFrame.\n\n        Mainly for IPython notebook.\n        \"\"\"\n        if console.in_qtconsole():\n            return None\n        if self._info_repr():\n            buf = StringIO(u(''))\n            self.info(buf=buf)\n            val = buf.getvalue().replace('<', '&lt;', 1)\n            val = val.replace('>', '&gt;', 1)\n            return '<pre>' + val + '</pre>'\n        if get_option('display.notebook_repr_html'):\n            max_rows = get_option('display.max_rows')\n            max_cols = get_option('display.max_columns')\n            show_dimensions = get_option('display.show_dimensions')\n            return self.to_html(max_rows=max_rows, max_cols=max_cols,\n                show_dimensions=show_dimensions, notebook=True)\n        else:\n            return None\n\n    @Substitution(header=\n        'Write out the column names. If a list of strings is given, it is assumed to be aliases for the column names'\n        )\n    @Substitution(shared_params=fmt.common_docstring, returns=fmt.\n        return_docstring)\n    def to_string(self, buf=None, columns=None, col_space=None, header=True,\n        index=True, na_rep='NaN', formatters=None, float_format=None,\n        sparsify=None, index_names=True, justify=None, max_rows=None,\n        max_cols=None, show_dimensions=False, decimal='.', line_width=None):\n        \"\"\"\n        Render a DataFrame to a console-friendly tabular output.\n        %(shared_params)s\n        line_width : int, optional\n            Width to wrap a line in characters.\n        %(returns)s\n        See Also\n        --------\n        to_html : Convert DataFrame to HTML.\n\n        Examples\n        --------\n        >>> d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}\n        >>> df = pd.DataFrame(d)\n        >>> print(df.to_string())\n           col1  col2\n        0     1     4\n        1     2     5\n        2     3     6\n        \"\"\"\n        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n            col_space=col_space, na_rep=na_rep, formatters=formatters,\n            float_format=float_format, sparsify=sparsify, justify=justify,\n            index_names=index_names, header=header, index=index, max_rows=\n            max_rows, max_cols=max_cols, show_dimensions=show_dimensions,\n            decimal=decimal, line_width=line_width)\n        formatter.to_string()\n        if buf is None:\n            result = formatter.buf.getvalue()\n            return result\n\n    @property\n    def style(self):\n        \"\"\"\n        Property returning a Styler object containing methods for\n        building a styled HTML representation fo the DataFrame.\n\n        See Also\n        --------\n        pandas.io.formats.style.Styler\n        \"\"\"\n        from pandas.io.formats.style import Styler\n        return Styler(self)\n\n    def iteritems(self):\n        \"\"\"\n        Iterator over (column name, Series) pairs.\n\n        Iterates over the DataFrame columns, returning a tuple with\n        the column name and the content as a Series.\n\n        Yields\n        ------\n        label : object\n            The column names for the DataFrame being iterated over.\n        content : Series\n            The column entries belonging to each label, as a Series.\n\n        See Also\n        --------\n        DataFrame.iterrows : Iterate over DataFrame rows as\n            (index, Series) pairs.\n        DataFrame.itertuples : Iterate over DataFrame rows as namedtuples\n            of the values.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'species': ['bear', 'bear', 'marsupial'],\n        ...                   'population': [1864, 22000, 80000]},\n        ...                   index=['panda', 'polar', 'koala'])\n        >>> df\n                species   population\n        panda \tbear \t  1864\n        polar \tbear \t  22000\n        koala \tmarsupial 80000\n        >>> for label, content in df.iteritems():\n        ...     print('label:', label)\n        ...     print('content:', content, sep='\\\\n')\n        ...\n        label: species\n        content:\n        panda         bear\n        polar         bear\n        koala    marsupial\n        Name: species, dtype: object\n        label: population\n        content:\n        panda     1864\n        polar    22000\n        koala    80000\n        Name: population, dtype: int64\n        \"\"\"\n        if self.columns.is_unique and hasattr(self, '_item_cache'):\n            for k in self.columns:\n                yield k, self._get_item_cache(k)\n        else:\n            for i, k in enumerate(self.columns):\n                yield k, self._ixs(i, axis=1)\n\n    def iterrows(self):\n        \"\"\"\n        Iterate over DataFrame rows as (index, Series) pairs.\n\n        Yields\n        ------\n        index : label or tuple of label\n            The index of the row. A tuple for a `MultiIndex`.\n        data : Series\n            The data of the row as a Series.\n\n        it : generator\n            A generator that iterates over the rows of the frame.\n\n        See Also\n        --------\n        itertuples : Iterate over DataFrame rows as namedtuples of the values.\n        iteritems : Iterate over (column name, Series) pairs.\n\n        Notes\n        -----\n\n        1. Because ``iterrows`` returns a Series for each row,\n           it does **not** preserve dtypes across the rows (dtypes are\n           preserved across columns for DataFrames). For example,\n\n           >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n           >>> row = next(df.iterrows())[1]\n           >>> row\n           int      1.0\n           float    1.5\n           Name: 0, dtype: float64\n           >>> print(row['int'].dtype)\n           float64\n           >>> print(df['int'].dtype)\n           int64\n\n           To preserve dtypes while iterating over the rows, it is better\n           to use :meth:`itertuples` which returns namedtuples of the values\n           and which is generally faster than ``iterrows``.\n\n        2. You should **never modify** something you are iterating over.\n           This is not guaranteed to work in all cases. Depending on the\n           data types, the iterator returns a copy and not a view, and writing\n           to it will have no effect.\n        \"\"\"\n        columns = self.columns\n        klass = self._constructor_sliced\n        for k, v in zip(self.index, self.values):\n            s = klass(v, index=columns, name=k)\n            yield k, s\n\n    def itertuples(self, index=True, name='Pandas'):\n        \"\"\"\n        Iterate over DataFrame rows as namedtuples.\n\n        Parameters\n        ----------\n        index : bool, default True\n            If True, return the index as the first element of the tuple.\n        name : str, default \"Pandas\"\n            The name of the returned namedtuples or None to return regular\n            tuples.\n\n        Yields\n        -------\n        collections.namedtuple\n            Yields a namedtuple for each row in the DataFrame with the first\n            field possibly being the index and following fields being the\n            column values.\n\n        See Also\n        --------\n        DataFrame.iterrows : Iterate over DataFrame rows as (index, Series)\n            pairs.\n        DataFrame.iteritems : Iterate over (column name, Series) pairs.\n\n        Notes\n        -----\n        The column names will be renamed to positional names if they are\n        invalid Python identifiers, repeated, or start with an underscore.\n        With a large number of columns (>255), regular tuples are returned.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'num_legs': [4, 2], 'num_wings': [0, 2]},\n        ...                   index=['dog', 'hawk'])\n        >>> df\n              num_legs  num_wings\n        dog          4          0\n        hawk         2          2\n        >>> for row in df.itertuples():\n        ...     print(row)\n        ...\n        Pandas(Index='dog', num_legs=4, num_wings=0)\n        Pandas(Index='hawk', num_legs=2, num_wings=2)\n\n        By setting the `index` parameter to False we can remove the index\n        as the first element of the tuple:\n\n        >>> for row in df.itertuples(index=False):\n        ...     print(row)\n        ...\n        Pandas(num_legs=4, num_wings=0)\n        Pandas(num_legs=2, num_wings=2)\n\n        With the `name` parameter set we set a custom name for the yielded\n        namedtuples:\n\n        >>> for row in df.itertuples(name='Animal'):\n        ...     print(row)\n        ...\n        Animal(Index='dog', num_legs=4, num_wings=0)\n        Animal(Index='hawk', num_legs=2, num_wings=2)\n        \"\"\"\n        arrays = []\n        fields = list(self.columns)\n        if index:\n            arrays.append(self.index)\n            fields.insert(0, 'Index')\n        arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))\n        if name is not None and len(self.columns) + index < 256:\n            try:\n                itertuple = collections.namedtuple(name, fields, rename=True)\n                return map(itertuple._make, zip(*arrays))\n            except Exception:\n                pass\n        return zip(*arrays)\n    items = iteritems\n\n    def __len__(self):\n        \"\"\"\n        Returns length of info axis, but here we use the index.\n        \"\"\"\n        return len(self.index)\n\n    def dot(self, other):\n        \"\"\"\n        Compute the matrix mutiplication between the DataFrame and other.\n\n        This method computes the matrix product between the DataFrame and the\n        values of an other Series, DataFrame or a numpy array.\n\n        It can also be called using ``self @ other`` in Python >= 3.5.\n\n        Parameters\n        ----------\n        other : Series, DataFrame or array-like\n            The other object to compute the matrix product with.\n\n        Returns\n        -------\n        Series or DataFrame\n            If other is a Series, return the matrix product between self and\n            other as a Serie. If other is a DataFrame or a numpy.array, return\n            the matrix product of self and other in a DataFrame of a np.array.\n\n        See Also\n        --------\n        Series.dot: Similar method for Series.\n\n        Notes\n        -----\n        The dimensions of DataFrame and other must be compatible in order to\n        compute the matrix multiplication.\n\n        The dot method for Series computes the inner product, instead of the\n        matrix product here.\n\n        Examples\n        --------\n        Here we multiply a DataFrame with a Series.\n\n        >>> df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])\n        >>> s = pd.Series([1, 1, 2, 1])\n        >>> df.dot(s)\n        0    -4\n        1     5\n        dtype: int64\n\n        Here we multiply a DataFrame with another DataFrame.\n\n        >>> other = pd.DataFrame([[0, 1], [1, 2], [-1, -1], [2, 0]])\n        >>> df.dot(other)\n            0   1\n        0   1   4\n        1   2   2\n\n        Note that the dot method give the same result as @\n\n        >>> df @ other\n            0   1\n        0   1   4\n        1   2   2\n\n        The dot method works also if other is an np.array.\n\n        >>> arr = np.array([[0, 1], [1, 2], [-1, -1], [2, 0]])\n        >>> df.dot(arr)\n            0   1\n        0   1   4\n        1   2   2\n        \"\"\"\n        if isinstance(other, (Series, DataFrame)):\n            common = self.columns.union(other.index)\n            if len(common) > len(self.columns) or len(common) > len(other.index\n                ):\n                raise ValueError('matrices are not aligned')\n            left = self.reindex(columns=common, copy=False)\n            right = other.reindex(index=common, copy=False)\n            lvals = left.values\n            rvals = right.values\n        else:\n            left = self\n            lvals = self.values\n            rvals = np.asarray(other)\n            if lvals.shape[1] != rvals.shape[0]:\n                raise ValueError('Dot product shape mismatch, {s} vs {r}'.\n                    format(s=lvals.shape, r=rvals.shape))\n        if isinstance(other, DataFrame):\n            return self._constructor(np.dot(lvals, rvals), index=left.index,\n                columns=other.columns)\n        elif isinstance(other, Series):\n            return Series(np.dot(lvals, rvals), index=left.index)\n        elif isinstance(rvals, (np.ndarray, Index)):\n            result = np.dot(lvals, rvals)\n            if result.ndim == 2:\n                return self._constructor(result, index=left.index)\n            else:\n                return Series(result, index=left.index)\n        else:\n            raise TypeError('unsupported type: {oth}'.format(oth=type(other)))\n\n    def __matmul__(self, other):\n        \"\"\"\n        Matrix multiplication using binary `@` operator in Python>=3.5.\n        \"\"\"\n        return self.dot(other)\n\n    def __rmatmul__(self, other):\n        \"\"\"\n        Matrix multiplication using binary `@` operator in Python>=3.5.\n        \"\"\"\n        return self.T.dot(np.transpose(other)).T\n\n    @classmethod\n    def from_dict(cls, data, orient='columns', dtype=None, columns=None):\n        \"\"\"\n        Construct DataFrame from dict of array-like or dicts.\n\n        Creates DataFrame object from dictionary by columns or by index\n        allowing dtype specification.\n\n        Parameters\n        ----------\n        data : dict\n            Of the form {field : array-like} or {field : dict}.\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the passed dict\n            should be the columns of the resulting DataFrame, pass 'columns'\n            (default). Otherwise if the keys should be rows, pass 'index'.\n        dtype : dtype, default None\n            Data type to force, otherwise infer.\n        columns : list, default None\n            Column labels to use when ``orient='index'``. Raises a ValueError\n            if used with ``orient='columns'``.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        pandas.DataFrame\n\n        See Also\n        --------\n        DataFrame.from_records : DataFrame from ndarray (structured\n            dtype), list of tuples, dict, or DataFrame.\n        DataFrame : DataFrame object creation using constructor.\n\n        Examples\n        --------\n        By default the keys of the dict become the DataFrame columns:\n\n        >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data)\n           col_1 col_2\n        0      3     a\n        1      2     b\n        2      1     c\n        3      0     d\n\n        Specify ``orient='index'`` to create the DataFrame using dictionary\n        keys as rows:\n\n        >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n        >>> pd.DataFrame.from_dict(data, orient='index')\n               0  1  2  3\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n\n        When using the 'index' orientation, the column names can be\n        specified manually:\n\n        >>> pd.DataFrame.from_dict(data, orient='index',\n        ...                        columns=['A', 'B', 'C', 'D'])\n               A  B  C  D\n        row_1  3  2  1  0\n        row_2  a  b  c  d\n        \"\"\"\n        index = None\n        orient = orient.lower()\n        if orient == 'index':\n            if len(data) > 0:\n                if isinstance(list(data.values())[0], (Series, dict)):\n                    data = _from_nested_dict(data)\n                else:\n                    data, index = list(data.values()), list(data.keys())\n        elif orient == 'columns':\n            if columns is not None:\n                raise ValueError(\n                    \"cannot use columns parameter with orient='columns'\")\n        else:\n            raise ValueError('only recognize index or columns for orient')\n        return cls(data, index=index, columns=columns, dtype=dtype)\n\n    def to_numpy(self, dtype=None, copy=False):\n        \"\"\"\n        Convert the DataFrame to a NumPy array.\n\n        .. versionadded:: 0.24.0\n\n        By default, the dtype of the returned array will be the common NumPy\n        dtype of all types in the DataFrame. For example, if the dtypes are\n        ``float16`` and ``float32``, the results dtype will be ``float32``.\n        This may require copying data and coercing values, which may be\n        expensive.\n\n        Parameters\n        ----------\n        dtype : str or numpy.dtype, optional\n            The dtype to pass to :meth:`numpy.asarray`\n        copy : bool, default False\n            Whether to ensure that the returned value is a not a view on\n            another array. Note that ``copy=False`` does not *ensure* that\n            ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n            a copy is made, even if not strictly necessary.\n\n        Returns\n        -------\n        array : numpy.ndarray\n\n        See Also\n        --------\n        Series.to_numpy : Similar method for Series.\n\n        Examples\n        --------\n        >>> pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]}).to_numpy()\n        array([[1, 3],\n               [2, 4]])\n\n        With heterogenous data, the lowest common type will have to\n        be used.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.5]})\n        >>> df.to_numpy()\n        array([[1. , 3. ],\n               [2. , 4.5]])\n\n        For a mix of numeric and non-numeric types, the output array will\n        have object dtype.\n\n        >>> df['C'] = pd.date_range('2000', periods=2)\n        >>> df.to_numpy()\n        array([[1, 3.0, Timestamp('2000-01-01 00:00:00')],\n               [2, 4.5, Timestamp('2000-01-02 00:00:00')]], dtype=object)\n        \"\"\"\n        result = np.array(self.values, dtype=dtype, copy=copy)\n        return result\n\n    def to_dict(self, orient='dict', into=dict):\n        \"\"\"\n        Convert the DataFrame to a dictionary.\n\n        The type of the key-value pairs can be customized with the parameters\n        (see below).\n\n        Parameters\n        ----------\n        orient : str {'dict', 'list', 'series', 'split', 'records', 'index'}\n            Determines the type of the values of the dictionary.\n\n            - 'dict' (default) : dict like {column -> {index -> value}}\n            - 'list' : dict like {column -> [values]}\n            - 'series' : dict like {column -> Series(values)}\n            - 'split' : dict like\n              {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}\n            - 'records' : list like\n              [{column -> value}, ... , {column -> value}]\n            - 'index' : dict like {index -> {column -> value}}\n\n            Abbreviations are allowed. `s` indicates `series` and `sp`\n            indicates `split`.\n\n        into : class, default dict\n            The collections.Mapping subclass used for all Mappings\n            in the return value.  Can be the actual class or an empty\n            instance of the mapping type you want.  If you want a\n            collections.defaultdict, you must pass it initialized.\n\n            .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        dict, list or collections.Mapping\n            Return a collections.Mapping object representing the DataFrame.\n            The resulting transformation depends on the `orient` parameter.\n\n        See Also\n        --------\n        DataFrame.from_dict: Create a DataFrame from a dictionary.\n        DataFrame.to_json: Convert a DataFrame to JSON format.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'col1': [1, 2],\n        ...                    'col2': [0.5, 0.75]},\n        ...                   index=['row1', 'row2'])\n        >>> df\n              col1  col2\n        row1     1  0.50\n        row2     2  0.75\n        >>> df.to_dict()\n        {'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}\n\n        You can specify the return orientation.\n\n        >>> df.to_dict('series')\n        {'col1': row1    1\n                 row2    2\n        Name: col1, dtype: int64,\n        'col2': row1    0.50\n                row2    0.75\n        Name: col2, dtype: float64}\n\n        >>> df.to_dict('split')\n        {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],\n         'data': [[1, 0.5], [2, 0.75]]}\n\n        >>> df.to_dict('records')\n        [{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}]\n\n        >>> df.to_dict('index')\n        {'row1': {'col1': 1, 'col2': 0.5}, 'row2': {'col1': 2, 'col2': 0.75}}\n\n        You can also specify the mapping type.\n\n        >>> from collections import OrderedDict, defaultdict\n        >>> df.to_dict(into=OrderedDict)\n        OrderedDict([('col1', OrderedDict([('row1', 1), ('row2', 2)])),\n                     ('col2', OrderedDict([('row1', 0.5), ('row2', 0.75)]))])\n\n        If you want a `defaultdict`, you need to initialize it:\n\n        >>> dd = defaultdict(list)\n        >>> df.to_dict('records', into=dd)\n        [defaultdict(<class 'list'>, {'col1': 1, 'col2': 0.5}),\n         defaultdict(<class 'list'>, {'col1': 2, 'col2': 0.75})]\n        \"\"\"\n        if not self.columns.is_unique:\n            warnings.warn(\n                'DataFrame columns are not unique, some columns will be omitted.'\n                , UserWarning, stacklevel=2)\n        into_c = com.standardize_mapping(into)\n        if orient.lower().startswith('d'):\n            return into_c((k, v.to_dict(into)) for k, v in compat.iteritems\n                (self))\n        elif orient.lower().startswith('l'):\n            return into_c((k, v.tolist()) for k, v in compat.iteritems(self))\n        elif orient.lower().startswith('sp'):\n            return into_c((('index', self.index.tolist()), ('columns', self\n                .columns.tolist()), ('data', [list(map(com.\n                maybe_box_datetimelike, t)) for t in self.itertuples(index=\n                False)])))\n        elif orient.lower().startswith('s'):\n            return into_c((k, com.maybe_box_datetimelike(v)) for k, v in\n                compat.iteritems(self))\n        elif orient.lower().startswith('r'):\n            return [into_c((k, com.maybe_box_datetimelike(v)) for k, v in\n                compat.iteritems(row._asdict())) for row in self.itertuples\n                (index=False)]\n        elif orient.lower().startswith('i'):\n            if not self.index.is_unique:\n                raise ValueError(\n                    \"DataFrame index must be unique for orient='index'.\")\n            return into_c((t[0], dict(zip(self.columns, t[1:]))) for t in\n                self.itertuples())\n        else:\n            raise ValueError(\"orient '{o}' not understood\".format(o=orient))\n\n    def to_gbq(self, destination_table, project_id=None, chunksize=None,\n        reauth=False, if_exists='fail', auth_local_webserver=False,\n        table_schema=None, location=None, progress_bar=True, credentials=\n        None, verbose=None, private_key=None):\n        \"\"\"\n        Write a DataFrame to a Google BigQuery table.\n\n        This function requires the `pandas-gbq package\n        <https://pandas-gbq.readthedocs.io>`__.\n\n        See the `How to authenticate with Google BigQuery\n        <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\n        guide for authentication instructions.\n\n        Parameters\n        ----------\n        destination_table : str\n            Name of table to be written, in the form ``dataset.tablename``.\n        project_id : str, optional\n            Google BigQuery Account project ID. Optional when available from\n            the environment.\n        chunksize : int, optional\n            Number of rows to be inserted in each chunk from the dataframe.\n            Set to ``None`` to load the whole dataframe at once.\n        reauth : bool, default False\n            Force Google BigQuery to re-authenticate the user. This is useful\n            if multiple accounts are used.\n        if_exists : str, default 'fail'\n            Behavior when the destination table exists. Value can be one of:\n\n            ``'fail'``\n                If table exists, do nothing.\n            ``'replace'``\n                If table exists, drop it, recreate it, and insert data.\n            ``'append'``\n                If table exists, insert data. Create if does not exist.\n        auth_local_webserver : bool, default False\n            Use the `local webserver flow`_ instead of the `console flow`_\n            when getting user credentials.\n\n            .. _local webserver flow:\n                http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n            .. _console flow:\n                http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n            *New in version 0.2.0 of pandas-gbq*.\n        table_schema : list of dicts, optional\n            List of BigQuery table fields to which according DataFrame\n            columns conform to, e.g. ``[{'name': 'col1', 'type':\n            'STRING'},...]``. If schema is not provided, it will be\n            generated according to dtypes of DataFrame columns. See\n            BigQuery API documentation on available names of a field.\n\n            *New in version 0.3.1 of pandas-gbq*.\n        location : str, optional\n            Location where the load job should run. See the `BigQuery locations\n            documentation\n            <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n            list of available locations. The location must match that of the\n            target dataset.\n\n            *New in version 0.5.0 of pandas-gbq*.\n        progress_bar : bool, default True\n            Use the library `tqdm` to show the progress bar for the upload,\n            chunk by chunk.\n\n            *New in version 0.5.0 of pandas-gbq*.\n        credentials : google.auth.credentials.Credentials, optional\n            Credentials for accessing Google APIs. Use this parameter to\n            override default credentials, such as to use Compute Engine\n            :class:`google.auth.compute_engine.Credentials` or Service\n            Account :class:`google.oauth2.service_account.Credentials`\n            directly.\n\n            *New in version 0.8.0 of pandas-gbq*.\n\n            .. versionadded:: 0.24.0\n        verbose : bool, deprecated\n            Deprecated in pandas-gbq version 0.4.0. Use the `logging module\n            to adjust verbosity instead\n            <https://pandas-gbq.readthedocs.io/en/latest/intro.html#logging>`__.\n        private_key : str, deprecated\n            Deprecated in pandas-gbq version 0.8.0. Use the ``credentials``\n            parameter and\n            :func:`google.oauth2.service_account.Credentials.from_service_account_info`\n            or\n            :func:`google.oauth2.service_account.Credentials.from_service_account_file`\n            instead.\n\n            Service account private key in JSON format. Can be file path\n            or string contents. This is useful for remote server\n            authentication (eg. Jupyter/IPython notebook on remote host).\n\n        See Also\n        --------\n        pandas_gbq.to_gbq : This function in the pandas-gbq library.\n        pandas.read_gbq : Read a DataFrame from Google BigQuery.\n        \"\"\"\n        from pandas.io import gbq\n        return gbq.to_gbq(self, destination_table, project_id=project_id,\n            chunksize=chunksize, reauth=reauth, if_exists=if_exists,\n            auth_local_webserver=auth_local_webserver, table_schema=\n            table_schema, location=location, progress_bar=progress_bar,\n            credentials=credentials, verbose=verbose, private_key=private_key)\n\n    @classmethod\n    def from_records(cls, data, index=None, exclude=None, columns=None,\n        coerce_float=False, nrows=None):\n        \"\"\"\n        Convert structured or record ndarray to DataFrame.\n\n        Parameters\n        ----------\n        data : ndarray (structured dtype), list of tuples, dict, or DataFrame\n        index : string, list of fields, array-like\n            Field of array to use as the index, alternately a specific set of\n            input labels to use\n        exclude : sequence, default None\n            Columns or fields to exclude\n        columns : sequence, default None\n            Column names to use. If the passed data do not have names\n            associated with them, this argument provides names for the\n            columns. Otherwise this argument indicates the order of the columns\n            in the result (any names not found in the data will become all-NA\n            columns)\n        coerce_float : boolean, default False\n            Attempt to convert values of non-string, non-numeric objects (like\n            decimal.Decimal) to floating point, useful for SQL result sets\n        nrows : int, default None\n            Number of rows to read if data is an iterator\n\n        Returns\n        -------\n        df : DataFrame\n        \"\"\"\n        if columns is not None:\n            columns = ensure_index(columns)\n        if is_iterator(data):\n            if nrows == 0:\n                return cls()\n            try:\n                first_row = next(data)\n            except StopIteration:\n                return cls(index=index, columns=columns)\n            dtype = None\n            if hasattr(first_row, 'dtype') and first_row.dtype.names:\n                dtype = first_row.dtype\n            values = [first_row]\n            if nrows is None:\n                values += data\n            else:\n                values.extend(itertools.islice(data, nrows - 1))\n            if dtype is not None:\n                data = np.array(values, dtype=dtype)\n            else:\n                data = values\n        if isinstance(data, dict):\n            if columns is None:\n                columns = arr_columns = ensure_index(sorted(data))\n                arrays = [data[k] for k in columns]\n            else:\n                arrays = []\n                arr_columns = []\n                for k, v in compat.iteritems(data):\n                    if k in columns:\n                        arr_columns.append(k)\n                        arrays.append(v)\n                arrays, arr_columns = reorder_arrays(arrays, arr_columns,\n                    columns)\n        elif isinstance(data, (np.ndarray, DataFrame)):\n            arrays, columns = to_arrays(data, columns)\n            if columns is not None:\n                columns = ensure_index(columns)\n            arr_columns = columns\n        else:\n            arrays, arr_columns = to_arrays(data, columns, coerce_float=\n                coerce_float)\n            arr_columns = ensure_index(arr_columns)\n            if columns is not None:\n                columns = ensure_index(columns)\n            else:\n                columns = arr_columns\n        if exclude is None:\n            exclude = set()\n        else:\n            exclude = set(exclude)\n        result_index = None\n        if index is not None:\n            if isinstance(index, compat.string_types) or not hasattr(index,\n                '__iter__'):\n                i = columns.get_loc(index)\n                exclude.add(index)\n                if len(arrays) > 0:\n                    result_index = Index(arrays[i], name=index)\n                else:\n                    result_index = Index([], name=index)\n            else:\n                try:\n                    to_remove = [arr_columns.get_loc(field) for field in index]\n                    index_data = [arrays[i] for i in to_remove]\n                    result_index = ensure_index_from_sequences(index_data,\n                        names=index)\n                    exclude.update(index)\n                except Exception:\n                    result_index = index\n        if any(exclude):\n            arr_exclude = [x for x in exclude if x in arr_columns]\n            to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n            arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n            arr_columns = arr_columns.drop(arr_exclude)\n            columns = columns.drop(exclude)\n        mgr = arrays_to_mgr(arrays, arr_columns, result_index, columns)\n        return cls(mgr)\n\n    def to_records(self, index=True, convert_datetime64=None, column_dtypes\n        =None, index_dtypes=None):\n        \"\"\"\n        Convert DataFrame to a NumPy record array.\n\n        Index will be included as the first field of the record array if\n        requested.\n\n        Parameters\n        ----------\n        index : bool, default True\n            Include index in resulting record array, stored in 'index'\n            field or using the index label, if set.\n        convert_datetime64 : bool, default None\n            .. deprecated:: 0.23.0\n\n            Whether to convert the index to datetime.datetime if it is a\n            DatetimeIndex.\n        column_dtypes : str, type, dict, default None\n            .. versionadded:: 0.24.0\n\n            If a string or type, the data type to store all columns. If\n            a dictionary, a mapping of column names and indices (zero-indexed)\n            to specific data types.\n        index_dtypes : str, type, dict, default None\n            .. versionadded:: 0.24.0\n\n            If a string or type, the data type to store all index levels. If\n            a dictionary, a mapping of index level names and indices\n            (zero-indexed) to specific data types.\n\n            This mapping is applied only if `index=True`.\n\n        Returns\n        -------\n        numpy.recarray\n            NumPy ndarray with the DataFrame labels as fields and each row\n            of the DataFrame as entries.\n\n        See Also\n        --------\n        DataFrame.from_records: Convert structured or record ndarray\n            to DataFrame.\n        numpy.recarray: An ndarray that allows field access using\n            attributes, analogous to typed columns in a\n            spreadsheet.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n        ...                   index=['a', 'b'])\n        >>> df\n           A     B\n        a  1  0.50\n        b  2  0.75\n        >>> df.to_records()\n        rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n                  dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n        If the DataFrame index has no label then the recarray field name\n        is set to 'index'. If the index has a label then this is used as the\n        field name:\n\n        >>> df.index = df.index.rename(\"I\")\n        >>> df.to_records()\n        rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n                  dtype=[('I', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n        The index can be excluded from the record array:\n\n        >>> df.to_records(index=False)\n        rec.array([(1, 0.5 ), (2, 0.75)],\n                  dtype=[('A', '<i8'), ('B', '<f8')])\n\n        Data types can be specified for the columns:\n\n        >>> df.to_records(column_dtypes={\"A\": \"int32\"})\n        rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n                  dtype=[('I', 'O'), ('A', '<i4'), ('B', '<f8')])\n\n        As well as for the index:\n\n        >>> df.to_records(index_dtypes=\"<S2\")\n        rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n                  dtype=[('I', 'S2'), ('A', '<i8'), ('B', '<f8')])\n\n        >>> index_dtypes = \"<S{}\".format(df.index.str.len().max())\n        >>> df.to_records(index_dtypes=index_dtypes)\n        rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n                  dtype=[('I', 'S1'), ('A', '<i8'), ('B', '<f8')])\n        \"\"\"\n        if convert_datetime64 is not None:\n            warnings.warn(\n                \"The 'convert_datetime64' parameter is deprecated and will be removed in a future version\"\n                , FutureWarning, stacklevel=2)\n        if index:\n            if is_datetime64_any_dtype(self.index) and convert_datetime64:\n                ix_vals = [self.index.to_pydatetime()]\n            elif isinstance(self.index, MultiIndex):\n                ix_vals = lmap(np.array, zip(*self.index.values))\n            else:\n                ix_vals = [self.index.values]\n            arrays = ix_vals + [self[c].get_values() for c in self.columns]\n            count = 0\n            index_names = list(self.index.names)\n            if isinstance(self.index, MultiIndex):\n                for i, n in enumerate(index_names):\n                    if n is None:\n                        index_names[i] = 'level_%d' % count\n                        count += 1\n            elif index_names[0] is None:\n                index_names = ['index']\n            names = lmap(compat.text_type, index_names) + lmap(compat.\n                text_type, self.columns)\n        else:\n            arrays = [self[c].get_values() for c in self.columns]\n            names = lmap(compat.text_type, self.columns)\n            index_names = []\n        index_len = len(index_names)\n        formats = []\n        for i, v in enumerate(arrays):\n            index = i\n            if index < index_len:\n                dtype_mapping = index_dtypes\n                name = index_names[index]\n            else:\n                index -= index_len\n                dtype_mapping = column_dtypes\n                name = self.columns[index]\n            if is_dict_like(dtype_mapping):\n                if name in dtype_mapping:\n                    dtype_mapping = dtype_mapping[name]\n                elif index in dtype_mapping:\n                    dtype_mapping = dtype_mapping[index]\n                else:\n                    dtype_mapping = None\n            if dtype_mapping is None:\n                formats.append(v.dtype)\n            elif isinstance(dtype_mapping, (type, compat.string_types)):\n                formats.append(dtype_mapping)\n            else:\n                element = 'row' if i < index_len else 'column'\n                msg = ('Invalid dtype {dtype} specified for {element} {name}'\n                    .format(dtype=dtype_mapping, element=element, name=name))\n                raise ValueError(msg)\n        return np.rec.fromarrays(arrays, dtype={'names': names, 'formats':\n            formats})\n\n    @classmethod\n    def from_items(cls, items, columns=None, orient='columns'):\n        \"\"\"\n        Construct a DataFrame from a list of tuples.\n\n        .. deprecated:: 0.23.0\n          `from_items` is deprecated and will be removed in a future version.\n          Use :meth:`DataFrame.from_dict(dict(items)) <DataFrame.from_dict>`\n          instead.\n          :meth:`DataFrame.from_dict(OrderedDict(items)) <DataFrame.from_dict>`\n          may be used to preserve the key order.\n\n        Convert (key, value) pairs to DataFrame. The keys will be the axis\n        index (usually the columns, but depends on the specified\n        orientation). The values should be arrays or Series.\n\n        Parameters\n        ----------\n        items : sequence of (key, value) pairs\n            Values should be arrays or Series.\n        columns : sequence of column labels, optional\n            Must be passed if orient='index'.\n        orient : {'columns', 'index'}, default 'columns'\n            The \"orientation\" of the data. If the keys of the\n            input correspond to column labels, pass 'columns'\n            (default). Otherwise if the keys correspond to the index,\n            pass 'index'.\n\n        Returns\n        -------\n        frame : DataFrame\n        \"\"\"\n        warnings.warn(\n            'from_items is deprecated. Please use DataFrame.from_dict(dict(items), ...) instead. DataFrame.from_dict(OrderedDict(items)) may be used to preserve the key order.'\n            , FutureWarning, stacklevel=2)\n        keys, values = lzip(*items)\n        if orient == 'columns':\n            if columns is not None:\n                columns = ensure_index(columns)\n                idict = dict(items)\n                if len(idict) < len(items):\n                    if not columns.equals(ensure_index(keys)):\n                        raise ValueError(\n                            'With non-unique item names, passed columns must be identical'\n                            )\n                    arrays = values\n                else:\n                    arrays = [idict[k] for k in columns if k in idict]\n            else:\n                columns = ensure_index(keys)\n                arrays = values\n            try:\n                return cls._from_arrays(arrays, columns, None)\n            except ValueError:\n                if not is_nested_list_like(values):\n                    raise ValueError(\n                        'The value in each (key, value) pair must be an array, Series, or dict'\n                        )\n        elif orient == 'index':\n            if columns is None:\n                raise TypeError(\"Must pass columns with orient='index'\")\n            keys = ensure_index(keys)\n            try:\n                arr = np.array(values, dtype=object).T\n                data = [lib.maybe_convert_objects(v) for v in arr]\n                return cls._from_arrays(data, columns, keys)\n            except TypeError:\n                if not is_nested_list_like(values):\n                    raise ValueError(\n                        'The value in each (key, value) pair must be an array, Series, or dict'\n                        )\n        else:\n            raise ValueError(\"'orient' must be either 'columns' or 'index'\")\n\n    @classmethod\n    def _from_arrays(cls, arrays, columns, index, dtype=None):\n        mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n        return cls(mgr)\n\n    @classmethod\n    def from_csv(cls, path, header=0, sep=',', index_col=0, parse_dates=\n        True, encoding=None, tupleize_cols=None, infer_datetime_format=False):\n        \"\"\"\n        Read CSV file.\n\n        .. deprecated:: 0.21.0\n            Use :func:`pandas.read_csv` instead.\n\n        It is preferable to use the more powerful :func:`pandas.read_csv`\n        for most general purposes, but ``from_csv`` makes for an easy\n        roundtrip to and from a file (the exact counterpart of\n        ``to_csv``), especially with a DataFrame of time series data.\n\n        This method only differs from the preferred :func:`pandas.read_csv`\n        in some defaults:\n\n        - `index_col` is ``0`` instead of ``None`` (take first column as index\n          by default)\n        - `parse_dates` is ``True`` instead of ``False`` (try parsing the index\n          as datetime by default)\n\n        So a ``pd.DataFrame.from_csv(path)`` can be replaced by\n        ``pd.read_csv(path, index_col=0, parse_dates=True)``.\n\n        Parameters\n        ----------\n        path : string file path or file handle / StringIO\n        header : int, default 0\n            Row to use as header (skip prior rows)\n        sep : string, default ','\n            Field delimiter\n        index_col : int or sequence, default 0\n            Column to use for index. If a sequence is given, a MultiIndex\n            is used. Different default from read_table\n        parse_dates : boolean, default True\n            Parse dates. Different default from read_table\n        tupleize_cols : boolean, default False\n            write multi_index columns as a list of tuples (if True)\n            or new (expanded format) if False)\n        infer_datetime_format : boolean, default False\n            If True and `parse_dates` is True for a column, try to infer the\n            datetime format based on the first datetime string. If the format\n            can be inferred, there often will be a large parsing speed-up.\n\n        Returns\n        -------\n        y : DataFrame\n\n        See Also\n        --------\n        pandas.read_csv\n        \"\"\"\n        warnings.warn(\n            'from_csv is deprecated. Please use read_csv(...) instead. Note that some of the default arguments are different, so please refer to the documentation for from_csv when changing your function calls'\n            , FutureWarning, stacklevel=2)\n        from pandas.io.parsers import read_csv\n        return read_csv(path, header=header, sep=sep, parse_dates=\n            parse_dates, index_col=index_col, encoding=encoding,\n            tupleize_cols=tupleize_cols, infer_datetime_format=\n            infer_datetime_format)\n\n    def to_sparse(self, fill_value=None, kind='block'):\n        \"\"\"\n        Convert to SparseDataFrame.\n\n        Implement the sparse version of the DataFrame meaning that any data\n        matching a specific value it's omitted in the representation.\n        The sparse DataFrame allows for a more efficient storage.\n\n        Parameters\n        ----------\n        fill_value : float, default None\n            The specific value that should be omitted in the representation.\n        kind : {'block', 'integer'}, default 'block'\n            The kind of the SparseIndex tracking where data is not equal to\n            the fill value:\n\n            - 'block' tracks only the locations and sizes of blocks of data.\n            - 'integer' keeps an array with all the locations of the data.\n\n            In most cases 'block' is recommended, since it's more memory\n            efficient.\n\n        Returns\n        -------\n        SparseDataFrame\n            The sparse representation of the DataFrame.\n\n        See Also\n        --------\n        DataFrame.to_dense :\n            Converts the DataFrame back to the its dense form.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([(np.nan, np.nan),\n        ...                    (1., np.nan),\n        ...                    (np.nan, 1.)])\n        >>> df\n             0    1\n        0  NaN  NaN\n        1  1.0  NaN\n        2  NaN  1.0\n        >>> type(df)\n        <class 'pandas.core.frame.DataFrame'>\n\n        >>> sdf = df.to_sparse()\n        >>> sdf\n             0    1\n        0  NaN  NaN\n        1  1.0  NaN\n        2  NaN  1.0\n        >>> type(sdf)\n        <class 'pandas.core.sparse.frame.SparseDataFrame'>\n        \"\"\"\n        from pandas.core.sparse.api import SparseDataFrame\n        return SparseDataFrame(self._series, index=self.index, columns=self\n            .columns, default_kind=kind, default_fill_value=fill_value)\n\n    def to_panel(self):\n        \"\"\"\n        Transform long (stacked) format (DataFrame) into wide (3D, Panel)\n        format.\n\n        .. deprecated:: 0.20.0\n\n        Currently the index of the DataFrame must be a 2-level MultiIndex. This\n        may be generalized later\n\n        Returns\n        -------\n        panel : Panel\n        \"\"\"\n        if not isinstance(self.index, MultiIndex) or len(self.index.levels\n            ) != 2:\n            raise NotImplementedError('Only 2-level MultiIndex are supported.')\n        if not self.index.is_unique:\n            raise ValueError(\n                \"Can't convert non-uniquely indexed DataFrame to Panel\")\n        self._consolidate_inplace()\n        if self.index.lexsort_depth < 2:\n            selfsorted = self.sort_index(level=0)\n        else:\n            selfsorted = self\n        major_axis, minor_axis = selfsorted.index.levels\n        major_codes, minor_codes = selfsorted.index.codes\n        shape = len(major_axis), len(minor_axis)\n        major_axis = major_axis.copy()\n        major_axis.name = self.index.names[0]\n        minor_axis = minor_axis.copy()\n        minor_axis.name = self.index.names[1]\n        new_axes = [selfsorted.columns, major_axis, minor_axis]\n        new_mgr = selfsorted._data.reshape_nd(axes=new_axes, labels=[\n            major_codes, minor_codes], shape=shape, ref_items=selfsorted.\n            columns)\n        return self._constructor_expanddim(new_mgr)\n\n    @deprecate_kwarg(old_arg_name='encoding', new_arg_name=None)\n    def to_stata(self, fname, convert_dates=None, write_index=True,\n        encoding='latin-1', byteorder=None, time_stamp=None, data_label=\n        None, variable_labels=None, version=114, convert_strl=None):\n        \"\"\"\n        Export DataFrame object to Stata dta format.\n\n        Writes the DataFrame to a Stata dataset file.\n        \"dta\" files contain a Stata dataset.\n\n        Parameters\n        ----------\n        fname : str, buffer or path object\n            String, path object (pathlib.Path or py._path.local.LocalPath) or\n            object implementing a binary write() function. If using a buffer\n            then the buffer will not be automatically closed after the file\n            data has been written.\n        convert_dates : dict\n            Dictionary mapping columns containing datetime types to stata\n            internal format to use when writing the dates. Options are 'tc',\n            'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n            or a name. Datetime columns that do not have a conversion type\n            specified will be converted to 'tc'. Raises NotImplementedError if\n            a datetime column has timezone information.\n        write_index : bool\n            Write the index to Stata dataset.\n        encoding : str\n            Default is latin-1. Unicode is not supported.\n        byteorder : str\n            Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`.\n        time_stamp : datetime\n            A datetime to use as file creation date.  Default is the current\n            time.\n        data_label : str, optional\n            A label for the data set.  Must be 80 characters or smaller.\n        variable_labels : dict\n            Dictionary containing columns as keys and variable labels as\n            values. Each label must be 80 characters or smaller.\n\n            .. versionadded:: 0.19.0\n\n        version : {114, 117}, default 114\n            Version to use in the output dta file.  Version 114 can be used\n            read by Stata 10 and later.  Version 117 can be read by Stata 13\n            or later. Version 114 limits string variables to 244 characters or\n            fewer while 117 allows strings with lengths up to 2,000,000\n            characters.\n\n            .. versionadded:: 0.23.0\n\n        convert_strl : list, optional\n            List of column names to convert to string columns to Stata StrL\n            format. Only available if version is 117.  Storing strings in the\n            StrL format can produce smaller dta files if strings have more than\n            8 characters and values are repeated.\n\n            .. versionadded:: 0.23.0\n\n        Raises\n        ------\n        NotImplementedError\n            * If datetimes contain timezone information\n            * Column dtype is not representable in Stata\n        ValueError\n            * Columns listed in convert_dates are neither datetime64[ns]\n              or datetime.datetime\n            * Column listed in convert_dates is not in DataFrame\n            * Categorical label contains more than 32,000 characters\n\n            .. versionadded:: 0.19.0\n\n        See Also\n        --------\n        read_stata : Import Stata data files.\n        io.stata.StataWriter : Low-level writer for Stata data files.\n        io.stata.StataWriter117 : Low-level writer for version 117 files.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'animal': ['falcon', 'parrot', 'falcon',\n        ...                               'parrot'],\n        ...                    'speed': [350, 18, 361, 15]})\n        >>> df.to_stata('animals.dta')  # doctest: +SKIP\n        \"\"\"\n        kwargs = {}\n        if version not in (114, 117):\n            raise ValueError('Only formats 114 and 117 supported.')\n        if version == 114:\n            if convert_strl is not None:\n                raise ValueError(\n                    'strl support is only available when using format 117')\n            from pandas.io.stata import StataWriter as statawriter\n        else:\n            from pandas.io.stata import StataWriter117 as statawriter\n            kwargs['convert_strl'] = convert_strl\n        writer = statawriter(fname, self, convert_dates=convert_dates,\n            byteorder=byteorder, time_stamp=time_stamp, data_label=\n            data_label, write_index=write_index, variable_labels=\n            variable_labels, **kwargs)\n        writer.write_file()\n\n    def to_feather(self, fname):\n        \"\"\"\n        Write out the binary feather-format for DataFrames.\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        fname : str\n            string file path\n        \"\"\"\n        from pandas.io.feather_format import to_feather\n        to_feather(self, fname)\n\n    def to_parquet(self, fname, engine='auto', compression='snappy', index=\n        None, partition_cols=None, **kwargs):\n        \"\"\"\n        Write a DataFrame to the binary parquet format.\n\n        .. versionadded:: 0.21.0\n\n        This function writes the dataframe as a `parquet file\n        <https://parquet.apache.org/>`_. You can choose different parquet\n        backends, and have the option of compression. See\n        :ref:`the user guide <io.parquet>` for more details.\n\n        Parameters\n        ----------\n        fname : str\n            File path or Root Directory path. Will be used as Root Directory\n            path while writing a partitioned dataset.\n\n            .. versionchanged:: 0.24.0\n\n        engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n            Parquet library to use. If 'auto', then the option\n            ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n            behavior is to try 'pyarrow', falling back to 'fastparquet' if\n            'pyarrow' is unavailable.\n        compression : {'snappy', 'gzip', 'brotli', None}, default 'snappy'\n            Name of the compression to use. Use ``None`` for no compression.\n        index : bool, default None\n            If ``True``, include the dataframe's index(es) in the file output.\n            If ``False``, they will not be written to the file. If ``None``,\n            the behavior depends on the chosen engine.\n\n            .. versionadded:: 0.24.0\n\n        partition_cols : list, optional, default None\n            Column names by which to partition the dataset\n            Columns are partitioned in the order they are given\n\n            .. versionadded:: 0.24.0\n\n        **kwargs\n            Additional arguments passed to the parquet library. See\n            :ref:`pandas io <io.parquet>` for more details.\n\n        See Also\n        --------\n        read_parquet : Read a parquet file.\n        DataFrame.to_csv : Write a csv file.\n        DataFrame.to_sql : Write to a sql table.\n        DataFrame.to_hdf : Write to hdf.\n\n        Notes\n        -----\n        This function requires either the `fastparquet\n        <https://pypi.org/project/fastparquet>`_ or `pyarrow\n        <https://arrow.apache.org/docs/python/>`_ library.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        >>> df.to_parquet('df.parquet.gzip',\n        ...               compression='gzip')  # doctest: +SKIP\n        >>> pd.read_parquet('df.parquet.gzip')  # doctest: +SKIP\n           col1  col2\n        0     1     3\n        1     2     4\n        \"\"\"\n        from pandas.io.parquet import to_parquet\n        to_parquet(self, fname, engine, compression=compression, index=\n            index, partition_cols=partition_cols, **kwargs)\n\n    @Substitution(header='Whether to print column labels, default True')\n    @Substitution(shared_params=fmt.common_docstring, returns=fmt.\n        return_docstring)\n    def to_html(self, buf=None, columns=None, col_space=None, header=True,\n        index=True, na_rep='NaN', formatters=None, float_format=None,\n        sparsify=None, index_names=True, justify=None, max_rows=None,\n        max_cols=None, show_dimensions=False, decimal='.', bold_rows=True,\n        classes=None, escape=True, notebook=False, border=None, table_id=\n        None, render_links=False):\n        \"\"\"\n        Render a DataFrame as an HTML table.\n        %(shared_params)s\n        bold_rows : bool, default True\n            Make the row labels bold in the output.\n        classes : str or list or tuple, default None\n            CSS class(es) to apply to the resulting html table.\n        escape : bool, default True\n            Convert the characters <, >, and & to HTML-safe sequences.\n        notebook : {True, False}, default False\n            Whether the generated HTML is for IPython Notebook.\n        border : int\n            A ``border=border`` attribute is included in the opening\n            `<table>` tag. Default ``pd.options.html.border``.\n\n            .. versionadded:: 0.19.0\n\n        table_id : str, optional\n            A css id is included in the opening `<table>` tag if specified.\n\n            .. versionadded:: 0.23.0\n\n        render_links : bool, default False\n            Convert URLs to HTML links.\n\n            .. versionadded:: 0.24.0\n\n        %(returns)s\n        See Also\n        --------\n        to_string : Convert DataFrame to a string.\n        \"\"\"\n        if (justify is not None and justify not in fmt.\n            _VALID_JUSTIFY_PARAMETERS):\n            raise ValueError('Invalid value for justify parameter')\n        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n            col_space=col_space, na_rep=na_rep, formatters=formatters,\n            float_format=float_format, sparsify=sparsify, justify=justify,\n            index_names=index_names, header=header, index=index, bold_rows=\n            bold_rows, escape=escape, max_rows=max_rows, max_cols=max_cols,\n            show_dimensions=show_dimensions, decimal=decimal, table_id=\n            table_id, render_links=render_links)\n        formatter.to_html(classes=classes, notebook=notebook, border=border)\n        if buf is None:\n            return formatter.buf.getvalue()\n\n    def info(self, verbose=None, buf=None, max_cols=None, memory_usage=None,\n        null_counts=None):\n        \"\"\"\n        Print a concise summary of a DataFrame.\n\n        This method prints information about a DataFrame including\n        the index dtype and column dtypes, non-null values and memory usage.\n\n        Parameters\n        ----------\n        verbose : bool, optional\n            Whether to print the full summary. By default, the setting in\n            ``pandas.options.display.max_info_columns`` is followed.\n        buf : writable buffer, defaults to sys.stdout\n            Where to send the output. By default, the output is printed to\n            sys.stdout. Pass a writable buffer if you need to further process\n            the output.\n        max_cols : int, optional\n            When to switch from the verbose to the truncated output. If the\n            DataFrame has more than `max_cols` columns, the truncated output\n            is used. By default, the setting in\n            ``pandas.options.display.max_info_columns`` is used.\n        memory_usage : bool, str, optional\n            Specifies whether total memory usage of the DataFrame\n            elements (including the index) should be displayed. By default,\n            this follows the ``pandas.options.display.memory_usage`` setting.\n\n            True always show memory usage. False never shows memory usage.\n            A value of 'deep' is equivalent to \"True with deep introspection\".\n            Memory usage is shown in human-readable units (base-2\n            representation). Without deep introspection a memory estimation is\n            made based in column dtype and number of rows assuming values\n            consume the same memory amount for corresponding dtypes. With deep\n            memory introspection, a real memory usage calculation is performed\n            at the cost of computational resources.\n        null_counts : bool, optional\n            Whether to show the non-null counts. By default, this is shown\n            only if the frame is smaller than\n            ``pandas.options.display.max_info_rows`` and\n            ``pandas.options.display.max_info_columns``. A value of True always\n            shows the counts, and False never shows the counts.\n\n        Returns\n        -------\n        None\n            This method prints a summary of a DataFrame and returns None.\n\n        See Also\n        --------\n        DataFrame.describe: Generate descriptive statistics of DataFrame\n            columns.\n        DataFrame.memory_usage: Memory usage of DataFrame columns.\n\n        Examples\n        --------\n        >>> int_values = [1, 2, 3, 4, 5]\n        >>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n        >>> float_values = [0.0, 0.25, 0.5, 0.75, 1.0]\n        >>> df = pd.DataFrame({\"int_col\": int_values, \"text_col\": text_values,\n        ...                   \"float_col\": float_values})\n        >>> df\n           int_col text_col  float_col\n        0        1    alpha       0.00\n        1        2     beta       0.25\n        2        3    gamma       0.50\n        3        4    delta       0.75\n        4        5  epsilon       1.00\n\n        Prints information of all columns:\n\n        >>> df.info(verbose=True)\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 5 entries, 0 to 4\n        Data columns (total 3 columns):\n        int_col      5 non-null int64\n        text_col     5 non-null object\n        float_col    5 non-null float64\n        dtypes: float64(1), int64(1), object(1)\n        memory usage: 200.0+ bytes\n\n        Prints a summary of columns count and its dtypes but not per column\n        information:\n\n        >>> df.info(verbose=False)\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 5 entries, 0 to 4\n        Columns: 3 entries, int_col to float_col\n        dtypes: float64(1), int64(1), object(1)\n        memory usage: 200.0+ bytes\n\n        Pipe output of DataFrame.info to buffer instead of sys.stdout, get\n        buffer content and writes to a text file:\n\n        >>> import io\n        >>> buffer = io.StringIO()\n        >>> df.info(buf=buffer)\n        >>> s = buffer.getvalue()\n        >>> with open(\"df_info.txt\", \"w\",\n        ...           encoding=\"utf-8\") as f:  # doctest: +SKIP\n        ...     f.write(s)\n        260\n\n        The `memory_usage` parameter allows deep introspection mode, specially\n        useful for big DataFrames and fine-tune memory optimization:\n\n        >>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)\n        >>> df = pd.DataFrame({\n        ...     'column_1': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n        ...     'column_2': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n        ...     'column_3': np.random.choice(['a', 'b', 'c'], 10 ** 6)\n        ... })\n        >>> df.info()\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 1000000 entries, 0 to 999999\n        Data columns (total 3 columns):\n        column_1    1000000 non-null object\n        column_2    1000000 non-null object\n        column_3    1000000 non-null object\n        dtypes: object(3)\n        memory usage: 22.9+ MB\n\n        >>> df.info(memory_usage='deep')\n        <class 'pandas.core.frame.DataFrame'>\n        RangeIndex: 1000000 entries, 0 to 999999\n        Data columns (total 3 columns):\n        column_1    1000000 non-null object\n        column_2    1000000 non-null object\n        column_3    1000000 non-null object\n        dtypes: object(3)\n        memory usage: 188.8 MB\n        \"\"\"\n        if buf is None:\n            buf = sys.stdout\n        lines = []\n        lines.append(str(type(self)))\n        lines.append(self.index._summary())\n        if len(self.columns) == 0:\n            lines.append('Empty {name}'.format(name=type(self).__name__))\n            fmt.buffer_put_lines(buf, lines)\n            return\n        cols = self.columns\n        if max_cols is None:\n            max_cols = get_option('display.max_info_columns', len(self.\n                columns) + 1)\n        max_rows = get_option('display.max_info_rows', len(self) + 1)\n        if null_counts is None:\n            show_counts = len(self.columns) <= max_cols and len(self\n                ) < max_rows\n        else:\n            show_counts = null_counts\n        exceeds_info_cols = len(self.columns) > max_cols\n\n        def _verbose_repr():\n            lines.append('Data columns (total %d columns):' % len(self.columns)\n                )\n            space = max(len(pprint_thing(k)) for k in self.columns) + 4\n            counts = None\n            tmpl = '{count}{dtype}'\n            if show_counts:\n                counts = self.count()\n                if len(cols) != len(counts):\n                    raise AssertionError(\n                        'Columns must equal counts ({cols:d} != {counts:d})'\n                        .format(cols=len(cols), counts=len(counts)))\n                tmpl = '{count} non-null {dtype}'\n            dtypes = self.dtypes\n            for i, col in enumerate(self.columns):\n                dtype = dtypes.iloc[i]\n                col = pprint_thing(col)\n                count = ''\n                if show_counts:\n                    count = counts.iloc[i]\n                lines.append(_put_str(col, space) + tmpl.format(count=count,\n                    dtype=dtype))\n\n        def _non_verbose_repr():\n            lines.append(self.columns._summary(name='Columns'))\n\n        def _sizeof_fmt(num, size_qualifier):\n            for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n                if num < 1024.0:\n                    return '{num:3.1f}{size_q} {x}'.format(num=num, size_q=\n                        size_qualifier, x=x)\n                num /= 1024.0\n            return '{num:3.1f}{size_q} {pb}'.format(num=num, size_q=\n                size_qualifier, pb='PB')\n        if verbose:\n            _verbose_repr()\n        elif verbose is False:\n            _non_verbose_repr()\n        elif exceeds_info_cols:\n            _non_verbose_repr()\n        else:\n            _verbose_repr()\n        counts = self.get_dtype_counts()\n        dtypes = ['{k}({kk:d})'.format(k=k[0], kk=k[1]) for k in sorted(\n            compat.iteritems(counts))]\n        lines.append('dtypes: {types}'.format(types=', '.join(dtypes)))\n        if memory_usage is None:\n            memory_usage = get_option('display.memory_usage')\n        if memory_usage:\n            size_qualifier = ''\n            if memory_usage == 'deep':\n                deep = True\n            else:\n                deep = False\n                if 'object' in counts or self.index._is_memory_usage_qualified(\n                    ):\n                    size_qualifier = '+'\n            mem_usage = self.memory_usage(index=True, deep=deep).sum()\n            lines.append('memory usage: {mem}\\n'.format(mem=_sizeof_fmt(\n                mem_usage, size_qualifier)))\n        fmt.buffer_put_lines(buf, lines)\n\n    def memory_usage(self, index=True, deep=False):\n        \"\"\"\n        Return the memory usage of each column in bytes.\n\n        The memory usage can optionally include the contribution of\n        the index and elements of `object` dtype.\n\n        This value is displayed in `DataFrame.info` by default. This can be\n        suppressed by setting ``pandas.options.display.memory_usage`` to False.\n\n        Parameters\n        ----------\n        index : bool, default True\n            Specifies whether to include the memory usage of the DataFrame's\n            index in returned Series. If ``index=True`` the memory usage of the\n            index the first item in the output.\n        deep : bool, default False\n            If True, introspect the data deeply by interrogating\n            `object` dtypes for system-level memory consumption, and include\n            it in the returned values.\n\n        Returns\n        -------\n        sizes : Series\n            A Series whose index is the original column names and whose values\n            is the memory usage of each column in bytes.\n\n        See Also\n        --------\n        numpy.ndarray.nbytes : Total bytes consumed by the elements of an\n            ndarray.\n        Series.memory_usage : Bytes consumed by a Series.\n        pandas.Categorical : Memory-efficient array for string values with\n            many repeated values.\n        DataFrame.info : Concise summary of a DataFrame.\n\n        Examples\n        --------\n        >>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n        >>> data = dict([(t, np.ones(shape=5000).astype(t))\n        ...              for t in dtypes])\n        >>> df = pd.DataFrame(data)\n        >>> df.head()\n           int64  float64  complex128 object  bool\n        0      1      1.0      (1+0j)      1  True\n        1      1      1.0      (1+0j)      1  True\n        2      1      1.0      (1+0j)      1  True\n        3      1      1.0      (1+0j)      1  True\n        4      1      1.0      (1+0j)      1  True\n\n        >>> df.memory_usage()\n        Index            80\n        int64         40000\n        float64       40000\n        complex128    80000\n        object        40000\n        bool           5000\n        dtype: int64\n\n        >>> df.memory_usage(index=False)\n        int64         40000\n        float64       40000\n        complex128    80000\n        object        40000\n        bool           5000\n        dtype: int64\n\n        The memory footprint of `object` dtype columns is ignored by default:\n\n        >>> df.memory_usage(deep=True)\n        Index             80\n        int64          40000\n        float64        40000\n        complex128     80000\n        object        160000\n        bool            5000\n        dtype: int64\n\n        Use a Categorical for efficient storage of an object-dtype column with\n        many repeated values.\n\n        >>> df['object'].astype('category').memory_usage(deep=True)\n        5168\n        \"\"\"\n        result = Series([c.memory_usage(index=False, deep=deep) for col, c in\n            self.iteritems()], index=self.columns)\n        if index:\n            result = Series(self.index.memory_usage(deep=deep), index=['Index']\n                ).append(result)\n        return result\n\n    def transpose(self, *args, **kwargs):\n        \"\"\"\n        Transpose index and columns.\n\n        Reflect the DataFrame over its main diagonal by writing rows as columns\n        and vice-versa. The property :attr:`.T` is an accessor to the method\n        :meth:`transpose`.\n\n        Parameters\n        ----------\n        copy : bool, default False\n            If True, the underlying data is copied. Otherwise (default), no\n            copy is made if possible.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted for\n            compatibility with numpy.\n\n        Returns\n        -------\n        DataFrame\n            The transposed DataFrame.\n\n        See Also\n        --------\n        numpy.transpose : Permute the dimensions of a given array.\n\n        Notes\n        -----\n        Transposing a DataFrame with mixed dtypes will result in a homogeneous\n        DataFrame with the `object` dtype. In such a case, a copy of the data\n        is always made.\n\n        Examples\n        --------\n        **Square DataFrame with homogeneous dtype**\n\n        >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n        >>> df1 = pd.DataFrame(data=d1)\n        >>> df1\n           col1  col2\n        0     1     3\n        1     2     4\n\n        >>> df1_transposed = df1.T # or df1.transpose()\n        >>> df1_transposed\n              0  1\n        col1  1  2\n        col2  3  4\n\n        When the dtype is homogeneous in the original DataFrame, we get a\n        transposed DataFrame with the same dtype:\n\n        >>> df1.dtypes\n        col1    int64\n        col2    int64\n        dtype: object\n        >>> df1_transposed.dtypes\n        0    int64\n        1    int64\n        dtype: object\n\n        **Non-square DataFrame with mixed dtypes**\n\n        >>> d2 = {'name': ['Alice', 'Bob'],\n        ...       'score': [9.5, 8],\n        ...       'employed': [False, True],\n        ...       'kids': [0, 0]}\n        >>> df2 = pd.DataFrame(data=d2)\n        >>> df2\n            name  score  employed  kids\n        0  Alice    9.5     False     0\n        1    Bob    8.0      True     0\n\n        >>> df2_transposed = df2.T # or df2.transpose()\n        >>> df2_transposed\n                      0     1\n        name      Alice   Bob\n        score       9.5     8\n        employed  False  True\n        kids          0     0\n\n        When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n        the `object` dtype:\n\n        >>> df2.dtypes\n        name         object\n        score       float64\n        employed       bool\n        kids          int64\n        dtype: object\n        >>> df2_transposed.dtypes\n        0    object\n        1    object\n        dtype: object\n        \"\"\"\n        nv.validate_transpose(args, dict())\n        return super(DataFrame, self).transpose(1, 0, **kwargs)\n    T = property(transpose)\n\n    def _unpickle_frame_compat(self, state):\n        if len(state) == 2:\n            series, idx = state\n            columns = sorted(series)\n        else:\n            series, cols, idx = state\n            columns = com._unpickle_array(cols)\n        index = com._unpickle_array(idx)\n        self._data = self._init_dict(series, index, columns, None)\n\n    def _unpickle_matrix_compat(self, state):\n        (vals, idx, cols), object_state = state\n        index = com._unpickle_array(idx)\n        dm = DataFrame(vals, index=index, columns=com._unpickle_array(cols),\n            copy=False)\n        if object_state is not None:\n            ovals, _, ocols = object_state\n            objects = DataFrame(ovals, index=index, columns=com.\n                _unpickle_array(ocols), copy=False)\n            dm = dm.join(objects)\n        self._data = dm._data\n\n    def get_value(self, index, col, takeable=False):\n        \"\"\"\n        Quickly retrieve single value at passed column and index.\n\n        .. deprecated:: 0.21.0\n            Use .at[] or .iat[] accessors instead.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        value : scalar value\n        \"\"\"\n        warnings.warn(\n            'get_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead'\n            , FutureWarning, stacklevel=2)\n        return self._get_value(index, col, takeable=takeable)\n\n    def _get_value(self, index, col, takeable=False):\n        if takeable:\n            series = self._iget_item_cache(col)\n            return com.maybe_box_datetimelike(series._values[index])\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n        try:\n            return engine.get_value(series._values, index)\n        except (TypeError, ValueError):\n            col = self.columns.get_loc(col)\n            index = self.index.get_loc(index)\n            return self._get_value(index, col, takeable=True)\n    _get_value.__doc__ = get_value.__doc__\n\n    def set_value(self, index, col, value, takeable=False):\n        \"\"\"\n        Put single value at passed column and index.\n\n        .. deprecated:: 0.21.0\n            Use .at[] or .iat[] accessors instead.\n\n        Parameters\n        ----------\n        index : row label\n        col : column label\n        value : scalar value\n        takeable : interpret the index/col as indexers, default False\n\n        Returns\n        -------\n        frame : DataFrame\n            If label pair is contained, will be reference to calling DataFrame,\n            otherwise a new object\n        \"\"\"\n        warnings.warn(\n            'set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead'\n            , FutureWarning, stacklevel=2)\n        return self._set_value(index, col, value, takeable=takeable)\n\n    def _set_value(self, index, col, value, takeable=False):\n        try:\n            if takeable is True:\n                series = self._iget_item_cache(col)\n                return series._set_value(index, value, takeable=True)\n            series = self._get_item_cache(col)\n            engine = self.index._engine\n            engine.set_value(series._values, index, value)\n            return self\n        except (KeyError, TypeError):\n            if takeable:\n                self.iloc[index, col] = value\n            else:\n                self.loc[index, col] = value\n            self._item_cache.pop(col, None)\n            return self\n    _set_value.__doc__ = set_value.__doc__\n\n    def _ixs(self, i, axis=0):\n        \"\"\"\n        Parameters\n        ----------\n        i : int, slice, or sequence of integers\n        axis : int\n\n        Notes\n        -----\n        If slice passed, the resulting data will be a view.\n        \"\"\"\n        if axis == 0:\n            if isinstance(i, slice):\n                return self[i]\n            else:\n                label = self.index[i]\n                if isinstance(label, Index):\n                    result = self.take(i, axis=axis)\n                    copy = True\n                else:\n                    new_values = self._data.fast_xs(i)\n                    if is_scalar(new_values):\n                        return new_values\n                    copy = isinstance(new_values, np.ndarray\n                        ) and new_values.base is None\n                    result = self._constructor_sliced(new_values, index=\n                        self.columns, name=self.index[i], dtype=new_values.\n                        dtype)\n                result._set_is_copy(self, copy=copy)\n                return result\n        else:\n            label = self.columns[i]\n            if isinstance(i, slice):\n                lab_slice = slice(label[0], label[-1])\n                return self.loc[:, lab_slice]\n            else:\n                if isinstance(label, Index):\n                    return self._take(i, axis=1)\n                index_len = len(self.index)\n                values = self._data.iget(i)\n                if index_len and not len(values):\n                    values = np.array([np.nan] * index_len, dtype=object)\n                result = self._box_col_values(values, label)\n                result._set_as_cached(label, self)\n                return result\n\n    def __getitem__(self, key):\n        key = com.apply_if_callable(key, self)\n        try:\n            if self.columns.is_unique and key in self.columns:\n                if self.columns.nlevels > 1:\n                    return self._getitem_multilevel(key)\n                return self._get_item_cache(key)\n        except (TypeError, ValueError):\n            pass\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            return self._slice(indexer, axis=0)\n        if isinstance(key, DataFrame):\n            return self._getitem_frame(key)\n        if com.is_bool_indexer(key):\n            return self._getitem_bool_array(key)\n        is_single_key = isinstance(key, tuple) or not is_list_like(key)\n        if is_single_key:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            indexer = self.columns.get_loc(key)\n            if is_integer(indexer):\n                indexer = [indexer]\n        else:\n            if is_iterator(key):\n                key = list(key)\n            indexer = self.loc._convert_to_indexer(key, axis=1,\n                raise_missing=True)\n        if getattr(indexer, 'dtype', None) == bool:\n            indexer = np.where(indexer)[0]\n        data = self._take(indexer, axis=1)\n        if is_single_key:\n            if data.shape[1] == 1 and not isinstance(self.columns, MultiIndex):\n                data = data[key]\n        return data\n\n    def _getitem_bool_array(self, key):\n        if isinstance(key, Series) and not key.index.equals(self.index):\n            warnings.warn(\n                'Boolean Series key will be reindexed to match DataFrame index.'\n                , UserWarning, stacklevel=3)\n        elif len(key) != len(self.index):\n            raise ValueError('Item wrong length %d instead of %d.' % (len(\n                key), len(self.index)))\n        key = check_bool_indexer(self.index, key)\n        indexer = key.nonzero()[0]\n        return self._take(indexer, axis=0)\n\n    def _getitem_multilevel(self, key):\n        loc = self.columns.get_loc(key)\n        if isinstance(loc, (slice, Series, np.ndarray, Index)):\n            new_columns = self.columns[loc]\n            result_columns = maybe_droplevels(new_columns, key)\n            if self._is_mixed_type:\n                result = self.reindex(columns=new_columns)\n                result.columns = result_columns\n            else:\n                new_values = self.values[:, loc]\n                result = self._constructor(new_values, index=self.index,\n                    columns=result_columns)\n                result = result.__finalize__(self)\n            if len(result.columns) == 1:\n                top = result.columns[0]\n                if isinstance(top, tuple):\n                    top = top[0]\n                if top == '':\n                    result = result['']\n                    if isinstance(result, Series):\n                        result = self._constructor_sliced(result, index=\n                            self.index, name=key)\n            result._set_is_copy(self)\n            return result\n        else:\n            return self._get_item_cache(key)\n\n    def _getitem_frame(self, key):\n        if key.values.size and not is_bool_dtype(key.values):\n            raise ValueError('Must pass DataFrame with boolean values only')\n        return self.where(key)\n\n    def query(self, expr, inplace=False, **kwargs):\n        \"\"\"\n        Query the columns of a DataFrame with a boolean expression.\n\n        Parameters\n        ----------\n        expr : string\n            The query string to evaluate.  You can refer to variables\n            in the environment by prefixing them with an '@' character like\n            ``@a + b``.\n        inplace : bool\n            Whether the query should modify the data in place or return\n            a modified copy\n\n            .. versionadded:: 0.18.0\n\n        kwargs : dict\n            See the documentation for :func:`pandas.eval` for complete details\n            on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n        Returns\n        -------\n        q : DataFrame\n\n        See Also\n        --------\n        pandas.eval\n        DataFrame.eval\n\n        Notes\n        -----\n        The result of the evaluation of this expression is first passed to\n        :attr:`DataFrame.loc` and if that fails because of a\n        multidimensional key (e.g., a DataFrame) then the result will be passed\n        to :meth:`DataFrame.__getitem__`.\n\n        This method uses the top-level :func:`pandas.eval` function to\n        evaluate the passed query.\n\n        The :meth:`~pandas.DataFrame.query` method uses a slightly\n        modified Python syntax by default. For example, the ``&`` and ``|``\n        (bitwise) operators have the precedence of their boolean cousins,\n        :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n        however the semantics are different.\n\n        You can change the semantics of the expression by passing the keyword\n        argument ``parser='python'``. This enforces the same semantics as\n        evaluation in Python space. Likewise, you can pass ``engine='python'``\n        to evaluate an expression using Python itself as a backend. This is not\n        recommended as it is inefficient compared to using ``numexpr`` as the\n        engine.\n\n        The :attr:`DataFrame.index` and\n        :attr:`DataFrame.columns` attributes of the\n        :class:`~pandas.DataFrame` instance are placed in the query namespace\n        by default, which allows you to treat both the index and columns of the\n        frame as a column in the frame.\n        The identifier ``index`` is used for the frame index; you can also\n        use the name of the index to identify it in a query. Please note that\n        Python keywords may not be used as identifiers.\n\n        For further details and examples see the ``query`` documentation in\n        :ref:`indexing <indexing.query>`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.random.randn(10, 2), columns=list('ab'))\n        >>> df.query('a > b')\n        >>> df[df.a > df.b]  # same result as the previous expression\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(expr, compat.string_types):\n            msg = 'expr must be a string to be evaluated, {0} given'\n            raise ValueError(msg.format(type(expr)))\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        kwargs['target'] = None\n        res = self.eval(expr, **kwargs)\n        try:\n            new_data = self.loc[res]\n        except ValueError:\n            new_data = self[res]\n        if inplace:\n            self._update_inplace(new_data)\n        else:\n            return new_data\n\n    def eval(self, expr, inplace=False, **kwargs):\n        \"\"\"\n        Evaluate a string describing operations on DataFrame columns.\n\n        Operates on columns only, not specific rows or elements.  This allows\n        `eval` to run arbitrary code, which can make you vulnerable to code\n        injection if you pass user input to this function.\n\n        Parameters\n        ----------\n        expr : str\n            The expression string to evaluate.\n        inplace : bool, default False\n            If the expression contains an assignment, whether to perform the\n            operation inplace and mutate the existing DataFrame. Otherwise,\n            a new DataFrame is returned.\n\n            .. versionadded:: 0.18.0.\n        kwargs : dict\n            See the documentation for :func:`~pandas.eval` for complete details\n            on the keyword arguments accepted by\n            :meth:`~pandas.DataFrame.query`.\n\n        Returns\n        -------\n        ndarray, scalar, or pandas object\n            The result of the evaluation.\n\n        See Also\n        --------\n        DataFrame.query : Evaluates a boolean expression to query the columns\n            of a frame.\n        DataFrame.assign : Can evaluate an expression or function to create new\n            values for a column.\n        pandas.eval : Evaluate a Python expression as a string using various\n            backends.\n\n        Notes\n        -----\n        For more details see the API documentation for :func:`~pandas.eval`.\n        For detailed examples see :ref:`enhancing performance with eval\n        <enhancingperf.eval>`.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n        >>> df\n           A   B\n        0  1  10\n        1  2   8\n        2  3   6\n        3  4   4\n        4  5   2\n        >>> df.eval('A + B')\n        0    11\n        1    10\n        2     9\n        3     8\n        4     7\n        dtype: int64\n\n        Assignment is allowed though by default the original DataFrame is not\n        modified.\n\n        >>> df.eval('C = A + B')\n           A   B   C\n        0  1  10  11\n        1  2   8  10\n        2  3   6   9\n        3  4   4   8\n        4  5   2   7\n        >>> df\n           A   B\n        0  1  10\n        1  2   8\n        2  3   6\n        3  4   4\n        4  5   2\n\n        Use ``inplace=True`` to modify the original DataFrame.\n\n        >>> df.eval('C = A + B', inplace=True)\n        >>> df\n           A   B   C\n        0  1  10  11\n        1  2   8  10\n        2  3   6   9\n        3  4   4   8\n        4  5   2   7\n        \"\"\"\n        from pandas.core.computation.eval import eval as _eval\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        resolvers = kwargs.pop('resolvers', None)\n        kwargs['level'] = kwargs.pop('level', 0) + 1\n        if resolvers is None:\n            index_resolvers = self._get_index_resolvers()\n            resolvers = dict(self.iteritems()), index_resolvers\n        if 'target' not in kwargs:\n            kwargs['target'] = self\n        kwargs['resolvers'] = kwargs.get('resolvers', ()) + tuple(resolvers)\n        return _eval(expr, inplace=inplace, **kwargs)\n\n    def select_dtypes(self, include=None, exclude=None):\n        \"\"\"\n        Return a subset of the DataFrame's columns based on the column dtypes.\n\n        Parameters\n        ----------\n        include, exclude : scalar or list-like\n            A selection of dtypes or strings to be included/excluded. At least\n            one of these parameters must be supplied.\n\n        Returns\n        -------\n        subset : DataFrame\n            The subset of the frame including the dtypes in ``include`` and\n            excluding the dtypes in ``exclude``.\n\n        Raises\n        ------\n        ValueError\n            * If both of ``include`` and ``exclude`` are empty\n            * If ``include`` and ``exclude`` have overlapping elements\n            * If any kind of string dtype is passed in.\n\n        Notes\n        -----\n        * To select all *numeric* types, use ``np.number`` or ``'number'``\n        * To select strings you must use the ``object`` dtype, but note that\n          this will return *all* object dtype columns\n        * See the `numpy dtype hierarchy\n          <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n        * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n          ``'datetime64'``\n        * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n          ``'timedelta64'``\n        * To select Pandas categorical dtypes, use ``'category'``\n        * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n          0.20.0) or ``'datetime64[ns, tz]'``\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'a': [1, 2] * 3,\n        ...                    'b': [True, False] * 3,\n        ...                    'c': [1.0, 2.0] * 3})\n        >>> df\n                a      b  c\n        0       1   True  1.0\n        1       2  False  2.0\n        2       1   True  1.0\n        3       2  False  2.0\n        4       1   True  1.0\n        5       2  False  2.0\n\n        >>> df.select_dtypes(include='bool')\n           b\n        0  True\n        1  False\n        2  True\n        3  False\n        4  True\n        5  False\n\n        >>> df.select_dtypes(include=['float64'])\n           c\n        0  1.0\n        1  2.0\n        2  1.0\n        3  2.0\n        4  1.0\n        5  2.0\n\n        >>> df.select_dtypes(exclude=['int'])\n               b    c\n        0   True  1.0\n        1  False  2.0\n        2   True  1.0\n        3  False  2.0\n        4   True  1.0\n        5  False  2.0\n        \"\"\"\n\n        def _get_info_slice(obj, indexer):\n            \"\"\"Slice the info axis of `obj` with `indexer`.\"\"\"\n            if not hasattr(obj, '_info_axis_number'):\n                msg = 'object of type {typ!r} has no info axis'\n                raise TypeError(msg.format(typ=type(obj).__name__))\n            slices = [slice(None)] * obj.ndim\n            slices[obj._info_axis_number] = indexer\n            return tuple(slices)\n        if not is_list_like(include):\n            include = (include,) if include is not None else ()\n        if not is_list_like(exclude):\n            exclude = (exclude,) if exclude is not None else ()\n        selection = tuple(map(frozenset, (include, exclude)))\n        if not any(selection):\n            raise ValueError(\n                'at least one of include or exclude must be nonempty')\n        include, exclude = map(lambda x: frozenset(map(\n            _get_dtype_from_object, x)), selection)\n        for dtypes in (include, exclude):\n            invalidate_string_dtypes(dtypes)\n        if not include.isdisjoint(exclude):\n            raise ValueError('include and exclude overlap on {inc_ex}'.\n                format(inc_ex=include & exclude))\n        include_these = Series(not bool(include), index=self.columns)\n        exclude_these = Series(not bool(exclude), index=self.columns)\n\n        def is_dtype_instance_mapper(idx, dtype):\n            return idx, functools.partial(issubclass, dtype.type)\n        for idx, f in itertools.starmap(is_dtype_instance_mapper, enumerate\n            (self.dtypes)):\n            if include:\n                include_these.iloc[idx] = any(map(f, include))\n            if exclude:\n                exclude_these.iloc[idx] = not any(map(f, exclude))\n        dtype_indexer = include_these & exclude_these\n        return self.loc[_get_info_slice(self, dtype_indexer)]\n\n    def _box_item_values(self, key, values):\n        items = self.columns[self.columns.get_loc(key)]\n        if values.ndim == 2:\n            return self._constructor(values.T, columns=items, index=self.index)\n        else:\n            return self._box_col_values(values, items)\n\n    def _box_col_values(self, values, items):\n        \"\"\"\n        Provide boxed values for a column.\n        \"\"\"\n        klass = self._constructor_sliced\n        return klass(values, index=self.index, name=items, fastpath=True)\n\n    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n        indexer = convert_to_index_sliceable(self, key)\n        if indexer is not None:\n            return self._setitem_slice(indexer, value)\n        if isinstance(key, DataFrame) or getattr(key, 'ndim', None) == 2:\n            self._setitem_frame(key, value)\n        elif isinstance(key, (Series, np.ndarray, list, Index)):\n            self._setitem_array(key, value)\n        else:\n            self._set_item(key, value)\n\n    def _setitem_slice(self, key, value):\n        self._check_setitem_copy()\n        self.loc._setitem_with_indexer(key, value)\n\n    def _setitem_array(self, key, value):\n        if com.is_bool_indexer(key):\n            if len(key) != len(self.index):\n                raise ValueError('Item wrong length %d instead of %d!' % (\n                    len(key), len(self.index)))\n            key = check_bool_indexer(self.index, key)\n            indexer = key.nonzero()[0]\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer(indexer, value)\n        elif isinstance(value, DataFrame):\n            if len(value.columns) != len(key):\n                raise ValueError('Columns must be same length as key')\n            for k1, k2 in zip(key, value.columns):\n                self[k1] = value[k2]\n        else:\n            indexer = self.loc._convert_to_indexer(key, axis=1)\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer((slice(None), indexer), value)\n\n    def _setitem_frame(self, key, value):\n        if isinstance(key, np.ndarray):\n            if key.shape != self.shape:\n                raise ValueError('Array conditional must be same shape as self'\n                    )\n            key = self._constructor(key, **self._construct_axes_dict())\n        if key.values.size and not is_bool_dtype(key.values):\n            raise TypeError(\n                'Must pass DataFrame or 2-d ndarray with boolean values only')\n        self._check_inplace_setting(value)\n        self._check_setitem_copy()\n        self._where(-key, value, inplace=True)\n\n    def _ensure_valid_index(self, value):\n        \"\"\"\n        Ensure that if we don't have an index, that we can create one from the\n        passed value.\n        \"\"\"\n        if not len(self.index) and is_list_like(value):\n            try:\n                value = Series(value)\n            except (ValueError, NotImplementedError, TypeError):\n                raise ValueError(\n                    'Cannot set a frame with no defined index and a value that cannot be converted to a Series'\n                    )\n            self._data = self._data.reindex_axis(value.index.copy(), axis=1,\n                fill_value=np.nan)\n\n    def _set_item(self, key, value):\n        \"\"\"\n        Add series to DataFrame in specified column.\n\n        If series is a numpy-array (not a Series/TimeSeries), it must be the\n        same length as the DataFrames index or an error will be thrown.\n\n        Series/TimeSeries will be conformed to the DataFrames index to\n        ensure homogeneity.\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(key, value)\n        NDFrame._set_item(self, key, value)\n        if len(self):\n            self._check_setitem_copy()\n\n    def insert(self, loc, column, value, allow_duplicates=False):\n        \"\"\"\n        Insert column into DataFrame at specified location.\n\n        Raises a ValueError if `column` is already contained in the DataFrame,\n        unless `allow_duplicates` is set to True.\n\n        Parameters\n        ----------\n        loc : int\n            Insertion index. Must verify 0 <= loc <= len(columns)\n        column : string, number, or hashable object\n            label of the inserted column\n        value : int, Series, or array-like\n        allow_duplicates : bool, optional\n        \"\"\"\n        self._ensure_valid_index(value)\n        value = self._sanitize_column(column, value, broadcast=False)\n        self._data.insert(loc, column, value, allow_duplicates=allow_duplicates\n            )\n\n    def assign(self, **kwargs):\n        \"\"\"\n        Assign new columns to a DataFrame.\n\n        Returns a new object with all original columns in addition to new ones.\n        Existing columns that are re-assigned will be overwritten.\n\n        Parameters\n        ----------\n        **kwargs : dict of {str: callable or Series}\n            The column names are keywords. If the values are\n            callable, they are computed on the DataFrame and\n            assigned to the new columns. The callable must not\n            change input DataFrame (though pandas doesn't check it).\n            If the values are not callable, (e.g. a Series, scalar, or array),\n            they are simply assigned.\n\n        Returns\n        -------\n        DataFrame\n            A new DataFrame with the new columns in addition to\n            all the existing columns.\n\n        Notes\n        -----\n        Assigning multiple columns within the same ``assign`` is possible.\n        For Python 3.6 and above, later items in '\\\\*\\\\*kwargs' may refer to\n        newly created or modified columns in 'df'; items are computed and\n        assigned into 'df' in order.  For Python 3.5 and below, the order of\n        keyword arguments is not specified, you cannot refer to newly created\n        or modified columns. All items are computed first, and then assigned\n        in alphabetical order.\n\n        .. versionchanged :: 0.23.0\n\n           Keyword argument order is maintained for Python 3.6 and later.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},\n        ...                   index=['Portland', 'Berkeley'])\n        >>> df\n                  temp_c\n        Portland    17.0\n        Berkeley    25.0\n\n        Where the value is a callable, evaluated on `df`:\n\n        >>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)\n                  temp_c  temp_f\n        Portland    17.0    62.6\n        Berkeley    25.0    77.0\n\n        Alternatively, the same behavior can be achieved by directly\n        referencing an existing Series or sequence:\n\n        >>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)\n                  temp_c  temp_f\n        Portland    17.0    62.6\n        Berkeley    25.0    77.0\n\n        In Python 3.6+, you can create multiple columns within the same assign\n        where one of the columns depends on another one defined within the same\n        assign:\n\n        >>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,\n        ...           temp_k=lambda x: (x['temp_f'] +  459.67) * 5 / 9)\n                  temp_c  temp_f  temp_k\n        Portland    17.0    62.6  290.15\n        Berkeley    25.0    77.0  298.15\n        \"\"\"\n        data = self.copy()\n        if PY36:\n            for k, v in kwargs.items():\n                data[k] = com.apply_if_callable(v, data)\n        else:\n            results = OrderedDict()\n            for k, v in kwargs.items():\n                results[k] = com.apply_if_callable(v, data)\n            results = sorted(results.items())\n            for k, v in results:\n                data[k] = v\n        return data\n\n    def _sanitize_column(self, key, value, broadcast=True):\n        \"\"\"\n        Ensures new columns (which go into the BlockManager as new blocks) are\n        always copied and converted into an array.\n\n        Parameters\n        ----------\n        key : object\n        value : scalar, Series, or array-like\n        broadcast : bool, default True\n            If ``key`` matches multiple duplicate column names in the\n            DataFrame, this parameter indicates whether ``value`` should be\n            tiled so that the returned array contains a (duplicated) column for\n            each occurrence of the key. If False, ``value`` will not be tiled.\n\n        Returns\n        -------\n        sanitized_column : numpy-array\n        \"\"\"\n\n        def reindexer(value):\n            if value.index.equals(self.index) or not len(self.index):\n                value = value._values.copy()\n            else:\n                try:\n                    value = value.reindex(self.index)._values\n                except Exception as e:\n                    if not value.index.is_unique:\n                        raise e\n                    raise TypeError(\n                        'incompatible index of inserted column with frame index'\n                        )\n            return value\n        if isinstance(value, Series):\n            value = reindexer(value)\n        elif isinstance(value, DataFrame):\n            if isinstance(self.columns, MultiIndex) and key in self.columns:\n                loc = self.columns.get_loc(key)\n                if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                    cols = maybe_droplevels(self.columns[loc], key)\n                    if len(cols) and not cols.equals(value.columns):\n                        value = value.reindex(cols, axis=1)\n            value = reindexer(value).T\n        elif isinstance(value, ExtensionArray):\n            value = value.copy()\n            value = sanitize_index(value, self.index, copy=False)\n        elif isinstance(value, Index) or is_sequence(value):\n            value = sanitize_index(value, self.index, copy=False)\n            if not isinstance(value, (np.ndarray, Index)):\n                if isinstance(value, list) and len(value) > 0:\n                    value = maybe_convert_platform(value)\n                else:\n                    value = com.asarray_tuplesafe(value)\n            elif value.ndim == 2:\n                value = value.copy().T\n            elif isinstance(value, Index):\n                value = value.copy(deep=True)\n            else:\n                value = value.copy()\n            if is_object_dtype(value.dtype):\n                value = maybe_infer_to_datetimelike(value)\n        else:\n            infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n            value = cast_scalar_to_array(len(self.index), value)\n            value = maybe_cast_to_datetime(value, infer_dtype)\n        if is_extension_type(value) or is_extension_array_dtype(value):\n            return value\n        if broadcast and key in self.columns and value.ndim == 1:\n            if not self.columns.is_unique or isinstance(self.columns,\n                MultiIndex):\n                existing_piece = self[key]\n                if isinstance(existing_piece, DataFrame):\n                    value = np.tile(value, (len(existing_piece.columns), 1))\n        return np.atleast_2d(np.asarray(value))\n\n    @property\n    def _series(self):\n        return {item: Series(self._data.iget(idx), index=self.index, name=\n            item) for idx, item in enumerate(self.columns)}\n\n    def lookup(self, row_labels, col_labels):\n        \"\"\"\n        Label-based \"fancy indexing\" function for DataFrame.\n\n        Given equal-length arrays of row and column labels, return an\n        array of the values corresponding to each (row, col) pair.\n\n        Parameters\n        ----------\n        row_labels : sequence\n            The row labels to use for lookup\n        col_labels : sequence\n            The column labels to use for lookup\n\n        Notes\n        -----\n        Akin to::\n\n            result = [df.get_value(row, col)\n                      for row, col in zip(row_labels, col_labels)]\n\n        Examples\n        --------\n        values : ndarray\n            The found values\n        \"\"\"\n        n = len(row_labels)\n        if n != len(col_labels):\n            raise ValueError('Row labels must have same size as column labels')\n        thresh = 1000\n        if not self._is_mixed_type or n > thresh:\n            values = self.values\n            ridx = self.index.get_indexer(row_labels)\n            cidx = self.columns.get_indexer(col_labels)\n            if (ridx == -1).any():\n                raise KeyError('One or more row labels was not found')\n            if (cidx == -1).any():\n                raise KeyError('One or more column labels was not found')\n            flat_index = ridx * len(self.columns) + cidx\n            result = values.flat[flat_index]\n        else:\n            result = np.empty(n, dtype='O')\n            for i, (r, c) in enumerate(zip(row_labels, col_labels)):\n                result[i] = self._get_value(r, c)\n        if is_object_dtype(result):\n            result = lib.maybe_convert_objects(result)\n        return result\n\n    def _reindex_axes(self, axes, level, limit, tolerance, method,\n        fill_value, copy):\n        frame = self\n        columns = axes['columns']\n        if columns is not None:\n            frame = frame._reindex_columns(columns, method, copy, level,\n                fill_value, limit, tolerance)\n        index = axes['index']\n        if index is not None:\n            frame = frame._reindex_index(index, method, copy, level,\n                fill_value, limit, tolerance)\n        return frame\n\n    def _reindex_index(self, new_index, method, copy, level, fill_value=np.\n        nan, limit=None, tolerance=None):\n        new_index, indexer = self.index.reindex(new_index, method=method,\n            level=level, limit=limit, tolerance=tolerance)\n        return self._reindex_with_indexers({(0): [new_index, indexer]},\n            copy=copy, fill_value=fill_value, allow_dups=False)\n\n    def _reindex_columns(self, new_columns, method, copy, level, fill_value\n        =None, limit=None, tolerance=None):\n        new_columns, indexer = self.columns.reindex(new_columns, method=\n            method, level=level, limit=limit, tolerance=tolerance)\n        return self._reindex_with_indexers({(1): [new_columns, indexer]},\n            copy=copy, fill_value=fill_value, allow_dups=False)\n\n    def _reindex_multi(self, axes, copy, fill_value):\n        \"\"\"\n        We are guaranteed non-Nones in the axes.\n        \"\"\"\n        new_index, row_indexer = self.index.reindex(axes['index'])\n        new_columns, col_indexer = self.columns.reindex(axes['columns'])\n        if row_indexer is not None and col_indexer is not None:\n            indexer = row_indexer, col_indexer\n            new_values = algorithms.take_2d_multi(self.values, indexer,\n                fill_value=fill_value)\n            return self._constructor(new_values, index=new_index, columns=\n                new_columns)\n        else:\n            return self._reindex_with_indexers({(0): [new_index,\n                row_indexer], (1): [new_columns, col_indexer]}, copy=copy,\n                fill_value=fill_value)\n\n    @Appender(_shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n        fill_value=None, method=None, limit=None, fill_axis=0,\n        broadcast_axis=None):\n        return super(DataFrame, self).align(other, join=join, axis=axis,\n            level=level, copy=copy, fill_value=fill_value, method=method,\n            limit=limit, fill_axis=fill_axis, broadcast_axis=broadcast_axis)\n\n    @Substitution(**_shared_doc_kwargs)\n    @Appender(NDFrame.reindex.__doc__)\n    @rewrite_axis_style_signature('labels', [('method', None), ('copy', \n        True), ('level', None), ('fill_value', np.nan), ('limit', None), (\n        'tolerance', None)])\n    def reindex(self, *args, **kwargs):\n        axes = validate_axis_style_args(self, args, kwargs, 'labels', 'reindex'\n            )\n        kwargs.update(axes)\n        kwargs.pop('axis', None)\n        kwargs.pop('labels', None)\n        return super(DataFrame, self).reindex(**kwargs)\n\n    @Appender(_shared_docs['reindex_axis'] % _shared_doc_kwargs)\n    def reindex_axis(self, labels, axis=0, method=None, level=None, copy=\n        True, limit=None, fill_value=np.nan):\n        return super(DataFrame, self).reindex_axis(labels=labels, axis=axis,\n            method=method, level=level, copy=copy, limit=limit, fill_value=\n            fill_value)\n\n    def drop(self, labels=None, axis=0, index=None, columns=None, level=\n        None, inplace=False, errors='raise'):\n        \"\"\"\n        Drop specified labels from rows or columns.\n\n        Remove rows or columns by specifying label names and corresponding\n        axis, or by specifying directly index or column names. When using a\n        multi-index, labels on different levels can be removed by specifying\n        the level.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n            Index or column labels to drop.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Whether to drop labels from the index (0 or 'index') or\n            columns (1 or 'columns').\n        index, columns : single label or list-like\n            Alternative to specifying axis (``labels, axis=1``\n            is equivalent to ``columns=labels``).\n\n            .. versionadded:: 0.21.0\n        level : int or level name, optional\n            For MultiIndex, level from which the labels will be removed.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and only existing labels are\n            dropped.\n\n        Returns\n        -------\n        dropped : pandas.DataFrame\n\n        Raises\n        ------\n        KeyError\n            If none of the labels are found in the selected axis\n\n        See Also\n        --------\n        DataFrame.loc : Label-location based indexer for selection by label.\n        DataFrame.dropna : Return DataFrame with labels on given axis omitted\n            where (all or any) data are missing.\n        DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n            removed, optionally only considering certain columns.\n        Series.drop : Return Series with specified index labels removed.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.arange(12).reshape(3,4),\n        ...                   columns=['A', 'B', 'C', 'D'])\n        >>> df\n           A  B   C   D\n        0  0  1   2   3\n        1  4  5   6   7\n        2  8  9  10  11\n\n        Drop columns\n\n        >>> df.drop(['B', 'C'], axis=1)\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        >>> df.drop(columns=['B', 'C'])\n           A   D\n        0  0   3\n        1  4   7\n        2  8  11\n\n        Drop a row by index\n\n        >>> df.drop([0, 1])\n           A  B   C   D\n        2  8  9  10  11\n\n        Drop columns and/or rows of MultiIndex DataFrame\n\n        >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n        ...                              ['speed', 'weight', 'length']],\n        ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n        ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n        >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n        ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n        ...                         [250, 150], [1.5, 0.8], [320, 250],\n        ...                         [1, 0.8], [0.3,0.2]])\n        >>> df\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n                length  1.5     1.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n                length  1.5     0.8\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n                length  0.3     0.2\n\n        >>> df.drop(index='cow', columns='small')\n                        big\n        lama    speed   45.0\n                weight  200.0\n                length  1.5\n        falcon  speed   320.0\n                weight  1.0\n                length  0.3\n\n        >>> df.drop(index='length', level=1)\n                        big     small\n        lama    speed   45.0    30.0\n                weight  200.0   100.0\n        cow     speed   30.0    20.0\n                weight  250.0   150.0\n        falcon  speed   320.0   250.0\n                weight  1.0     0.8\n        \"\"\"\n        return super(DataFrame, self).drop(labels=labels, axis=axis, index=\n            index, columns=columns, level=level, inplace=inplace, errors=errors\n            )\n\n    @rewrite_axis_style_signature('mapper', [('copy', True), ('inplace', \n        False), ('level', None)])\n    def rename(self, *args, **kwargs):\n        \"\"\"\n        Alter axes labels.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        mapper, index, columns : dict-like or function, optional\n            dict-like or functions transformations to apply to\n            that axis' values. Use either ``mapper`` and ``axis`` to\n            specify the axis to target with ``mapper``, or ``index`` and\n            ``columns``.\n        axis : int or str, optional\n            Axis to target with ``mapper``. Can be either the axis name\n            ('index', 'columns') or number (0, 1). The default is 'index'.\n        copy : boolean, default True\n            Also copy underlying data\n        inplace : boolean, default False\n            Whether to return a new DataFrame. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        renamed : DataFrame\n\n        See Also\n        --------\n        pandas.DataFrame.rename_axis\n\n        Examples\n        --------\n\n        ``DataFrame.rename`` supports two calling conventions\n\n        * ``(index=index_mapper, columns=columns_mapper, ...)``\n        * ``(mapper, axis={'index', 'columns'}, ...)``\n\n        We *highly* recommend using keyword arguments to clarify your\n        intent.\n\n        >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n           a  c\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n           a  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        Using axis-style parameters\n\n        >>> df.rename(str.lower, axis='columns')\n           a  b\n        0  1  4\n        1  2  5\n        2  3  6\n\n        >>> df.rename({1: 2, 2: 4}, axis='index')\n           A  B\n        0  1  4\n        2  2  5\n        4  3  6\n        \"\"\"\n        axes = validate_axis_style_args(self, args, kwargs, 'mapper', 'rename')\n        kwargs.update(axes)\n        kwargs.pop('axis', None)\n        kwargs.pop('mapper', None)\n        return super(DataFrame, self).rename(**kwargs)\n\n    @Substitution(**_shared_doc_kwargs)\n    @Appender(NDFrame.fillna.__doc__)\n    def fillna(self, value=None, method=None, axis=None, inplace=False,\n        limit=None, downcast=None, **kwargs):\n        return super(DataFrame, self).fillna(value=value, method=method,\n            axis=axis, inplace=inplace, limit=limit, downcast=downcast, **\n            kwargs)\n\n    @Appender(_shared_docs['replace'] % _shared_doc_kwargs)\n    def replace(self, to_replace=None, value=None, inplace=False, limit=\n        None, regex=False, method='pad'):\n        return super(DataFrame, self).replace(to_replace=to_replace, value=\n            value, inplace=inplace, limit=limit, regex=regex, method=method)\n\n    @Appender(_shared_docs['shift'] % _shared_doc_kwargs)\n    def shift(self, periods=1, freq=None, axis=0, fill_value=None):\n        return super(DataFrame, self).shift(periods=periods, freq=freq,\n            axis=axis, fill_value=fill_value)\n\n    def set_index(self, keys, drop=True, append=False, inplace=False,\n        verify_integrity=False):\n        \"\"\"\n        Set the DataFrame index using existing columns.\n\n        Set the DataFrame index (row labels) using one or more existing\n        columns. The index can replace the existing index or expand on it.\n\n        Parameters\n        ----------\n        keys : label or list of label\n            Name or names of the columns that will be used as the index.\n        drop : bool, default True\n            Delete columns to be used as the new index.\n        append : bool, default False\n            Whether to append columns to existing index.\n        inplace : bool, default False\n            Modify the DataFrame in place (do not create a new object).\n        verify_integrity : bool, default False\n            Check the new index for duplicates. Otherwise defer the check until\n            necessary. Setting to False will improve the performance of this\n            method.\n\n        Returns\n        -------\n        DataFrame\n            Changed row labels.\n\n        See Also\n        --------\n        DataFrame.reset_index : Opposite of set_index.\n        DataFrame.reindex : Change to new indices or expand indices.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n        ...                    'year': [2012, 2014, 2013, 2014],\n        ...                    'sale': [55, 40, 84, 31]})\n        >>> df\n           month  year  sale\n        0      1  2012    55\n        1      4  2014    40\n        2      7  2013    84\n        3     10  2014    31\n\n        Set the index to become the 'month' column:\n\n        >>> df.set_index('month')\n               year  sale\n        month\n        1      2012    55\n        4      2014    40\n        7      2013    84\n        10     2014    31\n\n        Create a multi-index using columns 'year' and 'month':\n\n        >>> df.set_index(['year', 'month'])\n                    sale\n        year  month\n        2012  1     55\n        2014  4     40\n        2013  7     84\n        2014  10    31\n\n        Create a multi-index using a set of values and a column:\n\n        >>> df.set_index([[1, 2, 3, 4], 'year'])\n                 month  sale\n           year\n        1  2012  1      55\n        2  2014  4      40\n        3  2013  7      84\n        4  2014  10     31\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if not isinstance(keys, list):\n            keys = [keys]\n        missing = []\n        for col in keys:\n            if (is_scalar(col) or isinstance(col, tuple)) and col in self:\n                continue\n            elif is_scalar(col) and col not in self:\n                missing.append(col)\n            elif not is_list_like(col, allow_sets=False) or getattr(col,\n                'ndim', 1) > 1:\n                raise TypeError(\n                    'The parameter \"keys\" may only contain a combination of valid column keys and one-dimensional list-likes'\n                    )\n        if missing:\n            raise KeyError('{}'.format(missing))\n        if inplace:\n            frame = self\n        else:\n            frame = self.copy()\n        arrays = []\n        names = []\n        if append:\n            names = [x for x in self.index.names]\n            if isinstance(self.index, ABCMultiIndex):\n                for i in range(self.index.nlevels):\n                    arrays.append(self.index._get_level_values(i))\n            else:\n                arrays.append(self.index)\n        to_remove = []\n        for col in keys:\n            if isinstance(col, ABCMultiIndex):\n                for n in range(col.nlevels):\n                    arrays.append(col._get_level_values(n))\n                names.extend(col.names)\n            elif isinstance(col, (ABCIndexClass, ABCSeries)):\n                arrays.append(col)\n                names.append(col.name)\n            elif isinstance(col, (list, np.ndarray)):\n                arrays.append(col)\n                names.append(None)\n            elif is_list_like(col) and not (isinstance(col, tuple) and col in\n                self):\n                col = list(col)\n                arrays.append(col)\n                names.append(None)\n            else:\n                arrays.append(frame[col]._values)\n                names.append(col)\n                if drop:\n                    to_remove.append(col)\n        index = ensure_index_from_sequences(arrays, names)\n        if verify_integrity and not index.is_unique:\n            duplicates = index[index.duplicated()].unique()\n            raise ValueError('Index has duplicate keys: {dup}'.format(dup=\n                duplicates))\n        for c in set(to_remove):\n            del frame[c]\n        index._cleanup()\n        frame.index = index\n        if not inplace:\n            return frame\n\n    def reset_index(self, level=None, drop=False, inplace=False, col_level=\n        0, col_fill=''):\n        \"\"\"\n        Reset the index, or a level of it.\n\n        Reset the index of the DataFrame, and use the default one instead.\n        If the DataFrame has a MultiIndex, this method can remove one or more\n        levels.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default None\n            Only remove the given levels from the index. Removes all levels by\n            default.\n        drop : bool, default False\n            Do not try to insert index into dataframe columns. This resets\n            the index to the default integer index.\n        inplace : bool, default False\n            Modify the DataFrame in place (do not create a new object).\n        col_level : int or str, default 0\n            If the columns have multiple levels, determines which level the\n            labels are inserted into. By default it is inserted into the first\n            level.\n        col_fill : object, default ''\n            If the columns have multiple levels, determines how the other\n            levels are named. If None then the index name is repeated.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame with the new index.\n\n        See Also\n        --------\n        DataFrame.set_index : Opposite of reset_index.\n        DataFrame.reindex : Change to new indices or expand indices.\n        DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('bird', 389.0),\n        ...                    ('bird', 24.0),\n        ...                    ('mammal', 80.5),\n        ...                    ('mammal', np.nan)],\n        ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n        ...                   columns=('class', 'max_speed'))\n        >>> df\n                 class  max_speed\n        falcon    bird      389.0\n        parrot    bird       24.0\n        lion    mammal       80.5\n        monkey  mammal        NaN\n\n        When we reset the index, the old index is added as a column, and a\n        new sequential index is used:\n\n        >>> df.reset_index()\n            index   class  max_speed\n        0  falcon    bird      389.0\n        1  parrot    bird       24.0\n        2    lion  mammal       80.5\n        3  monkey  mammal        NaN\n\n        We can use the `drop` parameter to avoid the old index being added as\n        a column:\n\n        >>> df.reset_index(drop=True)\n            class  max_speed\n        0    bird      389.0\n        1    bird       24.0\n        2  mammal       80.5\n        3  mammal        NaN\n\n        You can also use `reset_index` with `MultiIndex`.\n\n        >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n        ...                                    ('bird', 'parrot'),\n        ...                                    ('mammal', 'lion'),\n        ...                                    ('mammal', 'monkey')],\n        ...                                   names=['class', 'name'])\n        >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n        ...                                      ('species', 'type')])\n        >>> df = pd.DataFrame([(389.0, 'fly'),\n        ...                    ( 24.0, 'fly'),\n        ...                    ( 80.5, 'run'),\n        ...                    (np.nan, 'jump')],\n        ...                   index=index,\n        ...                   columns=columns)\n        >>> df\n                       speed species\n                         max    type\n        class  name\n        bird   falcon  389.0     fly\n               parrot   24.0     fly\n        mammal lion     80.5     run\n               monkey    NaN    jump\n\n        If the index has multiple levels, we can reset a subset of them:\n\n        >>> df.reset_index(level='class')\n                 class  speed species\n                          max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        If we are not dropping the index, by default, it is placed in the top\n        level. We can place it in another level:\n\n        >>> df.reset_index(level='class', col_level=1)\n                        speed species\n                 class    max    type\n        name\n        falcon    bird  389.0     fly\n        parrot    bird   24.0     fly\n        lion    mammal   80.5     run\n        monkey  mammal    NaN    jump\n\n        When the index is inserted under another level, we can specify under\n        which one with the parameter `col_fill`:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                      species  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n\n        If we specify a nonexistent level for `col_fill`, it is created:\n\n        >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                        genus  speed species\n                        class    max    type\n        name\n        falcon           bird  389.0     fly\n        parrot           bird   24.0     fly\n        lion           mammal   80.5     run\n        monkey         mammal    NaN    jump\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if inplace:\n            new_obj = self\n        else:\n            new_obj = self.copy()\n\n        def _maybe_casted_values(index, labels=None):\n            values = index._values\n            if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n                if values.dtype == np.object_:\n                    values = lib.maybe_convert_objects(values)\n            if labels is not None:\n                mask = labels == -1\n                if mask.all():\n                    values = np.empty(len(mask))\n                    values.fill(np.nan)\n                else:\n                    values = values.take(labels)\n                    values_type = type(values)\n                    values_dtype = values.dtype\n                    if issubclass(values_type, DatetimeLikeArray):\n                        values = values._data\n                    if mask.any():\n                        values, changed = maybe_upcast_putmask(values, mask,\n                            np.nan)\n                    if issubclass(values_type, DatetimeLikeArray):\n                        values = values_type(values, dtype=values_dtype)\n            return values\n        new_index = ibase.default_index(len(new_obj))\n        if level is not None:\n            if not isinstance(level, (tuple, list)):\n                level = [level]\n            level = [self.index._get_level_number(lev) for lev in level]\n            if len(level) < self.index.nlevels:\n                new_index = self.index.droplevel(level)\n        if not drop:\n            if isinstance(self.index, MultiIndex):\n                names = [(n if n is not None else 'level_%d' % i) for i, n in\n                    enumerate(self.index.names)]\n                to_insert = lzip(self.index.levels, self.index.codes)\n            else:\n                default = 'index' if 'index' not in self else 'level_0'\n                names = [default] if self.index.name is None else [self.\n                    index.name]\n                to_insert = (self.index, None),\n            multi_col = isinstance(self.columns, MultiIndex)\n            for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n                if not (level is None or i in level):\n                    continue\n                name = names[i]\n                if multi_col:\n                    col_name = list(name) if isinstance(name, tuple) else [name\n                        ]\n                    if col_fill is None:\n                        if len(col_name) not in (1, self.columns.nlevels):\n                            raise ValueError(\n                                'col_fill=None is incompatible with incomplete column name {}'\n                                .format(name))\n                        col_fill = col_name[0]\n                    lev_num = self.columns._get_level_number(col_level)\n                    name_lst = [col_fill] * lev_num + col_name\n                    missing = self.columns.nlevels - len(name_lst)\n                    name_lst += [col_fill] * missing\n                    name = tuple(name_lst)\n                level_values = _maybe_casted_values(lev, lab)\n                new_obj.insert(0, name, level_values)\n        new_obj.index = new_index\n        if not inplace:\n            return new_obj\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isna(self):\n        return super(DataFrame, self).isna()\n\n    @Appender(_shared_docs['isna'] % _shared_doc_kwargs)\n    def isnull(self):\n        return super(DataFrame, self).isnull()\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notna(self):\n        return super(DataFrame, self).notna()\n\n    @Appender(_shared_docs['notna'] % _shared_doc_kwargs)\n    def notnull(self):\n        return super(DataFrame, self).notnull()\n\n    def dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False\n        ):\n        \"\"\"\n        Remove missing values.\n\n        See the :ref:`User Guide <missing_data>` for more on which values are\n        considered missing, and how to work with missing data.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Determine if rows or columns which contain missing values are\n            removed.\n\n            * 0, or 'index' : Drop rows which contain missing values.\n            * 1, or 'columns' : Drop columns which contain missing value.\n\n            .. deprecated:: 0.23.0\n\n               Pass tuple or list to drop on multiple axes.\n               Only a single axis is allowed.\n\n        how : {'any', 'all'}, default 'any'\n            Determine if row or column is removed from DataFrame, when we have\n            at least one NA or all NA.\n\n            * 'any' : If any NA values are present, drop that row or column.\n            * 'all' : If all values are NA, drop that row or column.\n\n        thresh : int, optional\n            Require that many non-NA values.\n        subset : array-like, optional\n            Labels along other axis to consider, e.g. if you are dropping rows\n            these would be a list of columns to include.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame with NA entries dropped from it.\n\n        See Also\n        --------\n        DataFrame.isna: Indicate missing values.\n        DataFrame.notna : Indicate existing (non-missing) values.\n        DataFrame.fillna : Replace missing values.\n        Series.dropna : Drop missing values.\n        Index.dropna : Drop missing indices.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n        ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n        ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n        ...                             pd.NaT]})\n        >>> df\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Drop the rows where at least one element is missing.\n\n        >>> df.dropna()\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n\n        Drop the columns where at least one element is missing.\n\n        >>> df.dropna(axis='columns')\n               name\n        0    Alfred\n        1    Batman\n        2  Catwoman\n\n        Drop the rows where all elements are missing.\n\n        >>> df.dropna(how='all')\n               name        toy       born\n        0    Alfred        NaN        NaT\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Keep only the rows with at least 2 non-NA values.\n\n        >>> df.dropna(thresh=2)\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n        2  Catwoman   Bullwhip        NaT\n\n        Define in which columns to look for missing values.\n\n        >>> df.dropna(subset=['name', 'born'])\n               name        toy       born\n        1    Batman  Batmobile 1940-04-25\n\n        Keep the DataFrame with valid entries in the same variable.\n\n        >>> df.dropna(inplace=True)\n        >>> df\n             name        toy       born\n        1  Batman  Batmobile 1940-04-25\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if isinstance(axis, (tuple, list)):\n            msg = (\n                'supplying multiple axes to axis is deprecated and will be removed in a future version.'\n                )\n            warnings.warn(msg, FutureWarning, stacklevel=2)\n            result = self\n            for ax in axis:\n                result = result.dropna(how=how, thresh=thresh, subset=\n                    subset, axis=ax)\n        else:\n            axis = self._get_axis_number(axis)\n            agg_axis = 1 - axis\n            agg_obj = self\n            if subset is not None:\n                ax = self._get_axis(agg_axis)\n                indices = ax.get_indexer_for(subset)\n                check = indices == -1\n                if check.any():\n                    raise KeyError(list(np.compress(check, subset)))\n                agg_obj = self.take(indices, axis=agg_axis)\n            count = agg_obj.count(axis=agg_axis)\n            if thresh is not None:\n                mask = count >= thresh\n            elif how == 'any':\n                mask = count == len(agg_obj._get_axis(agg_axis))\n            elif how == 'all':\n                mask = count > 0\n            elif how is not None:\n                raise ValueError('invalid how option: {h}'.format(h=how))\n            else:\n                raise TypeError('must specify how or thresh')\n            result = self._take(mask.nonzero()[0], axis=axis)\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result\n\n    def drop_duplicates(self, subset=None, keep='first', inplace=False):\n        \"\"\"\n        Return DataFrame with duplicate rows removed, optionally only\n        considering certain columns.\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns\n        keep : {'first', 'last', False}, default 'first'\n            - ``first`` : Drop duplicates except for the first occurrence.\n            - ``last`` : Drop duplicates except for the last occurrence.\n            - False : Drop all duplicates.\n        inplace : boolean, default False\n            Whether to drop duplicates in place or to return a copy\n\n        Returns\n        -------\n        deduplicated : DataFrame\n        \"\"\"\n        if self.empty:\n            return self.copy()\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        duplicated = self.duplicated(subset, keep=keep)\n        if inplace:\n            inds, = (-duplicated).nonzero()\n            new_data = self._data.take(inds)\n            self._update_inplace(new_data)\n        else:\n            return self[-duplicated]\n\n    def duplicated(self, subset=None, keep='first'):\n        \"\"\"\n        Return boolean Series denoting duplicate rows, optionally only\n        considering certain columns.\n\n        Parameters\n        ----------\n        subset : column label or sequence of labels, optional\n            Only consider certain columns for identifying duplicates, by\n            default use all of the columns\n        keep : {'first', 'last', False}, default 'first'\n            - ``first`` : Mark duplicates as ``True`` except for the\n              first occurrence.\n            - ``last`` : Mark duplicates as ``True`` except for the\n              last occurrence.\n            - False : Mark all duplicates as ``True``.\n\n        Returns\n        -------\n        duplicated : Series\n        \"\"\"\n        from pandas.core.sorting import get_group_index\n        from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n        if self.empty:\n            return Series()\n\n        def f(vals):\n            labels, shape = algorithms.factorize(vals, size_hint=min(len(\n                self), _SIZE_HINT_LIMIT))\n            return labels.astype('i8', copy=False), len(shape)\n        if subset is None:\n            subset = self.columns\n        elif not np.iterable(subset) or isinstance(subset, compat.string_types\n            ) or isinstance(subset, tuple) and subset in self.columns:\n            subset = subset,\n        diff = Index(subset).difference(self.columns)\n        if not diff.empty:\n            raise KeyError(diff)\n        vals = (col.values for name, col in self.iteritems() if name in subset)\n        labels, shape = map(list, zip(*map(f, vals)))\n        ids = get_group_index(labels, shape, sort=False, xnull=False)\n        return Series(duplicated_int64(ids, keep), index=self.index)\n\n    @Substitution(**_shared_doc_kwargs)\n    @Appender(NDFrame.sort_values.__doc__)\n    def sort_values(self, by, axis=0, ascending=True, inplace=False, kind=\n        'quicksort', na_position='last'):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        axis = self._get_axis_number(axis)\n        if not isinstance(by, list):\n            by = [by]\n        if is_sequence(ascending) and len(by) != len(ascending):\n            raise ValueError(\n                'Length of ascending (%d) != length of by (%d)' % (len(\n                ascending), len(by)))\n        if len(by) > 1:\n            from pandas.core.sorting import lexsort_indexer\n            keys = [self._get_label_or_level_values(x, axis=axis) for x in by]\n            indexer = lexsort_indexer(keys, orders=ascending, na_position=\n                na_position)\n            indexer = ensure_platform_int(indexer)\n        else:\n            from pandas.core.sorting import nargsort\n            by = by[0]\n            k = self._get_label_or_level_values(by, axis=axis)\n            if isinstance(ascending, (tuple, list)):\n                ascending = ascending[0]\n            indexer = nargsort(k, kind=kind, ascending=ascending,\n                na_position=na_position)\n        new_data = self._data.take(indexer, axis=self.\n            _get_block_manager_axis(axis), verify=False)\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    @Substitution(**_shared_doc_kwargs)\n    @Appender(NDFrame.sort_index.__doc__)\n    def sort_index(self, axis=0, level=None, ascending=True, inplace=False,\n        kind='quicksort', na_position='last', sort_remaining=True, by=None):\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if by is not None:\n            warnings.warn(\n                'by argument to sort_index is deprecated, please use .sort_values(by=...)'\n                , FutureWarning, stacklevel=2)\n            if level is not None:\n                raise ValueError('unable to simultaneously sort by and level')\n            return self.sort_values(by, axis=axis, ascending=ascending,\n                inplace=inplace)\n        axis = self._get_axis_number(axis)\n        labels = self._get_axis(axis)\n        labels = labels._sort_levels_monotonic()\n        if level is not None:\n            new_axis, indexer = labels.sortlevel(level, ascending=ascending,\n                sort_remaining=sort_remaining)\n        elif isinstance(labels, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n            indexer = lexsort_indexer(labels._get_codes_for_sorting(),\n                orders=ascending, na_position=na_position)\n        else:\n            from pandas.core.sorting import nargsort\n            if (ascending and labels.is_monotonic_increasing or not\n                ascending and labels.is_monotonic_decreasing):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n            indexer = nargsort(labels, kind=kind, ascending=ascending,\n                na_position=na_position)\n        baxis = self._get_block_manager_axis(axis)\n        new_data = self._data.take(indexer, axis=baxis, verify=False)\n        new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n        if inplace:\n            return self._update_inplace(new_data)\n        else:\n            return self._constructor(new_data).__finalize__(self)\n\n    def nlargest(self, n, columns, keep='first'):\n        \"\"\"\n        Return the first `n` rows ordered by `columns` in descending order.\n\n        Return the first `n` rows with the largest values in `columns`, in\n        descending order. The columns that are not specified are returned as\n        well, but not used for ordering.\n\n        This method is equivalent to\n        ``df.sort_values(columns, ascending=False).head(n)``, but more\n        performant.\n\n        Parameters\n        ----------\n        n : int\n            Number of rows to return.\n        columns : label or list of labels\n            Column label(s) to order by.\n        keep : {'first', 'last', 'all'}, default 'first'\n            Where there are duplicate values:\n\n            - `first` : prioritize the first occurrence(s)\n            - `last` : prioritize the last occurrence(s)\n            - ``all`` : do not drop any duplicates, even it means\n                        selecting more than `n` items.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        DataFrame\n            The first `n` rows ordered by the given columns in descending\n            order.\n\n        See Also\n        --------\n        DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n            ascending order.\n        DataFrame.sort_values : Sort DataFrame by the values.\n        DataFrame.head : Return the first `n` rows without re-ordering.\n\n        Notes\n        -----\n        This function cannot be used with all column types. For example, when\n        specifying columns with `object` or `category` dtypes, ``TypeError`` is\n        raised.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n        ...                                   434000, 434000, 337000, 11300,\n        ...                                   11300, 11300],\n        ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n        ...                            17036, 182, 38, 311],\n        ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n        ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n        ...                   index=[\"Italy\", \"France\", \"Malta\",\n        ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n        ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n        >>> df\n                  population      GDP alpha-2\n        Italy       59000000  1937894      IT\n        France      65000000  2583560      FR\n        Malta         434000    12011      MT\n        Maldives      434000     4520      MV\n        Brunei        434000    12128      BN\n        Iceland       337000    17036      IS\n        Nauru          11300      182      NR\n        Tuvalu         11300       38      TV\n        Anguilla       11300      311      AI\n\n        In the following example, we will use ``nlargest`` to select the three\n        rows having the largest values in column \"population\".\n\n        >>> df.nlargest(3, 'population')\n                population      GDP alpha-2\n        France    65000000  2583560      FR\n        Italy     59000000  1937894      IT\n        Malta       434000    12011      MT\n\n        When using ``keep='last'``, ties are resolved in reverse order:\n\n        >>> df.nlargest(3, 'population', keep='last')\n                population      GDP alpha-2\n        France    65000000  2583560      FR\n        Italy     59000000  1937894      IT\n        Brunei      434000    12128      BN\n\n        When using ``keep='all'``, all duplicate items are maintained:\n\n        >>> df.nlargest(3, 'population', keep='all')\n                  population      GDP alpha-2\n        France      65000000  2583560      FR\n        Italy       59000000  1937894      IT\n        Malta         434000    12011      MT\n        Maldives      434000     4520      MV\n        Brunei        434000    12128      BN\n\n        To order by the largest values in column \"population\" and then \"GDP\",\n        we can specify multiple columns like in the next example.\n\n        >>> df.nlargest(3, ['population', 'GDP'])\n                population      GDP alpha-2\n        France    65000000  2583560      FR\n        Italy     59000000  1937894      IT\n        Brunei      434000    12128      BN\n        \"\"\"\n        return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns\n            ).nlargest()\n\n    def nsmallest(self, n, columns, keep='first'):\n        \"\"\"\n        Return the first `n` rows ordered by `columns` in ascending order.\n\n        Return the first `n` rows with the smallest values in `columns`, in\n        ascending order. The columns that are not specified are returned as\n        well, but not used for ordering.\n\n        This method is equivalent to\n        ``df.sort_values(columns, ascending=True).head(n)``, but more\n        performant.\n\n        Parameters\n        ----------\n        n : int\n            Number of items to retrieve.\n        columns : list or str\n            Column name or names to order by.\n        keep : {'first', 'last', 'all'}, default 'first'\n            Where there are duplicate values:\n\n            - ``first`` : take the first occurrence.\n            - ``last`` : take the last occurrence.\n            - ``all`` : do not drop any duplicates, even it means\n              selecting more than `n` items.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        DataFrame\n\n        See Also\n        --------\n        DataFrame.nlargest : Return the first `n` rows ordered by `columns` in\n            descending order.\n        DataFrame.sort_values : Sort DataFrame by the values.\n        DataFrame.head : Return the first `n` rows without re-ordering.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n        ...                                   434000, 434000, 337000, 11300,\n        ...                                   11300, 11300],\n        ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n        ...                            17036, 182, 38, 311],\n        ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n        ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n        ...                   index=[\"Italy\", \"France\", \"Malta\",\n        ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n        ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n        >>> df\n                  population      GDP alpha-2\n        Italy       59000000  1937894      IT\n        France      65000000  2583560      FR\n        Malta         434000    12011      MT\n        Maldives      434000     4520      MV\n        Brunei        434000    12128      BN\n        Iceland       337000    17036      IS\n        Nauru          11300      182      NR\n        Tuvalu         11300       38      TV\n        Anguilla       11300      311      AI\n\n        In the following example, we will use ``nsmallest`` to select the\n        three rows having the smallest values in column \"a\".\n\n        >>> df.nsmallest(3, 'population')\n                  population  GDP alpha-2\n        Nauru          11300  182      NR\n        Tuvalu         11300   38      TV\n        Anguilla       11300  311      AI\n\n        When using ``keep='last'``, ties are resolved in reverse order:\n\n        >>> df.nsmallest(3, 'population', keep='last')\n                  population  GDP alpha-2\n        Anguilla       11300  311      AI\n        Tuvalu         11300   38      TV\n        Nauru          11300  182      NR\n\n        When using ``keep='all'``, all duplicate items are maintained:\n\n        >>> df.nsmallest(3, 'population', keep='all')\n                  population  GDP alpha-2\n        Nauru          11300  182      NR\n        Tuvalu         11300   38      TV\n        Anguilla       11300  311      AI\n\n        To order by the largest values in column \"a\" and then \"c\", we can\n        specify multiple columns like in the next example.\n\n        >>> df.nsmallest(3, ['population', 'GDP'])\n                  population  GDP alpha-2\n        Tuvalu         11300   38      TV\n        Nauru          11300  182      NR\n        Anguilla       11300  311      AI\n        \"\"\"\n        return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns\n            ).nsmallest()\n\n    def swaplevel(self, i=-2, j=-1, axis=0):\n        \"\"\"\n        Swap levels i and j in a MultiIndex on a particular axis.\n\n        Parameters\n        ----------\n        i, j : int, string (can be mixed)\n            Level of index to be swapped. Can pass level name as string.\n\n        Returns\n        -------\n        swapped : same type as caller (new object)\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n        \"\"\"\n        result = self.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            result.index = result.index.swaplevel(i, j)\n        else:\n            result.columns = result.columns.swaplevel(i, j)\n        return result\n\n    def reorder_levels(self, order, axis=0):\n        \"\"\"\n        Rearrange index levels using input order. May not drop or\n        duplicate levels.\n\n        Parameters\n        ----------\n        order : list of int or list of str\n            List representing new level order. Reference level by number\n            (position) or by key (label).\n        axis : int\n            Where to reorder levels.\n\n        Returns\n        -------\n        type of caller (new object)\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if not isinstance(self._get_axis(axis), MultiIndex):\n            raise TypeError('Can only reorder levels on a hierarchical axis.')\n        result = self.copy()\n        if axis == 0:\n            result.index = result.index.reorder_levels(order)\n        else:\n            result.columns = result.columns.reorder_levels(order)\n        return result\n\n    def _combine_frame(self, other, func, fill_value=None, level=None):\n        this, other = self.align(other, join='outer', level=level, copy=False)\n        new_index, new_columns = this.index, this.columns\n\n        def _arith_op(left, right):\n            left, right = ops.fill_binop(left, right, fill_value)\n            return func(left, right)\n        if ops.should_series_dispatch(this, other, func):\n            return ops.dispatch_to_series(this, other, _arith_op)\n        else:\n            result = _arith_op(this.values, other.values)\n            return self._constructor(result, index=new_index, columns=\n                new_columns, copy=False)\n\n    def _combine_match_index(self, other, func, level=None):\n        left, right = self.align(other, join='outer', axis=0, level=level,\n            copy=False)\n        assert left.index.equals(right.index)\n        if left._is_mixed_type or right._is_mixed_type:\n            return ops.dispatch_to_series(left, right, func)\n        else:\n            with np.errstate(all='ignore'):\n                new_data = func(left.values.T, right.values).T\n            return self._constructor(new_data, index=left.index, columns=\n                self.columns, copy=False)\n\n    def _combine_match_columns(self, other, func, level=None):\n        assert isinstance(other, Series)\n        left, right = self.align(other, join='outer', axis=1, level=level,\n            copy=False)\n        assert left.columns.equals(right.index)\n        return ops.dispatch_to_series(left, right, func, axis='columns')\n\n    def _combine_const(self, other, func):\n        assert lib.is_scalar(other) or np.ndim(other) == 0\n        return ops.dispatch_to_series(self, other, func)\n\n    def combine(self, other, func, fill_value=None, overwrite=True):\n        \"\"\"\n        Perform column-wise combine with another DataFrame based on a\n        passed function.\n\n        Combines a DataFrame with `other` DataFrame using `func`\n        to element-wise combine columns. The row and column indexes of the\n        resulting DataFrame will be the union of the two.\n\n        Parameters\n        ----------\n        other : DataFrame\n            The DataFrame to merge column-wise.\n        func : function\n            Function that takes two series as inputs and return a Series or a\n            scalar. Used to merge the two dataframes column by columns.\n        fill_value : scalar value, default None\n            The value to fill NaNs with prior to passing any column to the\n            merge func.\n        overwrite : boolean, default True\n            If True, columns in `self` that do not exist in `other` will be\n            overwritten with NaNs.\n\n        Returns\n        -------\n        result : DataFrame\n\n        See Also\n        --------\n        DataFrame.combine_first : Combine two DataFrame objects and default to\n            non-null values in frame calling the method.\n\n        Examples\n        --------\n        Combine using a simple function that chooses the smaller column.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\n        >>> df1.combine(df2, take_smaller)\n           A  B\n        0  0  3\n        1  0  3\n\n        Example using a true element-wise combine function.\n\n        >>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine(df2, np.minimum)\n           A  B\n        0  1  2\n        1  0  3\n\n        Using `fill_value` fills Nones prior to passing the column to the\n        merge function.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine(df2, take_smaller, fill_value=-5)\n           A    B\n        0  0 -5.0\n        1  0  4.0\n\n        However, if the same element in both dataframes is None, that None\n        is preserved\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})\n        >>> df1.combine(df2, take_smaller, fill_value=-5)\n           A    B\n        0  0  NaN\n        1  0  3.0\n\n        Example that demonstrates the use of `overwrite` and behavior when\n        the axis differ between the dataframes.\n\n        >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1],}, index=[1, 2])\n        >>> df1.combine(df2, take_smaller)\n             A    B     C\n        0  NaN  NaN   NaN\n        1  NaN  3.0 -10.0\n        2  NaN  3.0   1.0\n\n        >>> df1.combine(df2, take_smaller, overwrite=False)\n             A    B     C\n        0  0.0  NaN   NaN\n        1  0.0  3.0 -10.0\n        2  NaN  3.0   1.0\n\n        Demonstrating the preference of the passed in dataframe.\n\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1],}, index=[1, 2])\n        >>> df2.combine(df1, take_smaller)\n           A    B   C\n        0  0.0  NaN NaN\n        1  0.0  3.0 NaN\n        2  NaN  3.0 NaN\n\n        >>> df2.combine(df1, take_smaller, overwrite=False)\n             A    B   C\n        0  0.0  NaN NaN\n        1  0.0  3.0 1.0\n        2  NaN  3.0 1.0\n        \"\"\"\n        other_idxlen = len(other.index)\n        this, other = self.align(other, copy=False)\n        new_index = this.index\n        if other.empty and len(new_index) == len(self.index):\n            return self.copy()\n        if self.empty and len(other) == other_idxlen:\n            return other.copy()\n        new_columns = this.columns.union(other.columns)\n        do_fill = fill_value is not None\n        result = {}\n        for col in new_columns:\n            series = this[col]\n            otherSeries = other[col]\n            this_dtype = series.dtype\n            other_dtype = otherSeries.dtype\n            this_mask = isna(series)\n            other_mask = isna(otherSeries)\n            if not overwrite and other_mask.all():\n                result[col] = this[col].copy()\n                continue\n            if do_fill:\n                series = series.copy()\n                otherSeries = otherSeries.copy()\n                series[this_mask] = fill_value\n                otherSeries[other_mask] = fill_value\n            if col not in self.columns:\n                new_dtype = other_dtype\n                try:\n                    series = series.astype(new_dtype, copy=False)\n                except ValueError:\n                    pass\n            else:\n                new_dtype = find_common_type([this_dtype, other_dtype])\n                if not is_dtype_equal(this_dtype, new_dtype):\n                    series = series.astype(new_dtype)\n                if not is_dtype_equal(other_dtype, new_dtype):\n                    otherSeries = otherSeries.astype(new_dtype)\n            arr = func(series, otherSeries)\n            arr = maybe_downcast_to_dtype(arr, this_dtype)\n            result[col] = arr\n        return self._constructor(result, index=new_index, columns=new_columns)\n\n    def combine_first(self, other):\n        \"\"\"\n        Update null elements with value in the same location in `other`.\n\n        Combine two DataFrame objects by filling null values in one DataFrame\n        with non-null values from other DataFrame. The row and column indexes\n        of the resulting DataFrame will be the union of the two.\n\n        Parameters\n        ----------\n        other : DataFrame\n            Provided DataFrame to use to fill null values.\n\n        Returns\n        -------\n        combined : DataFrame\n\n        See Also\n        --------\n        DataFrame.combine : Perform series-wise operation on two DataFrames\n            using a given function.\n\n        Examples\n        --------\n\n        >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n        >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n        >>> df1.combine_first(df2)\n             A    B\n        0  1.0  3.0\n        1  0.0  4.0\n\n        Null values still persist if the location of that null value\n        does not exist in `other`\n\n        >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})\n        >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])\n        >>> df1.combine_first(df2)\n             A    B    C\n        0  NaN  4.0  NaN\n        1  0.0  3.0  1.0\n        2  NaN  3.0  1.0\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n\n        def extract_values(arr):\n            if isinstance(arr, (ABCIndexClass, ABCSeries)):\n                arr = arr._values\n            if needs_i8_conversion(arr):\n                if is_extension_array_dtype(arr.dtype):\n                    arr = arr.asi8\n                else:\n                    arr = arr.view('i8')\n            return arr\n\n        def combiner(x, y):\n            mask = isna(x)\n            if isinstance(mask, (ABCIndexClass, ABCSeries)):\n                mask = mask._values\n            x_values = extract_values(x)\n            y_values = extract_values(y)\n            if y.name not in self.columns:\n                return y_values\n            return expressions.where(mask, y_values, x_values)\n        return self.combine(other, combiner, overwrite=False)\n\n    @deprecate_kwarg(old_arg_name='raise_conflict', new_arg_name='errors',\n        mapping={(False): 'ignore', (True): 'raise'})\n    def update(self, other, join='left', overwrite=True, filter_func=None,\n        errors='ignore'):\n        \"\"\"\n        Modify in place using non-NA values from another DataFrame.\n\n        Aligns on indices. There is no return value.\n\n        Parameters\n        ----------\n        other : DataFrame, or object coercible into a DataFrame\n            Should have at least one matching index/column label\n            with the original DataFrame. If a Series is passed,\n            its name attribute must be set, and that will be\n            used as the column name to align with the original DataFrame.\n        join : {'left'}, default 'left'\n            Only left join is implemented, keeping the index and columns of the\n            original object.\n        overwrite : bool, default True\n            How to handle non-NA values for overlapping keys:\n\n            * True: overwrite original DataFrame's values\n              with values from `other`.\n            * False: only update values that are NA in\n              the original DataFrame.\n\n        filter_func : callable(1d-array) -> bool 1d-array, optional\n            Can choose to replace values other than NA. Return True for values\n            that should be updated.\n        errors : {'raise', 'ignore'}, default 'ignore'\n            If 'raise', will raise a ValueError if the DataFrame and `other`\n            both contain non-NA data in the same place.\n\n            .. versionchanged :: 0.24.0\n               Changed from `raise_conflict=False|True`\n               to `errors='ignore'|'raise'`.\n\n        Returns\n        -------\n        None : method directly changes calling object\n\n        Raises\n        ------\n        ValueError\n            * When `errors='raise'` and there's overlapping non-NA data.\n            * When `errors` is not either `'ignore'` or `'raise'`\n        NotImplementedError\n            * If `join != 'left'`\n\n        See Also\n        --------\n        dict.update : Similar method for dictionaries.\n        DataFrame.merge : For column(s)-on-columns(s) operations.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, 5, 6],\n        ...                        'C': [7, 8, 9]})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  1  4\n        1  2  5\n        2  3  6\n\n        The DataFrame's length does not increase as a result of the update,\n        only values at matching index/column labels are updated.\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  d\n        1  b  e\n        2  c  f\n\n        For Series, it's name attribute must be set.\n\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n        >>> df.update(new_column)\n        >>> df\n           A  B\n        0  a  d\n        1  b  y\n        2  c  e\n        >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n        ...                    'B': ['x', 'y', 'z']})\n        >>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n        >>> df.update(new_df)\n        >>> df\n           A  B\n        0  a  x\n        1  b  d\n        2  c  e\n\n        If `other` contains NaNs the corresponding values are not updated\n        in the original dataframe.\n\n        >>> df = pd.DataFrame({'A': [1, 2, 3],\n        ...                    'B': [400, 500, 600]})\n        >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n        >>> df.update(new_df)\n        >>> df\n           A      B\n        0  1    4.0\n        1  2  500.0\n        2  3    6.0\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n        if join != 'left':\n            raise NotImplementedError('Only left join is supported')\n        if errors not in ['ignore', 'raise']:\n            raise ValueError(\n                \"The parameter errors must be either 'ignore' or 'raise'\")\n        if not isinstance(other, DataFrame):\n            other = DataFrame(other)\n        other = other.reindex_like(self)\n        for col in self.columns:\n            this = self[col].values\n            that = other[col].values\n            if filter_func is not None:\n                with np.errstate(all='ignore'):\n                    mask = ~filter_func(this) | isna(that)\n            else:\n                if errors == 'raise':\n                    mask_this = notna(that)\n                    mask_that = notna(this)\n                    if any(mask_this & mask_that):\n                        raise ValueError('Data overlaps.')\n                if overwrite:\n                    mask = isna(that)\n                else:\n                    mask = notna(this)\n            if mask.all():\n                continue\n            self[col] = expressions.where(mask, this, that)\n    _shared_docs['pivot'] = \"\"\"\n        Return reshaped DataFrame organized by given index / column values.\n\n        Reshape data (produce a \"pivot\" table) based on column values. Uses\n        unique values from specified `index` / `columns` to form axes of the\n        resulting DataFrame. This function does not support data\n        aggregation, multiple values will result in a MultiIndex in the\n        columns. See the :ref:`User Guide <reshaping>` for more on reshaping.\n\n        Parameters\n        ----------%s\n        index : string or object, optional\n            Column to use to make new frame's index. If None, uses\n            existing index.\n        columns : string or object\n            Column to use to make new frame's columns.\n        values : string, object or a list of the previous, optional\n            Column(s) to use for populating new frame's values. If not\n            specified, all remaining columns will be used and the result will\n            have hierarchically indexed columns.\n\n            .. versionchanged :: 0.23.0\n               Also accept list of column names.\n\n        Returns\n        -------\n        DataFrame\n            Returns reshaped DataFrame.\n\n        Raises\n        ------\n        ValueError:\n            When there are any `index`, `columns` combinations with multiple\n            values. `DataFrame.pivot_table` when you need to aggregate.\n\n        See Also\n        --------\n        DataFrame.pivot_table : Generalization of pivot that can handle\n            duplicate values for one index/column pair.\n        DataFrame.unstack : Pivot based on the index values instead of a\n            column.\n\n        Notes\n        -----\n        For finer-tuned control, see hierarchical indexing documentation along\n        with the related stack/unstack methods.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'foo': ['one', 'one', 'one', 'two', 'two',\n        ...                            'two'],\n        ...                    'bar': ['A', 'B', 'C', 'A', 'B', 'C'],\n        ...                    'baz': [1, 2, 3, 4, 5, 6],\n        ...                    'zoo': ['x', 'y', 'z', 'q', 'w', 't']})\n        >>> df\n            foo   bar  baz  zoo\n        0   one   A    1    x\n        1   one   B    2    y\n        2   one   C    3    z\n        3   two   A    4    q\n        4   two   B    5    w\n        5   two   C    6    t\n\n        >>> df.pivot(index='foo', columns='bar', values='baz')\n        bar  A   B   C\n        foo\n        one  1   2   3\n        two  4   5   6\n\n        >>> df.pivot(index='foo', columns='bar')['baz']\n        bar  A   B   C\n        foo\n        one  1   2   3\n        two  4   5   6\n\n        >>> df.pivot(index='foo', columns='bar', values=['baz', 'zoo'])\n              baz       zoo\n        bar   A  B  C   A  B  C\n        foo\n        one   1  2  3   x  y  z\n        two   4  5  6   q  w  t\n\n        A ValueError is raised if there are any duplicates.\n\n        >>> df = pd.DataFrame({\"foo\": ['one', 'one', 'two', 'two'],\n        ...                    \"bar\": ['A', 'A', 'B', 'C'],\n        ...                    \"baz\": [1, 2, 3, 4]})\n        >>> df\n           foo bar  baz\n        0  one   A    1\n        1  one   A    2\n        2  two   B    3\n        3  two   C    4\n\n        Notice that the first two rows are the same for our `index`\n        and `columns` arguments.\n\n        >>> df.pivot(index='foo', columns='bar', values='baz')\n        Traceback (most recent call last):\n           ...\n        ValueError: Index contains duplicate entries, cannot reshape\n        \"\"\"\n\n    @Substitution('')\n    @Appender(_shared_docs['pivot'])\n    def pivot(self, index=None, columns=None, values=None):\n        from pandas.core.reshape.pivot import pivot\n        return pivot(self, index=index, columns=columns, values=values)\n    _shared_docs['pivot_table'] = \"\"\"\n        Create a spreadsheet-style pivot table as a DataFrame. The levels in\n        the pivot table will be stored in MultiIndex objects (hierarchical\n        indexes) on the index and columns of the result DataFrame.\n\n        Parameters\n        ----------%s\n        values : column to aggregate, optional\n        index : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table index.  If an array is passed,\n            it is being used as the same manner as column values.\n        columns : column, Grouper, array, or list of the previous\n            If an array is passed, it must be the same length as the data. The\n            list can contain any of the other types (except list).\n            Keys to group by on the pivot table column.  If an array is passed,\n            it is being used as the same manner as column values.\n        aggfunc : function, list of functions, dict, default numpy.mean\n            If list of functions passed, the resulting pivot table will have\n            hierarchical columns whose top level are the function names\n            (inferred from the function objects themselves)\n            If dict is passed, the key is column to aggregate and value\n            is function or list of functions\n        fill_value : scalar, default None\n            Value to replace missing values with\n        margins : boolean, default False\n            Add all row / columns (e.g. for subtotal / grand totals)\n        dropna : boolean, default True\n            Do not include columns whose entries are all NaN\n        margins_name : string, default 'All'\n            Name of the row / column that will contain the totals\n            when margins is True.\n\n        Returns\n        -------\n        table : DataFrame\n\n        See Also\n        --------\n        DataFrame.pivot : Pivot without aggregation that can handle\n            non-numeric data.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({\"A\": [\"foo\", \"foo\", \"foo\", \"foo\", \"foo\",\n        ...                          \"bar\", \"bar\", \"bar\", \"bar\"],\n        ...                    \"B\": [\"one\", \"one\", \"one\", \"two\", \"two\",\n        ...                          \"one\", \"one\", \"two\", \"two\"],\n        ...                    \"C\": [\"small\", \"large\", \"large\", \"small\",\n        ...                          \"small\", \"large\", \"small\", \"small\",\n        ...                          \"large\"],\n        ...                    \"D\": [1, 2, 2, 3, 3, 4, 5, 6, 7],\n        ...                    \"E\": [2, 4, 5, 5, 6, 6, 8, 9, 9]})\n        >>> df\n             A    B      C  D  E\n        0  foo  one  small  1  2\n        1  foo  one  large  2  4\n        2  foo  one  large  2  5\n        3  foo  two  small  3  5\n        4  foo  two  small  3  6\n        5  bar  one  large  4  6\n        6  bar  one  small  5  8\n        7  bar  two  small  6  9\n        8  bar  two  large  7  9\n\n        This first example aggregates values by taking the sum.\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum)\n        >>> table\n        C        large  small\n        A   B\n        bar one      4      5\n            two      7      6\n        foo one      4      1\n            two    NaN      6\n\n        We can also fill missing values using the `fill_value` parameter.\n\n        >>> table = pivot_table(df, values='D', index=['A', 'B'],\n        ...                     columns=['C'], aggfunc=np.sum, fill_value=0)\n        >>> table\n        C        large  small\n        A   B\n        bar one      4      5\n            two      7      6\n        foo one      4      1\n            two      0      6\n\n        The next example aggregates by taking the mean across multiple columns.\n\n        >>> table = pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n        ...                     aggfunc={'D': np.mean,\n        ...                              'E': np.mean})\n        >>> table\n                          D         E\n                       mean      mean\n        A   C\n        bar large  5.500000  7.500000\n            small  5.500000  8.500000\n        foo large  2.000000  4.500000\n            small  2.333333  4.333333\n\n        We can also calculate multiple types of aggregations for any given\n        value column.\n\n        >>> table = pivot_table(df, values=['D', 'E'], index=['A', 'C'],\n        ...                     aggfunc={'D': np.mean,\n        ...                              'E': [min, max, np.mean]})\n        >>> table\n                          D   E\n                       mean max      mean min\n        A   C\n        bar large  5.500000  9   7.500000   6\n            small  5.500000  9   8.500000   8\n        foo large  2.000000  5   4.500000   4\n            small  2.333333  6   4.333333   2\n        \"\"\"\n\n    @Substitution('')\n    @Appender(_shared_docs['pivot_table'])\n    def pivot_table(self, values=None, index=None, columns=None, aggfunc=\n        'mean', fill_value=None, margins=False, dropna=True, margins_name='All'\n        ):\n        from pandas.core.reshape.pivot import pivot_table\n        return pivot_table(self, values=values, index=index, columns=\n            columns, aggfunc=aggfunc, fill_value=fill_value, margins=\n            margins, dropna=dropna, margins_name=margins_name)\n\n    def stack(self, level=-1, dropna=True):\n        \"\"\"\n        Stack the prescribed level(s) from columns to index.\n\n        Return a reshaped DataFrame or Series having a multi-level\n        index with one or more new inner-most levels compared to the current\n        DataFrame. The new inner-most levels are created by pivoting the\n        columns of the current dataframe:\n\n          - if the columns have a single level, the output is a Series;\n          - if the columns have multiple levels, the new index\n            level(s) is (are) taken from the prescribed level(s) and\n            the output is a DataFrame.\n\n        The new index levels are sorted.\n\n        Parameters\n        ----------\n        level : int, str, list, default -1\n            Level(s) to stack from the column axis onto the index\n            axis, defined as one index or label, or a list of indices\n            or labels.\n        dropna : bool, default True\n            Whether to drop rows in the resulting Frame/Series with\n            missing values. Stacking a column level onto the index\n            axis can create combinations of index and column values\n            that are missing from the original dataframe. See Examples\n            section.\n\n        Returns\n        -------\n        DataFrame or Series\n            Stacked dataframe or series.\n\n        See Also\n        --------\n        DataFrame.unstack : Unstack prescribed level(s) from index axis\n             onto column axis.\n        DataFrame.pivot : Reshape dataframe from long format to wide\n             format.\n        DataFrame.pivot_table : Create a spreadsheet-style pivot table\n             as a DataFrame.\n\n        Notes\n        -----\n        The function is named by analogy with a collection of books\n        being re-organised from being side by side on a horizontal\n        position (the columns of the dataframe) to being stacked\n        vertically on top of of each other (in the index of the\n        dataframe).\n\n        Examples\n        --------\n        **Single level columns**\n\n        >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=['weight', 'height'])\n\n        Stacking a dataframe with a single level column axis returns a Series:\n\n        >>> df_single_level_cols\n             weight height\n        cat       0      1\n        dog       2      3\n        >>> df_single_level_cols.stack()\n        cat  weight    0\n             height    1\n        dog  weight    2\n             height    3\n        dtype: int64\n\n        **Multi level columns: simple case**\n\n        >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('weight', 'pounds')])\n        >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol1)\n\n        Stacking a dataframe with a multi-level column axis:\n\n        >>> df_multi_level_cols1\n             weight\n                 kg    pounds\n        cat       1        2\n        dog       2        4\n        >>> df_multi_level_cols1.stack()\n                    weight\n        cat kg           1\n            pounds       2\n        dog kg           2\n            pounds       4\n\n        **Missing values**\n\n        >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n        ...                                        ('height', 'm')])\n        >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        It is common to have missing values when stacking a dataframe\n        with multi-level columns, as the stacked dataframe typically\n        has more values than the original dataframe. Missing values\n        are filled with NaNs:\n\n        >>> df_multi_level_cols2\n            weight height\n                kg      m\n        cat    1.0    2.0\n        dog    3.0    4.0\n        >>> df_multi_level_cols2.stack()\n                height  weight\n        cat kg     NaN     1.0\n            m      2.0     NaN\n        dog kg     NaN     3.0\n            m      4.0     NaN\n\n        **Prescribing the level(s) to be stacked**\n\n        The first parameter controls which level or levels are stacked:\n\n        >>> df_multi_level_cols2.stack(0)\n                     kg    m\n        cat height  NaN  2.0\n            weight  1.0  NaN\n        dog height  NaN  4.0\n            weight  3.0  NaN\n        >>> df_multi_level_cols2.stack([0, 1])\n        cat  height  m     2.0\n             weight  kg    1.0\n        dog  height  m     4.0\n             weight  kg    3.0\n        dtype: float64\n\n        **Dropping missing values**\n\n        >>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n        ...                                     index=['cat', 'dog'],\n        ...                                     columns=multicol2)\n\n        Note that rows where all values are missing are dropped by\n        default but this behaviour can be controlled via the dropna\n        keyword parameter:\n\n        >>> df_multi_level_cols3\n            weight height\n                kg      m\n        cat    NaN    1.0\n        dog    2.0    3.0\n        >>> df_multi_level_cols3.stack(dropna=False)\n                height  weight\n        cat kg     NaN     NaN\n            m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        >>> df_multi_level_cols3.stack(dropna=True)\n                height  weight\n        cat m      1.0     NaN\n        dog kg     NaN     2.0\n            m      3.0     NaN\n        \"\"\"\n        from pandas.core.reshape.reshape import stack, stack_multiple\n        if isinstance(level, (tuple, list)):\n            return stack_multiple(self, level, dropna=dropna)\n        else:\n            return stack(self, level, dropna=dropna)\n\n    def unstack(self, level=-1, fill_value=None):\n        \"\"\"\n        Pivot a level of the (necessarily hierarchical) index labels, returning\n        a DataFrame having a new level of column labels whose inner-most level\n        consists of the pivoted index labels.\n\n        If the index is not a MultiIndex, the output will be a Series\n        (the analogue of stack when the columns are not a MultiIndex).\n\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, string, or list of these, default -1 (last level)\n            Level(s) of index to unstack, can pass level name\n        fill_value : replace NaN with this value if the unstack produces\n            missing values\n\n            .. versionadded:: 0.18.0\n\n        Returns\n        -------\n        unstacked : DataFrame or Series\n\n        See Also\n        --------\n        DataFrame.pivot : Pivot a table based on column values.\n        DataFrame.stack : Pivot a level of the column labels (inverse operation\n            from `unstack`).\n\n        Examples\n        --------\n        >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n        ...                                    ('two', 'a'), ('two', 'b')])\n        >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n        >>> s\n        one  a   1.0\n             b   2.0\n        two  a   3.0\n             b   4.0\n        dtype: float64\n\n        >>> s.unstack(level=-1)\n             a   b\n        one  1.0  2.0\n        two  3.0  4.0\n\n        >>> s.unstack(level=0)\n           one  two\n        a  1.0   3.0\n        b  2.0   4.0\n\n        >>> df = s.unstack(level=0)\n        >>> df.unstack()\n        one  a  1.0\n             b  2.0\n        two  a  3.0\n             b  4.0\n        dtype: float64\n        \"\"\"\n        from pandas.core.reshape.reshape import unstack\n        return unstack(self, level, fill_value)\n    _shared_docs['melt'] = \"\"\"\n    Unpivots a DataFrame from wide format to long format, optionally\n    leaving identifier variables set.\n\n    This function is useful to massage a DataFrame into a format where one\n    or more columns are identifier variables (`id_vars`), while all other\n    columns, considered measured variables (`value_vars`), are \"unpivoted\" to\n    the row axis, leaving just two non-identifier columns, 'variable' and\n    'value'.\n\n    %(versionadded)s\n    Parameters\n    ----------\n    frame : DataFrame\n    id_vars : tuple, list, or ndarray, optional\n        Column(s) to use as identifier variables.\n    value_vars : tuple, list, or ndarray, optional\n        Column(s) to unpivot. If not specified, uses all columns that\n        are not set as `id_vars`.\n    var_name : scalar\n        Name to use for the 'variable' column. If None it uses\n        ``frame.columns.name`` or 'variable'.\n    value_name : scalar, default 'value'\n        Name to use for the 'value' column.\n    col_level : int or string, optional\n        If columns are a MultiIndex then use this level to melt.\n\n    See Also\n    --------\n    %(other)s\n    pivot_table\n    DataFrame.pivot\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},\n    ...                    'B': {0: 1, 1: 3, 2: 5},\n    ...                    'C': {0: 2, 1: 4, 2: 6}})\n    >>> df\n       A  B  C\n    0  a  1  2\n    1  b  3  4\n    2  c  5  6\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B', 'C'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n    3  a        C      2\n    4  b        C      4\n    5  c        C      6\n\n    The names of 'variable' and 'value' columns can be customized:\n\n    >>> %(caller)sid_vars=['A'], value_vars=['B'],\n    ...         var_name='myVarname', value_name='myValname')\n       A myVarname  myValname\n    0  a         B          1\n    1  b         B          3\n    2  c         B          5\n\n    If you have multi-index columns:\n\n    >>> df.columns = [list('ABC'), list('DEF')]\n    >>> df\n       A  B  C\n       D  E  F\n    0  a  1  2\n    1  b  3  4\n    2  c  5  6\n\n    >>> %(caller)scol_level=0, id_vars=['A'], value_vars=['B'])\n       A variable  value\n    0  a        B      1\n    1  b        B      3\n    2  c        B      5\n\n    >>> %(caller)sid_vars=[('A', 'D')], value_vars=[('B', 'E')])\n      (A, D) variable_0 variable_1  value\n    0      a          B          E      1\n    1      b          B          E      3\n    2      c          B          E      5\n    \"\"\"\n\n    @Appender(_shared_docs['melt'] % dict(caller='df.melt(', versionadded=\n        \"\"\".. versionadded:: 0.20.0\n\"\"\", other='melt'))\n    def melt(self, id_vars=None, value_vars=None, var_name=None, value_name\n        ='value', col_level=None):\n        from pandas.core.reshape.melt import melt\n        return melt(self, id_vars=id_vars, value_vars=value_vars, var_name=\n            var_name, value_name=value_name, col_level=col_level)\n\n    def diff(self, periods=1, axis=0):\n        \"\"\"\n        First discrete difference of element.\n\n        Calculates the difference of a DataFrame element compared with another\n        element in the DataFrame (default is the element in the same column\n        of the previous row).\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for calculating difference, accepts negative\n            values.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Take difference over rows (0) or columns (1).\n\n            .. versionadded:: 0.16.1.\n\n        Returns\n        -------\n        diffed : DataFrame\n\n        See Also\n        --------\n        Series.diff: First discrete difference for a Series.\n        DataFrame.pct_change: Percent change over given number of periods.\n        DataFrame.shift: Shift index by desired number of periods with an\n            optional time freq.\n\n        Examples\n        --------\n        Difference with previous row\n\n        >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n        ...                    'b': [1, 1, 2, 3, 5, 8],\n        ...                    'c': [1, 4, 9, 16, 25, 36]})\n        >>> df\n           a  b   c\n        0  1  1   1\n        1  2  1   4\n        2  3  2   9\n        3  4  3  16\n        4  5  5  25\n        5  6  8  36\n\n        >>> df.diff()\n             a    b     c\n        0  NaN  NaN   NaN\n        1  1.0  0.0   3.0\n        2  1.0  1.0   5.0\n        3  1.0  1.0   7.0\n        4  1.0  2.0   9.0\n        5  1.0  3.0  11.0\n\n        Difference with previous column\n\n        >>> df.diff(axis=1)\n            a    b     c\n        0 NaN  0.0   0.0\n        1 NaN -1.0   3.0\n        2 NaN -1.0   7.0\n        3 NaN -1.0  13.0\n        4 NaN  0.0  20.0\n        5 NaN  2.0  28.0\n\n        Difference with 3rd previous row\n\n        >>> df.diff(periods=3)\n             a    b     c\n        0  NaN  NaN   NaN\n        1  NaN  NaN   NaN\n        2  NaN  NaN   NaN\n        3  3.0  2.0  15.0\n        4  3.0  4.0  21.0\n        5  3.0  6.0  27.0\n\n        Difference with following row\n\n        >>> df.diff(periods=-1)\n             a    b     c\n        0 -1.0  0.0  -3.0\n        1 -1.0 -1.0  -5.0\n        2 -1.0 -1.0  -7.0\n        3 -1.0 -2.0  -9.0\n        4 -1.0 -3.0 -11.0\n        5  NaN  NaN   NaN\n        \"\"\"\n        bm_axis = self._get_block_manager_axis(axis)\n        new_data = self._data.diff(n=periods, axis=bm_axis)\n        return self._constructor(new_data)\n\n    def _gotitem(self, key, ndim, subset=None):\n        \"\"\"\n        Sub-classes to define. Return a sliced object.\n\n        Parameters\n        ----------\n        key : string / list of selections\n        ndim : 1,2\n            requested ndim of result\n        subset : object, default None\n            subset to act on\n        \"\"\"\n        if subset is None:\n            subset = self\n        elif subset.ndim == 1:\n            return subset\n        return subset[key]\n    _agg_summary_and_see_also_doc = dedent(\n        \"\"\"\n    The aggregation operations are always performed over an axis, either the\n    index (default) or the column axis. This behavior is different from\n    `numpy` aggregation functions (`mean`, `median`, `prod`, `sum`, `std`,\n    `var`), where the default is to compute the aggregation of the flattened\n    array, e.g., ``numpy.mean(arr_2d)`` as opposed to ``numpy.mean(arr_2d,\n    axis=0)``.\n\n    `agg` is an alias for `aggregate`. Use the alias.\n\n    See Also\n    --------\n    DataFrame.apply : Perform any type of operations.\n    DataFrame.transform : Perform transformation type operations.\n    pandas.core.groupby.GroupBy : Perform operations over groups.\n    pandas.core.resample.Resampler : Perform operations over resampled bins.\n    pandas.core.window.Rolling : Perform operations over rolling window.\n    pandas.core.window.Expanding : Perform operations over expanding window.\n    pandas.core.window.EWM : Perform operation over exponential weighted\n        window.\n    \"\"\"\n        )\n    _agg_examples_doc = dedent(\n        \"\"\"\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2, 3],\n    ...                    [4, 5, 6],\n    ...                    [7, 8, 9],\n    ...                    [np.nan, np.nan, np.nan]],\n    ...                   columns=['A', 'B', 'C'])\n\n    Aggregate these functions over the rows.\n\n    >>> df.agg(['sum', 'min'])\n            A     B     C\n    sum  12.0  15.0  18.0\n    min   1.0   2.0   3.0\n\n    Different aggregations per column.\n\n    >>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n            A    B\n    max   NaN  8.0\n    min   1.0  2.0\n    sum  12.0  NaN\n\n    Aggregate over the columns.\n\n    >>> df.agg(\"mean\", axis=\"columns\")\n    0    2.0\n    1    5.0\n    2    8.0\n    3    NaN\n    dtype: float64\n    \"\"\"\n        )\n\n    @Substitution(see_also=_agg_summary_and_see_also_doc, examples=\n        _agg_examples_doc, versionadded='.. versionadded:: 0.20.0', **\n        _shared_doc_kwargs)\n    @Appender(_shared_docs['aggregate'])\n    def aggregate(self, func, axis=0, *args, **kwargs):\n        axis = self._get_axis_number(axis)\n        result = None\n        try:\n            result, how = self._aggregate(func, *args, axis=axis, **kwargs)\n        except TypeError:\n            pass\n        if result is None:\n            return self.apply(func, axis=axis, args=args, **kwargs)\n        return result\n\n    def _aggregate(self, arg, axis=0, *args, **kwargs):\n        if axis == 1:\n            result, how = super(DataFrame, self.T)._aggregate(arg, *args,\n                **kwargs)\n            result = result.T if result is not None else result\n            return result, how\n        return super(DataFrame, self)._aggregate(arg, *args, **kwargs)\n    agg = aggregate\n\n    @Appender(_shared_docs['transform'] % _shared_doc_kwargs)\n    def transform(self, func, axis=0, *args, **kwargs):\n        axis = self._get_axis_number(axis)\n        if axis == 1:\n            return super(DataFrame, self.T).transform(func, *args, **kwargs).T\n        return super(DataFrame, self).transform(func, *args, **kwargs)\n\n    def apply(self, func, axis=0, broadcast=None, raw=False, reduce=None,\n        result_type=None, args=(), **kwds):\n        \"\"\"\n        Apply a function along an axis of the DataFrame.\n\n        Objects passed to the function are Series objects whose index is\n        either the DataFrame's index (``axis=0``) or the DataFrame's columns\n        (``axis=1``). By default (``result_type=None``), the final return type\n        is inferred from the return type of the applied function. Otherwise,\n        it depends on the `result_type` argument.\n\n        Parameters\n        ----------\n        func : function\n            Function to apply to each column or row.\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            Axis along which the function is applied:\n\n            * 0 or 'index': apply function to each column.\n            * 1 or 'columns': apply function to each row.\n        broadcast : bool, optional\n            Only relevant for aggregation functions:\n\n            * ``False`` or ``None`` : returns a Series whose length is the\n              length of the index or the number of columns (based on the\n              `axis` parameter)\n            * ``True`` : results will be broadcast to the original shape\n              of the frame, the original index and columns will be retained.\n\n            .. deprecated:: 0.23.0\n               This argument will be removed in a future version, replaced\n               by result_type='broadcast'.\n\n        raw : bool, default False\n            * ``False`` : passes each row or column as a Series to the\n              function.\n            * ``True`` : the passed function will receive ndarray objects\n              instead.\n              If you are just applying a NumPy reduction function this will\n              achieve much better performance.\n        reduce : bool or None, default None\n            Try to apply reduction procedures. If the DataFrame is empty,\n            `apply` will use `reduce` to determine whether the result\n            should be a Series or a DataFrame. If ``reduce=None`` (the\n            default), `apply`'s return value will be guessed by calling\n            `func` on an empty Series\n            (note: while guessing, exceptions raised by `func` will be\n            ignored).\n            If ``reduce=True`` a Series will always be returned, and if\n            ``reduce=False`` a DataFrame will always be returned.\n\n            .. deprecated:: 0.23.0\n               This argument will be removed in a future version, replaced\n               by ``result_type='reduce'``.\n\n        result_type : {'expand', 'reduce', 'broadcast', None}, default None\n            These only act when ``axis=1`` (columns):\n\n            * 'expand' : list-like results will be turned into columns.\n            * 'reduce' : returns a Series if possible rather than expanding\n              list-like results. This is the opposite of 'expand'.\n            * 'broadcast' : results will be broadcast to the original shape\n              of the DataFrame, the original index and columns will be\n              retained.\n\n            The default behaviour (None) depends on the return value of the\n            applied function: list-like results will be returned as a Series\n            of those. However if the apply function returns a Series these\n            are expanded to columns.\n\n            .. versionadded:: 0.23.0\n\n        args : tuple\n            Positional arguments to pass to `func` in addition to the\n            array/series.\n        **kwds\n            Additional keyword arguments to pass as keywords arguments to\n            `func`.\n\n        Returns\n        -------\n        applied : Series or DataFrame\n\n        See Also\n        --------\n        DataFrame.applymap: For elementwise operations.\n        DataFrame.aggregate: Only perform aggregating type operations.\n        DataFrame.transform: Only perform transforming type operations.\n\n        Notes\n        -----\n        In the current implementation apply calls `func` twice on the\n        first column/row to decide whether it can take a fast or slow\n        code path. This can lead to unexpected behavior if `func` has\n        side-effects, as they will take effect twice for the first\n        column/row.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[4, 9],] * 3, columns=['A', 'B'])\n        >>> df\n           A  B\n        0  4  9\n        1  4  9\n        2  4  9\n\n        Using a numpy universal function (in this case the same as\n        ``np.sqrt(df)``):\n\n        >>> df.apply(np.sqrt)\n             A    B\n        0  2.0  3.0\n        1  2.0  3.0\n        2  2.0  3.0\n\n        Using a reducing function on either axis\n\n        >>> df.apply(np.sum, axis=0)\n        A    12\n        B    27\n        dtype: int64\n\n        >>> df.apply(np.sum, axis=1)\n        0    13\n        1    13\n        2    13\n        dtype: int64\n\n        Retuning a list-like will result in a Series\n\n        >>> df.apply(lambda x: [1, 2], axis=1)\n        0    [1, 2]\n        1    [1, 2]\n        2    [1, 2]\n        dtype: object\n\n        Passing result_type='expand' will expand list-like results\n        to columns of a Dataframe\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n           0  1\n        0  1  2\n        1  1  2\n        2  1  2\n\n        Returning a Series inside the function is similar to passing\n        ``result_type='expand'``. The resulting column names\n        will be the Series index.\n\n        >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n           foo  bar\n        0    1    2\n        1    1    2\n        2    1    2\n\n        Passing ``result_type='broadcast'`` will ensure the same shape\n        result, whether list-like or scalar is returned by the function,\n        and broadcast it along the axis. The resulting column names will\n        be the originals.\n\n        >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n           A  B\n        0  1  2\n        1  1  2\n        2  1  2\n        \"\"\"\n        from pandas.core.apply import frame_apply\n        op = frame_apply(self, func=func, axis=axis, broadcast=broadcast,\n            raw=raw, reduce=reduce, result_type=result_type, args=args,\n            kwds=kwds)\n        return op.get_result()\n\n    def applymap(self, func):\n        \"\"\"\n        Apply a function to a Dataframe elementwise.\n\n        This method applies a function that accepts and returns a scalar\n        to every element of a DataFrame.\n\n        Parameters\n        ----------\n        func : callable\n            Python function, returns a single value from a single value.\n\n        Returns\n        -------\n        DataFrame\n            Transformed DataFrame.\n\n        See Also\n        --------\n        DataFrame.apply : Apply a function along input axis of DataFrame.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n        >>> df\n               0      1\n        0  1.000  2.120\n        1  3.356  4.567\n\n        >>> df.applymap(lambda x: len(str(x)))\n           0  1\n        0  3  4\n        1  5  5\n\n        Note that a vectorized version of `func` often exists, which will\n        be much faster. You could square each number elementwise.\n\n        >>> df.applymap(lambda x: x**2)\n                   0          1\n        0   1.000000   4.494400\n        1  11.262736  20.857489\n\n        But it's better to avoid applymap in that case.\n\n        >>> df ** 2\n                   0          1\n        0   1.000000   4.494400\n        1  11.262736  20.857489\n        \"\"\"\n\n        def infer(x):\n            if x.empty:\n                return lib.map_infer(x, func)\n            return lib.map_infer(x.astype(object).values, func)\n        return self.apply(infer)\n\n    def append(self, other, ignore_index=False, verify_integrity=False,\n        sort=None):\n        \"\"\"\n        Append rows of `other` to the end of caller, returning a new object.\n\n        Columns in `other` that are not in the caller are added as new columns.\n\n        Parameters\n        ----------\n        other : DataFrame or Series/dict-like object, or list of these\n            The data to append.\n        ignore_index : boolean, default False\n            If True, do not use the index labels.\n        verify_integrity : boolean, default False\n            If True, raise ValueError on creating index with duplicates.\n        sort : boolean, default None\n            Sort columns if the columns of `self` and `other` are not aligned.\n            The default sorting is deprecated and will change to not-sorting\n            in a future version of pandas. Explicitly pass ``sort=True`` to\n            silence the warning and sort. Explicitly pass ``sort=False`` to\n            silence the warning and not sort.\n\n            .. versionadded:: 0.23.0\n\n        Returns\n        -------\n        appended : DataFrame\n\n        See Also\n        --------\n        pandas.concat : General function to concatenate DataFrame, Series\n            or Panel objects.\n\n        Notes\n        -----\n        If a list of dict/series is passed and the keys are all contained in\n        the DataFrame's index, the order of the columns in the resulting\n        DataFrame will be unchanged.\n\n        Iteratively appending rows to a DataFrame can be more computationally\n        intensive than a single concatenate. A better solution is to append\n        those rows to a list and then concatenate the list with the original\n        DataFrame all at once.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n        >>> df\n           A  B\n        0  1  2\n        1  3  4\n        >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n        >>> df.append(df2)\n           A  B\n        0  1  2\n        1  3  4\n        0  5  6\n        1  7  8\n\n        With `ignore_index` set to True:\n\n        >>> df.append(df2, ignore_index=True)\n           A  B\n        0  1  2\n        1  3  4\n        2  5  6\n        3  7  8\n\n        The following, while not recommended methods for generating DataFrames,\n        show two ways to generate a DataFrame from multiple data sources.\n\n        Less efficient:\n\n        >>> df = pd.DataFrame(columns=['A'])\n        >>> for i in range(5):\n        ...     df = df.append({'A': i}, ignore_index=True)\n        >>> df\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n\n        More efficient:\n\n        >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n        ...           ignore_index=True)\n           A\n        0  0\n        1  1\n        2  2\n        3  3\n        4  4\n        \"\"\"\n        if isinstance(other, (Series, dict)):\n            if isinstance(other, dict):\n                other = Series(other)\n            if other.name is None and not ignore_index:\n                raise TypeError(\n                    'Can only append a Series if ignore_index=True or if the Series has a name'\n                    )\n            if other.name is None:\n                index = None\n            else:\n                index = Index([other.name], name=self.index.name)\n            idx_diff = other.index.difference(self.columns)\n            try:\n                combined_columns = self.columns.append(idx_diff)\n            except TypeError:\n                combined_columns = self.columns.astype(object).append(idx_diff)\n            other = other.reindex(combined_columns, copy=False)\n            other = DataFrame(other.values.reshape((1, len(other))), index=\n                index, columns=combined_columns)\n            other = other._convert(datetime=True, timedelta=True)\n            if not self.columns.equals(combined_columns):\n                self = self.reindex(columns=combined_columns)\n        elif isinstance(other, list) and not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.loc[:, self.columns]\n        from pandas.core.reshape.concat import concat\n        if isinstance(other, (list, tuple)):\n            to_concat = [self] + other\n        else:\n            to_concat = [self, other]\n        return concat(to_concat, ignore_index=ignore_index,\n            verify_integrity=verify_integrity, sort=sort)\n\n    def join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort\n        =False):\n        \"\"\"\n        Join columns of another DataFrame.\n\n        Join columns with `other` DataFrame either on index or on a key\n        column. Efficiently join multiple DataFrame objects by index at once by\n        passing a list.\n\n        Parameters\n        ----------\n        other : DataFrame, Series, or list of DataFrame\n            Index should be similar to one of the columns in this one. If a\n            Series is passed, its name attribute must be set, and that will be\n            used as the column name in the resulting joined DataFrame.\n        on : str, list of str, or array-like, optional\n            Column or index level name(s) in the caller to join on the index\n            in `other`, otherwise joins index-on-index. If multiple\n            values given, the `other` DataFrame must have a MultiIndex. Can\n            pass an array as the join key if it is not already contained in\n            the calling DataFrame. Like an Excel VLOOKUP operation.\n        how : {'left', 'right', 'outer', 'inner'}, default 'left'\n            How to handle the operation of the two objects.\n\n            * left: use calling frame's index (or column if on is specified)\n            * right: use `other`'s index.\n            * outer: form union of calling frame's index (or column if on is\n              specified) with `other`'s index, and sort it.\n              lexicographically.\n            * inner: form intersection of calling frame's index (or column if\n              on is specified) with `other`'s index, preserving the order\n              of the calling's one.\n        lsuffix : str, default ''\n            Suffix to use from left frame's overlapping columns.\n        rsuffix : str, default ''\n            Suffix to use from right frame's overlapping columns.\n        sort : bool, default False\n            Order result DataFrame lexicographically by the join key. If False,\n            the order of the join key depends on the join type (how keyword).\n\n        Returns\n        -------\n        DataFrame\n            A dataframe containing columns from both the caller and `other`.\n\n        See Also\n        --------\n        DataFrame.merge : For column(s)-on-columns(s) operations.\n\n        Notes\n        -----\n        Parameters `on`, `lsuffix`, and `rsuffix` are not supported when\n        passing a list of `DataFrame` objects.\n\n        Support for specifying index levels as the `on` parameter was added\n        in version 0.23.0.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n        ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n        >>> df\n          key   A\n        0  K0  A0\n        1  K1  A1\n        2  K2  A2\n        3  K3  A3\n        4  K4  A4\n        5  K5  A5\n\n        >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n        ...                       'B': ['B0', 'B1', 'B2']})\n\n        >>> other\n          key   B\n        0  K0  B0\n        1  K1  B1\n        2  K2  B2\n\n        Join DataFrames using their indexes.\n\n        >>> df.join(other, lsuffix='_caller', rsuffix='_other')\n          key_caller   A key_other    B\n        0         K0  A0        K0   B0\n        1         K1  A1        K1   B1\n        2         K2  A2        K2   B2\n        3         K3  A3       NaN  NaN\n        4         K4  A4       NaN  NaN\n        5         K5  A5       NaN  NaN\n\n        If we want to join using the key columns, we need to set key to be\n        the index in both `df` and `other`. The joined DataFrame will have\n        key as its index.\n\n        >>> df.set_index('key').join(other.set_index('key'))\n              A    B\n        key\n        K0   A0   B0\n        K1   A1   B1\n        K2   A2   B2\n        K3   A3  NaN\n        K4   A4  NaN\n        K5   A5  NaN\n\n        Another option to join using the key columns is to use the `on`\n        parameter. DataFrame.join always uses `other`'s index but we can use\n        any column in `df`. This method preserves the original DataFrame's\n        index in the result.\n\n        >>> df.join(other.set_index('key'), on='key')\n          key   A    B\n        0  K0  A0   B0\n        1  K1  A1   B1\n        2  K2  A2   B2\n        3  K3  A3  NaN\n        4  K4  A4  NaN\n        5  K5  A5  NaN\n        \"\"\"\n        return self._join_compat(other, on=on, how=how, lsuffix=lsuffix,\n            rsuffix=rsuffix, sort=sort)\n\n    def _join_compat(self, other, on=None, how='left', lsuffix='', rsuffix=\n        '', sort=False):\n        from pandas.core.reshape.merge import merge\n        from pandas.core.reshape.concat import concat\n        if isinstance(other, Series):\n            if other.name is None:\n                raise ValueError('Other Series must have a name')\n            other = DataFrame({other.name: other})\n        if isinstance(other, DataFrame):\n            return merge(self, other, left_on=on, how=how, left_index=on is\n                None, right_index=True, suffixes=(lsuffix, rsuffix), sort=sort)\n        else:\n            if on is not None:\n                raise ValueError(\n                    'Joining multiple DataFrames only supported for joining on index'\n                    )\n            frames = [self] + list(other)\n            can_concat = all(df.index.is_unique for df in frames)\n            if can_concat:\n                if how == 'left':\n                    how = 'outer'\n                    join_axes = [self.index]\n                else:\n                    join_axes = None\n                return concat(frames, axis=1, join=how, join_axes=join_axes,\n                    verify_integrity=True)\n            joined = frames[0]\n            for frame in frames[1:]:\n                joined = merge(joined, frame, how=how, left_index=True,\n                    right_index=True)\n            return joined\n\n    @Substitution('')\n    @Appender(_merge_doc, indents=2)\n    def merge(self, right, how='inner', on=None, left_on=None, right_on=\n        None, left_index=False, right_index=False, sort=False, suffixes=(\n        '_x', '_y'), copy=True, indicator=False, validate=None):\n        from pandas.core.reshape.merge import merge\n        return merge(self, right, how=how, on=on, left_on=left_on, right_on\n            =right_on, left_index=left_index, right_index=right_index, sort\n            =sort, suffixes=suffixes, copy=copy, indicator=indicator,\n            validate=validate)\n\n    def round(self, decimals=0, *args, **kwargs):\n        \"\"\"\n        Round a DataFrame to a variable number of decimal places.\n\n        Parameters\n        ----------\n        decimals : int, dict, Series\n            Number of decimal places to round each column to. If an int is\n            given, round each column to the same number of places.\n            Otherwise dict and Series round to variable numbers of places.\n            Column names should be in the keys if `decimals` is a\n            dict-like, or in the index if `decimals` is a Series. Any\n            columns not included in `decimals` will be left as is. Elements\n            of `decimals` which are not columns of the input will be\n            ignored.\n\n        Returns\n        -------\n        DataFrame\n\n        See Also\n        --------\n        numpy.around\n        Series.round\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.random.random([3, 3]),\n        ...     columns=['A', 'B', 'C'], index=['first', 'second', 'third'])\n        >>> df\n                       A         B         C\n        first   0.028208  0.992815  0.173891\n        second  0.038683  0.645646  0.577595\n        third   0.877076  0.149370  0.491027\n        >>> df.round(2)\n                   A     B     C\n        first   0.03  0.99  0.17\n        second  0.04  0.65  0.58\n        third   0.88  0.15  0.49\n        >>> df.round({'A': 1, 'C': 2})\n                  A         B     C\n        first   0.0  0.992815  0.17\n        second  0.0  0.645646  0.58\n        third   0.9  0.149370  0.49\n        >>> decimals = pd.Series([1, 0, 2], index=['A', 'B', 'C'])\n        >>> df.round(decimals)\n                  A  B     C\n        first   0.0  1  0.17\n        second  0.0  1  0.58\n        third   0.9  0  0.49\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n\n        def _dict_round(df, decimals):\n            for col, vals in df.iteritems():\n                try:\n                    yield _series_round(vals, decimals[col])\n                except KeyError:\n                    yield vals\n\n        def _series_round(s, decimals):\n            if is_integer_dtype(s) or is_float_dtype(s):\n                return s.round(decimals)\n            return s\n        nv.validate_round(args, kwargs)\n        if isinstance(decimals, (dict, Series)):\n            if isinstance(decimals, Series):\n                if not decimals.index.is_unique:\n                    raise ValueError('Index of decimals must be unique')\n            new_cols = [col for col in _dict_round(self, decimals)]\n        elif is_integer(decimals):\n            new_cols = [_series_round(v, decimals) for _, v in self.iteritems()\n                ]\n        else:\n            raise TypeError(\n                'decimals must be an integer, a dict-like or a Series')\n        if len(new_cols) > 0:\n            return self._constructor(concat(new_cols, axis=1), index=self.\n                index, columns=self.columns)\n        else:\n            return self\n\n    def corr(self, method='pearson', min_periods=1):\n        \"\"\"\n        Compute pairwise correlation of columns, excluding NA/null values.\n\n        Parameters\n        ----------\n        method : {'pearson', 'kendall', 'spearman'} or callable\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n            * callable: callable with input two 1d ndarrays\n                and returning a float\n                .. versionadded:: 0.24.0\n\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result. Currently only available for pearson\n            and spearman correlation\n\n        Returns\n        -------\n        y : DataFrame\n\n        Examples\n        --------\n        >>> histogram_intersection = lambda a, b: np.minimum(a, b\n        ... ).sum().round(decimals=1)\n        >>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n        ...                   columns=['dogs', 'cats'])\n        >>> df.corr(method=histogram_intersection)\n              dogs cats\n        dogs   1.0  0.3\n        cats   0.3  1.0\n\n        See Also\n        -------\n        DataFrame.corrwith\n        Series.corr\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.values\n        if method == 'pearson':\n            correl = libalgos.nancorr(ensure_float64(mat), minp=min_periods)\n        elif method == 'spearman':\n            correl = libalgos.nancorr_spearman(ensure_float64(mat), minp=\n                min_periods)\n        elif method == 'kendall' or callable(method):\n            if min_periods is None:\n                min_periods = 1\n            mat = ensure_float64(mat).T\n            corrf = nanops.get_corr_func(method)\n            K = len(cols)\n            correl = np.empty((K, K), dtype=float)\n            mask = np.isfinite(mat)\n            for i, ac in enumerate(mat):\n                for j, bc in enumerate(mat):\n                    if i > j:\n                        continue\n                    valid = mask[i] & mask[j]\n                    if valid.sum() < min_periods:\n                        c = np.nan\n                    elif i == j:\n                        c = 1.0\n                    elif not valid.all():\n                        c = corrf(ac[valid], bc[valid])\n                    else:\n                        c = corrf(ac, bc)\n                    correl[i, j] = c\n                    correl[j, i] = c\n        else:\n            raise ValueError(\n                \"method must be either 'pearson', 'spearman', or 'kendall', '{method}' was supplied\"\n                .format(method=method))\n        return self._constructor(correl, index=idx, columns=cols)\n\n    def cov(self, min_periods=None):\n        \"\"\"\n        Compute pairwise covariance of columns, excluding NA/null values.\n\n        Compute the pairwise covariance among the series of a DataFrame.\n        The returned data frame is the `covariance matrix\n        <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\n        of the DataFrame.\n\n        Both NA and null values are automatically excluded from the\n        calculation. (See the note below about bias from missing values.)\n        A threshold can be set for the minimum number of\n        observations for each value created. Comparisons with observations\n        below this threshold will be returned as ``NaN``.\n\n        This method is generally used for the analysis of time series data to\n        understand the relationship between different measures\n        across time.\n\n        Parameters\n        ----------\n        min_periods : int, optional\n            Minimum number of observations required per pair of columns\n            to have a valid result.\n\n        Returns\n        -------\n        DataFrame\n            The covariance matrix of the series of the DataFrame.\n\n        See Also\n        --------\n        pandas.Series.cov : Compute covariance with another Series.\n        pandas.core.window.EWM.cov: Exponential weighted sample covariance.\n        pandas.core.window.Expanding.cov : Expanding sample covariance.\n        pandas.core.window.Rolling.cov : Rolling sample covariance.\n\n        Notes\n        -----\n        Returns the covariance matrix of the DataFrame's time series.\n        The covariance is normalized by N-1.\n\n        For DataFrames that have Series that are missing data (assuming that\n        data is `missing at random\n        <https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\n        the returned covariance matrix will be an unbiased estimate\n        of the variance and covariance between the member Series.\n\n        However, for many applications this estimate may not be acceptable\n        because the estimate covariance matrix is not guaranteed to be positive\n        semi-definite. This could lead to estimate correlations having\n        absolute values which are greater than one, and/or a non-invertible\n        covariance matrix. See `Estimation of covariance matrices\n        <http://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\n        matrices>`__ for more details.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n        ...                   columns=['dogs', 'cats'])\n        >>> df.cov()\n                  dogs      cats\n        dogs  0.666667 -1.000000\n        cats -1.000000  1.666667\n\n        >>> np.random.seed(42)\n        >>> df = pd.DataFrame(np.random.randn(1000, 5),\n        ...                   columns=['a', 'b', 'c', 'd', 'e'])\n        >>> df.cov()\n                  a         b         c         d         e\n        a  0.998438 -0.020161  0.059277 -0.008943  0.014144\n        b -0.020161  1.059352 -0.008543 -0.024738  0.009826\n        c  0.059277 -0.008543  1.010670 -0.001486 -0.000271\n        d -0.008943 -0.024738 -0.001486  0.921297 -0.013692\n        e  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n        **Minimum number of periods**\n\n        This method also supports an optional ``min_periods`` keyword\n        that specifies the required minimum number of non-NA observations for\n        each column pair in order to have a valid result:\n\n        >>> np.random.seed(42)\n        >>> df = pd.DataFrame(np.random.randn(20, 3),\n        ...                   columns=['a', 'b', 'c'])\n        >>> df.loc[df.index[:5], 'a'] = np.nan\n        >>> df.loc[df.index[5:10], 'b'] = np.nan\n        >>> df.cov(min_periods=12)\n                  a         b         c\n        a  0.316741       NaN -0.150812\n        b       NaN  1.248003  0.191417\n        c -0.150812  0.191417  0.895202\n        \"\"\"\n        numeric_df = self._get_numeric_data()\n        cols = numeric_df.columns\n        idx = cols.copy()\n        mat = numeric_df.values\n        if notna(mat).all():\n            if min_periods is not None and min_periods > len(mat):\n                baseCov = np.empty((mat.shape[1], mat.shape[1]))\n                baseCov.fill(np.nan)\n            else:\n                baseCov = np.cov(mat.T)\n            baseCov = baseCov.reshape((len(cols), len(cols)))\n        else:\n            baseCov = libalgos.nancorr(ensure_float64(mat), cov=True, minp=\n                min_periods)\n        return self._constructor(baseCov, index=idx, columns=cols)\n\n    def corrwith(self, other, axis=0, drop=False, method='pearson'):\n        \"\"\"\n        Compute pairwise correlation between rows or columns of DataFrame\n        with rows or columns of Series or DataFrame.  DataFrames are first\n        aligned along both axes before computing the correlations.\n\n        Parameters\n        ----------\n        other : DataFrame, Series\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' to compute column-wise, 1 or 'columns' for row-wise\n        drop : boolean, default False\n            Drop missing indices from result\n        method : {'pearson', 'kendall', 'spearman'} or callable\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n            * callable: callable with input two 1d ndarrays\n                and returning a float\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        correls : Series\n\n        See Also\n        -------\n        DataFrame.corr\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        this = self._get_numeric_data()\n        if isinstance(other, Series):\n            return this.apply(lambda x: other.corr(x, method=method), axis=axis\n                )\n        other = other._get_numeric_data()\n        left, right = this.align(other, join='inner', copy=False)\n        if axis == 1:\n            left = left.T\n            right = right.T\n        if method == 'pearson':\n            left = left + right * 0\n            right = right + left * 0\n            ldem = left - left.mean()\n            rdem = right - right.mean()\n            num = (ldem * rdem).sum()\n            dom = (left.count() - 1) * left.std() * right.std()\n            correl = num / dom\n        elif method in ['kendall', 'spearman'] or callable(method):\n\n            def c(x):\n                return nanops.nancorr(x[0], x[1], method=method)\n            correl = Series(map(c, zip(left.values.T, right.values.T)),\n                index=left.columns)\n        else:\n            raise ValueError(\n                \"Invalid method {method} was passed, valid methods are: 'pearson', 'kendall', 'spearman', or callable\"\n                .format(method=method))\n        if not drop:\n            raxis = 1 if axis == 0 else 0\n            result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n            idx_diff = result_index.difference(correl.index)\n            if len(idx_diff) > 0:\n                correl = correl.append(Series([np.nan] * len(idx_diff),\n                    index=idx_diff))\n        return correl\n\n    def count(self, axis=0, level=None, numeric_only=False):\n        \"\"\"\n        Count non-NA cells for each column or row.\n\n        The values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\n        on `pandas.options.mode.use_inf_as_na`) are considered NA.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            If 0 or 'index' counts are generated for each column.\n            If 1 or 'columns' counts are generated for each **row**.\n        level : int or str, optional\n            If the axis is a `MultiIndex` (hierarchical), count along a\n            particular `level`, collapsing into a `DataFrame`.\n            A `str` specifies the level name.\n        numeric_only : boolean, default False\n            Include only `float`, `int` or `boolean` data.\n\n        Returns\n        -------\n        Series or DataFrame\n            For each column/row the number of non-NA/null entries.\n            If `level` is specified returns a `DataFrame`.\n\n        See Also\n        --------\n        Series.count: Number of non-NA elements in a Series.\n        DataFrame.shape: Number of DataFrame rows and columns (including NA\n            elements).\n        DataFrame.isna: Boolean same-sized DataFrame showing places of NA\n            elements.\n\n        Examples\n        --------\n        Constructing DataFrame from a dictionary:\n\n        >>> df = pd.DataFrame({\"Person\":\n        ...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n        ...                    \"Age\": [24., np.nan, 21., 33, 26],\n        ...                    \"Single\": [False, True, True, True, False]})\n        >>> df\n           Person   Age  Single\n        0    John  24.0   False\n        1    Myla   NaN    True\n        2   Lewis  21.0    True\n        3    John  33.0    True\n        4    Myla  26.0   False\n\n        Notice the uncounted NA values:\n\n        >>> df.count()\n        Person    5\n        Age       4\n        Single    5\n        dtype: int64\n\n        Counts for each **row**:\n\n        >>> df.count(axis='columns')\n        0    3\n        1    2\n        2    3\n        3    3\n        4    3\n        dtype: int64\n\n        Counts for one level of a `MultiIndex`:\n\n        >>> df.set_index([\"Person\", \"Single\"]).count(level=\"Person\")\n                Age\n        Person\n        John      2\n        Lewis     1\n        Myla      1\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        if level is not None:\n            return self._count_level(level, axis=axis, numeric_only=\n                numeric_only)\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n        if len(frame._get_axis(axis)) == 0:\n            result = Series(0, index=frame._get_agg_axis(axis))\n        elif frame._is_mixed_type or frame._data.any_extension_types:\n            result = notna(frame).sum(axis=axis)\n        else:\n            series_counts = notna(frame).sum(axis=axis)\n            counts = series_counts.values\n            result = Series(counts, index=frame._get_agg_axis(axis))\n        return result.astype('int64')\n\n    def _count_level(self, level, axis=0, numeric_only=False):\n        if numeric_only:\n            frame = self._get_numeric_data()\n        else:\n            frame = self\n        count_axis = frame._get_axis(axis)\n        agg_axis = frame._get_agg_axis(axis)\n        if not isinstance(count_axis, MultiIndex):\n            raise TypeError('Can only count levels on hierarchical {ax}.'.\n                format(ax=self._get_axis_name(axis)))\n        if frame._is_mixed_type:\n            mask = notna(frame).values\n        else:\n            mask = notna(frame.values)\n        if axis == 1:\n            mask = mask.T\n        if isinstance(level, compat.string_types):\n            level = count_axis._get_level_number(level)\n        level_index = count_axis.levels[level]\n        level_codes = ensure_int64(count_axis.codes[level])\n        counts = lib.count_level_2d(mask, level_codes, len(level_index), axis=0\n            )\n        result = DataFrame(counts, index=level_index, columns=agg_axis)\n        if axis == 1:\n            return result.T\n        else:\n            return result\n\n    def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None,\n        filter_type=None, **kwds):\n        if axis is None and filter_type == 'bool':\n            labels = None\n            constructor = None\n        else:\n            axis = self._get_axis_number(axis)\n            labels = self._get_agg_axis(axis)\n            constructor = self._constructor\n\n        def f(x):\n            return op(x, axis=axis, skipna=skipna, **kwds)\n        if axis == 1 and self._is_mixed_type and self._is_datelike_mixed_type:\n            numeric_only = True\n        if numeric_only is None:\n            try:\n                values = self.values\n                result = f(values)\n                if filter_type == 'bool' and is_object_dtype(values\n                    ) and axis is None:\n                    result = np.bool_(result)\n            except Exception as e:\n                if filter_type is None and axis == 0:\n                    try:\n                        from pandas.core.apply import frame_apply\n                        opa = frame_apply(self, func=f, result_type=\n                            'expand', ignore_failures=True)\n                        result = opa.get_result()\n                        if result.ndim == self.ndim:\n                            result = result.iloc[0]\n                        return result\n                    except Exception:\n                        pass\n                if filter_type is None or filter_type == 'numeric':\n                    data = self._get_numeric_data()\n                elif filter_type == 'bool':\n                    data = self._get_bool_data()\n                else:\n                    e = NotImplementedError(\n                        'Handling exception with filter_type {f} notimplemented.'\n                        .format(f=filter_type))\n                    raise_with_traceback(e)\n                with np.errstate(all='ignore'):\n                    result = f(data.values)\n                labels = data._get_agg_axis(axis)\n        else:\n            if numeric_only:\n                if filter_type is None or filter_type == 'numeric':\n                    data = self._get_numeric_data()\n                elif filter_type == 'bool':\n                    data = self\n                else:\n                    msg = (\n                        'Generating numeric_only data with filter_type {f}not supported.'\n                        .format(f=filter_type))\n                    raise NotImplementedError(msg)\n                values = data.values\n                labels = data._get_agg_axis(axis)\n            else:\n                values = self.values\n            result = f(values)\n        if hasattr(result, 'dtype') and is_object_dtype(result.dtype):\n            try:\n                if filter_type is None or filter_type == 'numeric':\n                    result = result.astype(np.float64)\n                elif filter_type == 'bool' and notna(result).all():\n                    result = result.astype(np.bool_)\n            except (ValueError, TypeError):\n                if axis == 0:\n                    result = coerce_to_dtypes(result, self.dtypes)\n        if constructor is not None:\n            result = Series(result, index=labels)\n        return result\n\n    def nunique(self, axis=0, dropna=True):\n        \"\"\"\n        Count distinct observations over requested axis.\n\n        Return Series with number of distinct observations. Can ignore NaN\n        values.\n\n        .. versionadded:: 0.20.0\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for\n            column-wise.\n        dropna : bool, default True\n            Don't include NaN in the counts.\n\n        Returns\n        -------\n        nunique : Series\n\n        See Also\n        --------\n        Series.nunique: Method nunique for Series.\n        DataFrame.count: Count non-NA cells for each column or row.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n        >>> df.nunique()\n        A    3\n        B    1\n        dtype: int64\n\n        >>> df.nunique(axis=1)\n        0    1\n        1    2\n        2    2\n        dtype: int64\n        \"\"\"\n        return self.apply(Series.nunique, axis=axis, dropna=dropna)\n\n    def idxmin(self, axis=0, skipna=True):\n        \"\"\"\n        Return index of first occurrence of minimum over requested axis.\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        skipna : boolean, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Returns\n        -------\n        idxmin : Series\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        See Also\n        --------\n        Series.idxmin\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmin``.\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmin(self.values, axis=axis, skipna=skipna)\n        index = self._get_axis(axis)\n        result = [(index[i] if i >= 0 else np.nan) for i in indices]\n        return Series(result, index=self._get_agg_axis(axis))\n\n    def idxmax(self, axis=0, skipna=True):\n        \"\"\"\n        Return index of first occurrence of maximum over requested axis.\n        NA/null values are excluded.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            0 or 'index' for row-wise, 1 or 'columns' for column-wise\n        skipna : boolean, default True\n            Exclude NA/null values. If an entire row/column is NA, the result\n            will be NA.\n\n        Returns\n        -------\n        idxmax : Series\n\n        Raises\n        ------\n        ValueError\n            * If the row/column is empty\n\n        See Also\n        --------\n        Series.idxmax\n\n        Notes\n        -----\n        This method is the DataFrame version of ``ndarray.argmax``.\n        \"\"\"\n        axis = self._get_axis_number(axis)\n        indices = nanops.nanargmax(self.values, axis=axis, skipna=skipna)\n        index = self._get_axis(axis)\n        result = [(index[i] if i >= 0 else np.nan) for i in indices]\n        return Series(result, index=self._get_agg_axis(axis))\n\n    def _get_agg_axis(self, axis_num):\n        \"\"\"\n        Let's be explicit about this.\n        \"\"\"\n        if axis_num == 0:\n            return self.columns\n        elif axis_num == 1:\n            return self.index\n        else:\n            raise ValueError('Axis must be 0 or 1 (got %r)' % axis_num)\n\n    def mode(self, axis=0, numeric_only=False, dropna=True):\n        \"\"\"\n        Get the mode(s) of each element along the selected axis.\n\n        The mode of a set of values is the value that appears most often.\n        It can be multiple values.\n\n        Parameters\n        ----------\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to iterate over while searching for the mode:\n\n            * 0 or 'index' : get mode of each column\n            * 1 or 'columns' : get mode of each row\n        numeric_only : bool, default False\n            If True, only apply to numeric columns.\n        dropna : bool, default True\n            Don't consider counts of NaN/NaT.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        DataFrame\n            The modes of each column or row.\n\n        See Also\n        --------\n        Series.mode : Return the highest frequency value in a Series.\n        Series.value_counts : Return the counts of values in a Series.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame([('bird', 2, 2),\n        ...                    ('mammal', 4, np.nan),\n        ...                    ('arthropod', 8, 0),\n        ...                    ('bird', 2, np.nan)],\n        ...                   index=('falcon', 'horse', 'spider', 'ostrich'),\n        ...                   columns=('species', 'legs', 'wings'))\n        >>> df\n                   species  legs  wings\n        falcon        bird     2    2.0\n        horse       mammal     4    NaN\n        spider   arthropod     8    0.0\n        ostrich       bird     2    NaN\n\n        By default, missing values are not considered, and the mode of wings\n        are both 0 and 2. The second row of species and legs contains ``NaN``,\n        because they have only one mode, but the DataFrame has two rows.\n\n        >>> df.mode()\n          species  legs  wings\n        0    bird   2.0    0.0\n        1     NaN   NaN    2.0\n\n        Setting ``dropna=False`` ``NaN`` values are considered and they can be\n        the mode (like for wings).\n\n        >>> df.mode(dropna=False)\n          species  legs  wings\n        0    bird     2    NaN\n\n        Setting ``numeric_only=True``, only the mode of numeric columns is\n        computed, and columns of other types are ignored.\n\n        >>> df.mode(numeric_only=True)\n           legs  wings\n        0   2.0    0.0\n        1   NaN    2.0\n\n        To compute the mode over columns and not rows, use the axis parameter:\n\n        >>> df.mode(axis='columns', numeric_only=True)\n                   0    1\n        falcon   2.0  NaN\n        horse    4.0  NaN\n        spider   0.0  8.0\n        ostrich  2.0  NaN\n        \"\"\"\n        data = self if not numeric_only else self._get_numeric_data()\n\n        def f(s):\n            return s.mode(dropna=dropna)\n        return data.apply(f, axis=axis)\n\n    def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear'\n        ):\n        \"\"\"\n        Return values at the given quantile over requested axis.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            Value between 0 <= q <= 1, the quantile(s) to compute.\n        axis : {0, 1, 'index', 'columns'} (default 0)\n            Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n        numeric_only : bool, default True\n            If False, the quantile of datetime and timedelta data will be\n            computed as well.\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n            * linear: `i + (j - i) * fraction`, where `fraction` is the\n              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2.\n\n            .. versionadded:: 0.18.0\n\n        Returns\n        -------\n        quantiles : Series or DataFrame\n\n            - If ``q`` is an array, a DataFrame will be returned where the\n              index is ``q``, the columns are the columns of self, and the\n              values are the quantiles.\n            - If ``q`` is a float, a Series will be returned where the\n              index is the columns of self and the values are the quantiles.\n\n        See Also\n        --------\n        core.window.Rolling.quantile: Rolling quantile.\n        numpy.percentile: Numpy function to compute the percentile.\n\n        Examples\n        --------\n        >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n        ...                   columns=['a', 'b'])\n        >>> df.quantile(.1)\n        a    1.3\n        b    3.7\n        Name: 0.1, dtype: float64\n        >>> df.quantile([.1, .5])\n               a     b\n        0.1  1.3   3.7\n        0.5  2.5  55.0\n\n        Specifying `numeric_only=False` will also compute the quantile of\n        datetime and timedelta data.\n\n        >>> df = pd.DataFrame({'A': [1, 2],\n        ...                    'B': [pd.Timestamp('2010'),\n        ...                          pd.Timestamp('2011')],\n        ...                    'C': [pd.Timedelta('1 days'),\n        ...                          pd.Timedelta('2 days')]})\n        >>> df.quantile(0.5, numeric_only=False)\n        A                    1.5\n        B    2010-07-02 12:00:00\n        C        1 days 12:00:00\n        Name: 0.5, dtype: object\n        \"\"\"\n        self._check_percentile(q)\n        data = self._get_numeric_data() if numeric_only else self\n        axis = self._get_axis_number(axis)\n        is_transposed = axis == 1\n        if is_transposed:\n            data = data.T\n        result = data._data.quantile(qs=q, axis=1, interpolation=\n            interpolation, transposed=is_transposed)\n        if result.ndim == 2:\n            result = self._constructor(result)\n        else:\n            result = self._constructor_sliced(result, name=q)\n        if is_transposed:\n            result = result.T\n        return result\n\n    def to_timestamp(self, freq=None, how='start', axis=0, copy=True):\n        \"\"\"\n        Cast to DatetimeIndex of timestamps, at *beginning* of period.\n\n        Parameters\n        ----------\n        freq : string, default frequency of PeriodIndex\n            Desired frequency\n        how : {'s', 'e', 'start', 'end'}\n            Convention for converting period to timestamp; start of period\n            vs. end\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default)\n        copy : boolean, default True\n            If false then underlying input data is not copied\n\n        Returns\n        -------\n        df : DataFrame with DatetimeIndex\n        \"\"\"\n        new_data = self._data\n        if copy:\n            new_data = new_data.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            new_data.set_axis(1, self.index.to_timestamp(freq=freq, how=how))\n        elif axis == 1:\n            new_data.set_axis(0, self.columns.to_timestamp(freq=freq, how=how))\n        else:\n            raise AssertionError('Axis must be 0 or 1. Got {ax!s}'.format(\n                ax=axis))\n        return self._constructor(new_data)\n\n    def to_period(self, freq=None, axis=0, copy=True):\n        \"\"\"\n        Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n        frequency (inferred from index if not passed).\n\n        Parameters\n        ----------\n        freq : string, default\n        axis : {0 or 'index', 1 or 'columns'}, default 0\n            The axis to convert (the index by default)\n        copy : boolean, default True\n            If False then underlying input data is not copied\n\n        Returns\n        -------\n        ts : TimeSeries with PeriodIndex\n        \"\"\"\n        new_data = self._data\n        if copy:\n            new_data = new_data.copy()\n        axis = self._get_axis_number(axis)\n        if axis == 0:\n            new_data.set_axis(1, self.index.to_period(freq=freq))\n        elif axis == 1:\n            new_data.set_axis(0, self.columns.to_period(freq=freq))\n        else:\n            raise AssertionError('Axis must be 0 or 1. Got {ax!s}'.format(\n                ax=axis))\n        return self._constructor(new_data)\n\n    def isin(self, values):\n        \"\"\"\n        Whether each element in the DataFrame is contained in values.\n\n        Parameters\n        ----------\n        values : iterable, Series, DataFrame or dict\n            The result will only be true at a location if all the\n            labels match. If `values` is a Series, that's the index. If\n            `values` is a dict, the keys must be the column names,\n            which must match. If `values` is a DataFrame,\n            then both the index and column labels must match.\n\n        Returns\n        -------\n        DataFrame\n            DataFrame of booleans showing whether each element in the DataFrame\n            is contained in values.\n\n        See Also\n        --------\n        DataFrame.eq: Equality test for DataFrame.\n        Series.isin: Equivalent method on Series.\n        Series.str.contains: Test if pattern or regex is contained within a\n            string of a Series or Index.\n\n        Examples\n        --------\n\n        >>> df = pd.DataFrame({'num_legs': [2, 4], 'num_wings': [2, 0]},\n        ...                   index=['falcon', 'dog'])\n        >>> df\n                num_legs  num_wings\n        falcon         2          2\n        dog            4          0\n\n        When ``values`` is a list check whether every value in the DataFrame\n        is present in the list (which animals have 0 or 2 legs or wings)\n\n        >>> df.isin([0, 2])\n                num_legs  num_wings\n        falcon      True       True\n        dog        False       True\n\n        When ``values`` is a dict, we can pass values to check for each\n        column separately:\n\n        >>> df.isin({'num_wings': [0, 3]})\n                num_legs  num_wings\n        falcon     False      False\n        dog        False       True\n\n        When ``values`` is a Series or DataFrame the index and column must\n        match. Note that 'falcon' does not match based on the number of legs\n        in df2.\n\n        >>> other = pd.DataFrame({'num_legs': [8, 2],'num_wings': [0, 2]},\n        ...                      index=['spider', 'falcon'])\n        >>> df.isin(other)\n                num_legs  num_wings\n        falcon      True       True\n        dog        False      False\n        \"\"\"\n        if isinstance(values, dict):\n            from pandas.core.reshape.concat import concat\n            values = collections.defaultdict(list, values)\n            return concat((self.iloc[:, [i]].isin(values[col]) for i, col in\n                enumerate(self.columns)), axis=1)\n        elif isinstance(values, Series):\n            if not values.index.is_unique:\n                raise ValueError('cannot compute isin with a duplicate axis.')\n            return self.eq(values.reindex_like(self), axis='index')\n        elif isinstance(values, DataFrame):\n            if not (values.columns.is_unique and values.index.is_unique):\n                raise ValueError('cannot compute isin with a duplicate axis.')\n            return self.eq(values.reindex_like(self))\n        else:\n            if not is_list_like(values):\n                raise TypeError(\n                    'only list-like or dict-like objects are allowed to be passed to DataFrame.isin(), you passed a {0!r}'\n                    .format(type(values).__name__))\n            return DataFrame(algorithms.isin(self.values.ravel(), values).\n                reshape(self.shape), self.index, self.columns)\n    plot = CachedAccessor('plot', gfx.FramePlotMethods)\n    hist = gfx.hist_frame\n    boxplot = gfx.boxplot_frame\n",
                        "belong_class_name": "DataFrame",
                        "belong_class_init": "def __init__(self, data=None, index=None, columns=None, dtype=None, copy=False\n    ):\n    if data is None:\n        data = {}\n    if dtype is not None:\n        dtype = self._validate_dtype(dtype)\n    if isinstance(data, DataFrame):\n        data = data._data\n    if isinstance(data, BlockManager):\n        mgr = self._init_mgr(data, axes=dict(index=index, columns=columns),\n            dtype=dtype, copy=copy)\n    elif isinstance(data, dict):\n        mgr = init_dict(data, index, columns, dtype=dtype)\n    elif isinstance(data, ma.MaskedArray):\n        import numpy.ma.mrecords as mrecords\n        if isinstance(data, mrecords.MaskedRecords):\n            mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n        else:\n            mask = ma.getmaskarray(data)\n            if mask.any():\n                data, fill_value = maybe_upcast(data, copy=True)\n                data[mask] = fill_value\n            else:\n                data = data.copy()\n            mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n    elif isinstance(data, (np.ndarray, Series, Index)):\n        if data.dtype.names:\n            data_columns = list(data.dtype.names)\n            data = {k: data[k] for k in data_columns}\n            if columns is None:\n                columns = data_columns\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif getattr(data, 'name', None) is not None:\n            mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n        else:\n            mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n    elif isinstance(data, compat.Iterable) and not isinstance(data,\n        string_and_binary_types):\n        if not isinstance(data, compat.Sequence):\n            data = list(data)\n        if len(data) > 0:\n            if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                if is_named_tuple(data[0]) and columns is None:\n                    columns = data[0]._fields\n                arrays, columns = to_arrays(data, columns, dtype=dtype)\n                columns = ensure_index(columns)\n                if index is None:\n                    if isinstance(data[0], Series):\n                        index = get_names_from_index(data)\n                    elif isinstance(data[0], Categorical):\n                        index = ibase.default_index(len(data[0]))\n                    else:\n                        index = ibase.default_index(len(data))\n                mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=\n                    dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy\n                    )\n        else:\n            mgr = init_dict({}, index, columns, dtype=dtype)\n    else:\n        try:\n            arr = np.array(data, dtype=dtype, copy=copy)\n        except (ValueError, TypeError) as e:\n            exc = TypeError(\n                'DataFrame constructor called with incompatible data and dtype: {e}'\n                .format(e=e))\n            raise_with_traceback(exc)\n        if arr.ndim == 0 and index is not None and columns is not None:\n            values = cast_scalar_to_array((len(index), len(columns)), data,\n                dtype=dtype)\n            mgr = init_ndarray(values, index, columns, dtype=values.dtype,\n                copy=False)\n        else:\n            raise ValueError('DataFrame constructor not properly called!')\n    NDFrame.__init__(self, mgr, fastpath=True)\n",
                        "called_function_name": "to_html",
                        "called_function_content": "@Substitution(header='Whether to print column labels, default True')\n@Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\ndef to_html(self, buf=None, columns=None, col_space=None, header=True,\n    index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=\n    None, index_names=True, justify=None, max_rows=None, max_cols=None,\n    show_dimensions=False, decimal='.', bold_rows=True, classes=None,\n    escape=True, notebook=False, border=None, table_id=None, render_links=False\n    ):\n    \"\"\"\n        Render a DataFrame as an HTML table.\n        %(shared_params)s\n        bold_rows : bool, default True\n            Make the row labels bold in the output.\n        classes : str or list or tuple, default None\n            CSS class(es) to apply to the resulting html table.\n        escape : bool, default True\n            Convert the characters <, >, and & to HTML-safe sequences.\n        notebook : {True, False}, default False\n            Whether the generated HTML is for IPython Notebook.\n        border : int\n            A ``border=border`` attribute is included in the opening\n            `<table>` tag. Default ``pd.options.html.border``.\n\n            .. versionadded:: 0.19.0\n\n        table_id : str, optional\n            A css id is included in the opening `<table>` tag if specified.\n\n            .. versionadded:: 0.23.0\n\n        render_links : bool, default False\n            Convert URLs to HTML links.\n\n            .. versionadded:: 0.24.0\n\n        %(returns)s\n        See Also\n        --------\n        to_string : Convert DataFrame to a string.\n        \"\"\"\n    if justify is not None and justify not in fmt._VALID_JUSTIFY_PARAMETERS:\n        raise ValueError('Invalid value for justify parameter')\n    formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,\n        col_space=col_space, na_rep=na_rep, formatters=formatters,\n        float_format=float_format, sparsify=sparsify, justify=justify,\n        index_names=index_names, header=header, index=index, bold_rows=\n        bold_rows, escape=escape, max_rows=max_rows, max_cols=max_cols,\n        show_dimensions=show_dimensions, decimal=decimal, table_id=table_id,\n        render_links=render_links)\n    formatter.to_html(classes=classes, notebook=notebook, border=border)\n",
                        "called_arguments": "(classes=classes, notebook=notebook, border=border)",
                        "called_function_parameter": "(self, classes=None, notebook=False, border=None)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "to_html",
                        "function_content": "def to_html(self, classes=None, notebook=False, border=None):\n    \"\"\"\n        Render a DataFrame to a html table.\n\n        Parameters\n        ----------\n        classes : str or list-like\n            classes to include in the `class` attribute of the opening\n            ``<table>`` tag, in addition to the default \"dataframe\".\n        notebook : {True, False}, optional, default False\n            Whether the generated HTML is for IPython Notebook.\n        border : int\n            A ``border=border`` attribute is included in the opening\n            ``<table>`` tag. Default ``pd.options.html.border``.\n\n            .. versionadded:: 0.19.0\n         \"\"\"\n    from pandas.io.formats.html import HTMLFormatter\n    html_renderer = HTMLFormatter(self, classes=classes, notebook=notebook,\n        border=border, table_id=self.table_id, render_links=self.render_links)\n    if hasattr(self.buf, 'write'):\n        html_renderer.write_result(self.buf)\n    elif isinstance(self.buf, compat.string_types):\n        with open(self.buf, 'w') as f:\n            html_renderer.write_result(f)\n    else:\n        raise TypeError('buf is not a file name and it has no write  method')\n",
                        "function_parameter": "(self, classes=None, notebook=False, border=None)",
                        "belong_class_content": "class DataFrameFormatter(TableFormatter):\n    \"\"\"\n    Render a DataFrame\n\n    self.to_string() : console-friendly tabular output\n    self.to_html()   : html table\n    self.to_latex()   : LaTeX tabular environment table\n\n    \"\"\"\n    __doc__ = __doc__ if __doc__ else ''\n    __doc__ += common_docstring + return_docstring\n\n    def __init__(self, frame, buf=None, columns=None, col_space=None,\n        header=True, index=True, na_rep='NaN', formatters=None, justify=\n        None, float_format=None, sparsify=None, index_names=True,\n        line_width=None, max_rows=None, max_cols=None, show_dimensions=\n        False, decimal='.', table_id=None, render_links=False, **kwds):\n        self.frame = frame\n        if buf is not None:\n            self.buf = _expand_user(_stringify_path(buf))\n        else:\n            self.buf = StringIO()\n        self.show_index_names = index_names\n        if sparsify is None:\n            sparsify = get_option('display.multi_sparse')\n        self.sparsify = sparsify\n        self.float_format = float_format\n        self.formatters = formatters if formatters is not None else {}\n        self.na_rep = na_rep\n        self.decimal = decimal\n        self.col_space = col_space\n        self.header = header\n        self.index = index\n        self.line_width = line_width\n        self.max_rows = max_rows\n        self.max_cols = max_cols\n        self.max_rows_displayed = min(max_rows or len(self.frame), len(self\n            .frame))\n        self.show_dimensions = show_dimensions\n        self.table_id = table_id\n        self.render_links = render_links\n        if justify is None:\n            self.justify = get_option('display.colheader_justify')\n        else:\n            self.justify = justify\n        self.kwds = kwds\n        if columns is not None:\n            self.columns = ensure_index(columns)\n            self.frame = self.frame[self.columns]\n        else:\n            self.columns = frame.columns\n        self._chk_truncate()\n        self.adj = _get_adjustment()\n\n    def _chk_truncate(self):\n        \"\"\"\n        Checks whether the frame should be truncated. If so, slices\n        the frame up.\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n        self.tr_size_col = -1\n        max_cols = self.max_cols\n        max_rows = self.max_rows\n        if max_cols == 0 or max_rows == 0:\n            w, h = get_terminal_size()\n            self.w = w\n            self.h = h\n            if self.max_rows == 0:\n                dot_row = 1\n                prompt_row = 1\n                if self.show_dimensions:\n                    show_dimension_rows = 3\n                n_add_rows = (self.header + dot_row + show_dimension_rows +\n                    prompt_row)\n                max_rows_adj = self.h - n_add_rows\n                self.max_rows_adj = max_rows_adj\n            if max_cols == 0 and len(self.frame.columns) > w:\n                max_cols = w\n            if max_rows == 0 and len(self.frame) > h:\n                max_rows = h\n        if not hasattr(self, 'max_rows_adj'):\n            self.max_rows_adj = max_rows\n        if not hasattr(self, 'max_cols_adj'):\n            self.max_cols_adj = max_cols\n        max_cols_adj = self.max_cols_adj\n        max_rows_adj = self.max_rows_adj\n        truncate_h = max_cols_adj and len(self.columns) > max_cols_adj\n        truncate_v = max_rows_adj and len(self.frame) > max_rows_adj\n        frame = self.frame\n        if truncate_h:\n            if max_cols_adj == 0:\n                col_num = len(frame.columns)\n            elif max_cols_adj == 1:\n                frame = frame.iloc[:, :max_cols]\n                col_num = max_cols\n            else:\n                col_num = max_cols_adj // 2\n                frame = concat((frame.iloc[:, :col_num], frame.iloc[:, -\n                    col_num:]), axis=1)\n            self.tr_col_num = col_num\n        if truncate_v:\n            if max_rows_adj == 1:\n                row_num = max_rows\n                frame = frame.iloc[:max_rows, :]\n            else:\n                row_num = max_rows_adj // 2\n                frame = concat((frame.iloc[:row_num, :], frame.iloc[-\n                    row_num:, :]))\n            self.tr_row_num = row_num\n        self.tr_frame = frame\n        self.truncate_h = truncate_h\n        self.truncate_v = truncate_v\n        self.is_truncated = self.truncate_h or self.truncate_v\n\n    def _to_str_columns(self):\n        \"\"\"\n        Render a DataFrame to a list of columns (as lists of strings).\n        \"\"\"\n        frame = self.tr_frame\n        str_index = self._get_formatted_index(frame)\n        if not is_list_like(self.header) and not self.header:\n            stringified = []\n            for i, c in enumerate(frame):\n                fmt_values = self._format_col(i)\n                fmt_values = _make_fixed_width(fmt_values, self.justify,\n                    minimum=self.col_space or 0, adj=self.adj)\n                stringified.append(fmt_values)\n        else:\n            if is_list_like(self.header):\n                if len(self.header) != len(self.columns):\n                    raise ValueError(\n                        'Writing {ncols} cols but got {nalias} aliases'.\n                        format(ncols=len(self.columns), nalias=len(self.\n                        header)))\n                str_columns = [[label] for label in self.header]\n            else:\n                str_columns = self._get_formatted_column_labels(frame)\n            stringified = []\n            for i, c in enumerate(frame):\n                cheader = str_columns[i]\n                header_colwidth = max(self.col_space or 0, *(self.adj.len(x\n                    ) for x in cheader))\n                fmt_values = self._format_col(i)\n                fmt_values = _make_fixed_width(fmt_values, self.justify,\n                    minimum=header_colwidth, adj=self.adj)\n                max_len = max(max(self.adj.len(x) for x in fmt_values),\n                    header_colwidth)\n                cheader = self.adj.justify(cheader, max_len, mode=self.justify)\n                stringified.append(cheader + fmt_values)\n        strcols = stringified\n        if self.index:\n            strcols.insert(0, str_index)\n        truncate_h = self.truncate_h\n        truncate_v = self.truncate_v\n        if truncate_h:\n            col_num = self.tr_col_num\n            col_width = self.adj.len(strcols[self.tr_size_col][0])\n            strcols.insert(self.tr_col_num + 1, ['...'.center(col_width)] *\n                len(str_index))\n        if truncate_v:\n            n_header_rows = len(str_index) - len(frame)\n            row_num = self.tr_row_num\n            for ix, col in enumerate(strcols):\n                cwidth = self.adj.len(strcols[ix][row_num])\n                is_dot_col = False\n                if truncate_h:\n                    is_dot_col = ix == col_num + 1\n                if cwidth > 3 or is_dot_col:\n                    my_str = '...'\n                else:\n                    my_str = '..'\n                if ix == 0:\n                    dot_mode = 'left'\n                elif is_dot_col:\n                    cwidth = self.adj.len(strcols[self.tr_size_col][0])\n                    dot_mode = 'center'\n                else:\n                    dot_mode = 'right'\n                dot_str = self.adj.justify([my_str], cwidth, mode=dot_mode)[0]\n                strcols[ix].insert(row_num + n_header_rows, dot_str)\n        return strcols\n\n    def to_string(self):\n        \"\"\"\n        Render a DataFrame to a console-friendly tabular output.\n        \"\"\"\n        from pandas import Series\n        frame = self.frame\n        if len(frame.columns) == 0 or len(frame.index) == 0:\n            info_line = u('Empty {name}\\nColumns: {col}\\nIndex: {idx}').format(\n                name=type(self.frame).__name__, col=pprint_thing(frame.\n                columns), idx=pprint_thing(frame.index))\n            text = info_line\n        else:\n            strcols = self._to_str_columns()\n            if self.line_width is None:\n                text = self.adj.adjoin(1, *strcols)\n            elif not isinstance(self.max_cols, int) or self.max_cols > 0:\n                text = self._join_multiline(*strcols)\n            else:\n                text = self.adj.adjoin(1, *strcols).split('\\n')\n                max_len = Series(text).str.len().max()\n                dif = max_len - self.w\n                adj_dif = dif + 1\n                col_lens = Series([Series(ele).apply(len).max() for ele in\n                    strcols])\n                n_cols = len(col_lens)\n                counter = 0\n                while adj_dif > 0 and n_cols > 1:\n                    counter += 1\n                    mid = int(round(n_cols / 2.0))\n                    mid_ix = col_lens.index[mid]\n                    col_len = col_lens[mid_ix]\n                    adj_dif -= col_len + 1\n                    col_lens = col_lens.drop(mid_ix)\n                    n_cols = len(col_lens)\n                max_cols_adj = n_cols - self.index\n                max_cols_adj = max(max_cols_adj, 2)\n                self.max_cols_adj = max_cols_adj\n                self._chk_truncate()\n                strcols = self._to_str_columns()\n                text = self.adj.adjoin(1, *strcols)\n        self.buf.writelines(text)\n        if self.should_show_dimensions:\n            self.buf.write('\\n\\n[{nrows} rows x {ncols} columns]'.format(\n                nrows=len(frame), ncols=len(frame.columns)))\n\n    def _join_multiline(self, *strcols):\n        lwidth = self.line_width\n        adjoin_width = 1\n        strcols = list(strcols)\n        if self.index:\n            idx = strcols.pop(0)\n            lwidth -= np.array([self.adj.len(x) for x in idx]).max(\n                ) + adjoin_width\n        col_widths = [(np.array([self.adj.len(x) for x in col]).max() if \n            len(col) > 0 else 0) for col in strcols]\n        col_bins = _binify(col_widths, lwidth)\n        nbins = len(col_bins)\n        if self.truncate_v:\n            nrows = self.max_rows_adj + 1\n        else:\n            nrows = len(self.frame)\n        str_lst = []\n        st = 0\n        for i, ed in enumerate(col_bins):\n            row = strcols[st:ed]\n            if self.index:\n                row.insert(0, idx)\n            if nbins > 1:\n                if ed <= len(strcols) and i < nbins - 1:\n                    row.append([' \\\\'] + ['  '] * (nrows - 1))\n                else:\n                    row.append([' '] * nrows)\n            str_lst.append(self.adj.adjoin(adjoin_width, *row))\n            st = ed\n        return '\\n\\n'.join(str_lst)\n\n    def to_latex(self, column_format=None, longtable=False, encoding=None,\n        multicolumn=False, multicolumn_format=None, multirow=False):\n        \"\"\"\n        Render a DataFrame to a LaTeX tabular/longtable environment output.\n        \"\"\"\n        from pandas.io.formats.latex import LatexFormatter\n        latex_renderer = LatexFormatter(self, column_format=column_format,\n            longtable=longtable, multicolumn=multicolumn,\n            multicolumn_format=multicolumn_format, multirow=multirow)\n        if encoding is None:\n            encoding = 'ascii' if compat.PY2 else 'utf-8'\n        if hasattr(self.buf, 'write'):\n            latex_renderer.write_result(self.buf)\n        elif isinstance(self.buf, compat.string_types):\n            import codecs\n            with codecs.open(self.buf, 'w', encoding=encoding) as f:\n                latex_renderer.write_result(f)\n        else:\n            raise TypeError('buf is not a file name and it has no write method'\n                )\n\n    def _format_col(self, i):\n        frame = self.tr_frame\n        formatter = self._get_formatter(i)\n        values_to_format = frame.iloc[:, i]._formatting_values()\n        return format_array(values_to_format, formatter, float_format=self.\n            float_format, na_rep=self.na_rep, space=self.col_space, decimal\n            =self.decimal)\n\n    def to_html(self, classes=None, notebook=False, border=None):\n        \"\"\"\n        Render a DataFrame to a html table.\n\n        Parameters\n        ----------\n        classes : str or list-like\n            classes to include in the `class` attribute of the opening\n            ``<table>`` tag, in addition to the default \"dataframe\".\n        notebook : {True, False}, optional, default False\n            Whether the generated HTML is for IPython Notebook.\n        border : int\n            A ``border=border`` attribute is included in the opening\n            ``<table>`` tag. Default ``pd.options.html.border``.\n\n            .. versionadded:: 0.19.0\n         \"\"\"\n        from pandas.io.formats.html import HTMLFormatter\n        html_renderer = HTMLFormatter(self, classes=classes, notebook=\n            notebook, border=border, table_id=self.table_id, render_links=\n            self.render_links)\n        if hasattr(self.buf, 'write'):\n            html_renderer.write_result(self.buf)\n        elif isinstance(self.buf, compat.string_types):\n            with open(self.buf, 'w') as f:\n                html_renderer.write_result(f)\n        else:\n            raise TypeError(\n                'buf is not a file name and it has no write  method')\n\n    def _get_formatted_column_labels(self, frame):\n        from pandas.core.index import _sparsify\n        columns = frame.columns\n        if isinstance(columns, ABCMultiIndex):\n            fmt_columns = columns.format(sparsify=False, adjoin=False)\n            fmt_columns = lzip(*fmt_columns)\n            dtypes = self.frame.dtypes._values\n            restrict_formatting = any(l.is_floating for l in columns.levels)\n            need_leadsp = dict(zip(fmt_columns, map(is_numeric_dtype, dtypes)))\n\n            def space_format(x, y):\n                if y not in self.formatters and need_leadsp[x\n                    ] and not restrict_formatting:\n                    return ' ' + y\n                return y\n            str_columns = list(zip(*[[space_format(x, y) for y in x] for x in\n                fmt_columns]))\n            if self.sparsify and len(str_columns):\n                str_columns = _sparsify(str_columns)\n            str_columns = [list(x) for x in zip(*str_columns)]\n        else:\n            fmt_columns = columns.format()\n            dtypes = self.frame.dtypes\n            need_leadsp = dict(zip(fmt_columns, map(is_numeric_dtype, dtypes)))\n            str_columns = [[' ' + x if not self._get_formatter(i) and\n                need_leadsp[x] else x] for i, (col, x) in enumerate(zip(\n                columns, fmt_columns))]\n        if self.show_index_names and self.has_index_names:\n            for x in str_columns:\n                x.append('')\n        return str_columns\n\n    @property\n    def has_index_names(self):\n        return _has_names(self.frame.index)\n\n    @property\n    def has_column_names(self):\n        return _has_names(self.frame.columns)\n\n    def _get_formatted_index(self, frame):\n        index = frame.index\n        columns = frame.columns\n        show_index_names = self.show_index_names and self.has_index_names\n        show_col_names = self.show_index_names and self.has_column_names\n        fmt = self._get_formatter('__index__')\n        if isinstance(index, ABCMultiIndex):\n            fmt_index = index.format(sparsify=self.sparsify, adjoin=False,\n                names=show_index_names, formatter=fmt)\n        else:\n            fmt_index = [index.format(name=show_index_names, formatter=fmt)]\n        fmt_index = [tuple(_make_fixed_width(list(x), justify='left',\n            minimum=self.col_space or 0, adj=self.adj)) for x in fmt_index]\n        adjoined = self.adj.adjoin(1, *fmt_index).split('\\n')\n        if show_col_names:\n            col_header = ['{x}'.format(x=x) for x in self.\n                _get_column_name_list()]\n        else:\n            col_header = [''] * columns.nlevels\n        if self.header:\n            return col_header + adjoined\n        else:\n            return adjoined\n\n    def _get_column_name_list(self):\n        names = []\n        columns = self.frame.columns\n        if isinstance(columns, ABCMultiIndex):\n            names.extend('' if name is None else name for name in columns.names\n                )\n        else:\n            names.append('' if columns.name is None else columns.name)\n        return names\n",
                        "belong_class_name": "DataFrameFormatter",
                        "belong_class_init": "def __init__(self, frame, buf=None, columns=None, col_space=None, header=\n    True, index=True, na_rep='NaN', formatters=None, justify=None,\n    float_format=None, sparsify=None, index_names=True, line_width=None,\n    max_rows=None, max_cols=None, show_dimensions=False, decimal='.',\n    table_id=None, render_links=False, **kwds):\n    self.frame = frame\n    if buf is not None:\n        self.buf = _expand_user(_stringify_path(buf))\n    else:\n        self.buf = StringIO()\n    self.show_index_names = index_names\n    if sparsify is None:\n        sparsify = get_option('display.multi_sparse')\n    self.sparsify = sparsify\n    self.float_format = float_format\n    self.formatters = formatters if formatters is not None else {}\n    self.na_rep = na_rep\n    self.decimal = decimal\n    self.col_space = col_space\n    self.header = header\n    self.index = index\n    self.line_width = line_width\n    self.max_rows = max_rows\n    self.max_cols = max_cols\n    self.max_rows_displayed = min(max_rows or len(self.frame), len(self.frame))\n    self.show_dimensions = show_dimensions\n    self.table_id = table_id\n    self.render_links = render_links\n    if justify is None:\n        self.justify = get_option('display.colheader_justify')\n    else:\n        self.justify = justify\n    self.kwds = kwds\n    if columns is not None:\n        self.columns = ensure_index(columns)\n        self.frame = self.frame[self.columns]\n    else:\n        self.columns = frame.columns\n    self._chk_truncate()\n    self.adj = _get_adjustment()\n",
                        "called_function_name": "write_result",
                        "called_function_content": "def to_html(self, classes=None, notebook=False, border=None):\n    \"\"\"\n        Render a DataFrame to a html table.\n\n        Parameters\n        ----------\n        classes : str or list-like\n            classes to include in the `class` attribute of the opening\n            ``<table>`` tag, in addition to the default \"dataframe\".\n        notebook : {True, False}, optional, default False\n            Whether the generated HTML is for IPython Notebook.\n        border : int\n            A ``border=border`` attribute is included in the opening\n            ``<table>`` tag. Default ``pd.options.html.border``.\n\n            .. versionadded:: 0.19.0\n         \"\"\"\n    from pandas.io.formats.html import HTMLFormatter\n    html_renderer = HTMLFormatter(self, classes=classes, notebook=notebook,\n        border=border, table_id=self.table_id, render_links=self.render_links)\n    if hasattr(self.buf, 'write'):\n        html_renderer.write_result(self.buf)\n",
                        "called_arguments": "(self.buf)",
                        "called_function_parameter": "(self, buf)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "write_result",
                        "function_content": "def write_result(self, buf):\n    indent = 0\n    id_section = ''\n    frame = self.frame\n    _classes = ['dataframe']\n    use_mathjax = get_option('display.html.use_mathjax')\n    if not use_mathjax:\n        _classes.append('tex2jax_ignore')\n    if self.classes is not None:\n        if isinstance(self.classes, str):\n            self.classes = self.classes.split()\n        if not isinstance(self.classes, (list, tuple)):\n            raise AssertionError('classes must be list or tuple, not {typ}'\n                .format(typ=type(self.classes)))\n        _classes.extend(self.classes)\n    if self.notebook:\n        self.write('<div>')\n    self.write_style()\n    if self.table_id is not None:\n        id_section = ' id=\"{table_id}\"'.format(table_id=self.table_id)\n    self.write('<table border=\"{border}\" class=\"{cls}\"{id_section}>'.format\n        (border=self.border, cls=' '.join(_classes), id_section=id_section),\n        indent)\n    indent += self.indent_delta\n    indent = self._write_header(indent)\n    indent = self._write_body(indent)\n    self.write('</table>', indent)\n    if self.should_show_dimensions:\n        by = chr(215) if compat.PY3 else unichr(215)\n        self.write(u('<p>{rows} rows {by} {cols} columns</p>').format(rows=\n            len(frame), by=by, cols=len(frame.columns)))\n    if self.notebook:\n        self.write('</div>')\n    buffer_put_lines(buf, self.elements)\n",
                        "function_parameter": "(self, buf)",
                        "belong_class_content": "class HTMLFormatter(TableFormatter):\n    indent_delta = 2\n\n    def __init__(self, formatter, classes=None, notebook=False, border=None,\n        table_id=None, render_links=False):\n        self.fmt = formatter\n        self.classes = classes\n        self.frame = self.fmt.frame\n        self.columns = self.fmt.tr_frame.columns\n        self.elements = []\n        self.bold_rows = self.fmt.kwds.get('bold_rows', False)\n        self.escape = self.fmt.kwds.get('escape', True)\n        self.show_dimensions = self.fmt.show_dimensions\n        self.notebook = notebook\n        if border is None:\n            border = get_option('display.html.border')\n        self.border = border\n        self.table_id = table_id\n        self.render_links = render_links\n\n    @property\n    def show_row_idx_names(self):\n        return all((self.fmt.has_index_names, self.fmt.index, self.fmt.\n            show_index_names))\n\n    @property\n    def show_col_idx_names(self):\n        return all((self.fmt.has_column_names, self.fmt.show_index_names,\n            self.fmt.header))\n\n    @property\n    def row_levels(self):\n        if self.fmt.index:\n            return self.frame.index.nlevels\n        elif self.show_col_idx_names:\n            return 1\n        return 0\n\n    @property\n    def is_truncated(self):\n        return self.fmt.is_truncated\n\n    @property\n    def ncols(self):\n        return len(self.fmt.tr_frame.columns)\n\n    def write(self, s, indent=0):\n        rs = pprint_thing(s)\n        self.elements.append(' ' * indent + rs)\n\n    def write_th(self, s, indent=0, tags=None):\n        if self.fmt.col_space is not None and self.fmt.col_space > 0:\n            tags = tags or ''\n            tags += 'style=\"min-width: {colspace};\"'.format(colspace=self.\n                fmt.col_space)\n        return self._write_cell(s, kind='th', indent=indent, tags=tags)\n\n    def write_td(self, s, indent=0, tags=None):\n        return self._write_cell(s, kind='td', indent=indent, tags=tags)\n\n    def _write_cell(self, s, kind='td', indent=0, tags=None):\n        if tags is not None:\n            start_tag = '<{kind} {tags}>'.format(kind=kind, tags=tags)\n        else:\n            start_tag = '<{kind}>'.format(kind=kind)\n        if self.escape:\n            esc = OrderedDict([('&', '&amp;'), ('<', '&lt;'), ('>', '&gt;')])\n        else:\n            esc = {}\n        rs = pprint_thing(s, escape_chars=esc).strip()\n        if self.render_links and _is_url(rs):\n            rs_unescaped = pprint_thing(s, escape_chars={}).strip()\n            start_tag += '<a href=\"{url}\" target=\"_blank\">'.format(url=\n                rs_unescaped)\n            end_a = '</a>'\n        else:\n            end_a = ''\n        self.write(u'{start}{rs}{end_a}</{kind}>'.format(start=start_tag,\n            rs=rs, end_a=end_a, kind=kind), indent)\n\n    def write_tr(self, line, indent=0, indent_delta=0, header=False, align=\n        None, tags=None, nindex_levels=0):\n        if tags is None:\n            tags = {}\n        if align is None:\n            self.write('<tr>', indent)\n        else:\n            self.write('<tr style=\"text-align: {align};\">'.format(align=\n                align), indent)\n        indent += indent_delta\n        for i, s in enumerate(line):\n            val_tag = tags.get(i, None)\n            if header or self.bold_rows and i < nindex_levels:\n                self.write_th(s, indent, tags=val_tag)\n            else:\n                self.write_td(s, indent, tags=val_tag)\n        indent -= indent_delta\n        self.write('</tr>', indent)\n\n    def write_style(self):\n        template_first = '            <style scoped>'\n        template_last = '            </style>'\n        template_select = \"\"\"                .dataframe %s {\n                    %s: %s;\n                }\"\"\"\n        element_props = [('tbody tr th:only-of-type', 'vertical-align',\n            'middle'), ('tbody tr th', 'vertical-align', 'top')]\n        if isinstance(self.columns, ABCMultiIndex):\n            element_props.append(('thead tr th', 'text-align', 'left'))\n            if self.show_row_idx_names:\n                element_props.append(('thead tr:last-of-type th',\n                    'text-align', 'right'))\n        else:\n            element_props.append(('thead th', 'text-align', 'right'))\n        template_mid = '\\n\\n'.join(map(lambda t: template_select % t,\n            element_props))\n        template = dedent('\\n'.join((template_first, template_mid,\n            template_last)))\n        if self.notebook:\n            self.write(template)\n\n    def write_result(self, buf):\n        indent = 0\n        id_section = ''\n        frame = self.frame\n        _classes = ['dataframe']\n        use_mathjax = get_option('display.html.use_mathjax')\n        if not use_mathjax:\n            _classes.append('tex2jax_ignore')\n        if self.classes is not None:\n            if isinstance(self.classes, str):\n                self.classes = self.classes.split()\n            if not isinstance(self.classes, (list, tuple)):\n                raise AssertionError('classes must be list or tuple, not {typ}'\n                    .format(typ=type(self.classes)))\n            _classes.extend(self.classes)\n        if self.notebook:\n            self.write('<div>')\n        self.write_style()\n        if self.table_id is not None:\n            id_section = ' id=\"{table_id}\"'.format(table_id=self.table_id)\n        self.write('<table border=\"{border}\" class=\"{cls}\"{id_section}>'.\n            format(border=self.border, cls=' '.join(_classes), id_section=\n            id_section), indent)\n        indent += self.indent_delta\n        indent = self._write_header(indent)\n        indent = self._write_body(indent)\n        self.write('</table>', indent)\n        if self.should_show_dimensions:\n            by = chr(215) if compat.PY3 else unichr(215)\n            self.write(u('<p>{rows} rows {by} {cols} columns</p>').format(\n                rows=len(frame), by=by, cols=len(frame.columns)))\n        if self.notebook:\n            self.write('</div>')\n        buffer_put_lines(buf, self.elements)\n\n    def _write_col_header(self, indent):\n        truncate_h = self.fmt.truncate_h\n        if isinstance(self.columns, ABCMultiIndex):\n            template = 'colspan=\"{span:d}\" halign=\"left\"'\n            if self.fmt.sparsify:\n                sentinel = com.sentinel_factory()\n            else:\n                sentinel = None\n            levels = self.columns.format(sparsify=sentinel, adjoin=False,\n                names=False)\n            level_lengths = get_level_lengths(levels, sentinel)\n            inner_lvl = len(level_lengths) - 1\n            for lnum, (records, values) in enumerate(zip(level_lengths, levels)\n                ):\n                if truncate_h:\n                    ins_col = self.fmt.tr_col_num\n                    if self.fmt.sparsify:\n                        recs_new = {}\n                        for tag, span in list(records.items()):\n                            if tag >= ins_col:\n                                recs_new[tag + 1] = span\n                            elif tag + span > ins_col:\n                                recs_new[tag] = span + 1\n                                if lnum == inner_lvl:\n                                    values = values[:ins_col] + (u('...'),\n                                        ) + values[ins_col:]\n                                else:\n                                    values = values[:ins_col] + (values[\n                                        ins_col - 1],) + values[ins_col:]\n                            else:\n                                recs_new[tag] = span\n                            if tag + span == ins_col:\n                                recs_new[ins_col] = 1\n                                values = values[:ins_col] + (u('...'),\n                                    ) + values[ins_col:]\n                        records = recs_new\n                        inner_lvl = len(level_lengths) - 1\n                        if lnum == inner_lvl:\n                            records[ins_col] = 1\n                    else:\n                        recs_new = {}\n                        for tag, span in list(records.items()):\n                            if tag >= ins_col:\n                                recs_new[tag + 1] = span\n                            else:\n                                recs_new[tag] = span\n                        recs_new[ins_col] = 1\n                        records = recs_new\n                        values = values[:ins_col] + [u('...')] + values[ins_col\n                            :]\n                row = [''] * (self.row_levels - 1)\n                if self.fmt.index or self.show_col_idx_names:\n                    if self.fmt.show_index_names:\n                        name = self.columns.names[lnum]\n                        row.append(pprint_thing(name or ''))\n                    else:\n                        row.append('')\n                tags = {}\n                j = len(row)\n                for i, v in enumerate(values):\n                    if i in records:\n                        if records[i] > 1:\n                            tags[j] = template.format(span=records[i])\n                    else:\n                        continue\n                    j += 1\n                    row.append(v)\n                self.write_tr(row, indent, self.indent_delta, tags=tags,\n                    header=True)\n        else:\n            row = [''] * (self.row_levels - 1)\n            if self.fmt.index or self.show_col_idx_names:\n                if self.fmt.show_index_names:\n                    row.append(self.columns.name or '')\n                else:\n                    row.append('')\n            row.extend(self.columns)\n            align = self.fmt.justify\n            if truncate_h:\n                ins_col = self.row_levels + self.fmt.tr_col_num\n                row.insert(ins_col, '...')\n            self.write_tr(row, indent, self.indent_delta, header=True,\n                align=align)\n\n    def _write_row_header(self, indent):\n        truncate_h = self.fmt.truncate_h\n        row = [(x if x is not None else '') for x in self.frame.index.names\n            ] + [''] * (self.ncols + (1 if truncate_h else 0))\n        self.write_tr(row, indent, self.indent_delta, header=True)\n\n    def _write_header(self, indent):\n        if not (self.fmt.header or self.show_row_idx_names):\n            return indent\n        self.write('<thead>', indent)\n        indent += self.indent_delta\n        if self.fmt.header:\n            self._write_col_header(indent)\n        if self.show_row_idx_names:\n            self._write_row_header(indent)\n        indent -= self.indent_delta\n        self.write('</thead>', indent)\n        return indent\n\n    def _write_body(self, indent):\n        self.write('<tbody>', indent)\n        indent += self.indent_delta\n        fmt_values = {i: self.fmt._format_col(i) for i in range(self.ncols)}\n        if self.fmt.index and isinstance(self.frame.index, ABCMultiIndex):\n            self._write_hierarchical_rows(fmt_values, indent)\n        else:\n            self._write_regular_rows(fmt_values, indent)\n        indent -= self.indent_delta\n        self.write('</tbody>', indent)\n        indent -= self.indent_delta\n        return indent\n\n    def _write_regular_rows(self, fmt_values, indent):\n        truncate_h = self.fmt.truncate_h\n        truncate_v = self.fmt.truncate_v\n        nrows = len(self.fmt.tr_frame)\n        if self.fmt.index:\n            fmt = self.fmt._get_formatter('__index__')\n            if fmt is not None:\n                index_values = self.fmt.tr_frame.index.map(fmt)\n            else:\n                index_values = self.fmt.tr_frame.index.format()\n        row = []\n        for i in range(nrows):\n            if truncate_v and i == self.fmt.tr_row_num:\n                str_sep_row = ['...'] * len(row)\n                self.write_tr(str_sep_row, indent, self.indent_delta, tags=\n                    None, nindex_levels=self.row_levels)\n            row = []\n            if self.fmt.index:\n                row.append(index_values[i])\n            elif self.show_col_idx_names:\n                row.append('')\n            row.extend(fmt_values[j][i] for j in range(self.ncols))\n            if truncate_h:\n                dot_col_ix = self.fmt.tr_col_num + self.row_levels\n                row.insert(dot_col_ix, '...')\n            self.write_tr(row, indent, self.indent_delta, tags=None,\n                nindex_levels=self.row_levels)\n\n    def _write_hierarchical_rows(self, fmt_values, indent):\n        template = 'rowspan=\"{span}\" valign=\"top\"'\n        truncate_h = self.fmt.truncate_h\n        truncate_v = self.fmt.truncate_v\n        frame = self.fmt.tr_frame\n        nrows = len(frame)\n        idx_values = frame.index.format(sparsify=False, adjoin=False, names\n            =False)\n        idx_values = lzip(*idx_values)\n        if self.fmt.sparsify:\n            sentinel = com.sentinel_factory()\n            levels = frame.index.format(sparsify=sentinel, adjoin=False,\n                names=False)\n            level_lengths = get_level_lengths(levels, sentinel)\n            inner_lvl = len(level_lengths) - 1\n            if truncate_v:\n                ins_row = self.fmt.tr_row_num\n                inserted = False\n                for lnum, records in enumerate(level_lengths):\n                    rec_new = {}\n                    for tag, span in list(records.items()):\n                        if tag >= ins_row:\n                            rec_new[tag + 1] = span\n                        elif tag + span > ins_row:\n                            rec_new[tag] = span + 1\n                            if not inserted:\n                                dot_row = list(idx_values[ins_row - 1])\n                                dot_row[-1] = u('...')\n                                idx_values.insert(ins_row, tuple(dot_row))\n                                inserted = True\n                            else:\n                                dot_row = list(idx_values[ins_row])\n                                dot_row[inner_lvl - lnum] = u('...')\n                                idx_values[ins_row] = tuple(dot_row)\n                        else:\n                            rec_new[tag] = span\n                        if tag + span == ins_row:\n                            rec_new[ins_row] = 1\n                            if lnum == 0:\n                                idx_values.insert(ins_row, tuple([u('...')] *\n                                    len(level_lengths)))\n                            elif inserted:\n                                dot_row = list(idx_values[ins_row])\n                                dot_row[inner_lvl - lnum] = u('...')\n                                idx_values[ins_row] = tuple(dot_row)\n                    level_lengths[lnum] = rec_new\n                level_lengths[inner_lvl][ins_row] = 1\n                for ix_col in range(len(fmt_values)):\n                    fmt_values[ix_col].insert(ins_row, '...')\n                nrows += 1\n            for i in range(nrows):\n                row = []\n                tags = {}\n                sparse_offset = 0\n                j = 0\n                for records, v in zip(level_lengths, idx_values[i]):\n                    if i in records:\n                        if records[i] > 1:\n                            tags[j] = template.format(span=records[i])\n                    else:\n                        sparse_offset += 1\n                        continue\n                    j += 1\n                    row.append(v)\n                row.extend(fmt_values[j][i] for j in range(self.ncols))\n                if truncate_h:\n                    row.insert(self.row_levels - sparse_offset + self.fmt.\n                        tr_col_num, '...')\n                self.write_tr(row, indent, self.indent_delta, tags=tags,\n                    nindex_levels=len(levels) - sparse_offset)\n        else:\n            row = []\n            for i in range(len(frame)):\n                if truncate_v and i == self.fmt.tr_row_num:\n                    str_sep_row = ['...'] * len(row)\n                    self.write_tr(str_sep_row, indent, self.indent_delta,\n                        tags=None, nindex_levels=self.row_levels)\n                idx_values = list(zip(*frame.index.format(sparsify=False,\n                    adjoin=False, names=False)))\n                row = []\n                row.extend(idx_values[i])\n                row.extend(fmt_values[j][i] for j in range(self.ncols))\n                if truncate_h:\n                    row.insert(self.row_levels + self.fmt.tr_col_num, '...')\n                self.write_tr(row, indent, self.indent_delta, tags=None,\n                    nindex_levels=frame.index.nlevels)\n",
                        "belong_class_name": "HTMLFormatter",
                        "belong_class_init": "def __init__(self, formatter, classes=None, notebook=False, border=None,\n    table_id=None, render_links=False):\n    self.fmt = formatter\n    self.classes = classes\n    self.frame = self.fmt.frame\n    self.columns = self.fmt.tr_frame.columns\n    self.elements = []\n    self.bold_rows = self.fmt.kwds.get('bold_rows', False)\n    self.escape = self.fmt.kwds.get('escape', True)\n    self.show_dimensions = self.fmt.show_dimensions\n    self.notebook = notebook\n    if border is None:\n        border = get_option('display.html.border')\n    self.border = border\n    self.table_id = table_id\n    self.render_links = render_links\n",
                        "called_function_name": "_write_header",
                        "called_function_content": "def write_result(self, buf):\n    indent = 0\n    id_section = ''\n    frame = self.frame\n    _classes = ['dataframe']\n    use_mathjax = get_option('display.html.use_mathjax')\n    if not use_mathjax:\n        _classes.append('tex2jax_ignore')\n    if self.classes is not None:\n        if isinstance(self.classes, str):\n            self.classes = self.classes.split()\n        if not isinstance(self.classes, (list, tuple)):\n            raise AssertionError('classes must be list or tuple, not {typ}'\n                .format(typ=type(self.classes)))\n        _classes.extend(self.classes)\n    if self.notebook:\n        self.write('<div>')\n    self.write_style()\n    if self.table_id is not None:\n        id_section = ' id=\"{table_id}\"'.format(table_id=self.table_id)\n    self.write('<table border=\"{border}\" class=\"{cls}\"{id_section}>'.format\n        (border=self.border, cls=' '.join(_classes), id_section=id_section),\n        indent)\n    indent += self.indent_delta\n    indent = self._write_header(indent)\n",
                        "called_arguments": "(indent)",
                        "called_function_parameter": "(self, indent)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_write_header",
                        "function_content": "def _write_header(self, indent):\n    if not (self.fmt.header or self.show_row_idx_names):\n        return indent\n    self.write('<thead>', indent)\n    indent += self.indent_delta\n    if self.fmt.header:\n        self._write_col_header(indent)\n    if self.show_row_idx_names:\n        self._write_row_header(indent)\n    indent -= self.indent_delta\n    self.write('</thead>', indent)\n    return indent\n",
                        "function_parameter": "(self, indent)",
                        "belong_class_content": "class HTMLFormatter(TableFormatter):\n    indent_delta = 2\n\n    def __init__(self, formatter, classes=None, notebook=False, border=None,\n        table_id=None, render_links=False):\n        self.fmt = formatter\n        self.classes = classes\n        self.frame = self.fmt.frame\n        self.columns = self.fmt.tr_frame.columns\n        self.elements = []\n        self.bold_rows = self.fmt.kwds.get('bold_rows', False)\n        self.escape = self.fmt.kwds.get('escape', True)\n        self.show_dimensions = self.fmt.show_dimensions\n        self.notebook = notebook\n        if border is None:\n            border = get_option('display.html.border')\n        self.border = border\n        self.table_id = table_id\n        self.render_links = render_links\n\n    @property\n    def show_row_idx_names(self):\n        return all((self.fmt.has_index_names, self.fmt.index, self.fmt.\n            show_index_names))\n\n    @property\n    def show_col_idx_names(self):\n        return all((self.fmt.has_column_names, self.fmt.show_index_names,\n            self.fmt.header))\n\n    @property\n    def row_levels(self):\n        if self.fmt.index:\n            return self.frame.index.nlevels\n        elif self.show_col_idx_names:\n            return 1\n        return 0\n\n    @property\n    def is_truncated(self):\n        return self.fmt.is_truncated\n\n    @property\n    def ncols(self):\n        return len(self.fmt.tr_frame.columns)\n\n    def write(self, s, indent=0):\n        rs = pprint_thing(s)\n        self.elements.append(' ' * indent + rs)\n\n    def write_th(self, s, indent=0, tags=None):\n        if self.fmt.col_space is not None and self.fmt.col_space > 0:\n            tags = tags or ''\n            tags += 'style=\"min-width: {colspace};\"'.format(colspace=self.\n                fmt.col_space)\n        return self._write_cell(s, kind='th', indent=indent, tags=tags)\n\n    def write_td(self, s, indent=0, tags=None):\n        return self._write_cell(s, kind='td', indent=indent, tags=tags)\n\n    def _write_cell(self, s, kind='td', indent=0, tags=None):\n        if tags is not None:\n            start_tag = '<{kind} {tags}>'.format(kind=kind, tags=tags)\n        else:\n            start_tag = '<{kind}>'.format(kind=kind)\n        if self.escape:\n            esc = OrderedDict([('&', '&amp;'), ('<', '&lt;'), ('>', '&gt;')])\n        else:\n            esc = {}\n        rs = pprint_thing(s, escape_chars=esc).strip()\n        if self.render_links and _is_url(rs):\n            rs_unescaped = pprint_thing(s, escape_chars={}).strip()\n            start_tag += '<a href=\"{url}\" target=\"_blank\">'.format(url=\n                rs_unescaped)\n            end_a = '</a>'\n        else:\n            end_a = ''\n        self.write(u'{start}{rs}{end_a}</{kind}>'.format(start=start_tag,\n            rs=rs, end_a=end_a, kind=kind), indent)\n\n    def write_tr(self, line, indent=0, indent_delta=0, header=False, align=\n        None, tags=None, nindex_levels=0):\n        if tags is None:\n            tags = {}\n        if align is None:\n            self.write('<tr>', indent)\n        else:\n            self.write('<tr style=\"text-align: {align};\">'.format(align=\n                align), indent)\n        indent += indent_delta\n        for i, s in enumerate(line):\n            val_tag = tags.get(i, None)\n            if header or self.bold_rows and i < nindex_levels:\n                self.write_th(s, indent, tags=val_tag)\n            else:\n                self.write_td(s, indent, tags=val_tag)\n        indent -= indent_delta\n        self.write('</tr>', indent)\n\n    def write_style(self):\n        template_first = '            <style scoped>'\n        template_last = '            </style>'\n        template_select = \"\"\"                .dataframe %s {\n                    %s: %s;\n                }\"\"\"\n        element_props = [('tbody tr th:only-of-type', 'vertical-align',\n            'middle'), ('tbody tr th', 'vertical-align', 'top')]\n        if isinstance(self.columns, ABCMultiIndex):\n            element_props.append(('thead tr th', 'text-align', 'left'))\n            if self.show_row_idx_names:\n                element_props.append(('thead tr:last-of-type th',\n                    'text-align', 'right'))\n        else:\n            element_props.append(('thead th', 'text-align', 'right'))\n        template_mid = '\\n\\n'.join(map(lambda t: template_select % t,\n            element_props))\n        template = dedent('\\n'.join((template_first, template_mid,\n            template_last)))\n        if self.notebook:\n            self.write(template)\n\n    def write_result(self, buf):\n        indent = 0\n        id_section = ''\n        frame = self.frame\n        _classes = ['dataframe']\n        use_mathjax = get_option('display.html.use_mathjax')\n        if not use_mathjax:\n            _classes.append('tex2jax_ignore')\n        if self.classes is not None:\n            if isinstance(self.classes, str):\n                self.classes = self.classes.split()\n            if not isinstance(self.classes, (list, tuple)):\n                raise AssertionError('classes must be list or tuple, not {typ}'\n                    .format(typ=type(self.classes)))\n            _classes.extend(self.classes)\n        if self.notebook:\n            self.write('<div>')\n        self.write_style()\n        if self.table_id is not None:\n            id_section = ' id=\"{table_id}\"'.format(table_id=self.table_id)\n        self.write('<table border=\"{border}\" class=\"{cls}\"{id_section}>'.\n            format(border=self.border, cls=' '.join(_classes), id_section=\n            id_section), indent)\n        indent += self.indent_delta\n        indent = self._write_header(indent)\n        indent = self._write_body(indent)\n        self.write('</table>', indent)\n        if self.should_show_dimensions:\n            by = chr(215) if compat.PY3 else unichr(215)\n            self.write(u('<p>{rows} rows {by} {cols} columns</p>').format(\n                rows=len(frame), by=by, cols=len(frame.columns)))\n        if self.notebook:\n            self.write('</div>')\n        buffer_put_lines(buf, self.elements)\n\n    def _write_col_header(self, indent):\n        truncate_h = self.fmt.truncate_h\n        if isinstance(self.columns, ABCMultiIndex):\n            template = 'colspan=\"{span:d}\" halign=\"left\"'\n            if self.fmt.sparsify:\n                sentinel = com.sentinel_factory()\n            else:\n                sentinel = None\n            levels = self.columns.format(sparsify=sentinel, adjoin=False,\n                names=False)\n            level_lengths = get_level_lengths(levels, sentinel)\n            inner_lvl = len(level_lengths) - 1\n            for lnum, (records, values) in enumerate(zip(level_lengths, levels)\n                ):\n                if truncate_h:\n                    ins_col = self.fmt.tr_col_num\n                    if self.fmt.sparsify:\n                        recs_new = {}\n                        for tag, span in list(records.items()):\n                            if tag >= ins_col:\n                                recs_new[tag + 1] = span\n                            elif tag + span > ins_col:\n                                recs_new[tag] = span + 1\n                                if lnum == inner_lvl:\n                                    values = values[:ins_col] + (u('...'),\n                                        ) + values[ins_col:]\n                                else:\n                                    values = values[:ins_col] + (values[\n                                        ins_col - 1],) + values[ins_col:]\n                            else:\n                                recs_new[tag] = span\n                            if tag + span == ins_col:\n                                recs_new[ins_col] = 1\n                                values = values[:ins_col] + (u('...'),\n                                    ) + values[ins_col:]\n                        records = recs_new\n                        inner_lvl = len(level_lengths) - 1\n                        if lnum == inner_lvl:\n                            records[ins_col] = 1\n                    else:\n                        recs_new = {}\n                        for tag, span in list(records.items()):\n                            if tag >= ins_col:\n                                recs_new[tag + 1] = span\n                            else:\n                                recs_new[tag] = span\n                        recs_new[ins_col] = 1\n                        records = recs_new\n                        values = values[:ins_col] + [u('...')] + values[ins_col\n                            :]\n                row = [''] * (self.row_levels - 1)\n                if self.fmt.index or self.show_col_idx_names:\n                    if self.fmt.show_index_names:\n                        name = self.columns.names[lnum]\n                        row.append(pprint_thing(name or ''))\n                    else:\n                        row.append('')\n                tags = {}\n                j = len(row)\n                for i, v in enumerate(values):\n                    if i in records:\n                        if records[i] > 1:\n                            tags[j] = template.format(span=records[i])\n                    else:\n                        continue\n                    j += 1\n                    row.append(v)\n                self.write_tr(row, indent, self.indent_delta, tags=tags,\n                    header=True)\n        else:\n            row = [''] * (self.row_levels - 1)\n            if self.fmt.index or self.show_col_idx_names:\n                if self.fmt.show_index_names:\n                    row.append(self.columns.name or '')\n                else:\n                    row.append('')\n            row.extend(self.columns)\n            align = self.fmt.justify\n            if truncate_h:\n                ins_col = self.row_levels + self.fmt.tr_col_num\n                row.insert(ins_col, '...')\n            self.write_tr(row, indent, self.indent_delta, header=True,\n                align=align)\n\n    def _write_row_header(self, indent):\n        truncate_h = self.fmt.truncate_h\n        row = [(x if x is not None else '') for x in self.frame.index.names\n            ] + [''] * (self.ncols + (1 if truncate_h else 0))\n        self.write_tr(row, indent, self.indent_delta, header=True)\n\n    def _write_header(self, indent):\n        if not (self.fmt.header or self.show_row_idx_names):\n            return indent\n        self.write('<thead>', indent)\n        indent += self.indent_delta\n        if self.fmt.header:\n            self._write_col_header(indent)\n        if self.show_row_idx_names:\n            self._write_row_header(indent)\n        indent -= self.indent_delta\n        self.write('</thead>', indent)\n        return indent\n\n    def _write_body(self, indent):\n        self.write('<tbody>', indent)\n        indent += self.indent_delta\n        fmt_values = {i: self.fmt._format_col(i) for i in range(self.ncols)}\n        if self.fmt.index and isinstance(self.frame.index, ABCMultiIndex):\n            self._write_hierarchical_rows(fmt_values, indent)\n        else:\n            self._write_regular_rows(fmt_values, indent)\n        indent -= self.indent_delta\n        self.write('</tbody>', indent)\n        indent -= self.indent_delta\n        return indent\n\n    def _write_regular_rows(self, fmt_values, indent):\n        truncate_h = self.fmt.truncate_h\n        truncate_v = self.fmt.truncate_v\n        nrows = len(self.fmt.tr_frame)\n        if self.fmt.index:\n            fmt = self.fmt._get_formatter('__index__')\n            if fmt is not None:\n                index_values = self.fmt.tr_frame.index.map(fmt)\n            else:\n                index_values = self.fmt.tr_frame.index.format()\n        row = []\n        for i in range(nrows):\n            if truncate_v and i == self.fmt.tr_row_num:\n                str_sep_row = ['...'] * len(row)\n                self.write_tr(str_sep_row, indent, self.indent_delta, tags=\n                    None, nindex_levels=self.row_levels)\n            row = []\n            if self.fmt.index:\n                row.append(index_values[i])\n            elif self.show_col_idx_names:\n                row.append('')\n            row.extend(fmt_values[j][i] for j in range(self.ncols))\n            if truncate_h:\n                dot_col_ix = self.fmt.tr_col_num + self.row_levels\n                row.insert(dot_col_ix, '...')\n            self.write_tr(row, indent, self.indent_delta, tags=None,\n                nindex_levels=self.row_levels)\n\n    def _write_hierarchical_rows(self, fmt_values, indent):\n        template = 'rowspan=\"{span}\" valign=\"top\"'\n        truncate_h = self.fmt.truncate_h\n        truncate_v = self.fmt.truncate_v\n        frame = self.fmt.tr_frame\n        nrows = len(frame)\n        idx_values = frame.index.format(sparsify=False, adjoin=False, names\n            =False)\n        idx_values = lzip(*idx_values)\n        if self.fmt.sparsify:\n            sentinel = com.sentinel_factory()\n            levels = frame.index.format(sparsify=sentinel, adjoin=False,\n                names=False)\n            level_lengths = get_level_lengths(levels, sentinel)\n            inner_lvl = len(level_lengths) - 1\n            if truncate_v:\n                ins_row = self.fmt.tr_row_num\n                inserted = False\n                for lnum, records in enumerate(level_lengths):\n                    rec_new = {}\n                    for tag, span in list(records.items()):\n                        if tag >= ins_row:\n                            rec_new[tag + 1] = span\n                        elif tag + span > ins_row:\n                            rec_new[tag] = span + 1\n                            if not inserted:\n                                dot_row = list(idx_values[ins_row - 1])\n                                dot_row[-1] = u('...')\n                                idx_values.insert(ins_row, tuple(dot_row))\n                                inserted = True\n                            else:\n                                dot_row = list(idx_values[ins_row])\n                                dot_row[inner_lvl - lnum] = u('...')\n                                idx_values[ins_row] = tuple(dot_row)\n                        else:\n                            rec_new[tag] = span\n                        if tag + span == ins_row:\n                            rec_new[ins_row] = 1\n                            if lnum == 0:\n                                idx_values.insert(ins_row, tuple([u('...')] *\n                                    len(level_lengths)))\n                            elif inserted:\n                                dot_row = list(idx_values[ins_row])\n                                dot_row[inner_lvl - lnum] = u('...')\n                                idx_values[ins_row] = tuple(dot_row)\n                    level_lengths[lnum] = rec_new\n                level_lengths[inner_lvl][ins_row] = 1\n                for ix_col in range(len(fmt_values)):\n                    fmt_values[ix_col].insert(ins_row, '...')\n                nrows += 1\n            for i in range(nrows):\n                row = []\n                tags = {}\n                sparse_offset = 0\n                j = 0\n                for records, v in zip(level_lengths, idx_values[i]):\n                    if i in records:\n                        if records[i] > 1:\n                            tags[j] = template.format(span=records[i])\n                    else:\n                        sparse_offset += 1\n                        continue\n                    j += 1\n                    row.append(v)\n                row.extend(fmt_values[j][i] for j in range(self.ncols))\n                if truncate_h:\n                    row.insert(self.row_levels - sparse_offset + self.fmt.\n                        tr_col_num, '...')\n                self.write_tr(row, indent, self.indent_delta, tags=tags,\n                    nindex_levels=len(levels) - sparse_offset)\n        else:\n            row = []\n            for i in range(len(frame)):\n                if truncate_v and i == self.fmt.tr_row_num:\n                    str_sep_row = ['...'] * len(row)\n                    self.write_tr(str_sep_row, indent, self.indent_delta,\n                        tags=None, nindex_levels=self.row_levels)\n                idx_values = list(zip(*frame.index.format(sparsify=False,\n                    adjoin=False, names=False)))\n                row = []\n                row.extend(idx_values[i])\n                row.extend(fmt_values[j][i] for j in range(self.ncols))\n                if truncate_h:\n                    row.insert(self.row_levels + self.fmt.tr_col_num, '...')\n                self.write_tr(row, indent, self.indent_delta, tags=None,\n                    nindex_levels=frame.index.nlevels)\n",
                        "belong_class_name": "HTMLFormatter",
                        "belong_class_init": "def __init__(self, formatter, classes=None, notebook=False, border=None,\n    table_id=None, render_links=False):\n    self.fmt = formatter\n    self.classes = classes\n    self.frame = self.fmt.frame\n    self.columns = self.fmt.tr_frame.columns\n    self.elements = []\n    self.bold_rows = self.fmt.kwds.get('bold_rows', False)\n    self.escape = self.fmt.kwds.get('escape', True)\n    self.show_dimensions = self.fmt.show_dimensions\n    self.notebook = notebook\n    if border is None:\n        border = get_option('display.html.border')\n    self.border = border\n    self.table_id = table_id\n    self.render_links = render_links\n",
                        "called_function_name": "_write_col_header",
                        "called_function_content": "def _write_header(self, indent):\n    if not (self.fmt.header or self.show_row_idx_names):\n        return indent\n    self.write('<thead>', indent)\n    indent += self.indent_delta\n    if self.fmt.header:\n        self._write_col_header(indent)\n",
                        "called_arguments": "(indent)",
                        "called_function_parameter": "(self, indent)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_write_col_header",
                        "function_content": "def _write_col_header(self, indent):\n    truncate_h = self.fmt.truncate_h\n    if isinstance(self.columns, ABCMultiIndex):\n        template = 'colspan=\"{span:d}\" halign=\"left\"'\n        if self.fmt.sparsify:\n            sentinel = com.sentinel_factory()\n        else:\n            sentinel = None\n        levels = self.columns.format(sparsify=sentinel, adjoin=False, names\n            =False)\n        level_lengths = get_level_lengths(levels, sentinel)\n        inner_lvl = len(level_lengths) - 1\n        for lnum, (records, values) in enumerate(zip(level_lengths, levels)):\n            if truncate_h:\n                ins_col = self.fmt.tr_col_num\n                if self.fmt.sparsify:\n                    recs_new = {}\n                    for tag, span in list(records.items()):\n                        if tag >= ins_col:\n                            recs_new[tag + 1] = span\n                        elif tag + span > ins_col:\n                            recs_new[tag] = span + 1\n                            if lnum == inner_lvl:\n                                values = values[:ins_col] + (u('...'),\n                                    ) + values[ins_col:]\n                            else:\n                                values = values[:ins_col] + (values[ins_col -\n                                    1],) + values[ins_col:]\n                        else:\n                            recs_new[tag] = span\n                        if tag + span == ins_col:\n                            recs_new[ins_col] = 1\n                            values = values[:ins_col] + (u('...'),) + values[\n                                ins_col:]\n                    records = recs_new\n                    inner_lvl = len(level_lengths) - 1\n                    if lnum == inner_lvl:\n                        records[ins_col] = 1\n                else:\n                    recs_new = {}\n                    for tag, span in list(records.items()):\n                        if tag >= ins_col:\n                            recs_new[tag + 1] = span\n                        else:\n                            recs_new[tag] = span\n                    recs_new[ins_col] = 1\n                    records = recs_new\n                    values = values[:ins_col] + [u('...')] + values[ins_col:]\n            row = [''] * (self.row_levels - 1)\n            if self.fmt.index or self.show_col_idx_names:\n                if self.fmt.show_index_names:\n                    name = self.columns.names[lnum]\n                    row.append(pprint_thing(name or ''))\n                else:\n                    row.append('')\n            tags = {}\n            j = len(row)\n            for i, v in enumerate(values):\n                if i in records:\n                    if records[i] > 1:\n                        tags[j] = template.format(span=records[i])\n                else:\n                    continue\n                j += 1\n                row.append(v)\n            self.write_tr(row, indent, self.indent_delta, tags=tags, header\n                =True)\n    else:\n        row = [''] * (self.row_levels - 1)\n        if self.fmt.index or self.show_col_idx_names:\n            if self.fmt.show_index_names:\n                row.append(self.columns.name or '')\n            else:\n                row.append('')\n        row.extend(self.columns)\n        align = self.fmt.justify\n        if truncate_h:\n            ins_col = self.row_levels + self.fmt.tr_col_num\n            row.insert(ins_col, '...')\n        self.write_tr(row, indent, self.indent_delta, header=True, align=align)\n",
                        "function_parameter": "(self, indent)",
                        "belong_class_content": "class HTMLFormatter(TableFormatter):\n    indent_delta = 2\n\n    def __init__(self, formatter, classes=None, notebook=False, border=None,\n        table_id=None, render_links=False):\n        self.fmt = formatter\n        self.classes = classes\n        self.frame = self.fmt.frame\n        self.columns = self.fmt.tr_frame.columns\n        self.elements = []\n        self.bold_rows = self.fmt.kwds.get('bold_rows', False)\n        self.escape = self.fmt.kwds.get('escape', True)\n        self.show_dimensions = self.fmt.show_dimensions\n        self.notebook = notebook\n        if border is None:\n            border = get_option('display.html.border')\n        self.border = border\n        self.table_id = table_id\n        self.render_links = render_links\n\n    @property\n    def show_row_idx_names(self):\n        return all((self.fmt.has_index_names, self.fmt.index, self.fmt.\n            show_index_names))\n\n    @property\n    def show_col_idx_names(self):\n        return all((self.fmt.has_column_names, self.fmt.show_index_names,\n            self.fmt.header))\n\n    @property\n    def row_levels(self):\n        if self.fmt.index:\n            return self.frame.index.nlevels\n        elif self.show_col_idx_names:\n            return 1\n        return 0\n\n    @property\n    def is_truncated(self):\n        return self.fmt.is_truncated\n\n    @property\n    def ncols(self):\n        return len(self.fmt.tr_frame.columns)\n\n    def write(self, s, indent=0):\n        rs = pprint_thing(s)\n        self.elements.append(' ' * indent + rs)\n\n    def write_th(self, s, indent=0, tags=None):\n        if self.fmt.col_space is not None and self.fmt.col_space > 0:\n            tags = tags or ''\n            tags += 'style=\"min-width: {colspace};\"'.format(colspace=self.\n                fmt.col_space)\n        return self._write_cell(s, kind='th', indent=indent, tags=tags)\n\n    def write_td(self, s, indent=0, tags=None):\n        return self._write_cell(s, kind='td', indent=indent, tags=tags)\n\n    def _write_cell(self, s, kind='td', indent=0, tags=None):\n        if tags is not None:\n            start_tag = '<{kind} {tags}>'.format(kind=kind, tags=tags)\n        else:\n            start_tag = '<{kind}>'.format(kind=kind)\n        if self.escape:\n            esc = OrderedDict([('&', '&amp;'), ('<', '&lt;'), ('>', '&gt;')])\n        else:\n            esc = {}\n        rs = pprint_thing(s, escape_chars=esc).strip()\n        if self.render_links and _is_url(rs):\n            rs_unescaped = pprint_thing(s, escape_chars={}).strip()\n            start_tag += '<a href=\"{url}\" target=\"_blank\">'.format(url=\n                rs_unescaped)\n            end_a = '</a>'\n        else:\n            end_a = ''\n        self.write(u'{start}{rs}{end_a}</{kind}>'.format(start=start_tag,\n            rs=rs, end_a=end_a, kind=kind), indent)\n\n    def write_tr(self, line, indent=0, indent_delta=0, header=False, align=\n        None, tags=None, nindex_levels=0):\n        if tags is None:\n            tags = {}\n        if align is None:\n            self.write('<tr>', indent)\n        else:\n            self.write('<tr style=\"text-align: {align};\">'.format(align=\n                align), indent)\n        indent += indent_delta\n        for i, s in enumerate(line):\n            val_tag = tags.get(i, None)\n            if header or self.bold_rows and i < nindex_levels:\n                self.write_th(s, indent, tags=val_tag)\n            else:\n                self.write_td(s, indent, tags=val_tag)\n        indent -= indent_delta\n        self.write('</tr>', indent)\n\n    def write_style(self):\n        template_first = '            <style scoped>'\n        template_last = '            </style>'\n        template_select = \"\"\"                .dataframe %s {\n                    %s: %s;\n                }\"\"\"\n        element_props = [('tbody tr th:only-of-type', 'vertical-align',\n            'middle'), ('tbody tr th', 'vertical-align', 'top')]\n        if isinstance(self.columns, ABCMultiIndex):\n            element_props.append(('thead tr th', 'text-align', 'left'))\n            if self.show_row_idx_names:\n                element_props.append(('thead tr:last-of-type th',\n                    'text-align', 'right'))\n        else:\n            element_props.append(('thead th', 'text-align', 'right'))\n        template_mid = '\\n\\n'.join(map(lambda t: template_select % t,\n            element_props))\n        template = dedent('\\n'.join((template_first, template_mid,\n            template_last)))\n        if self.notebook:\n            self.write(template)\n\n    def write_result(self, buf):\n        indent = 0\n        id_section = ''\n        frame = self.frame\n        _classes = ['dataframe']\n        use_mathjax = get_option('display.html.use_mathjax')\n        if not use_mathjax:\n            _classes.append('tex2jax_ignore')\n        if self.classes is not None:\n            if isinstance(self.classes, str):\n                self.classes = self.classes.split()\n            if not isinstance(self.classes, (list, tuple)):\n                raise AssertionError('classes must be list or tuple, not {typ}'\n                    .format(typ=type(self.classes)))\n            _classes.extend(self.classes)\n        if self.notebook:\n            self.write('<div>')\n        self.write_style()\n        if self.table_id is not None:\n            id_section = ' id=\"{table_id}\"'.format(table_id=self.table_id)\n        self.write('<table border=\"{border}\" class=\"{cls}\"{id_section}>'.\n            format(border=self.border, cls=' '.join(_classes), id_section=\n            id_section), indent)\n        indent += self.indent_delta\n        indent = self._write_header(indent)\n        indent = self._write_body(indent)\n        self.write('</table>', indent)\n        if self.should_show_dimensions:\n            by = chr(215) if compat.PY3 else unichr(215)\n            self.write(u('<p>{rows} rows {by} {cols} columns</p>').format(\n                rows=len(frame), by=by, cols=len(frame.columns)))\n        if self.notebook:\n            self.write('</div>')\n        buffer_put_lines(buf, self.elements)\n\n    def _write_col_header(self, indent):\n        truncate_h = self.fmt.truncate_h\n        if isinstance(self.columns, ABCMultiIndex):\n            template = 'colspan=\"{span:d}\" halign=\"left\"'\n            if self.fmt.sparsify:\n                sentinel = com.sentinel_factory()\n            else:\n                sentinel = None\n            levels = self.columns.format(sparsify=sentinel, adjoin=False,\n                names=False)\n            level_lengths = get_level_lengths(levels, sentinel)\n            inner_lvl = len(level_lengths) - 1\n            for lnum, (records, values) in enumerate(zip(level_lengths, levels)\n                ):\n                if truncate_h:\n                    ins_col = self.fmt.tr_col_num\n                    if self.fmt.sparsify:\n                        recs_new = {}\n                        for tag, span in list(records.items()):\n                            if tag >= ins_col:\n                                recs_new[tag + 1] = span\n                            elif tag + span > ins_col:\n                                recs_new[tag] = span + 1\n                                if lnum == inner_lvl:\n                                    values = values[:ins_col] + (u('...'),\n                                        ) + values[ins_col:]\n                                else:\n                                    values = values[:ins_col] + (values[\n                                        ins_col - 1],) + values[ins_col:]\n                            else:\n                                recs_new[tag] = span\n                            if tag + span == ins_col:\n                                recs_new[ins_col] = 1\n                                values = values[:ins_col] + (u('...'),\n                                    ) + values[ins_col:]\n                        records = recs_new\n                        inner_lvl = len(level_lengths) - 1\n                        if lnum == inner_lvl:\n                            records[ins_col] = 1\n                    else:\n                        recs_new = {}\n                        for tag, span in list(records.items()):\n                            if tag >= ins_col:\n                                recs_new[tag + 1] = span\n                            else:\n                                recs_new[tag] = span\n                        recs_new[ins_col] = 1\n                        records = recs_new\n                        values = values[:ins_col] + [u('...')] + values[ins_col\n                            :]\n                row = [''] * (self.row_levels - 1)\n                if self.fmt.index or self.show_col_idx_names:\n                    if self.fmt.show_index_names:\n                        name = self.columns.names[lnum]\n                        row.append(pprint_thing(name or ''))\n                    else:\n                        row.append('')\n                tags = {}\n                j = len(row)\n                for i, v in enumerate(values):\n                    if i in records:\n                        if records[i] > 1:\n                            tags[j] = template.format(span=records[i])\n                    else:\n                        continue\n                    j += 1\n                    row.append(v)\n                self.write_tr(row, indent, self.indent_delta, tags=tags,\n                    header=True)\n        else:\n            row = [''] * (self.row_levels - 1)\n            if self.fmt.index or self.show_col_idx_names:\n                if self.fmt.show_index_names:\n                    row.append(self.columns.name or '')\n                else:\n                    row.append('')\n            row.extend(self.columns)\n            align = self.fmt.justify\n            if truncate_h:\n                ins_col = self.row_levels + self.fmt.tr_col_num\n                row.insert(ins_col, '...')\n            self.write_tr(row, indent, self.indent_delta, header=True,\n                align=align)\n\n    def _write_row_header(self, indent):\n        truncate_h = self.fmt.truncate_h\n        row = [(x if x is not None else '') for x in self.frame.index.names\n            ] + [''] * (self.ncols + (1 if truncate_h else 0))\n        self.write_tr(row, indent, self.indent_delta, header=True)\n\n    def _write_header(self, indent):\n        if not (self.fmt.header or self.show_row_idx_names):\n            return indent\n        self.write('<thead>', indent)\n        indent += self.indent_delta\n        if self.fmt.header:\n            self._write_col_header(indent)\n        if self.show_row_idx_names:\n            self._write_row_header(indent)\n        indent -= self.indent_delta\n        self.write('</thead>', indent)\n        return indent\n\n    def _write_body(self, indent):\n        self.write('<tbody>', indent)\n        indent += self.indent_delta\n        fmt_values = {i: self.fmt._format_col(i) for i in range(self.ncols)}\n        if self.fmt.index and isinstance(self.frame.index, ABCMultiIndex):\n            self._write_hierarchical_rows(fmt_values, indent)\n        else:\n            self._write_regular_rows(fmt_values, indent)\n        indent -= self.indent_delta\n        self.write('</tbody>', indent)\n        indent -= self.indent_delta\n        return indent\n\n    def _write_regular_rows(self, fmt_values, indent):\n        truncate_h = self.fmt.truncate_h\n        truncate_v = self.fmt.truncate_v\n        nrows = len(self.fmt.tr_frame)\n        if self.fmt.index:\n            fmt = self.fmt._get_formatter('__index__')\n            if fmt is not None:\n                index_values = self.fmt.tr_frame.index.map(fmt)\n            else:\n                index_values = self.fmt.tr_frame.index.format()\n        row = []\n        for i in range(nrows):\n            if truncate_v and i == self.fmt.tr_row_num:\n                str_sep_row = ['...'] * len(row)\n                self.write_tr(str_sep_row, indent, self.indent_delta, tags=\n                    None, nindex_levels=self.row_levels)\n            row = []\n            if self.fmt.index:\n                row.append(index_values[i])\n            elif self.show_col_idx_names:\n                row.append('')\n            row.extend(fmt_values[j][i] for j in range(self.ncols))\n            if truncate_h:\n                dot_col_ix = self.fmt.tr_col_num + self.row_levels\n                row.insert(dot_col_ix, '...')\n            self.write_tr(row, indent, self.indent_delta, tags=None,\n                nindex_levels=self.row_levels)\n\n    def _write_hierarchical_rows(self, fmt_values, indent):\n        template = 'rowspan=\"{span}\" valign=\"top\"'\n        truncate_h = self.fmt.truncate_h\n        truncate_v = self.fmt.truncate_v\n        frame = self.fmt.tr_frame\n        nrows = len(frame)\n        idx_values = frame.index.format(sparsify=False, adjoin=False, names\n            =False)\n        idx_values = lzip(*idx_values)\n        if self.fmt.sparsify:\n            sentinel = com.sentinel_factory()\n            levels = frame.index.format(sparsify=sentinel, adjoin=False,\n                names=False)\n            level_lengths = get_level_lengths(levels, sentinel)\n            inner_lvl = len(level_lengths) - 1\n            if truncate_v:\n                ins_row = self.fmt.tr_row_num\n                inserted = False\n                for lnum, records in enumerate(level_lengths):\n                    rec_new = {}\n                    for tag, span in list(records.items()):\n                        if tag >= ins_row:\n                            rec_new[tag + 1] = span\n                        elif tag + span > ins_row:\n                            rec_new[tag] = span + 1\n                            if not inserted:\n                                dot_row = list(idx_values[ins_row - 1])\n                                dot_row[-1] = u('...')\n                                idx_values.insert(ins_row, tuple(dot_row))\n                                inserted = True\n                            else:\n                                dot_row = list(idx_values[ins_row])\n                                dot_row[inner_lvl - lnum] = u('...')\n                                idx_values[ins_row] = tuple(dot_row)\n                        else:\n                            rec_new[tag] = span\n                        if tag + span == ins_row:\n                            rec_new[ins_row] = 1\n                            if lnum == 0:\n                                idx_values.insert(ins_row, tuple([u('...')] *\n                                    len(level_lengths)))\n                            elif inserted:\n                                dot_row = list(idx_values[ins_row])\n                                dot_row[inner_lvl - lnum] = u('...')\n                                idx_values[ins_row] = tuple(dot_row)\n                    level_lengths[lnum] = rec_new\n                level_lengths[inner_lvl][ins_row] = 1\n                for ix_col in range(len(fmt_values)):\n                    fmt_values[ix_col].insert(ins_row, '...')\n                nrows += 1\n            for i in range(nrows):\n                row = []\n                tags = {}\n                sparse_offset = 0\n                j = 0\n                for records, v in zip(level_lengths, idx_values[i]):\n                    if i in records:\n                        if records[i] > 1:\n                            tags[j] = template.format(span=records[i])\n                    else:\n                        sparse_offset += 1\n                        continue\n                    j += 1\n                    row.append(v)\n                row.extend(fmt_values[j][i] for j in range(self.ncols))\n                if truncate_h:\n                    row.insert(self.row_levels - sparse_offset + self.fmt.\n                        tr_col_num, '...')\n                self.write_tr(row, indent, self.indent_delta, tags=tags,\n                    nindex_levels=len(levels) - sparse_offset)\n        else:\n            row = []\n            for i in range(len(frame)):\n                if truncate_v and i == self.fmt.tr_row_num:\n                    str_sep_row = ['...'] * len(row)\n                    self.write_tr(str_sep_row, indent, self.indent_delta,\n                        tags=None, nindex_levels=self.row_levels)\n                idx_values = list(zip(*frame.index.format(sparsify=False,\n                    adjoin=False, names=False)))\n                row = []\n                row.extend(idx_values[i])\n                row.extend(fmt_values[j][i] for j in range(self.ncols))\n                if truncate_h:\n                    row.insert(self.row_levels + self.fmt.tr_col_num, '...')\n                self.write_tr(row, indent, self.indent_delta, tags=None,\n                    nindex_levels=frame.index.nlevels)\n",
                        "belong_class_name": "HTMLFormatter",
                        "belong_class_init": "def __init__(self, formatter, classes=None, notebook=False, border=None,\n    table_id=None, render_links=False):\n    self.fmt = formatter\n    self.classes = classes\n    self.frame = self.fmt.frame\n    self.columns = self.fmt.tr_frame.columns\n    self.elements = []\n    self.bold_rows = self.fmt.kwds.get('bold_rows', False)\n    self.escape = self.fmt.kwds.get('escape', True)\n    self.show_dimensions = self.fmt.show_dimensions\n    self.notebook = notebook\n    if border is None:\n        border = get_option('display.html.border')\n    self.border = border\n    self.table_id = table_id\n    self.render_links = render_links\n"
                    }
                ]
            ]
        },
        "pandas-25533_series": {
            "pytest pandas/tests/indexing/test_scalar.py::TestScalar::test_series_set_tz_timestamp": [
                [
                    {
                        "function_name": "test_series_set_tz_timestamp",
                        "function_content": "def test_series_set_tz_timestamp(self, tz_naive_fixture):\n    ts = Timestamp('2017-08-05 00:00:00+0100', tz=tz_naive_fixture)\n    result = Series(ts)\n    result.at[1] = ts\n    expected = Series([ts, ts])\n    tm.assert_series_equal(result, expected)\n",
                        "function_parameter": "(self, tz_naive_fixture)",
                        "belong_class_content": "class TestScalar(Base):\n\n    def test_at_and_iat_get(self):\n\n        def _check(f, func, values=False):\n            if f is not None:\n                indicies = self.generate_indices(f, values)\n                for i in indicies:\n                    result = getattr(f, func)[i]\n                    expected = self.get_value(f, i, values)\n                    tm.assert_almost_equal(result, expected)\n        for o in self._objs:\n            d = getattr(self, o)\n            for f in [d['ints'], d['uints']]:\n                _check(f, 'iat', values=True)\n            for f in [d['labels'], d['ts'], d['floats']]:\n                if f is not None:\n                    msg = 'iAt based indexing can only have integer indexers'\n                    with pytest.raises(ValueError, match=msg):\n                        self.check_values(f, 'iat')\n            for f in [d['ints'], d['uints'], d['labels'], d['ts'], d['floats']\n                ]:\n                _check(f, 'at')\n\n    def test_at_and_iat_set(self):\n\n        def _check(f, func, values=False):\n            if f is not None:\n                indicies = self.generate_indices(f, values)\n                for i in indicies:\n                    getattr(f, func)[i] = 1\n                    expected = self.get_value(f, i, values)\n                    tm.assert_almost_equal(expected, 1)\n        for t in self._objs:\n            d = getattr(self, t)\n            for f in [d['ints'], d['uints']]:\n                _check(f, 'iat', values=True)\n            for f in [d['labels'], d['ts'], d['floats']]:\n                if f is not None:\n                    msg = 'iAt based indexing can only have integer indexers'\n                    with pytest.raises(ValueError, match=msg):\n                        _check(f, 'iat')\n            for f in [d['ints'], d['uints'], d['labels'], d['ts'], d['floats']\n                ]:\n                _check(f, 'at')\n\n    def test_at_iat_coercion(self):\n        dates = date_range('1/1/2000', periods=8)\n        df = DataFrame(np.random.randn(8, 4), index=dates, columns=['A',\n            'B', 'C', 'D'])\n        s = df['A']\n        result = s.at[dates[5]]\n        xp = s.values[5]\n        assert result == xp\n        s = Series(['2014-01-01', '2014-02-02'], dtype='datetime64[ns]')\n        expected = Timestamp('2014-02-02')\n        for r in [lambda : s.iat[1], lambda : s.iloc[1]]:\n            result = r()\n            assert result == expected\n        s = Series(['1 days', '2 days'], dtype='timedelta64[ns]')\n        expected = Timedelta('2 days')\n        for r in [lambda : s.iat[1], lambda : s.iloc[1]]:\n            result = r()\n            assert result == expected\n\n    def test_iat_invalid_args(self):\n        pass\n\n    def test_imethods_with_dups(self):\n        s = Series(range(5), index=[1, 1, 2, 2, 3], dtype='int64')\n        result = s.iloc[2]\n        assert result == 2\n        result = s.iat[2]\n        assert result == 2\n        msg = 'index 10 is out of bounds for axis 0 with size 5'\n        with pytest.raises(IndexError, match=msg):\n            s.iat[10]\n        msg = 'index -10 is out of bounds for axis 0 with size 5'\n        with pytest.raises(IndexError, match=msg):\n            s.iat[-10]\n        result = s.iloc[[2, 3]]\n        expected = Series([2, 3], [2, 2], dtype='int64')\n        tm.assert_series_equal(result, expected)\n        df = s.to_frame()\n        result = df.iloc[2]\n        expected = Series(2, index=[0], name=2)\n        tm.assert_series_equal(result, expected)\n        result = df.iat[2, 0]\n        assert result == 2\n\n    def test_at_to_fail(self):\n        s = Series([1, 2, 3], index=list('abc'))\n        result = s.at['a']\n        assert result == 1\n        msg = (\n            'At based indexing on an non-integer index can only have non-integer indexers'\n            )\n        with pytest.raises(ValueError, match=msg):\n            s.at[0]\n        df = DataFrame({'A': [1, 2, 3]}, index=list('abc'))\n        result = df.at['a', 'A']\n        assert result == 1\n        with pytest.raises(ValueError, match=msg):\n            df.at['a', 0]\n        s = Series([1, 2, 3], index=[3, 2, 1])\n        result = s.at[1]\n        assert result == 3\n        msg = (\n            'At based indexing on an integer index can only have integer indexers'\n            )\n        with pytest.raises(ValueError, match=msg):\n            s.at['a']\n        df = DataFrame({(0): [1, 2, 3]}, index=[3, 2, 1])\n        result = df.at[1, 0]\n        assert result == 3\n        with pytest.raises(ValueError, match=msg):\n            df.at['a', 0]\n        df = DataFrame({'x': [1.0], 'y': [2.0], 'z': [3.0]})\n        df.columns = ['x', 'x', 'z']\n        with pytest.raises(KeyError, match=\"\\\\['y'\\\\] not in index\"):\n            df[['x', 'y', 'z']]\n\n    def test_at_with_tz(self):\n        df = DataFrame({'name': ['John', 'Anderson'], 'date': [Timestamp(\n            2017, 3, 13, 13, 32, 56), Timestamp(2017, 2, 16, 12, 10, 3)]})\n        df['date'] = df['date'].dt.tz_localize('Asia/Shanghai')\n        expected = Timestamp('2017-03-13 13:32:56+0800', tz='Asia/Shanghai')\n        result = df.loc[0, 'date']\n        assert result == expected\n        result = df.at[0, 'date']\n        assert result == expected\n\n    def test_series_set_tz_timestamp(self, tz_naive_fixture):\n        ts = Timestamp('2017-08-05 00:00:00+0100', tz=tz_naive_fixture)\n        result = Series(ts)\n        result.at[1] = ts\n        expected = Series([ts, ts])\n        tm.assert_series_equal(result, expected)\n\n    def test_mixed_index_at_iat_loc_iloc_series(self):\n        s = Series([1, 2, 3, 4, 5], index=['a', 'b', 'c', 1, 2])\n        for el, item in s.iteritems():\n            assert s.at[el] == s.loc[el] == item\n        for i in range(len(s)):\n            assert s.iat[i] == s.iloc[i] == i + 1\n        with pytest.raises(KeyError):\n            s.at[4]\n        with pytest.raises(KeyError):\n            s.loc[4]\n\n    def test_mixed_index_at_iat_loc_iloc_dataframe(self):\n        df = DataFrame([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]], columns=['a',\n            'b', 'c', 1, 2])\n        for rowIdx, row in df.iterrows():\n            for el, item in row.iteritems():\n                assert df.at[rowIdx, el] == df.loc[rowIdx, el] == item\n        for row in range(2):\n            for i in range(5):\n                assert df.iat[row, i] == df.iloc[row, i] == row * 5 + i\n        with pytest.raises(KeyError):\n            df.at[0, 3]\n        with pytest.raises(KeyError):\n            df.loc[0, 3]\n\n    def test_iat_setter_incompatible_assignment(self):\n        result = DataFrame({'a': [0, 1], 'b': [4, 5]})\n        result.iat[0, 0] = None\n        expected = DataFrame({'a': [None, 1], 'b': [4, 5]})\n        tm.assert_frame_equal(result, expected)\n\n    def test_getitem_zerodim_np_array(self):\n        df = DataFrame([[1, 2], [3, 4]])\n        result = df[np.array(0)]\n        expected = Series([1, 3], name=0)\n        tm.assert_series_equal(result, expected)\n        s = Series([1, 2])\n        result = s[np.array(0)]\n        assert result == 1\n",
                        "belong_class_name": "TestScalar",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "__setitem__",
                        "function_content": "def __setitem__(self, key, value):\n    if isinstance(key, tuple):\n        key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n    else:\n        key = com.apply_if_callable(key, self.obj)\n    if not isinstance(key, tuple):\n        key = self._tuplify(key)\n    if len(key) != self.obj.ndim:\n        raise ValueError('Not enough indexers for scalar access (setting)!')\n    key = list(self._convert_key(key, is_setter=True))\n    key.append(value)\n    self.obj._set_value(*key, takeable=self._takeable)\n",
                        "function_parameter": "(self, key, value)",
                        "belong_class_content": "class _ScalarAccessIndexer(_NDFrameIndexer):\n    \"\"\" access scalars quickly \"\"\"\n\n    def _convert_key(self, key, is_setter=False):\n        return list(key)\n\n    def __getitem__(self, key):\n        if not isinstance(key, tuple):\n            if not is_list_like_indexer(key):\n                key = tuple([key])\n            else:\n                raise ValueError('Invalid call for scalar access (getting)!')\n        key = self._convert_key(key)\n        return self.obj._get_value(*key, takeable=self._takeable)\n\n    def __setitem__(self, key, value):\n        if isinstance(key, tuple):\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        else:\n            key = com.apply_if_callable(key, self.obj)\n        if not isinstance(key, tuple):\n            key = self._tuplify(key)\n        if len(key) != self.obj.ndim:\n            raise ValueError('Not enough indexers for scalar access (setting)!'\n                )\n        key = list(self._convert_key(key, is_setter=True))\n        key.append(value)\n        self.obj._set_value(*key, takeable=self._takeable)\n",
                        "belong_class_name": "_ScalarAccessIndexer",
                        "belong_class_init": "",
                        "called_function_name": "_set_value",
                        "called_function_content": "def __setitem__(self, key, value):\n    if isinstance(key, tuple):\n        key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n    else:\n        key = com.apply_if_callable(key, self.obj)\n    if not isinstance(key, tuple):\n        key = self._tuplify(key)\n    if len(key) != self.obj.ndim:\n        raise ValueError('Not enough indexers for scalar access (setting)!')\n    key = list(self._convert_key(key, is_setter=True))\n    key.append(value)\n    self.obj._set_value(*key, takeable=self._takeable)\n",
                        "called_arguments": "(*key, takeable=self._takeable)",
                        "called_function_parameter": "(self, label, value, takeable=False)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_set_value",
                        "function_content": "def _set_value(self, label, value, takeable=False):\n    try:\n        if takeable:\n            self._values[label] = value\n        else:\n            self.index._engine.set_value(self._values, label, value)\n    except KeyError:\n        self.loc[label] = value\n    return self\n",
                        "function_parameter": "(self, label, value, takeable=False)",
                        "belong_class_content": "class Series(base.IndexOpsMixin, generic.NDFrame):\n    \"\"\"\n    One-dimensional ndarray with axis labels (including time series).\n\n    Labels need not be unique but must be a hashable type. The object\n    supports both integer- and label-based indexing and provides a host of\n    methods for performing operations involving the index. Statistical\n    methods from ndarray have been overridden to automatically exclude\n    missing data (currently represented as NaN).\n\n    Operations between Series (+, -, /, *, **) align values based on their\n    associated index values-- they need not be the same length. The result\n    index will be the sorted union of the two indexes.\n\n    Parameters\n    ----------\n    data : array-like, Iterable, dict, or scalar value\n        Contains data stored in Series.\n\n        .. versionchanged :: 0.23.0\n           If data is a dict, argument order is maintained for Python 3.6\n           and later.\n\n    index : array-like or Index (1d)\n        Values must be hashable and have the same length as `data`.\n        Non-unique index values are allowed. Will default to\n        RangeIndex (0, 1, 2, ..., n) if not provided. If both a dict and index\n        sequence are used, the index will override the keys found in the\n        dict.\n    dtype : str, numpy.dtype, or ExtensionDtype, optional\n        Data type for the output Series. If not specified, this will be\n        inferred from `data`.\n        See the :ref:`user guide <basics.dtypes>` for more usages.\n    copy : bool, default False\n        Copy input data.\n    \"\"\"\n    _metadata = ['name']\n    _accessors = {'dt', 'cat', 'str', 'sparse'}\n    _deprecations = generic.NDFrame._deprecations | frozenset(['asobject',\n        'reshape', 'get_value', 'set_value', 'from_csv', 'valid', 'tolist'])\n    hasnans = property(base.IndexOpsMixin.hasnans.func, doc=base.\n        IndexOpsMixin.hasnans.__doc__)\n\n    def __init__(self, data=None, index=None, dtype=None, name=None, copy=\n        False, fastpath=False):\n        if fastpath:\n            if not isinstance(data, SingleBlockManager):\n                data = SingleBlockManager(data, index, fastpath=True)\n            if copy:\n                data = data.copy()\n            if index is None:\n                index = data.index\n        else:\n            if index is not None:\n                index = ensure_index(index)\n            if data is None:\n                data = {}\n            if dtype is not None:\n                dtype = self._validate_dtype(dtype)\n            if isinstance(data, MultiIndex):\n                raise NotImplementedError(\n                    'initializing a Series from a MultiIndex is not supported')\n            elif isinstance(data, Index):\n                if name is None:\n                    name = data.name\n                if dtype is not None:\n                    data = data.astype(dtype)\n                else:\n                    data = data._values.copy()\n                    if isinstance(data, ABCDatetimeIndex\n                        ) and data.tz is not None:\n                        data = data._values.copy(deep=True)\n                copy = False\n            elif isinstance(data, np.ndarray):\n                pass\n            elif isinstance(data, (ABCSeries, ABCSparseSeries)):\n                if name is None:\n                    name = data.name\n                if index is None:\n                    index = data.index\n                else:\n                    data = data.reindex(index, copy=copy)\n                data = data._data\n            elif isinstance(data, dict):\n                data, index = self._init_dict(data, index, dtype)\n                dtype = None\n                copy = False\n            elif isinstance(data, SingleBlockManager):\n                if index is None:\n                    index = data.index\n                elif not data.index.equals(index) or copy:\n                    raise AssertionError(\n                        'Cannot pass both SingleBlockManager `data` argument and a different `index` argument.  `copy` must be False.'\n                        )\n            elif is_extension_array_dtype(data):\n                pass\n            elif isinstance(data, (set, frozenset)):\n                raise TypeError('{0!r} type is unordered'.format(data.\n                    __class__.__name__))\n            elif isinstance(data, compat.Iterable) and not isinstance(data,\n                compat.Sized):\n                data = list(data)\n            elif isinstance(data, ABCSparseArray):\n                data = data.to_dense()\n            if index is None:\n                if not is_list_like(data):\n                    data = [data]\n                index = ibase.default_index(len(data))\n            elif is_list_like(data):\n                try:\n                    if len(index) != len(data):\n                        raise ValueError(\n                            'Length of passed values is {val}, index implies {ind}'\n                            .format(val=len(data), ind=len(index)))\n                except TypeError:\n                    pass\n            if isinstance(data, SingleBlockManager):\n                if dtype is not None:\n                    data = data.astype(dtype=dtype, errors='ignore', copy=copy)\n                elif copy:\n                    data = data.copy()\n            else:\n                data = sanitize_array(data, index, dtype, copy,\n                    raise_cast_failure=True)\n                data = SingleBlockManager(data, index, fastpath=True)\n        generic.NDFrame.__init__(self, data, fastpath=True)\n        self.name = name\n        self._set_axis(0, index, fastpath=True)\n\n    def _init_dict(self, data, index=None, dtype=None):\n        \"\"\"\n        Derive the \"_data\" and \"index\" attributes of a new Series from a\n        dictionary input.\n\n        Parameters\n        ----------\n        data : dict or dict-like\n            Data used to populate the new Series\n        index : Index or index-like, default None\n            index for the new Series: if None, use dict keys\n        dtype : dtype, default None\n            dtype for the new Series: if None, infer from data\n\n        Returns\n        -------\n        _data : BlockManager for the new Series\n        index : index for the new Series\n        \"\"\"\n        if data:\n            keys, values = zip(*compat.iteritems(data))\n            values = list(values)\n        elif index is not None:\n            values = na_value_for_dtype(dtype)\n            keys = index\n        else:\n            keys, values = [], []\n        s = Series(values, index=keys, dtype=dtype)\n        if data and index is not None:\n            s = s.reindex(index, copy=False)\n        elif not PY36 and not isinstance(data, OrderedDict) and data:\n            try:\n                s = s.sort_index()\n            except TypeError:\n                pass\n        return s._data, s.index\n\n    @classmethod\n    def from_array(cls, arr, index=None, name=None, dtype=None, copy=False,\n        fastpath=False):\n        \"\"\"\n        Construct Series from array.\n\n        .. deprecated :: 0.23.0\n            Use pd.Series(..) constructor instead.\n        \"\"\"\n        warnings.warn(\n            \"'from_array' is deprecated and will be removed in a future version. Please use the pd.Series(..) constructor instead.\"\n            , FutureWarning, stacklevel=2)\n        if isinstance(arr, ABCSparseArray):\n            from pandas.core.sparse.series import SparseSeries\n            cls = SparseSeries\n        return cls(arr, index=index, name=name, dtype=dtype, copy=copy,\n            fastpath=fastpath)\n\n    @property\n    def _constructor(self):\n        return Series\n\n    @property\n    def _constructor_expanddim(self):\n        from pandas.core.frame import DataFrame\n        return DataFrame\n\n    @property\n    def _can_hold_na(self):\n        return self._data._can_hold_na\n    _index = None\n\n    def _set_axis(self, axis, labels, fastpath=False):\n        \"\"\"\n        Override generic, we want to set the _typ here.\n        \"\"\"\n        if not fastpath:\n            labels = ensure_index(labels)\n        is_all_dates = labels.is_all_dates\n        if is_all_dates:\n            if not isinstance(labels, (DatetimeIndex, PeriodIndex,\n                TimedeltaIndex)):\n                try:\n                    labels = DatetimeIndex(labels)\n                    if fastpath:\n                        self._data.set_axis(axis, labels)\n                except (tslibs.OutOfBoundsDatetime, ValueError):\n                    pass\n        self._set_subtyp(is_all_dates)\n        object.__setattr__(self, '_index', labels)\n        if not fastpath:\n            self._data.set_axis(axis, labels)\n\n    def _set_subtyp(self, is_all_dates):\n        if is_all_dates:\n            object.__setattr__(self, '_subtyp', 'time_series')\n        else:\n            object.__setattr__(self, '_subtyp', 'series')\n\n    def _update_inplace(self, result, **kwargs):\n        return generic.NDFrame._update_inplace(self, result, **kwargs)\n\n    @property\n    def name(self):\n        \"\"\"\n        Return name of the Series.\n        \"\"\"\n        return self._name\n\n    @name.setter\n    def name(self, value):\n        if value is not None and not is_hashable(value):\n            raise TypeError('Series.name must be a hashable type')\n        object.__setattr__(self, '_name', value)\n\n    @property\n    def dtype(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype\n\n    @property\n    def dtypes(self):\n        \"\"\"\n        Return the dtype object of the underlying data.\n        \"\"\"\n        return self._data.dtype\n\n    @property\n    def ftype(self):\n        \"\"\"\n        Return if the data is sparse|dense.\n        \"\"\"\n        return self._data.ftype\n\n    @property\n    def ftypes(self):\n        \"\"\"\n        Return if the data is sparse|dense.\n        \"\"\"\n        return self._data.ftype\n\n    @property\n    def values(self):\n        \"\"\"\n        Return Series as ndarray or ndarray-like depending on the dtype.\n\n        .. warning::\n\n           We recommend using :attr:`Series.array` or\n           :meth:`Series.to_numpy`, depending on whether you need\n           a reference to the underlying data or a NumPy array.\n\n        Returns\n        -------\n        numpy.ndarray or ndarray-like\n\n        See Also\n        --------\n        Series.array : Reference to the underlying data.\n        Series.to_numpy : A NumPy array representing the underlying data.\n\n        Examples\n        --------\n        >>> pd.Series([1, 2, 3]).values\n        array([1, 2, 3])\n\n        >>> pd.Series(list('aabc')).values\n        array(['a', 'a', 'b', 'c'], dtype=object)\n\n        >>> pd.Series(list('aabc')).astype('category').values\n        [a, a, b, c]\n        Categories (3, object): [a, b, c]\n\n        Timezone aware datetime data is converted to UTC:\n\n        >>> pd.Series(pd.date_range('20130101', periods=3,\n        ...                         tz='US/Eastern')).values\n        array(['2013-01-01T05:00:00.000000000',\n               '2013-01-02T05:00:00.000000000',\n               '2013-01-03T05:00:00.000000000'], dtype='datetime64[ns]')\n        \"\"\"\n        return self._data.external_values()\n\n    @property\n    def _values(self):\n        \"\"\"\n        Return the internal repr of this data.\n        \"\"\"\n        return self._data.internal_values()\n\n    def _formatting_values(self):\n        \"\"\"\n        Return the values that can be formatted (used by SeriesFormatter\n        and DataFrameFormatter).\n        \"\"\"\n        return self._data.formatting_values()\n\n    def get_values(self):\n        \"\"\"\n        Same as values (but handles sparseness conversions); is a view.\n        \"\"\"\n        return self._data.get_values()\n\n    @property\n    def asobject(self):\n        \"\"\"\n        Return object Series which contains boxed values.\n\n        .. deprecated :: 0.23.0\n\n           Use ``astype(object)`` instead.\n\n        *this is an internal non-public method*\n        \"\"\"\n        warnings.warn(\"'asobject' is deprecated. Use 'astype(object)' instead\",\n            FutureWarning, stacklevel=2)\n        return self.astype(object).values\n\n    def ravel(self, order='C'):\n        \"\"\"\n        Return the flattened underlying data as an ndarray.\n\n        Returns\n        -------\n        numpy.ndarray or ndarray-like\n            Flattened data of the Series.\n\n        See Also\n        --------\n        numpy.ndarray.ravel\n        \"\"\"\n        return self._values.ravel(order=order)\n\n    def compress(self, condition, *args, **kwargs):\n        \"\"\"\n        Return selected slices of an array along given axis as a Series.\n\n        .. deprecated:: 0.24.0\n\n        See Also\n        --------\n        numpy.ndarray.compress\n        \"\"\"\n        msg = (\n            \"Series.compress(condition) is deprecated. Use 'Series[condition]' or 'np.asarray(series).compress(condition)' instead.\"\n            )\n        warnings.warn(msg, FutureWarning, stacklevel=2)\n        nv.validate_compress(args, kwargs)\n        return self[condition]\n\n    def nonzero(self):\n        \"\"\"\n        Return the *integer* indices of the elements that are non-zero.\n\n        .. deprecated:: 0.24.0\n           Please use .to_numpy().nonzero() as a replacement.\n\n        This method is equivalent to calling `numpy.nonzero` on the\n        series data. For compatibility with NumPy, the return value is\n        the same (a tuple with an array of indices for each dimension),\n        but it will always be a one-item tuple because series only have\n        one dimension.\n\n        See Also\n        --------\n        numpy.nonzero\n\n        Examples\n        --------\n        >>> s = pd.Series([0, 3, 0, 4])\n        >>> s.nonzero()\n        (array([1, 3]),)\n        >>> s.iloc[s.nonzero()[0]]\n        1    3\n        3    4\n        dtype: int64\n\n        >>> s = pd.Series([0, 3, 0, 4], index=['a', 'b', 'c', 'd'])\n        # same return although index of s is different\n        >>> s.nonzero()\n        (array([1, 3]),)\n        >>> s.iloc[s.nonzero()[0]]\n        b    3\n        d    4\n        dtype: int64\n        \"\"\"\n        msg = (\n            'Series.nonzero() is deprecated and will be removed in a future version.Use Series.to_numpy().nonzero() instead'\n            )\n        warnings.warn(msg, FutureWarning, stacklevel=2)\n        return self._values.nonzero()\n\n    def put(self, *args, **kwargs):\n        \"\"\"\n        Apply the `put` method to its `values` attribute if it has one.\n\n        See Also\n        --------\n        numpy.ndarray.put\n        \"\"\"\n        self._values.put(*args, **kwargs)\n\n    def __len__(self):\n        \"\"\"\n        Return the length of the Series.\n        \"\"\"\n        return len(self._data)\n\n    def view(self, dtype=None):\n        \"\"\"\n        Create a new view of the Series.\n\n        This function will return a new Series with a view of the same\n        underlying values in memory, optionally reinterpreted with a new data\n        type. The new data type must preserve the same size in bytes as to not\n        cause index misalignment.\n\n        Parameters\n        ----------\n        dtype : data type\n            Data type object or one of their string representations.\n\n        Returns\n        -------\n        Series\n            A new Series object as a view of the same data in memory.\n\n        See Also\n        --------\n        numpy.ndarray.view : Equivalent numpy function to create a new view of\n            the same data in memory.\n\n        Notes\n        -----\n        Series are instantiated with ``dtype=float64`` by default. While\n        ``numpy.ndarray.view()`` will return a view with the same data type as\n        the original array, ``Series.view()`` (without specified dtype)\n        will try using ``float64`` and may fail if the original data type size\n        in bytes is not the same.\n\n        Examples\n        --------\n        >>> s = pd.Series([-2, -1, 0, 1, 2], dtype='int8')\n        >>> s\n        0   -2\n        1   -1\n        2    0\n        3    1\n        4    2\n        dtype: int8\n\n        The 8 bit signed integer representation of `-1` is `0b11111111`, but\n        the same bytes represent 255 if read as an 8 bit unsigned integer:\n\n        >>> us = s.view('uint8')\n        >>> us\n        0    254\n        1    255\n        2      0\n        3      1\n        4      2\n        dtype: uint8\n\n        The views share the same underlying values:\n\n        >>> us[0] = 128\n        >>> s\n        0   -128\n        1     -1\n        2      0\n        3      1\n        4      2\n        dtype: int8\n        \"\"\"\n        return self._constructor(self._values.view(dtype), index=self.index\n            ).__finalize__(self)\n\n    def __array__(self, dtype=None):\n        \"\"\"\n        Return the values as a NumPy array.\n\n        Users should not call this directly. Rather, it is invoked by\n        :func:`numpy.array` and :func:`numpy.asarray`.\n\n        Parameters\n        ----------\n        dtype : str or numpy.dtype, optional\n            The dtype to use for the resulting NumPy array. By default,\n            the dtype is inferred from the data.\n\n        Returns\n        -------\n        numpy.ndarray\n            The values in the series converted to a :class:`numpy.ndarary`\n            with the specified `dtype`.\n\n        See Also\n        --------\n        array : Create a new array from data.\n        Series.array : Zero-copy view to the array backing the Series.\n        Series.to_numpy : Series method for similar behavior.\n\n        Examples\n        --------\n        >>> ser = pd.Series([1, 2, 3])\n        >>> np.asarray(ser)\n        array([1, 2, 3])\n\n        For timezone-aware data, the timezones may be retained with\n        ``dtype='object'``\n\n        >>> tzser = pd.Series(pd.date_range('2000', periods=2, tz=\"CET\"))\n        >>> np.asarray(tzser, dtype=\"object\")\n        array([Timestamp('2000-01-01 00:00:00+0100', tz='CET', freq='D'),\n               Timestamp('2000-01-02 00:00:00+0100', tz='CET', freq='D')],\n              dtype=object)\n\n        Or the values may be localized to UTC and the tzinfo discared with\n        ``dtype='datetime64[ns]'``\n\n        >>> np.asarray(tzser, dtype=\"datetime64[ns]\")  # doctest: +ELLIPSIS\n        array(['1999-12-31T23:00:00.000000000', ...],\n              dtype='datetime64[ns]')\n        \"\"\"\n        if dtype is None and isinstance(self.array, ABCDatetimeArray\n            ) and getattr(self.dtype, 'tz', None):\n            msg = \"\"\"Converting timezone-aware DatetimeArray to timezone-naive ndarray with 'datetime64[ns]' dtype. In the future, this will return an ndarray with 'object' dtype where each element is a 'pandas.Timestamp' with the correct 'tz'.\n\tTo accept the future behavior, pass 'dtype=object'.\n\tTo keep the old behavior, pass 'dtype=\"datetime64[ns]\"'.\"\"\"\n            warnings.warn(msg, FutureWarning, stacklevel=3)\n            dtype = 'M8[ns]'\n        return np.asarray(self.array, dtype)\n\n    def __array_wrap__(self, result, context=None):\n        \"\"\"\n        Gets called after a ufunc.\n        \"\"\"\n        return self._constructor(result, index=self.index, copy=False\n            ).__finalize__(self)\n\n    def __array_prepare__(self, result, context=None):\n        \"\"\"\n        Gets called prior to a ufunc.\n        \"\"\"\n        if context is not None and (not isinstance(self._values, (np.\n            ndarray, ExtensionArray)) or isinstance(self._values, Categorical)\n            ):\n            obj = context[1][0]\n            raise TypeError(\n                '{obj} with dtype {dtype} cannot perform the numpy op {op}'\n                .format(obj=type(obj).__name__, dtype=getattr(obj, 'dtype',\n                None), op=context[0].__name__))\n        return result\n\n    @property\n    def real(self):\n        \"\"\"\n        Return the real value of vector.\n        \"\"\"\n        return self.values.real\n\n    @real.setter\n    def real(self, v):\n        self.values.real = v\n\n    @property\n    def imag(self):\n        \"\"\"\n        Return imag value of vector.\n        \"\"\"\n        return self.values.imag\n\n    @imag.setter\n    def imag(self, v):\n        self.values.imag = v\n    __float__ = _coerce_method(float)\n    __long__ = _coerce_method(int)\n    __int__ = _coerce_method(int)\n\n    def _unpickle_series_compat(self, state):\n        if isinstance(state, dict):\n            self._data = state['_data']\n            self.name = state['name']\n            self.index = self._data.index\n        elif isinstance(state, tuple):\n            nd_state, own_state = state\n            data = np.empty(nd_state[1], dtype=nd_state[2])\n            np.ndarray.__setstate__(data, nd_state)\n            index, name = own_state[0], None\n            if len(own_state) > 1:\n                name = own_state[1]\n            self._data = SingleBlockManager(data, index, fastpath=True)\n            self._index = index\n            self.name = name\n        else:\n            raise Exception('cannot unpickle legacy formats -> [%s]' % state)\n\n    @property\n    def axes(self):\n        \"\"\"\n        Return a list of the row axis labels.\n        \"\"\"\n        return [self.index]\n\n    def _ixs(self, i, axis=0):\n        \"\"\"\n        Return the i-th value or values in the Series by location.\n\n        Parameters\n        ----------\n        i : int, slice, or sequence of integers\n\n        Returns\n        -------\n        scalar (int) or Series (slice, sequence)\n        \"\"\"\n        try:\n            values = self._values\n            if isinstance(values, np.ndarray):\n                return libindex.get_value_at(values, i)\n            else:\n                return values[i]\n        except IndexError:\n            raise\n        except Exception:\n            if isinstance(i, slice):\n                indexer = self.index._convert_slice_indexer(i, kind='iloc')\n                return self._get_values(indexer)\n            else:\n                label = self.index[i]\n                if isinstance(label, Index):\n                    return self.take(i, axis=axis, convert=True)\n                else:\n                    return libindex.get_value_at(self, i)\n\n    @property\n    def _is_mixed_type(self):\n        return False\n\n    def _slice(self, slobj, axis=0, kind=None):\n        slobj = self.index._convert_slice_indexer(slobj, kind=kind or 'getitem'\n            )\n        return self._get_values(slobj)\n\n    def __getitem__(self, key):\n        key = com.apply_if_callable(key, self)\n        try:\n            result = self.index.get_value(self, key)\n            if not is_scalar(result):\n                if is_list_like(result) and not isinstance(result, Series):\n                    try:\n                        if not is_scalar(self.index.get_loc(key)):\n                            result = self._constructor(result, index=[key] *\n                                len(result), dtype=self.dtype).__finalize__(\n                                self)\n                    except KeyError:\n                        pass\n            return result\n        except InvalidIndexError:\n            pass\n        except (KeyError, ValueError):\n            if isinstance(key, tuple) and isinstance(self.index, MultiIndex):\n                pass\n            elif key is Ellipsis:\n                return self\n            elif com.is_bool_indexer(key):\n                pass\n            else:\n                new_key = self.index._convert_scalar_indexer(key, kind=\n                    'getitem')\n                if type(new_key) != type(key):\n                    return self.__getitem__(new_key)\n                raise\n        except Exception:\n            raise\n        if is_iterator(key):\n            key = list(key)\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(self.index, key)\n        return self._get_with(key)\n\n    def _get_with(self, key):\n        if isinstance(key, slice):\n            indexer = self.index._convert_slice_indexer(key, kind='getitem')\n            return self._get_values(indexer)\n        elif isinstance(key, ABCDataFrame):\n            raise TypeError(\n                'Indexing a Series with DataFrame is not supported, use the appropriate DataFrame column'\n                )\n        elif isinstance(key, tuple):\n            try:\n                return self._get_values_tuple(key)\n            except Exception:\n                if len(key) == 1:\n                    key = key[0]\n                    if isinstance(key, slice):\n                        return self._get_values(key)\n                raise\n        if not isinstance(key, (list, np.ndarray, Series, Index)):\n            key = list(key)\n        if isinstance(key, Index):\n            key_type = key.inferred_type\n        else:\n            key_type = lib.infer_dtype(key, skipna=False)\n        if key_type == 'integer':\n            if self.index.is_integer() or self.index.is_floating():\n                return self.loc[key]\n            else:\n                return self._get_values(key)\n        elif key_type == 'boolean':\n            return self._get_values(key)\n        try:\n            if isinstance(key, (list, tuple)):\n                return self.loc[key]\n            return self.reindex(key)\n        except Exception:\n            if isinstance(key[0], slice):\n                return self._get_values(key)\n            raise\n\n    def _get_values_tuple(self, key):\n        if com._any_none(*key):\n            return self._get_values(key)\n        if not isinstance(self.index, MultiIndex):\n            raise ValueError('Can only tuple-index with a MultiIndex')\n        indexer, new_index = self.index.get_loc_level(key)\n        return self._constructor(self._values[indexer], index=new_index\n            ).__finalize__(self)\n\n    def _get_values(self, indexer):\n        try:\n            return self._constructor(self._data.get_slice(indexer),\n                fastpath=True).__finalize__(self)\n        except Exception:\n            return self._values[indexer]\n\n    def __setitem__(self, key, value):\n        key = com.apply_if_callable(key, self)\n\n        def setitem(key, value):\n            try:\n                self._set_with_engine(key, value)\n                return\n            except com.SettingWithCopyError:\n                raise\n            except (KeyError, ValueError):\n                values = self._values\n                if is_integer(key\n                    ) and not self.index.inferred_type == 'integer':\n                    values[key] = value\n                    return\n                elif key is Ellipsis:\n                    self[:] = value\n                    return\n                elif com.is_bool_indexer(key):\n                    pass\n                elif is_timedelta64_dtype(self.dtype):\n                    if isna(value):\n                        value = iNaT\n                        try:\n                            self.index._engine.set_value(self._values, key,\n                                value)\n                            return\n                        except TypeError:\n                            pass\n                self.loc[key] = value\n                return\n            except TypeError as e:\n                if isinstance(key, tuple) and not isinstance(self.index,\n                    MultiIndex):\n                    raise ValueError('Can only tuple-index with a MultiIndex')\n                if _is_unorderable_exception(e):\n                    raise IndexError(key)\n            if com.is_bool_indexer(key):\n                key = check_bool_indexer(self.index, key)\n                try:\n                    self._where(~key, value, inplace=True)\n                    return\n                except InvalidIndexError:\n                    pass\n            self._set_with(key, value)\n        cacher_needs_updating = self._check_is_chained_assignment_possible()\n        setitem(key, value)\n        if cacher_needs_updating:\n            self._maybe_update_cacher()\n\n    def _set_with_engine(self, key, value):\n        values = self._values\n        try:\n            self.index._engine.set_value(values, key, value)\n            return\n        except KeyError:\n            values[self.index.get_loc(key)] = value\n            return\n\n    def _set_with(self, key, value):\n        if isinstance(key, slice):\n            indexer = self.index._convert_slice_indexer(key, kind='getitem')\n            return self._set_values(indexer, value)\n        else:\n            if isinstance(key, tuple):\n                try:\n                    self._set_values(key, value)\n                except Exception:\n                    pass\n            if is_scalar(key):\n                key = [key]\n            elif not isinstance(key, (list, Series, np.ndarray)):\n                try:\n                    key = list(key)\n                except Exception:\n                    key = [key]\n            if isinstance(key, Index):\n                key_type = key.inferred_type\n            else:\n                key_type = lib.infer_dtype(key, skipna=False)\n            if key_type == 'integer':\n                if self.index.inferred_type == 'integer':\n                    self._set_labels(key, value)\n                else:\n                    return self._set_values(key, value)\n            elif key_type == 'boolean':\n                self._set_values(key.astype(np.bool_), value)\n            else:\n                self._set_labels(key, value)\n\n    def _set_labels(self, key, value):\n        if isinstance(key, Index):\n            key = key.values\n        else:\n            key = com.asarray_tuplesafe(key)\n        indexer = self.index.get_indexer(key)\n        mask = indexer == -1\n        if mask.any():\n            raise ValueError('%s not contained in the index' % str(key[mask]))\n        self._set_values(indexer, value)\n\n    def _set_values(self, key, value):\n        if isinstance(key, Series):\n            key = key._values\n        self._data = self._data.setitem(indexer=key, value=value)\n        self._maybe_update_cacher()\n\n    def repeat(self, repeats, axis=None):\n        \"\"\"\n        Repeat elements of a Series.\n\n        Returns a new Series where each element of the current Series\n        is repeated consecutively a given number of times.\n\n        Parameters\n        ----------\n        repeats : int or array of ints\n            The number of repetitions for each element. This should be a\n            non-negative integer. Repeating 0 times will return an empty\n            Series.\n        axis : None\n            Must be ``None``. Has no effect but is accepted for compatibility\n            with numpy.\n\n        Returns\n        -------\n        Series\n            Newly created Series with repeated elements.\n\n        See Also\n        --------\n        Index.repeat : Equivalent function for Index.\n        numpy.repeat : Similar method for :class:`numpy.ndarray`.\n\n        Examples\n        --------\n        >>> s = pd.Series(['a', 'b', 'c'])\n        >>> s\n        0    a\n        1    b\n        2    c\n        dtype: object\n        >>> s.repeat(2)\n        0    a\n        0    a\n        1    b\n        1    b\n        2    c\n        2    c\n        dtype: object\n        >>> s.repeat([1, 2, 3])\n        0    a\n        1    b\n        1    b\n        2    c\n        2    c\n        2    c\n        dtype: object\n        \"\"\"\n        nv.validate_repeat(tuple(), dict(axis=axis))\n        new_index = self.index.repeat(repeats)\n        new_values = self._values.repeat(repeats)\n        return self._constructor(new_values, index=new_index).__finalize__(self\n            )\n\n    def get_value(self, label, takeable=False):\n        \"\"\"\n        Quickly retrieve single value at passed index label.\n\n        .. deprecated:: 0.21.0\n            Please use .at[] or .iat[] accessors.\n\n        Parameters\n        ----------\n        label : object\n        takeable : interpret the index as indexers, default False\n\n        Returns\n        -------\n        scalar value\n        \"\"\"\n        warnings.warn(\n            'get_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead'\n            , FutureWarning, stacklevel=2)\n        return self._get_value(label, takeable=takeable)\n\n    def _get_value(self, label, takeable=False):\n        if takeable is True:\n            return com.maybe_box_datetimelike(self._values[label])\n        return self.index.get_value(self._values, label)\n    _get_value.__doc__ = get_value.__doc__\n\n    def set_value(self, label, value, takeable=False):\n        \"\"\"\n        Quickly set single value at passed label.\n\n        .. deprecated:: 0.21.0\n            Please use .at[] or .iat[] accessors.\n\n        If label is not contained, a new object is created with the label\n        placed at the end of the result index.\n\n        Parameters\n        ----------\n        label : object\n            Partial indexing with MultiIndex not allowed\n        value : object\n            Scalar value\n        takeable : interpret the index as indexers, default False\n\n        Returns\n        -------\n        Series\n            If label is contained, will be reference to calling Series,\n            otherwise a new object.\n        \"\"\"\n        warnings.warn(\n            'set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead'\n            , FutureWarning, stacklevel=2)\n        return self._set_value(label, value, takeable=takeable)\n\n    def _set_value(self, label, value, takeable=False):\n        try:\n            if takeable:\n                self._values[label] = value\n            else:\n                self.index._engine.set_value(self._values, label, value)\n        except KeyError:\n            self.loc[label] = value\n        return self\n    _set_value.__doc__ = set_value.__doc__\n\n    def reset_index(self, level=None, drop=False, name=None, inplace=False):\n        \"\"\"\n        Generate a new DataFrame or Series with the index reset.\n\n        This is useful when the index needs to be treated as a column, or\n        when the index is meaningless and needs to be reset to the default\n        before another operation.\n\n        Parameters\n        ----------\n        level : int, str, tuple, or list, default optional\n            For a Series with a MultiIndex, only remove the specified levels\n            from the index. Removes all levels by default.\n        drop : bool, default False\n            Just reset the index, without inserting it as a column in\n            the new DataFrame.\n        name : object, optional\n            The name to use for the column containing the original Series\n            values. Uses ``self.name`` by default. This argument is ignored\n            when `drop` is True.\n        inplace : bool, default False\n            Modify the Series in place (do not create a new object).\n\n        Returns\n        -------\n        Series or DataFrame\n            When `drop` is False (the default), a DataFrame is returned.\n            The newly created columns will come first in the DataFrame,\n            followed by the original Series values.\n            When `drop` is True, a `Series` is returned.\n            In either case, if ``inplace=True``, no value is returned.\n\n        See Also\n        --------\n        DataFrame.reset_index: Analogous function for DataFrame.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4], name='foo',\n        ...               index=pd.Index(['a', 'b', 'c', 'd'], name='idx'))\n\n        Generate a DataFrame with default index.\n\n        >>> s.reset_index()\n          idx  foo\n        0   a    1\n        1   b    2\n        2   c    3\n        3   d    4\n\n        To specify the name of the new column use `name`.\n\n        >>> s.reset_index(name='values')\n          idx  values\n        0   a       1\n        1   b       2\n        2   c       3\n        3   d       4\n\n        To generate a new Series with the default set `drop` to True.\n\n        >>> s.reset_index(drop=True)\n        0    1\n        1    2\n        2    3\n        3    4\n        Name: foo, dtype: int64\n\n        To update the Series in place, without generating a new one\n        set `inplace` to True. Note that it also requires ``drop=True``.\n\n        >>> s.reset_index(inplace=True, drop=True)\n        >>> s\n        0    1\n        1    2\n        2    3\n        3    4\n        Name: foo, dtype: int64\n\n        The `level` parameter is interesting for Series with a multi-level\n        index.\n\n        >>> arrays = [np.array(['bar', 'bar', 'baz', 'baz']),\n        ...           np.array(['one', 'two', 'one', 'two'])]\n        >>> s2 = pd.Series(\n        ...     range(4), name='foo',\n        ...     index=pd.MultiIndex.from_arrays(arrays,\n        ...                                     names=['a', 'b']))\n\n        To remove a specific level from the Index, use `level`.\n\n        >>> s2.reset_index(level='a')\n               a  foo\n        b\n        one  bar    0\n        two  bar    1\n        one  baz    2\n        two  baz    3\n\n        If `level` is not set, all levels are removed from the Index.\n\n        >>> s2.reset_index()\n             a    b  foo\n        0  bar  one    0\n        1  bar  two    1\n        2  baz  one    2\n        3  baz  two    3\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        if drop:\n            new_index = ibase.default_index(len(self))\n            if level is not None:\n                if not isinstance(level, (tuple, list)):\n                    level = [level]\n                level = [self.index._get_level_number(lev) for lev in level]\n                if len(level) < self.index.nlevels:\n                    new_index = self.index.droplevel(level)\n            if inplace:\n                self.index = new_index\n                self.name = name or self.name\n            else:\n                return self._constructor(self._values.copy(), index=new_index\n                    ).__finalize__(self)\n        elif inplace:\n            raise TypeError(\n                'Cannot reset_index inplace on a Series to create a DataFrame')\n        else:\n            df = self.to_frame(name)\n            return df.reset_index(level=level, drop=drop)\n\n    def __unicode__(self):\n        \"\"\"\n        Return a string representation for a particular DataFrame.\n\n        Invoked by unicode(df) in py2 only. Yields a Unicode String in both\n        py2/py3.\n        \"\"\"\n        buf = StringIO(u(''))\n        width, height = get_terminal_size()\n        max_rows = height if get_option('display.max_rows'\n            ) == 0 else get_option('display.max_rows')\n        show_dimensions = get_option('display.show_dimensions')\n        self.to_string(buf=buf, name=self.name, dtype=self.dtype, max_rows=\n            max_rows, length=show_dimensions)\n        result = buf.getvalue()\n        return result\n\n    def to_string(self, buf=None, na_rep='NaN', float_format=None, header=\n        True, index=True, length=False, dtype=False, name=False, max_rows=None\n        ):\n        \"\"\"\n        Render a string representation of the Series.\n\n        Parameters\n        ----------\n        buf : StringIO-like, optional\n            Buffer to write to.\n        na_rep : str, optional\n            String representation of NaN to use, default 'NaN'.\n        float_format : one-parameter function, optional\n            Formatter function to apply to columns' elements if they are\n            floats, default None.\n        header : bool, default True\n            Add the Series header (index name).\n        index : bool, optional\n            Add index (row) labels, default True.\n        length : bool, default False\n            Add the Series length.\n        dtype : bool, default False\n            Add the Series dtype.\n        name : bool, default False\n            Add the Series name if not None.\n        max_rows : int, optional\n            Maximum number of rows to show before truncating. If None, show\n            all.\n\n        Returns\n        -------\n        str or None\n            String representation of Series if ``buf=None``, otherwise None.\n        \"\"\"\n        formatter = fmt.SeriesFormatter(self, name=name, length=length,\n            header=header, index=index, dtype=dtype, na_rep=na_rep,\n            float_format=float_format, max_rows=max_rows)\n        result = formatter.to_string()\n        if not isinstance(result, compat.text_type):\n            raise AssertionError(\n                'result must be of type unicode, type of result is {0!r}'.\n                format(result.__class__.__name__))\n        if buf is None:\n            return result\n        else:\n            try:\n                buf.write(result)\n            except AttributeError:\n                with open(buf, 'w') as f:\n                    f.write(result)\n\n    def iteritems(self):\n        \"\"\"\n        Lazily iterate over (index, value) tuples.\n        \"\"\"\n        return zip(iter(self.index), iter(self))\n    items = iteritems\n\n    def keys(self):\n        \"\"\"\n        Return alias for index.\n        \"\"\"\n        return self.index\n\n    def to_dict(self, into=dict):\n        \"\"\"\n        Convert Series to {label -> value} dict or dict-like object.\n\n        Parameters\n        ----------\n        into : class, default dict\n            The collections.Mapping subclass to use as the return\n            object. Can be the actual class or an empty\n            instance of the mapping type you want.  If you want a\n            collections.defaultdict, you must pass it initialized.\n\n            .. versionadded:: 0.21.0\n\n        Returns\n        -------\n        collections.Mapping\n            Key-value representation of Series.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> s.to_dict()\n        {0: 1, 1: 2, 2: 3, 3: 4}\n        >>> from collections import OrderedDict, defaultdict\n        >>> s.to_dict(OrderedDict)\n        OrderedDict([(0, 1), (1, 2), (2, 3), (3, 4)])\n        >>> dd = defaultdict(list)\n        >>> s.to_dict(dd)\n        defaultdict(<class 'list'>, {0: 1, 1: 2, 2: 3, 3: 4})\n        \"\"\"\n        into_c = com.standardize_mapping(into)\n        return into_c(compat.iteritems(self))\n\n    def to_frame(self, name=None):\n        \"\"\"\n        Convert Series to DataFrame.\n\n        Parameters\n        ----------\n        name : object, default None\n            The passed name should substitute for the series name (if it has\n            one).\n\n        Returns\n        -------\n        DataFrame\n            DataFrame representation of Series.\n\n        Examples\n        --------\n        >>> s = pd.Series([\"a\", \"b\", \"c\"],\n        ...               name=\"vals\")\n        >>> s.to_frame()\n          vals\n        0    a\n        1    b\n        2    c\n        \"\"\"\n        if name is None:\n            df = self._constructor_expanddim(self)\n        else:\n            df = self._constructor_expanddim({name: self})\n        return df\n\n    def to_sparse(self, kind='block', fill_value=None):\n        \"\"\"\n        Convert Series to SparseSeries.\n\n        Parameters\n        ----------\n        kind : {'block', 'integer'}, default 'block'\n        fill_value : float, defaults to NaN (missing)\n            Value to use for filling NaN values.\n\n        Returns\n        -------\n        SparseSeries\n            Sparse representation of the Series.\n        \"\"\"\n        from pandas.core.sparse.series import SparseSeries\n        values = SparseArray(self, kind=kind, fill_value=fill_value)\n        return SparseSeries(values, index=self.index, name=self.name\n            ).__finalize__(self)\n\n    def _set_name(self, name, inplace=False):\n        \"\"\"\n        Set the Series name.\n\n        Parameters\n        ----------\n        name : str\n        inplace : bool\n            whether to modify `self` directly or return a copy\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        ser = self if inplace else self.copy()\n        ser.name = name\n        return ser\n\n    def count(self, level=None):\n        \"\"\"\n        Return number of non-NA/null observations in the Series.\n\n        Parameters\n        ----------\n        level : int or level name, default None\n            If the axis is a MultiIndex (hierarchical), count along a\n            particular level, collapsing into a smaller Series.\n\n        Returns\n        -------\n        int or Series (if level specified)\n            Number of non-null values in the Series.\n\n        Examples\n        --------\n        >>> s = pd.Series([0.0, 1.0, np.nan])\n        >>> s.count()\n        2\n        \"\"\"\n        if level is None:\n            return notna(com.values_from_object(self)).sum()\n        if isinstance(level, compat.string_types):\n            level = self.index._get_level_number(level)\n        lev = self.index.levels[level]\n        level_codes = np.array(self.index.codes[level], subok=False, copy=True)\n        mask = level_codes == -1\n        if mask.any():\n            level_codes[mask] = cnt = len(lev)\n            lev = lev.insert(cnt, lev._na_value)\n        obs = level_codes[notna(self.values)]\n        out = np.bincount(obs, minlength=len(lev) or None)\n        return self._constructor(out, index=lev, dtype='int64').__finalize__(\n            self)\n\n    def mode(self, dropna=True):\n        \"\"\"\n        Return the mode(s) of the dataset.\n\n        Always returns Series even if only one value is returned.\n\n        Parameters\n        ----------\n        dropna : bool, default True\n            Don't consider counts of NaN/NaT.\n\n            .. versionadded:: 0.24.0\n\n        Returns\n        -------\n        Series\n            Modes of the Series in sorted order.\n        \"\"\"\n        return algorithms.mode(self, dropna=dropna)\n\n    def unique(self):\n        \"\"\"\n        Return unique values of Series object.\n\n        Uniques are returned in order of appearance. Hash table-based unique,\n        therefore does NOT sort.\n\n        Returns\n        -------\n        ndarray or ExtensionArray\n            The unique values returned as a NumPy array. See Notes.\n\n        See Also\n        --------\n        unique : Top-level unique method for any 1-d array-like object.\n        Index.unique : Return Index with unique values from an Index object.\n\n        Notes\n        -----\n        Returns the unique values as a NumPy array. In case of an\n        extension-array backed Series, a new\n        :class:`~api.extensions.ExtensionArray` of that type with just\n        the unique values is returned. This includes\n\n            * Categorical\n            * Period\n            * Datetime with Timezone\n            * Interval\n            * Sparse\n            * IntegerNA\n\n        See Examples section.\n\n        Examples\n        --------\n        >>> pd.Series([2, 1, 3, 3], name='A').unique()\n        array([2, 1, 3])\n\n        >>> pd.Series([pd.Timestamp('2016-01-01') for _ in range(3)]).unique()\n        array(['2016-01-01T00:00:00.000000000'], dtype='datetime64[ns]')\n\n        >>> pd.Series([pd.Timestamp('2016-01-01', tz='US/Eastern')\n        ...            for _ in range(3)]).unique()\n        <DatetimeArray>\n        ['2016-01-01 00:00:00-05:00']\n        Length: 1, dtype: datetime64[ns, US/Eastern]\n\n        An unordered Categorical will return categories in the order of\n        appearance.\n\n        >>> pd.Series(pd.Categorical(list('baabc'))).unique()\n        [b, a, c]\n        Categories (3, object): [b, a, c]\n\n        An ordered Categorical preserves the category ordering.\n\n        >>> pd.Series(pd.Categorical(list('baabc'), categories=list('abc'),\n        ...                          ordered=True)).unique()\n        [b, a, c]\n        Categories (3, object): [a < b < c]\n        \"\"\"\n        result = super(Series, self).unique()\n        return result\n\n    def drop_duplicates(self, keep='first', inplace=False):\n        \"\"\"\n        Return Series with duplicate values removed.\n\n        Parameters\n        ----------\n        keep : {'first', 'last', ``False``}, default 'first'\n            - 'first' : Drop duplicates except for the first occurrence.\n            - 'last' : Drop duplicates except for the last occurrence.\n            - ``False`` : Drop all duplicates.\n        inplace : bool, default ``False``\n            If ``True``, performs operation inplace and returns None.\n\n        Returns\n        -------\n        Series\n            Series with duplicates dropped.\n\n        See Also\n        --------\n        Index.drop_duplicates : Equivalent method on Index.\n        DataFrame.drop_duplicates : Equivalent method on DataFrame.\n        Series.duplicated : Related method on Series, indicating duplicate\n            Series values.\n\n        Examples\n        --------\n        Generate an Series with duplicated entries.\n\n        >>> s = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama', 'hippo'],\n        ...               name='animal')\n        >>> s\n        0      lama\n        1       cow\n        2      lama\n        3    beetle\n        4      lama\n        5     hippo\n        Name: animal, dtype: object\n\n        With the 'keep' parameter, the selection behaviour of duplicated values\n        can be changed. The value 'first' keeps the first occurrence for each\n        set of duplicated entries. The default value of keep is 'first'.\n\n        >>> s.drop_duplicates()\n        0      lama\n        1       cow\n        3    beetle\n        5     hippo\n        Name: animal, dtype: object\n\n        The value 'last' for parameter 'keep' keeps the last occurrence for\n        each set of duplicated entries.\n\n        >>> s.drop_duplicates(keep='last')\n        1       cow\n        3    beetle\n        4      lama\n        5     hippo\n        Name: animal, dtype: object\n\n        The value ``False`` for parameter 'keep' discards all sets of\n        duplicated entries. Setting the value of 'inplace' to ``True`` performs\n        the operation inplace and returns ``None``.\n\n        >>> s.drop_duplicates(keep=False, inplace=True)\n        >>> s\n        1       cow\n        3    beetle\n        5     hippo\n        Name: animal, dtype: object\n        \"\"\"\n        return super(Series, self).drop_duplicates(keep=keep, inplace=inplace)\n\n    def duplicated(self, keep='first'):\n        \"\"\"\n        Indicate duplicate Series values.\n\n        Duplicated values are indicated as ``True`` values in the resulting\n        Series. Either all duplicates, all except the first or all except the\n        last occurrence of duplicates can be indicated.\n\n        Parameters\n        ----------\n        keep : {'first', 'last', False}, default 'first'\n            - 'first' : Mark duplicates as ``True`` except for the first\n              occurrence.\n            - 'last' : Mark duplicates as ``True`` except for the last\n              occurrence.\n            - ``False`` : Mark all duplicates as ``True``.\n\n        Returns\n        -------\n        Series\n            Series indicating whether each value has occurred in the\n            preceding values.\n\n        See Also\n        --------\n        Index.duplicated : Equivalent method on pandas.Index.\n        DataFrame.duplicated : Equivalent method on pandas.DataFrame.\n        Series.drop_duplicates : Remove duplicate values from Series.\n\n        Examples\n        --------\n        By default, for each set of duplicated values, the first occurrence is\n        set on False and all others on True:\n\n        >>> animals = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama'])\n        >>> animals.duplicated()\n        0    False\n        1    False\n        2     True\n        3    False\n        4     True\n        dtype: bool\n\n        which is equivalent to\n\n        >>> animals.duplicated(keep='first')\n        0    False\n        1    False\n        2     True\n        3    False\n        4     True\n        dtype: bool\n\n        By using 'last', the last occurrence of each set of duplicated values\n        is set on False and all others on True:\n\n        >>> animals.duplicated(keep='last')\n        0     True\n        1    False\n        2     True\n        3    False\n        4    False\n        dtype: bool\n\n        By setting keep on ``False``, all duplicates are True:\n\n        >>> animals.duplicated(keep=False)\n        0     True\n        1    False\n        2     True\n        3    False\n        4     True\n        dtype: bool\n        \"\"\"\n        return super(Series, self).duplicated(keep=keep)\n\n    def idxmin(self, axis=0, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the row label of the minimum value.\n\n        If multiple values equal the minimum, the first row label with that\n        value is returned.\n\n        Parameters\n        ----------\n        skipna : bool, default True\n            Exclude NA/null values. If the entire Series is NA, the result\n            will be NA.\n        axis : int, default 0\n            For compatibility with DataFrame.idxmin. Redundant for application\n            on Series.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted\n            for compatibility with NumPy.\n\n        Returns\n        -------\n        Index\n            Label of the minimum value.\n\n        Raises\n        ------\n        ValueError\n            If the Series is empty.\n\n        See Also\n        --------\n        numpy.argmin : Return indices of the minimum values\n            along the given axis.\n        DataFrame.idxmin : Return index of first occurrence of minimum\n            over requested axis.\n        Series.idxmax : Return index *label* of the first occurrence\n            of maximum of values.\n\n        Notes\n        -----\n        This method is the Series version of ``ndarray.argmin``. This method\n        returns the label of the minimum, while ``ndarray.argmin`` returns\n        the position. To get the position, use ``series.values.argmin()``.\n\n        Examples\n        --------\n        >>> s = pd.Series(data=[1, None, 4, 1],\n        ...               index=['A', 'B', 'C', 'D'])\n        >>> s\n        A    1.0\n        B    NaN\n        C    4.0\n        D    1.0\n        dtype: float64\n\n        >>> s.idxmin()\n        'A'\n\n        If `skipna` is False and there is an NA value in the data,\n        the function returns ``nan``.\n\n        >>> s.idxmin(skipna=False)\n        nan\n        \"\"\"\n        skipna = nv.validate_argmin_with_skipna(skipna, args, kwargs)\n        i = nanops.nanargmin(com.values_from_object(self), skipna=skipna)\n        if i == -1:\n            return np.nan\n        return self.index[i]\n\n    def idxmax(self, axis=0, skipna=True, *args, **kwargs):\n        \"\"\"\n        Return the row label of the maximum value.\n\n        If multiple values equal the maximum, the first row label with that\n        value is returned.\n\n        Parameters\n        ----------\n        skipna : bool, default True\n            Exclude NA/null values. If the entire Series is NA, the result\n            will be NA.\n        axis : int, default 0\n            For compatibility with DataFrame.idxmax. Redundant for application\n            on Series.\n        *args, **kwargs\n            Additional keywords have no effect but might be accepted\n            for compatibility with NumPy.\n\n        Returns\n        -------\n        Index\n            Label of the maximum value.\n\n        Raises\n        ------\n        ValueError\n            If the Series is empty.\n\n        See Also\n        --------\n        numpy.argmax : Return indices of the maximum values\n            along the given axis.\n        DataFrame.idxmax : Return index of first occurrence of maximum\n            over requested axis.\n        Series.idxmin : Return index *label* of the first occurrence\n            of minimum of values.\n\n        Notes\n        -----\n        This method is the Series version of ``ndarray.argmax``. This method\n        returns the label of the maximum, while ``ndarray.argmax`` returns\n        the position. To get the position, use ``series.values.argmax()``.\n\n        Examples\n        --------\n        >>> s = pd.Series(data=[1, None, 4, 3, 4],\n        ...               index=['A', 'B', 'C', 'D', 'E'])\n        >>> s\n        A    1.0\n        B    NaN\n        C    4.0\n        D    3.0\n        E    4.0\n        dtype: float64\n\n        >>> s.idxmax()\n        'C'\n\n        If `skipna` is False and there is an NA value in the data,\n        the function returns ``nan``.\n\n        >>> s.idxmax(skipna=False)\n        nan\n        \"\"\"\n        skipna = nv.validate_argmax_with_skipna(skipna, args, kwargs)\n        i = nanops.nanargmax(com.values_from_object(self), skipna=skipna)\n        if i == -1:\n            return np.nan\n        return self.index[i]\n    argmin = deprecate('argmin', idxmin, '0.21.0', msg=dedent(\n        \"\"\"\n        The current behaviour of 'Series.argmin' is deprecated, use 'idxmin'\n        instead.\n        The behavior of 'argmin' will be corrected to return the positional\n        minimum in the future. For now, use 'series.values.argmin' or\n        'np.argmin(np.array(values))' to get the position of the minimum\n        row.\"\"\"\n        ))\n    argmax = deprecate('argmax', idxmax, '0.21.0', msg=dedent(\n        \"\"\"\n        The current behaviour of 'Series.argmax' is deprecated, use 'idxmax'\n        instead.\n        The behavior of 'argmax' will be corrected to return the positional\n        maximum in the future. For now, use 'series.values.argmax' or\n        'np.argmax(np.array(values))' to get the position of the maximum\n        row.\"\"\"\n        ))\n\n    def round(self, decimals=0, *args, **kwargs):\n        \"\"\"\n        Round each value in a Series to the given number of decimals.\n\n        Parameters\n        ----------\n        decimals : int\n            Number of decimal places to round to (default: 0).\n            If decimals is negative, it specifies the number of\n            positions to the left of the decimal point.\n\n        Returns\n        -------\n        Series\n            Rounded values of the Series.\n\n        See Also\n        --------\n        numpy.around : Round values of an np.array.\n        DataFrame.round : Round values of a DataFrame.\n\n        Examples\n        --------\n        >>> s = pd.Series([0.1, 1.3, 2.7])\n        >>> s.round()\n        0    0.0\n        1    1.0\n        2    3.0\n        dtype: float64\n        \"\"\"\n        nv.validate_round(args, kwargs)\n        result = com.values_from_object(self).round(decimals)\n        result = self._constructor(result, index=self.index).__finalize__(self)\n        return result\n\n    def quantile(self, q=0.5, interpolation='linear'):\n        \"\"\"\n        Return value at the given quantile.\n\n        Parameters\n        ----------\n        q : float or array-like, default 0.5 (50% quantile)\n            0 <= q <= 1, the quantile(s) to compute.\n        interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n            .. versionadded:: 0.18.0\n\n            This optional parameter specifies the interpolation method to use,\n            when the desired quantile lies between two data points `i` and `j`:\n\n                * linear: `i + (j - i) * fraction`, where `fraction` is the\n                  fractional part of the index surrounded by `i` and `j`.\n                * lower: `i`.\n                * higher: `j`.\n                * nearest: `i` or `j` whichever is nearest.\n                * midpoint: (`i` + `j`) / 2.\n\n        Returns\n        -------\n        float or Series\n            If ``q`` is an array, a Series will be returned where the\n            index is ``q`` and the values are the quantiles, otherwise\n            a float will be returned.\n\n        See Also\n        --------\n        core.window.Rolling.quantile\n        numpy.percentile\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4])\n        >>> s.quantile(.5)\n        2.5\n        >>> s.quantile([.25, .5, .75])\n        0.25    1.75\n        0.50    2.50\n        0.75    3.25\n        dtype: float64\n        \"\"\"\n        self._check_percentile(q)\n        df = self.to_frame()\n        result = df.quantile(q=q, interpolation=interpolation, numeric_only\n            =False)\n        if result.ndim == 2:\n            result = result.iloc[:, 0]\n        if is_list_like(q):\n            result.name = self.name\n            return self._constructor(result, index=Float64Index(q), name=\n                self.name)\n        else:\n            return result.iloc[0]\n\n    def corr(self, other, method='pearson', min_periods=None):\n        \"\"\"\n        Compute correlation with `other` Series, excluding missing values.\n\n        Parameters\n        ----------\n        other : Series\n            Series with which to compute the correlation.\n        method : {'pearson', 'kendall', 'spearman'} or callable\n            * pearson : standard correlation coefficient\n            * kendall : Kendall Tau correlation coefficient\n            * spearman : Spearman rank correlation\n            * callable: callable with input two 1d ndarray\n                and returning a float\n                .. versionadded:: 0.24.0\n\n        min_periods : int, optional\n            Minimum number of observations needed to have a valid result.\n\n        Returns\n        -------\n        float\n            Correlation with other.\n\n        Examples\n        --------\n        >>> def histogram_intersection(a, b):\n        ...     v = np.minimum(a, b).sum().round(decimals=1)\n        ...     return v\n        >>> s1 = pd.Series([.2, .0, .6, .2])\n        >>> s2 = pd.Series([.3, .6, .0, .1])\n        >>> s1.corr(s2, method=histogram_intersection)\n        0.3\n        \"\"\"\n        this, other = self.align(other, join='inner', copy=False)\n        if len(this) == 0:\n            return np.nan\n        if method in ['pearson', 'spearman', 'kendall'] or callable(method):\n            return nanops.nancorr(this.values, other.values, method=method,\n                min_periods=min_periods)\n        raise ValueError(\n            \"method must be either 'pearson', 'spearman', or 'kendall', '{method}' was supplied\"\n            .format(method=method))\n\n    def cov(self, other, min_periods=None):\n        \"\"\"\n        Compute covariance with Series, excluding missing values.\n\n        Parameters\n        ----------\n        other : Series\n            Series with which to compute the covariance.\n        min_periods : int, optional\n            Minimum number of observations needed to have a valid result.\n\n        Returns\n        -------\n        float\n            Covariance between Series and other normalized by N-1\n            (unbiased estimator).\n\n        Examples\n        --------\n        >>> s1 = pd.Series([0.90010907, 0.13484424, 0.62036035])\n        >>> s2 = pd.Series([0.12528585, 0.26962463, 0.51111198])\n        >>> s1.cov(s2)\n        -0.01685762652715874\n        \"\"\"\n        this, other = self.align(other, join='inner', copy=False)\n        if len(this) == 0:\n            return np.nan\n        return nanops.nancov(this.values, other.values, min_periods=min_periods\n            )\n\n    def diff(self, periods=1):\n        \"\"\"\n        First discrete difference of element.\n\n        Calculates the difference of a Series element compared with another\n        element in the Series (default is element in previous row).\n\n        Parameters\n        ----------\n        periods : int, default 1\n            Periods to shift for calculating difference, accepts negative\n            values.\n\n        Returns\n        -------\n        Series\n            First differences of the Series.\n\n        See Also\n        --------\n        Series.pct_change: Percent change over given number of periods.\n        Series.shift: Shift index by desired number of periods with an\n            optional time freq.\n        DataFrame.diff: First discrete difference of object.\n\n        Examples\n        --------\n        Difference with previous row\n\n        >>> s = pd.Series([1, 1, 2, 3, 5, 8])\n        >>> s.diff()\n        0    NaN\n        1    0.0\n        2    1.0\n        3    1.0\n        4    2.0\n        5    3.0\n        dtype: float64\n\n        Difference with 3rd previous row\n\n        >>> s.diff(periods=3)\n        0    NaN\n        1    NaN\n        2    NaN\n        3    2.0\n        4    4.0\n        5    6.0\n        dtype: float64\n\n        Difference with following row\n\n        >>> s.diff(periods=-1)\n        0    0.0\n        1   -1.0\n        2   -1.0\n        3   -2.0\n        4   -3.0\n        5    NaN\n        dtype: float64\n        \"\"\"\n        result = algorithms.diff(com.values_from_object(self), periods)\n        return self._constructor(result, index=self.index).__finalize__(self)\n\n    def autocorr(self, lag=1):\n        \"\"\"\n        Compute the lag-N autocorrelation.\n\n        This method computes the Pearson correlation between\n        the Series and its shifted self.\n\n        Parameters\n        ----------\n        lag : int, default 1\n            Number of lags to apply before performing autocorrelation.\n\n        Returns\n        -------\n        float\n            The Pearson correlation between self and self.shift(lag).\n\n        See Also\n        --------\n        Series.corr : Compute the correlation between two Series.\n        Series.shift : Shift index by desired number of periods.\n        DataFrame.corr : Compute pairwise correlation of columns.\n        DataFrame.corrwith : Compute pairwise correlation between rows or\n            columns of two DataFrame objects.\n\n        Notes\n        -----\n        If the Pearson correlation is not well defined return 'NaN'.\n\n        Examples\n        --------\n        >>> s = pd.Series([0.25, 0.5, 0.2, -0.05])\n        >>> s.autocorr()  # doctest: +ELLIPSIS\n        0.10355...\n        >>> s.autocorr(lag=2)  # doctest: +ELLIPSIS\n        -0.99999...\n\n        If the Pearson correlation is not well defined, then 'NaN' is returned.\n\n        >>> s = pd.Series([1, 0, 0, 0])\n        >>> s.autocorr()\n        nan\n        \"\"\"\n        return self.corr(self.shift(lag))\n\n    def dot(self, other):\n        \"\"\"\n        Compute the dot product between the Series and the columns of other.\n\n        This method computes the dot product between the Series and another\n        one, or the Series and each columns of a DataFrame, or the Series and\n        each columns of an array.\n\n        It can also be called using `self @ other` in Python >= 3.5.\n\n        Parameters\n        ----------\n        other : Series, DataFrame or array-like\n            The other object to compute the dot product with its columns.\n\n        Returns\n        -------\n        scalar, Series or numpy.ndarray\n            Return the dot product of the Series and other if other is a\n            Series, the Series of the dot product of Series and each rows of\n            other if other is a DataFrame or a numpy.ndarray between the Series\n            and each columns of the numpy array.\n\n        See Also\n        --------\n        DataFrame.dot: Compute the matrix product with the DataFrame.\n        Series.mul: Multiplication of series and other, element-wise.\n\n        Notes\n        -----\n        The Series and other has to share the same index if other is a Series\n        or a DataFrame.\n\n        Examples\n        --------\n        >>> s = pd.Series([0, 1, 2, 3])\n        >>> other = pd.Series([-1, 2, -3, 4])\n        >>> s.dot(other)\n        8\n        >>> s @ other\n        8\n        >>> df = pd.DataFrame([[0, 1], [-2, 3], [4, -5], [6, 7]])\n        >>> s.dot(df)\n        0    24\n        1    14\n        dtype: int64\n        >>> arr = np.array([[0, 1], [-2, 3], [4, -5], [6, 7]])\n        >>> s.dot(arr)\n        array([24, 14])\n        \"\"\"\n        from pandas.core.frame import DataFrame\n        if isinstance(other, (Series, DataFrame)):\n            common = self.index.union(other.index)\n            if len(common) > len(self.index) or len(common) > len(other.index):\n                raise ValueError('matrices are not aligned')\n            left = self.reindex(index=common, copy=False)\n            right = other.reindex(index=common, copy=False)\n            lvals = left.values\n            rvals = right.values\n        else:\n            lvals = self.values\n            rvals = np.asarray(other)\n            if lvals.shape[0] != rvals.shape[0]:\n                raise Exception('Dot product shape mismatch, %s vs %s' % (\n                    lvals.shape, rvals.shape))\n        if isinstance(other, DataFrame):\n            return self._constructor(np.dot(lvals, rvals), index=other.columns\n                ).__finalize__(self)\n        elif isinstance(other, Series):\n            return np.dot(lvals, rvals)\n        elif isinstance(rvals, np.ndarray):\n            return np.dot(lvals, rvals)\n        else:\n            raise TypeError('unsupported type: %s' % type(other))\n\n    def __matmul__(self, other):\n        \"\"\"\n        Matrix multiplication using binary `@` operator in Python>=3.5.\n        \"\"\"\n        return self.dot(other)\n\n    def __rmatmul__(self, other):\n        \"\"\"\n        Matrix multiplication using binary `@` operator in Python>=3.5.\n        \"\"\"\n        return self.dot(np.transpose(other))\n\n    @Substitution(klass='Series')\n    @Appender(base._shared_docs['searchsorted'])\n    def searchsorted(self, value, side='left', sorter=None):\n        return algorithms.searchsorted(self._values, value, side=side,\n            sorter=sorter)\n\n    def append(self, to_append, ignore_index=False, verify_integrity=False):\n        \"\"\"\n        Concatenate two or more Series.\n\n        Parameters\n        ----------\n        to_append : Series or list/tuple of Series\n            Series to append with self.\n        ignore_index : bool, default False\n            If True, do not use the index labels.\n\n            .. versionadded:: 0.19.0\n\n        verify_integrity : bool, default False\n            If True, raise Exception on creating index with duplicates.\n\n        Returns\n        -------\n        Series\n            Concatenated Series.\n\n        See Also\n        --------\n        concat : General function to concatenate DataFrame, Series\n            or Panel objects.\n\n        Notes\n        -----\n        Iteratively appending to a Series can be more computationally intensive\n        than a single concatenate. A better solution is to append values to a\n        list and then concatenate the list with the original Series all at\n        once.\n\n        Examples\n        --------\n        >>> s1 = pd.Series([1, 2, 3])\n        >>> s2 = pd.Series([4, 5, 6])\n        >>> s3 = pd.Series([4, 5, 6], index=[3, 4, 5])\n        >>> s1.append(s2)\n        0    1\n        1    2\n        2    3\n        0    4\n        1    5\n        2    6\n        dtype: int64\n\n        >>> s1.append(s3)\n        0    1\n        1    2\n        2    3\n        3    4\n        4    5\n        5    6\n        dtype: int64\n\n        With `ignore_index` set to True:\n\n        >>> s1.append(s2, ignore_index=True)\n        0    1\n        1    2\n        2    3\n        3    4\n        4    5\n        5    6\n        dtype: int64\n\n        With `verify_integrity` set to True:\n\n        >>> s1.append(s2, verify_integrity=True)\n        Traceback (most recent call last):\n        ...\n        ValueError: Indexes have overlapping values: [0, 1, 2]\n        \"\"\"\n        from pandas.core.reshape.concat import concat\n        if isinstance(to_append, (list, tuple)):\n            to_concat = [self] + to_append\n        else:\n            to_concat = [self, to_append]\n        return concat(to_concat, ignore_index=ignore_index,\n            verify_integrity=verify_integrity)\n\n    def _binop(self, other, func, level=None, fill_value=None):\n        \"\"\"\n        Perform generic binary operation with optional fill value.\n\n        Parameters\n        ----------\n        other : Series\n        func : binary operator\n        fill_value : float or object\n            Value to substitute for NA/null values. If both Series are NA in a\n            location, the result will be NA regardless of the passed fill value\n        level : int or level name, default None\n            Broadcast across a level, matching Index values on the\n            passed MultiIndex level\n\n        Returns\n        -------\n        Series\n        \"\"\"\n        if not isinstance(other, Series):\n            raise AssertionError('Other operand must be Series')\n        new_index = self.index\n        this = self\n        if not self.index.equals(other.index):\n            this, other = self.align(other, level=level, join='outer', copy\n                =False)\n            new_index = this.index\n        this_vals, other_vals = ops.fill_binop(this.values, other.values,\n            fill_value)\n        with np.errstate(all='ignore'):\n            result = func(this_vals, other_vals)\n        name = ops.get_op_result_name(self, other)\n        result = self._constructor(result, index=new_index, name=name)\n        result = result.__finalize__(self)\n        if name is None:\n            result.name = None\n        return result\n\n    def combine(self, other, func, fill_value=None):\n        \"\"\"\n        Combine the Series with a Series or scalar according to `func`.\n\n        Combine the Series and `other` using `func` to perform elementwise\n        selection for combined Series.\n        `fill_value` is assumed when value is missing at some index\n        from one of the two objects being combined.\n\n        Parameters\n        ----------\n        other : Series or scalar\n            The value(s) to be combined with the `Series`.\n        func : function\n            Function that takes two scalars as inputs and returns an element.\n        fill_value : scalar, optional\n            The value to assume when an index is missing from\n            one Series or the other. The default specifies to use the\n            appropriate NaN value for the underlying dtype of the Series.\n\n        Returns\n        -------\n        Series\n            The result of combining the Series with the other object.\n\n        See Also\n        --------\n        Series.combine_first : Combine Series values, choosing the calling\n            Series' values first.\n\n        Examples\n        --------\n        Consider 2 Datasets ``s1`` and ``s2`` containing\n        highest clocked speeds of different birds.\n\n        >>> s1 = pd.Series({'falcon': 330.0, 'eagle': 160.0})\n        >>> s1\n        falcon    330.0\n        eagle     160.0\n        dtype: float64\n        >>> s2 = pd.Series({'falcon': 345.0, 'eagle': 200.0, 'duck': 30.0})\n        >>> s2\n        falcon    345.0\n        eagle     200.0\n        duck       30.0\n        dtype: float64\n\n        Now, to combine the two datasets and view the highest speeds\n        of the birds across the two datasets\n\n        >>> s1.combine(s2, max)\n        duck        NaN\n        eagle     200.0\n        falcon    345.0\n        dtype: float64\n\n        In the previous example, the resulting value for duck is missing,\n        because the maximum of a NaN and a float is a NaN.\n        So, in the example, we set ``fill_value=0``,\n        so the maximum value returned will be the value from some dataset.\n\n        >>> s1.combine(s2, max, fill_value=0)\n        duck       30.0\n        eagle     200.0\n        falcon    345.0\n        dtype: float64\n        \"\"\"\n        if fill_value is None:\n            fill_value = na_value_for_dtype(self.dtype, compat=False)\n        if isinstance(other, Series):\n            new_index = self.index.union(other.index)\n            new_name = ops.get_op_result_name(self, other)\n            new_values = []\n            for idx in new_index:\n                lv = self.get(idx, fill_value)\n                rv = other.get(idx, fill_value)\n                with np.errstate(all='ignore'):\n                    new_values.append(func(lv, rv))\n        else:\n            new_index = self.index\n            with np.errstate(all='ignore'):\n                new_values = [func(lv, other) for lv in self._values]\n            new_name = self.name\n        if is_categorical_dtype(self.values):\n            pass\n        elif is_extension_array_dtype(self.values):\n            try:\n                new_values = self._values._from_sequence(new_values)\n            except Exception:\n                pass\n        return self._constructor(new_values, index=new_index, name=new_name)\n\n    def combine_first(self, other):\n        \"\"\"\n        Combine Series values, choosing the calling Series's values first.\n\n        Parameters\n        ----------\n        other : Series\n            The value(s) to be combined with the `Series`.\n\n        Returns\n        -------\n        Series\n            The result of combining the Series with the other object.\n\n        See Also\n        --------\n        Series.combine : Perform elementwise operation on two Series\n            using a given function.\n\n        Notes\n        -----\n        Result index will be the union of the two indexes.\n\n        Examples\n        --------\n        >>> s1 = pd.Series([1, np.nan])\n        >>> s2 = pd.Series([3, 4])\n        >>> s1.combine_first(s2)\n        0    1.0\n        1    4.0\n        dtype: float64\n        \"\"\"\n        new_index = self.index.union(other.index)\n        this = self.reindex(new_index, copy=False)\n        other = other.reindex(new_index, copy=False)\n        if is_datetimelike(this) and not is_datetimelike(other):\n            other = to_datetime(other)\n        return this.where(notna(this), other)\n\n    def update(self, other):\n        \"\"\"\n        Modify Series in place using non-NA values from passed\n        Series. Aligns on index.\n\n        Parameters\n        ----------\n        other : Series\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3])\n        >>> s.update(pd.Series([4, 5, 6]))\n        >>> s\n        0    4\n        1    5\n        2    6\n        dtype: int64\n\n        >>> s = pd.Series(['a', 'b', 'c'])\n        >>> s.update(pd.Series(['d', 'e'], index=[0, 2]))\n        >>> s\n        0    d\n        1    b\n        2    e\n        dtype: object\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s.update(pd.Series([4, 5, 6, 7, 8]))\n        >>> s\n        0    4\n        1    5\n        2    6\n        dtype: int64\n\n        If ``other`` contains NaNs the corresponding values are not updated\n        in the original Series.\n\n        >>> s = pd.Series([1, 2, 3])\n        >>> s.update(pd.Series([4, np.nan, 6]))\n        >>> s\n        0    4\n        1    2\n        2    6\n        dtype: int64\n        \"\"\"\n        other = other.reindex_like(self)\n        mask = notna(other)\n        self._data = self._data.putmask(mask=mask, new=other, inplace=True)\n        self._maybe_update_cacher()\n\n    def sort_values(self, axis=0, ascending=True, inplace=False, kind=\n        'quicksort', na_position='last'):\n        \"\"\"\n        Sort by the values.\n\n        Sort a Series in ascending or descending order by some\n        criterion.\n\n        Parameters\n        ----------\n        axis : {0 or 'index'}, default 0\n            Axis to direct sorting. The value 'index' is accepted for\n            compatibility with DataFrame.sort_values.\n        ascending : bool, default True\n            If True, sort values in ascending order, otherwise descending.\n        inplace : bool, default False\n            If True, perform operation in-place.\n        kind : {'quicksort', 'mergesort' or 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See also :func:`numpy.sort` for more\n            information. 'mergesort' is the only stable  algorithm.\n        na_position : {'first' or 'last'}, default 'last'\n            Argument 'first' puts NaNs at the beginning, 'last' puts NaNs at\n            the end.\n\n        Returns\n        -------\n        Series\n            Series ordered by values.\n\n        See Also\n        --------\n        Series.sort_index : Sort by the Series indices.\n        DataFrame.sort_values : Sort DataFrame by the values along either axis.\n        DataFrame.sort_index : Sort DataFrame by indices.\n\n        Examples\n        --------\n        >>> s = pd.Series([np.nan, 1, 3, 10, 5])\n        >>> s\n        0     NaN\n        1     1.0\n        2     3.0\n        3     10.0\n        4     5.0\n        dtype: float64\n\n        Sort values ascending order (default behaviour)\n\n        >>> s.sort_values(ascending=True)\n        1     1.0\n        2     3.0\n        4     5.0\n        3    10.0\n        0     NaN\n        dtype: float64\n\n        Sort values descending order\n\n        >>> s.sort_values(ascending=False)\n        3    10.0\n        4     5.0\n        2     3.0\n        1     1.0\n        0     NaN\n        dtype: float64\n\n        Sort values inplace\n\n        >>> s.sort_values(ascending=False, inplace=True)\n        >>> s\n        3    10.0\n        4     5.0\n        2     3.0\n        1     1.0\n        0     NaN\n        dtype: float64\n\n        Sort values putting NAs first\n\n        >>> s.sort_values(na_position='first')\n        0     NaN\n        1     1.0\n        2     3.0\n        4     5.0\n        3    10.0\n        dtype: float64\n\n        Sort a series of strings\n\n        >>> s = pd.Series(['z', 'b', 'd', 'a', 'c'])\n        >>> s\n        0    z\n        1    b\n        2    d\n        3    a\n        4    c\n        dtype: object\n\n        >>> s.sort_values()\n        3    a\n        1    b\n        4    c\n        2    d\n        0    z\n        dtype: object\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        self._get_axis_number(axis)\n        if inplace and self._is_cached:\n            raise ValueError(\n                'This Series is a view of some other array, to sort in-place you must create a copy'\n                )\n\n        def _try_kind_sort(arr):\n            try:\n                return arr.argsort(kind=kind)\n            except TypeError:\n                return arr.argsort(kind='quicksort')\n        arr = self._values\n        sortedIdx = np.empty(len(self), dtype=np.int32)\n        bad = isna(arr)\n        good = ~bad\n        idx = ibase.default_index(len(self))\n        argsorted = _try_kind_sort(arr[good])\n        if is_list_like(ascending):\n            if len(ascending) != 1:\n                raise ValueError(\n                    'Length of ascending (%d) must be 1 for Series' % len(\n                    ascending))\n            ascending = ascending[0]\n        if not is_bool(ascending):\n            raise ValueError('ascending must be boolean')\n        if not ascending:\n            argsorted = argsorted[::-1]\n        if na_position == 'last':\n            n = good.sum()\n            sortedIdx[:n] = idx[good][argsorted]\n            sortedIdx[n:] = idx[bad]\n        elif na_position == 'first':\n            n = bad.sum()\n            sortedIdx[n:] = idx[good][argsorted]\n            sortedIdx[:n] = idx[bad]\n        else:\n            raise ValueError('invalid na_position: {!r}'.format(na_position))\n        result = self._constructor(arr[sortedIdx], index=self.index[sortedIdx])\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result.__finalize__(self)\n\n    def sort_index(self, axis=0, level=None, ascending=True, inplace=False,\n        kind='quicksort', na_position='last', sort_remaining=True):\n        \"\"\"\n        Sort Series by index labels.\n\n        Returns a new Series sorted by label if `inplace` argument is\n        ``False``, otherwise updates the original series and returns None.\n\n        Parameters\n        ----------\n        axis : int, default 0\n            Axis to direct sorting. This can only be 0 for Series.\n        level : int, optional\n            If not None, sort on values in specified index level(s).\n        ascending : bool, default true\n            Sort ascending vs. descending.\n        inplace : bool, default False\n            If True, perform operation in-place.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See also :func:`numpy.sort` for more\n            information.  'mergesort' is the only stable algorithm. For\n            DataFrames, this option is only applied when sorting on a single\n            column or label.\n        na_position : {'first', 'last'}, default 'last'\n            If 'first' puts NaNs at the beginning, 'last' puts NaNs at the end.\n            Not implemented for MultiIndex.\n        sort_remaining : bool, default True\n            If True and sorting by level and index is multilevel, sort by other\n            levels too (in order) after sorting by specified level.\n\n        Returns\n        -------\n        Series\n            The original Series sorted by the labels.\n\n        See Also\n        --------\n        DataFrame.sort_index: Sort DataFrame by the index.\n        DataFrame.sort_values: Sort DataFrame by the value.\n        Series.sort_values : Sort Series by the value.\n\n        Examples\n        --------\n        >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, 4])\n        >>> s.sort_index()\n        1    c\n        2    b\n        3    a\n        4    d\n        dtype: object\n\n        Sort Descending\n\n        >>> s.sort_index(ascending=False)\n        4    d\n        3    a\n        2    b\n        1    c\n        dtype: object\n\n        Sort Inplace\n\n        >>> s.sort_index(inplace=True)\n        >>> s\n        1    c\n        2    b\n        3    a\n        4    d\n        dtype: object\n\n        By default NaNs are put at the end, but use `na_position` to place\n        them at the beginning\n\n        >>> s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, np.nan])\n        >>> s.sort_index(na_position='first')\n        NaN     d\n         1.0    c\n         2.0    b\n         3.0    a\n        dtype: object\n\n        Specify index level to sort\n\n        >>> arrays = [np.array(['qux', 'qux', 'foo', 'foo',\n        ...                     'baz', 'baz', 'bar', 'bar']),\n        ...           np.array(['two', 'one', 'two', 'one',\n        ...                     'two', 'one', 'two', 'one'])]\n        >>> s = pd.Series([1, 2, 3, 4, 5, 6, 7, 8], index=arrays)\n        >>> s.sort_index(level=1)\n        bar  one    8\n        baz  one    6\n        foo  one    4\n        qux  one    2\n        bar  two    7\n        baz  two    5\n        foo  two    3\n        qux  two    1\n        dtype: int64\n\n        Does not sort by remaining levels when sorting by levels\n\n        >>> s.sort_index(level=1, sort_remaining=False)\n        qux  one    2\n        foo  one    4\n        baz  one    6\n        bar  one    8\n        qux  two    1\n        foo  two    3\n        baz  two    5\n        bar  two    7\n        dtype: int64\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        self._get_axis_number(axis)\n        index = self.index\n        if level is not None:\n            new_index, indexer = index.sortlevel(level, ascending=ascending,\n                sort_remaining=sort_remaining)\n        elif isinstance(index, MultiIndex):\n            from pandas.core.sorting import lexsort_indexer\n            labels = index._sort_levels_monotonic()\n            indexer = lexsort_indexer(labels._get_codes_for_sorting(),\n                orders=ascending, na_position=na_position)\n        else:\n            from pandas.core.sorting import nargsort\n            if (ascending and index.is_monotonic_increasing or not\n                ascending and index.is_monotonic_decreasing):\n                if inplace:\n                    return\n                else:\n                    return self.copy()\n            indexer = nargsort(index, kind=kind, ascending=ascending,\n                na_position=na_position)\n        indexer = ensure_platform_int(indexer)\n        new_index = index.take(indexer)\n        new_index = new_index._sort_levels_monotonic()\n        new_values = self._values.take(indexer)\n        result = self._constructor(new_values, index=new_index)\n        if inplace:\n            self._update_inplace(result)\n        else:\n            return result.__finalize__(self)\n\n    def argsort(self, axis=0, kind='quicksort', order=None):\n        \"\"\"\n        Override ndarray.argsort. Argsorts the value, omitting NA/null values,\n        and places the result in the same locations as the non-NA values.\n\n        Parameters\n        ----------\n        axis : int\n            Has no effect but is accepted for compatibility with numpy.\n        kind : {'mergesort', 'quicksort', 'heapsort'}, default 'quicksort'\n            Choice of sorting algorithm. See np.sort for more\n            information. 'mergesort' is the only stable algorithm\n        order : None\n            Has no effect but is accepted for compatibility with numpy.\n\n        Returns\n        -------\n        Series\n            Positions of values within the sort order with -1 indicating\n            nan values.\n\n        See Also\n        --------\n        numpy.ndarray.argsort\n        \"\"\"\n        values = self._values\n        mask = isna(values)\n        if mask.any():\n            result = Series(-1, index=self.index, name=self.name, dtype='int64'\n                )\n            notmask = ~mask\n            result[notmask] = np.argsort(values[notmask], kind=kind)\n            return self._constructor(result, index=self.index).__finalize__(\n                self)\n        else:\n            return self._constructor(np.argsort(values, kind=kind), index=\n                self.index, dtype='int64').__finalize__(self)\n\n    def nlargest(self, n=5, keep='first'):\n        \"\"\"\n        Return the largest `n` elements.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Return this many descending sorted values.\n        keep : {'first', 'last', 'all'}, default 'first'\n            When there are duplicate values that cannot all fit in a\n            Series of `n` elements:\n\n            - ``first`` : return the first `n` occurrences in order\n                of appearance.\n            - ``last`` : return the last `n` occurrences in reverse\n                order of appearance.\n            - ``all`` : keep all occurrences. This can result in a Series of\n                size larger than `n`.\n\n        Returns\n        -------\n        Series\n            The `n` largest values in the Series, sorted in decreasing order.\n\n        See Also\n        --------\n        Series.nsmallest: Get the `n` smallest elements.\n        Series.sort_values: Sort Series by values.\n        Series.head: Return the first `n` rows.\n\n        Notes\n        -----\n        Faster than ``.sort_values(ascending=False).head(n)`` for small `n`\n        relative to the size of the ``Series`` object.\n\n        Examples\n        --------\n        >>> countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n        ...                         \"Malta\": 434000, \"Maldives\": 434000,\n        ...                         \"Brunei\": 434000, \"Iceland\": 337000,\n        ...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n        ...                         \"Anguilla\": 11300, \"Monserat\": 5200}\n        >>> s = pd.Series(countries_population)\n        >>> s\n        Italy       59000000\n        France      65000000\n        Malta         434000\n        Maldives      434000\n        Brunei        434000\n        Iceland       337000\n        Nauru          11300\n        Tuvalu         11300\n        Anguilla       11300\n        Monserat        5200\n        dtype: int64\n\n        The `n` largest elements where ``n=5`` by default.\n\n        >>> s.nlargest()\n        France      65000000\n        Italy       59000000\n        Malta         434000\n        Maldives      434000\n        Brunei        434000\n        dtype: int64\n\n        The `n` largest elements where ``n=3``. Default `keep` value is 'first'\n        so Malta will be kept.\n\n        >>> s.nlargest(3)\n        France    65000000\n        Italy     59000000\n        Malta       434000\n        dtype: int64\n\n        The `n` largest elements where ``n=3`` and keeping the last duplicates.\n        Brunei will be kept since it is the last with value 434000 based on\n        the index order.\n\n        >>> s.nlargest(3, keep='last')\n        France      65000000\n        Italy       59000000\n        Brunei        434000\n        dtype: int64\n\n        The `n` largest elements where ``n=3`` with all duplicates kept. Note\n        that the returned Series has five elements due to the three duplicates.\n\n        >>> s.nlargest(3, keep='all')\n        France      65000000\n        Italy       59000000\n        Malta         434000\n        Maldives      434000\n        Brunei        434000\n        dtype: int64\n        \"\"\"\n        return algorithms.SelectNSeries(self, n=n, keep=keep).nlargest()\n\n    def nsmallest(self, n=5, keep='first'):\n        \"\"\"\n        Return the smallest `n` elements.\n\n        Parameters\n        ----------\n        n : int, default 5\n            Return this many ascending sorted values.\n        keep : {'first', 'last', 'all'}, default 'first'\n            When there are duplicate values that cannot all fit in a\n            Series of `n` elements:\n\n            - ``first`` : return the first `n` occurrences in order\n                of appearance.\n            - ``last`` : return the last `n` occurrences in reverse\n                order of appearance.\n            - ``all`` : keep all occurrences. This can result in a Series of\n                size larger than `n`.\n\n        Returns\n        -------\n        Series\n            The `n` smallest values in the Series, sorted in increasing order.\n\n        See Also\n        --------\n        Series.nlargest: Get the `n` largest elements.\n        Series.sort_values: Sort Series by values.\n        Series.head: Return the first `n` rows.\n\n        Notes\n        -----\n        Faster than ``.sort_values().head(n)`` for small `n` relative to\n        the size of the ``Series`` object.\n\n        Examples\n        --------\n        >>> countries_population = {\"Italy\": 59000000, \"France\": 65000000,\n        ...                         \"Brunei\": 434000, \"Malta\": 434000,\n        ...                         \"Maldives\": 434000, \"Iceland\": 337000,\n        ...                         \"Nauru\": 11300, \"Tuvalu\": 11300,\n        ...                         \"Anguilla\": 11300, \"Monserat\": 5200}\n        >>> s = pd.Series(countries_population)\n        >>> s\n        Italy       59000000\n        France      65000000\n        Brunei        434000\n        Malta         434000\n        Maldives      434000\n        Iceland       337000\n        Nauru          11300\n        Tuvalu         11300\n        Anguilla       11300\n        Monserat        5200\n        dtype: int64\n\n        The `n` smallest elements where ``n=5`` by default.\n\n        >>> s.nsmallest()\n        Monserat      5200\n        Nauru        11300\n        Tuvalu       11300\n        Anguilla     11300\n        Iceland     337000\n        dtype: int64\n\n        The `n` smallest elements where ``n=3``. Default `keep` value is\n        'first' so Nauru and Tuvalu will be kept.\n\n        >>> s.nsmallest(3)\n        Monserat     5200\n        Nauru       11300\n        Tuvalu      11300\n        dtype: int64\n\n        The `n` smallest elements where ``n=3`` and keeping the last\n        duplicates. Anguilla and Tuvalu will be kept since they are the last\n        with value 11300 based on the index order.\n\n        >>> s.nsmallest(3, keep='last')\n        Monserat     5200\n        Anguilla    11300\n        Tuvalu      11300\n        dtype: int64\n\n        The `n` smallest elements where ``n=3`` with all duplicates kept. Note\n        that the returned Series has four elements due to the three duplicates.\n\n        >>> s.nsmallest(3, keep='all')\n        Monserat     5200\n        Nauru       11300\n        Tuvalu      11300\n        Anguilla    11300\n        dtype: int64\n        \"\"\"\n        return algorithms.SelectNSeries(self, n=n, keep=keep).nsmallest()\n\n    def swaplevel(self, i=-2, j=-1, copy=True):\n        \"\"\"\n        Swap levels i and j in a MultiIndex.\n\n        Parameters\n        ----------\n        i, j : int, str (can be mixed)\n            Level of index to be swapped. Can pass level name as string.\n\n        Returns\n        -------\n        Series\n            Series with levels swapped in MultiIndex.\n\n        .. versionchanged:: 0.18.1\n\n           The indexes ``i`` and ``j`` are now optional, and default to\n           the two innermost levels of the index.\n        \"\"\"\n        new_index = self.index.swaplevel(i, j)\n        return self._constructor(self._values, index=new_index, copy=copy\n            ).__finalize__(self)\n\n    def reorder_levels(self, order):\n        \"\"\"\n        Rearrange index levels using input order.\n\n        May not drop or duplicate levels.\n\n        Parameters\n        ----------\n        order : list of int representing new level order\n               (reference level by number or key)\n\n        Returns\n        -------\n        type of caller (new object)\n        \"\"\"\n        if not isinstance(self.index, MultiIndex):\n            raise Exception('Can only reorder levels on a hierarchical axis.')\n        result = self.copy()\n        result.index = result.index.reorder_levels(order)\n        return result\n\n    def unstack(self, level=-1, fill_value=None):\n        \"\"\"\n        Unstack, a.k.a. pivot, Series with MultiIndex to produce DataFrame.\n        The level involved will automatically get sorted.\n\n        Parameters\n        ----------\n        level : int, str, or list of these, default last level\n            Level(s) to unstack, can pass level name.\n        fill_value : scalar value, default None\n            Value to use when replacing NaN values.\n\n            .. versionadded:: 0.18.0\n\n        Returns\n        -------\n        DataFrame\n            Unstacked Series.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3, 4],\n        ...               index=pd.MultiIndex.from_product([['one', 'two'],\n        ...                                                 ['a', 'b']]))\n        >>> s\n        one  a    1\n             b    2\n        two  a    3\n             b    4\n        dtype: int64\n\n        >>> s.unstack(level=-1)\n             a  b\n        one  1  2\n        two  3  4\n\n        >>> s.unstack(level=0)\n           one  two\n        a    1    3\n        b    2    4\n        \"\"\"\n        from pandas.core.reshape.reshape import unstack\n        return unstack(self, level, fill_value)\n\n    def map(self, arg, na_action=None):\n        \"\"\"\n        Map values of Series according to input correspondence.\n\n        Used for substituting each value in a Series with another value,\n        that may be derived from a function, a ``dict`` or\n        a :class:`Series`.\n\n        Parameters\n        ----------\n        arg : function, dict, or Series\n            Mapping correspondence.\n        na_action : {None, 'ignore'}, default None\n            If 'ignore', propagate NaN values, without passing them to the\n            mapping correspondence.\n\n        Returns\n        -------\n        Series\n            Same index as caller.\n\n        See Also\n        --------\n        Series.apply : For applying more complex functions on a Series.\n        DataFrame.apply : Apply a function row-/column-wise.\n        DataFrame.applymap : Apply a function elementwise on a whole DataFrame.\n\n        Notes\n        -----\n        When ``arg`` is a dictionary, values in Series that are not in the\n        dictionary (as keys) are converted to ``NaN``. However, if the\n        dictionary is a ``dict`` subclass that defines ``__missing__`` (i.e.\n        provides a method for default values), then this default is used\n        rather than ``NaN``.\n\n        Examples\n        --------\n        >>> s = pd.Series(['cat', 'dog', np.nan, 'rabbit'])\n        >>> s\n        0      cat\n        1      dog\n        2      NaN\n        3   rabbit\n        dtype: object\n\n        ``map`` accepts a ``dict`` or a ``Series``. Values that are not found\n        in the ``dict`` are converted to ``NaN``, unless the dict has a default\n        value (e.g. ``defaultdict``):\n\n        >>> s.map({'cat': 'kitten', 'dog': 'puppy'})\n        0   kitten\n        1    puppy\n        2      NaN\n        3      NaN\n        dtype: object\n\n        It also accepts a function:\n\n        >>> s.map('I am a {}'.format)\n        0       I am a cat\n        1       I am a dog\n        2       I am a nan\n        3    I am a rabbit\n        dtype: object\n\n        To avoid applying the function to missing values (and keep them as\n        ``NaN``) ``na_action='ignore'`` can be used:\n\n        >>> s.map('I am a {}'.format, na_action='ignore')\n        0     I am a cat\n        1     I am a dog\n        2            NaN\n        3  I am a rabbit\n        dtype: object\n        \"\"\"\n        new_values = super(Series, self)._map_values(arg, na_action=na_action)\n        return self._constructor(new_values, index=self.index).__finalize__(\n            self)\n\n    def _gotitem(self, key, ndim, subset=None):\n        \"\"\"\n        Sub-classes to define. Return a sliced object.\n\n        Parameters\n        ----------\n        key : string / list of selections\n        ndim : 1,2\n            requested ndim of result\n        subset : object, default None\n            subset to act on\n        \"\"\"\n        return self\n    _agg_see_also_doc = dedent(\n        \"\"\"\n    See Also\n    --------\n    Series.apply : Invoke function on a Series.\n    Series.transform : Transform function producing a Series with like indexes.\n    \"\"\"\n        )\n    _agg_examples_doc = dedent(\n        \"\"\"\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n\n    >>> s.agg('min')\n    1\n\n    >>> s.agg(['min', 'max'])\n    min   1\n    max   4\n    dtype: int64\n    \"\"\"\n        )\n\n    @Substitution(see_also=_agg_see_also_doc, examples=_agg_examples_doc,\n        versionadded='.. versionadded:: 0.20.0', **_shared_doc_kwargs)\n    @Appender(generic._shared_docs['aggregate'])\n    def aggregate(self, func, axis=0, *args, **kwargs):\n        self._get_axis_number(axis)\n        result, how = self._aggregate(func, *args, **kwargs)\n        if result is None:\n            kwargs.pop('_axis', None)\n            kwargs.pop('_level', None)\n            try:\n                result = self.apply(func, *args, **kwargs)\n            except (ValueError, AttributeError, TypeError):\n                result = func(self, *args, **kwargs)\n        return result\n    agg = aggregate\n\n    @Appender(generic._shared_docs['transform'] % _shared_doc_kwargs)\n    def transform(self, func, axis=0, *args, **kwargs):\n        self._get_axis_number(axis)\n        return super(Series, self).transform(func, *args, **kwargs)\n\n    def apply(self, func, convert_dtype=True, args=(), **kwds):\n        \"\"\"\n        Invoke function on values of Series.\n\n        Can be ufunc (a NumPy function that applies to the entire Series)\n        or a Python function that only works on single values.\n\n        Parameters\n        ----------\n        func : function\n            Python function or NumPy ufunc to apply.\n        convert_dtype : bool, default True\n            Try to find better dtype for elementwise function results. If\n            False, leave as dtype=object.\n        args : tuple\n            Positional arguments passed to func after the series value.\n        **kwds\n            Additional keyword arguments passed to func.\n\n        Returns\n        -------\n        Series or DataFrame\n            If func returns a Series object the result will be a DataFrame.\n\n        See Also\n        --------\n        Series.map: For element-wise operations.\n        Series.agg: Only perform aggregating type operations.\n        Series.transform: Only perform transforming type operations.\n\n        Examples\n        --------\n        Create a series with typical summer temperatures for each city.\n\n        >>> s = pd.Series([20, 21, 12],\n        ...               index=['London', 'New York', 'Helsinki'])\n        >>> s\n        London      20\n        New York    21\n        Helsinki    12\n        dtype: int64\n\n        Square the values by defining a function and passing it as an\n        argument to ``apply()``.\n\n        >>> def square(x):\n        ...     return x ** 2\n        >>> s.apply(square)\n        London      400\n        New York    441\n        Helsinki    144\n        dtype: int64\n\n        Square the values by passing an anonymous function as an\n        argument to ``apply()``.\n\n        >>> s.apply(lambda x: x ** 2)\n        London      400\n        New York    441\n        Helsinki    144\n        dtype: int64\n\n        Define a custom function that needs additional positional\n        arguments and pass these additional arguments using the\n        ``args`` keyword.\n\n        >>> def subtract_custom_value(x, custom_value):\n        ...     return x - custom_value\n\n        >>> s.apply(subtract_custom_value, args=(5,))\n        London      15\n        New York    16\n        Helsinki     7\n        dtype: int64\n\n        Define a custom function that takes keyword arguments\n        and pass these arguments to ``apply``.\n\n        >>> def add_custom_values(x, **kwargs):\n        ...     for month in kwargs:\n        ...         x += kwargs[month]\n        ...     return x\n\n        >>> s.apply(add_custom_values, june=30, july=20, august=25)\n        London      95\n        New York    96\n        Helsinki    87\n        dtype: int64\n\n        Use a function from the Numpy library.\n\n        >>> s.apply(np.log)\n        London      2.995732\n        New York    3.044522\n        Helsinki    2.484907\n        dtype: float64\n        \"\"\"\n        if len(self) == 0:\n            return self._constructor(dtype=self.dtype, index=self.index\n                ).__finalize__(self)\n        if isinstance(func, (list, dict)):\n            return self.aggregate(func, *args, **kwds)\n        if isinstance(func, compat.string_types):\n            return self._try_aggregate_string_function(func, *args, **kwds)\n        if kwds or args and not isinstance(func, np.ufunc):\n\n            def f(x):\n                return func(x, *args, **kwds)\n        else:\n            f = func\n        with np.errstate(all='ignore'):\n            if isinstance(f, np.ufunc):\n                return f(self)\n            if is_extension_type(self.dtype):\n                mapped = self._values.map(f)\n            else:\n                values = self.astype(object).values\n                mapped = lib.map_infer(values, f, convert=convert_dtype)\n        if len(mapped) and isinstance(mapped[0], Series):\n            from pandas.core.frame import DataFrame\n            return DataFrame(mapped.tolist(), index=self.index)\n        else:\n            return self._constructor(mapped, index=self.index).__finalize__(\n                self)\n\n    def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None,\n        filter_type=None, **kwds):\n        \"\"\"\n        Perform a reduction operation.\n\n        If we have an ndarray as a value, then simply perform the operation,\n        otherwise delegate to the object.\n        \"\"\"\n        delegate = self._values\n        if axis is not None:\n            self._get_axis_number(axis)\n        if isinstance(delegate, Categorical):\n            return delegate._reduce(name, numeric_only=numeric_only, **kwds)\n        elif isinstance(delegate, ExtensionArray):\n            return delegate._reduce(name, skipna=skipna, **kwds)\n        elif is_datetime64_dtype(delegate):\n            delegate = DatetimeIndex(delegate)\n        elif isinstance(delegate, np.ndarray):\n            if numeric_only:\n                raise NotImplementedError(\n                    'Series.{0} does not implement numeric_only.'.format(name))\n            with np.errstate(all='ignore'):\n                return op(delegate, skipna=skipna, **kwds)\n        return delegate._reduce(op=op, name=name, axis=axis, skipna=skipna,\n            numeric_only=numeric_only, filter_type=filter_type, **kwds)\n\n    def _reindex_indexer(self, new_index, indexer, copy):\n        if indexer is None:\n            if copy:\n                return self.copy()\n            return self\n        new_values = algorithms.take_1d(self._values, indexer, allow_fill=\n            True, fill_value=None)\n        return self._constructor(new_values, index=new_index)\n\n    def _needs_reindex_multi(self, axes, method, level):\n        \"\"\"\n        Check if we do need a multi reindex; this is for compat with\n        higher dims.\n        \"\"\"\n        return False\n\n    @Appender(generic._shared_docs['align'] % _shared_doc_kwargs)\n    def align(self, other, join='outer', axis=None, level=None, copy=True,\n        fill_value=None, method=None, limit=None, fill_axis=0,\n        broadcast_axis=None):\n        return super(Series, self).align(other, join=join, axis=axis, level\n            =level, copy=copy, fill_value=fill_value, method=method, limit=\n            limit, fill_axis=fill_axis, broadcast_axis=broadcast_axis)\n\n    def rename(self, index=None, **kwargs):\n        \"\"\"\n        Alter Series index labels or name.\n\n        Function / dict values must be unique (1-to-1). Labels not contained in\n        a dict / Series will be left as-is. Extra labels listed don't throw an\n        error.\n\n        Alternatively, change ``Series.name`` with a scalar value.\n\n        See the :ref:`user guide <basics.rename>` for more.\n\n        Parameters\n        ----------\n        index : scalar, hashable sequence, dict-like or function, optional\n            dict-like or functions are transformations to apply to\n            the index.\n            Scalar or hashable sequence-like will alter the ``Series.name``\n            attribute.\n        copy : bool, default True\n            Whether to copy underlying data.\n        inplace : bool, default False\n            Whether to return a new Series. If True then value of copy is\n            ignored.\n        level : int or level name, default None\n            In case of a MultiIndex, only rename labels in the specified\n            level.\n\n        Returns\n        -------\n        Series\n            Series with index labels or name altered.\n\n        See Also\n        --------\n        Series.rename_axis : Set the name of the axis.\n\n        Examples\n        --------\n        >>> s = pd.Series([1, 2, 3])\n        >>> s\n        0    1\n        1    2\n        2    3\n        dtype: int64\n        >>> s.rename(\"my_name\")  # scalar, changes Series.name\n        0    1\n        1    2\n        2    3\n        Name: my_name, dtype: int64\n        >>> s.rename(lambda x: x ** 2)  # function, changes labels\n        0    1\n        1    2\n        4    3\n        dtype: int64\n        >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n        0    1\n        3    2\n        5    3\n        dtype: int64\n        \"\"\"\n        kwargs['inplace'] = validate_bool_kwarg(kwargs.get('inplace', False\n            ), 'inplace')\n        non_mapping = is_scalar(index) or is_list_like(index\n            ) and not is_dict_like(index)\n        if non_mapping:\n            return self._set_name(index, inplace=kwargs.get('inplace'))\n        return super(Series, self).rename(index=index, **kwargs)\n\n    @Substitution(**_shared_doc_kwargs)\n    @Appender(generic.NDFrame.reindex.__doc__)\n    def reindex(self, index=None, **kwargs):\n        return super(Series, self).reindex(index=index, **kwargs)\n\n    def drop(self, labels=None, axis=0, index=None, columns=None, level=\n        None, inplace=False, errors='raise'):\n        \"\"\"\n        Return Series with specified index labels removed.\n\n        Remove elements of a Series based on specifying the index labels.\n        When using a multi-index, labels on different levels can be removed\n        by specifying the level.\n\n        Parameters\n        ----------\n        labels : single label or list-like\n            Index labels to drop.\n        axis : 0, default 0\n            Redundant for application on Series.\n        index, columns : None\n            Redundant for application on Series, but index can be used instead\n            of labels.\n\n            .. versionadded:: 0.21.0\n        level : int or level name, optional\n            For MultiIndex, level for which the labels will be removed.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        errors : {'ignore', 'raise'}, default 'raise'\n            If 'ignore', suppress error and only existing labels are dropped.\n\n        Returns\n        -------\n        Series\n            Series with specified index labels removed.\n\n        Raises\n        ------\n        KeyError\n            If none of the labels are found in the index.\n\n        See Also\n        --------\n        Series.reindex : Return only specified index labels of Series.\n        Series.dropna : Return series without null values.\n        Series.drop_duplicates : Return Series with duplicate values removed.\n        DataFrame.drop : Drop specified labels from rows or columns.\n\n        Examples\n        --------\n        >>> s = pd.Series(data=np.arange(3), index=['A', 'B', 'C'])\n        >>> s\n        A  0\n        B  1\n        C  2\n        dtype: int64\n\n        Drop labels B en C\n\n        >>> s.drop(labels=['B', 'C'])\n        A  0\n        dtype: int64\n\n        Drop 2nd level label in MultiIndex Series\n\n        >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n        ...                              ['speed', 'weight', 'length']],\n        ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n        ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n        >>> s = pd.Series([45, 200, 1.2, 30, 250, 1.5, 320, 1, 0.3],\n        ...               index=midx)\n        >>> s\n        lama    speed      45.0\n                weight    200.0\n                length      1.2\n        cow     speed      30.0\n                weight    250.0\n                length      1.5\n        falcon  speed     320.0\n                weight      1.0\n                length      0.3\n        dtype: float64\n\n        >>> s.drop(labels='weight', level=1)\n        lama    speed      45.0\n                length      1.2\n        cow     speed      30.0\n                length      1.5\n        falcon  speed     320.0\n                length      0.3\n        dtype: float64\n        \"\"\"\n        return super(Series, self).drop(labels=labels, axis=axis, index=\n            index, columns=columns, level=level, inplace=inplace, errors=errors\n            )\n\n    @Substitution(**_shared_doc_kwargs)\n    @Appender(generic.NDFrame.fillna.__doc__)\n    def fillna(self, value=None, method=None, axis=None, inplace=False,\n        limit=None, downcast=None, **kwargs):\n        return super(Series, self).fillna(value=value, method=method, axis=\n            axis, inplace=inplace, limit=limit, downcast=downcast, **kwargs)\n\n    @Appender(generic._shared_docs['replace'] % _shared_doc_kwargs)\n    def replace(self, to_replace=None, value=None, inplace=False, limit=\n        None, regex=False, method='pad'):\n        return super(Series, self).replace(to_replace=to_replace, value=\n            value, inplace=inplace, limit=limit, regex=regex, method=method)\n\n    @Appender(generic._shared_docs['shift'] % _shared_doc_kwargs)\n    def shift(self, periods=1, freq=None, axis=0, fill_value=None):\n        return super(Series, self).shift(periods=periods, freq=freq, axis=\n            axis, fill_value=fill_value)\n\n    def reindex_axis(self, labels, axis=0, **kwargs):\n        \"\"\"\n        Conform Series to new index with optional filling logic.\n\n        .. deprecated:: 0.21.0\n            Use ``Series.reindex`` instead.\n        \"\"\"\n        if axis != 0:\n            raise ValueError('cannot reindex series on non-zero axis!')\n        msg = (\n            \"'.reindex_axis' is deprecated and will be removed in a future version. Use '.reindex' instead.\"\n            )\n        warnings.warn(msg, FutureWarning, stacklevel=2)\n        return self.reindex(index=labels, **kwargs)\n\n    def memory_usage(self, index=True, deep=False):\n        \"\"\"\n        Return the memory usage of the Series.\n\n        The memory usage can optionally include the contribution of\n        the index and of elements of `object` dtype.\n\n        Parameters\n        ----------\n        index : bool, default True\n            Specifies whether to include the memory usage of the Series index.\n        deep : bool, default False\n            If True, introspect the data deeply by interrogating\n            `object` dtypes for system-level memory consumption, and include\n            it in the returned value.\n\n        Returns\n        -------\n        int\n            Bytes of memory consumed.\n\n        See Also\n        --------\n        numpy.ndarray.nbytes : Total bytes consumed by the elements of the\n            array.\n        DataFrame.memory_usage : Bytes consumed by a DataFrame.\n\n        Examples\n        --------\n        >>> s = pd.Series(range(3))\n        >>> s.memory_usage()\n        104\n\n        Not including the index gives the size of the rest of the data, which\n        is necessarily smaller:\n\n        >>> s.memory_usage(index=False)\n        24\n\n        The memory footprint of `object` values is ignored by default:\n\n        >>> s = pd.Series([\"a\", \"b\"])\n        >>> s.values\n        array(['a', 'b'], dtype=object)\n        >>> s.memory_usage()\n        96\n        >>> s.memory_usage(deep=True)\n        212\n        \"\"\"\n        v = super(Series, self).memory_usage(deep=deep)\n        if index:\n            v += self.index.memory_usage(deep=deep)\n        return v\n\n    @Appender(generic.NDFrame._take.__doc__)\n    def _take(self, indices, axis=0, is_copy=False):\n        indices = ensure_platform_int(indices)\n        new_index = self.index.take(indices)\n        if is_categorical_dtype(self):\n            indices = maybe_convert_indices(indices, len(self._get_axis(axis)))\n            kwargs = {'allow_fill': False}\n        else:\n            kwargs = {}\n        new_values = self._values.take(indices, **kwargs)\n        result = self._constructor(new_values, index=new_index, fastpath=True\n            ).__finalize__(self)\n        if is_copy:\n            if not result._get_axis(axis).equals(self._get_axis(axis)):\n                result._set_is_copy(self)\n        return result\n\n    def isin(self, values):\n        \"\"\"\n        Check whether `values` are contained in Series.\n\n        Return a boolean Series showing whether each element in the Series\n        matches an element in the passed sequence of `values` exactly.\n\n        Parameters\n        ----------\n        values : set or list-like\n            The sequence of values to test. Passing in a single string will\n            raise a ``TypeError``. Instead, turn a single string into a\n            list of one element.\n\n            .. versionadded:: 0.18.1\n\n              Support for values as a set.\n\n        Returns\n        -------\n        Series\n            Series of booleans indicating if each element is in values.\n\n        Raises\n        ------\n        TypeError\n          * If `values` is a string\n\n        See Also\n        --------\n        DataFrame.isin : Equivalent method on DataFrame.\n\n        Examples\n        --------\n        >>> s = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama',\n        ...                'hippo'], name='animal')\n        >>> s.isin(['cow', 'lama'])\n        0     True\n        1     True\n        2     True\n        3    False\n        4     True\n        5    False\n        Name: animal, dtype: bool\n\n        Passing a single string as ``s.isin('lama')`` will raise an error. Use\n        a list of one element instead:\n\n        >>> s.isin(['lama'])\n        0     True\n        1    False\n        2     True\n        3    False\n        4     True\n        5    False\n        Name: animal, dtype: bool\n        \"\"\"\n        result = algorithms.isin(self, values)\n        return self._constructor(result, index=self.index).__finalize__(self)\n\n    def between(self, left, right, inclusive=True):\n        \"\"\"\n        Return boolean Series equivalent to left <= series <= right.\n\n        This function returns a boolean vector containing `True` wherever the\n        corresponding Series element is between the boundary values `left` and\n        `right`. NA values are treated as `False`.\n\n        Parameters\n        ----------\n        left : scalar\n            Left boundary.\n        right : scalar\n            Right boundary.\n        inclusive : bool, default True\n            Include boundaries.\n\n        Returns\n        -------\n        Series\n            Series representing whether each element is between left and\n            right (inclusive).\n\n        See Also\n        --------\n        Series.gt : Greater than of series and other.\n        Series.lt : Less than of series and other.\n\n        Notes\n        -----\n        This function is equivalent to ``(left <= ser) & (ser <= right)``\n\n        Examples\n        --------\n        >>> s = pd.Series([2, 0, 4, 8, np.nan])\n\n        Boundary values are included by default:\n\n        >>> s.between(1, 4)\n        0     True\n        1    False\n        2     True\n        3    False\n        4    False\n        dtype: bool\n\n        With `inclusive` set to ``False`` boundary values are excluded:\n\n        >>> s.between(1, 4, inclusive=False)\n        0     True\n        1    False\n        2    False\n        3    False\n        4    False\n        dtype: bool\n\n        `left` and `right` can be any scalar value:\n\n        >>> s = pd.Series(['Alice', 'Bob', 'Carol', 'Eve'])\n        >>> s.between('Anna', 'Daniel')\n        0    False\n        1     True\n        2     True\n        3    False\n        dtype: bool\n        \"\"\"\n        if inclusive:\n            lmask = self >= left\n            rmask = self <= right\n        else:\n            lmask = self > left\n            rmask = self < right\n        return lmask & rmask\n\n    @classmethod\n    def from_csv(cls, path, sep=',', parse_dates=True, header=None,\n        index_col=0, encoding=None, infer_datetime_format=False):\n        \"\"\"\n        Read CSV file.\n\n        .. deprecated:: 0.21.0\n            Use :func:`pandas.read_csv` instead.\n\n        It is preferable to use the more powerful :func:`pandas.read_csv`\n        for most general purposes, but ``from_csv`` makes for an easy\n        roundtrip to and from a file (the exact counterpart of\n        ``to_csv``), especially with a time Series.\n\n        This method only differs from :func:`pandas.read_csv` in some defaults:\n\n        - `index_col` is ``0`` instead of ``None`` (take first column as index\n          by default)\n        - `header` is ``None`` instead of ``0`` (the first row is not used as\n          the column names)\n        - `parse_dates` is ``True`` instead of ``False`` (try parsing the index\n          as datetime by default)\n\n        With :func:`pandas.read_csv`, the option ``squeeze=True`` can be used\n        to return a Series like ``from_csv``.\n\n        Parameters\n        ----------\n        path : str, file path, or file handle / StringIO\n        sep : str, default ','\n            Field delimiter.\n        parse_dates : bool, default True\n            Parse dates. Different default from read_table.\n        header : int, default None\n            Row to use as header (skip prior rows).\n        index_col : int or sequence, default 0\n            Column to use for index. If a sequence is given, a MultiIndex\n            is used. Different default from read_table.\n        encoding : str, optional\n            A string representing the encoding to use if the contents are\n            non-ascii, for python versions prior to 3.\n        infer_datetime_format : bool, default False\n            If True and `parse_dates` is True for a column, try to infer the\n            datetime format based on the first datetime string. If the format\n            can be inferred, there often will be a large parsing speed-up.\n\n        Returns\n        -------\n        Series\n\n        See Also\n        --------\n        read_csv\n        \"\"\"\n        from pandas.core.frame import DataFrame\n        df = DataFrame.from_csv(path, header=header, index_col=index_col,\n            sep=sep, parse_dates=parse_dates, encoding=encoding,\n            infer_datetime_format=infer_datetime_format)\n        result = df.iloc[:, 0]\n        if header is None:\n            result.index.name = result.name = None\n        return result\n\n    @Appender(generic.NDFrame.to_csv.__doc__)\n    def to_csv(self, *args, **kwargs):\n        names = ['path_or_buf', 'sep', 'na_rep', 'float_format', 'columns',\n            'header', 'index', 'index_label', 'mode', 'encoding',\n            'compression', 'quoting', 'quotechar', 'line_terminator',\n            'chunksize', 'tupleize_cols', 'date_format', 'doublequote',\n            'escapechar', 'decimal']\n        old_names = ['path_or_buf', 'index', 'sep', 'na_rep',\n            'float_format', 'header', 'index_label', 'mode', 'encoding',\n            'compression', 'date_format', 'decimal']\n        if 'path' in kwargs:\n            warnings.warn(\n                \"The signature of `Series.to_csv` was aligned to that of `DataFrame.to_csv`, and argument 'path' will be renamed to 'path_or_buf'.\"\n                , FutureWarning, stacklevel=2)\n            kwargs['path_or_buf'] = kwargs.pop('path')\n        if len(args) > 1:\n            maybe_sep = args[1]\n            if not (is_string_like(maybe_sep) and len(maybe_sep) == 1):\n                warnings.warn(\n                    'The signature of `Series.to_csv` was aligned to that of `DataFrame.to_csv`. Note that the order of arguments changed, and the new one has \\'sep\\' in first place, for which \"{}\" is not a valid value. The old order will cease to be supported in a future version. Please refer to the documentation for `DataFrame.to_csv` when updating your function calls.'\n                    .format(maybe_sep), FutureWarning, stacklevel=2)\n                names = old_names\n        pos_args = dict(zip(names[:len(args)], args))\n        for key in pos_args:\n            if key in kwargs:\n                raise ValueError(\n                    \"Argument given by name ('{}') and position ({})\".\n                    format(key, names.index(key)))\n            kwargs[key] = pos_args[key]\n        if kwargs.get('header', None) is None:\n            warnings.warn(\n                \"The signature of `Series.to_csv` was aligned to that of `DataFrame.to_csv`, and argument 'header' will change its default value from False to True: please pass an explicit value to suppress this warning.\"\n                , FutureWarning, stacklevel=2)\n            kwargs['header'] = False\n        return self.to_frame().to_csv(**kwargs)\n\n    @Appender(generic._shared_docs['isna'] % _shared_doc_kwargs)\n    def isna(self):\n        return super(Series, self).isna()\n\n    @Appender(generic._shared_docs['isna'] % _shared_doc_kwargs)\n    def isnull(self):\n        return super(Series, self).isnull()\n\n    @Appender(generic._shared_docs['notna'] % _shared_doc_kwargs)\n    def notna(self):\n        return super(Series, self).notna()\n\n    @Appender(generic._shared_docs['notna'] % _shared_doc_kwargs)\n    def notnull(self):\n        return super(Series, self).notnull()\n\n    def dropna(self, axis=0, inplace=False, **kwargs):\n        \"\"\"\n        Return a new Series with missing values removed.\n\n        See the :ref:`User Guide <missing_data>` for more on which values are\n        considered missing, and how to work with missing data.\n\n        Parameters\n        ----------\n        axis : {0 or 'index'}, default 0\n            There is only one axis to drop values from.\n        inplace : bool, default False\n            If True, do operation inplace and return None.\n        **kwargs\n            Not in use.\n\n        Returns\n        -------\n        Series\n            Series with NA entries dropped from it.\n\n        See Also\n        --------\n        Series.isna: Indicate missing values.\n        Series.notna : Indicate existing (non-missing) values.\n        Series.fillna : Replace missing values.\n        DataFrame.dropna : Drop rows or columns which contain NA values.\n        Index.dropna : Drop missing indices.\n\n        Examples\n        --------\n        >>> ser = pd.Series([1., 2., np.nan])\n        >>> ser\n        0    1.0\n        1    2.0\n        2    NaN\n        dtype: float64\n\n        Drop NA values from a Series.\n\n        >>> ser.dropna()\n        0    1.0\n        1    2.0\n        dtype: float64\n\n        Keep the Series with valid entries in the same variable.\n\n        >>> ser.dropna(inplace=True)\n        >>> ser\n        0    1.0\n        1    2.0\n        dtype: float64\n\n        Empty strings are not considered NA values. ``None`` is considered an\n        NA value.\n\n        >>> ser = pd.Series([np.NaN, 2, pd.NaT, '', None, 'I stay'])\n        >>> ser\n        0       NaN\n        1         2\n        2       NaT\n        3\n        4      None\n        5    I stay\n        dtype: object\n        >>> ser.dropna()\n        1         2\n        3\n        5    I stay\n        dtype: object\n        \"\"\"\n        inplace = validate_bool_kwarg(inplace, 'inplace')\n        kwargs.pop('how', None)\n        if kwargs:\n            raise TypeError('dropna() got an unexpected keyword argument \"{0}\"'\n                .format(list(kwargs.keys())[0]))\n        self._get_axis_number(axis or 0)\n        if self._can_hold_na:\n            result = remove_na_arraylike(self)\n            if inplace:\n                self._update_inplace(result)\n            else:\n                return result\n        elif inplace:\n            pass\n        else:\n            return self.copy()\n\n    def valid(self, inplace=False, **kwargs):\n        \"\"\"\n        Return Series without null values.\n\n        .. deprecated:: 0.23.0\n            Use :meth:`Series.dropna` instead.\n        \"\"\"\n        warnings.warn(\n            'Method .valid will be removed in a future version. Use .dropna instead.'\n            , FutureWarning, stacklevel=2)\n        return self.dropna(inplace=inplace, **kwargs)\n\n    def to_timestamp(self, freq=None, how='start', copy=True):\n        \"\"\"\n        Cast to DatetimeIndex of Timestamps, at *beginning* of period.\n\n        Parameters\n        ----------\n        freq : str, default frequency of PeriodIndex\n            Desired frequency.\n        how : {'s', 'e', 'start', 'end'}\n            Convention for converting period to timestamp; start of period\n            vs. end.\n        copy : bool, default True\n            Whether or not to return a copy.\n\n        Returns\n        -------\n        Series with DatetimeIndex\n        \"\"\"\n        new_values = self._values\n        if copy:\n            new_values = new_values.copy()\n        new_index = self.index.to_timestamp(freq=freq, how=how)\n        return self._constructor(new_values, index=new_index).__finalize__(self\n            )\n\n    def to_period(self, freq=None, copy=True):\n        \"\"\"\n        Convert Series from DatetimeIndex to PeriodIndex with desired\n        frequency (inferred from index if not passed).\n\n        Parameters\n        ----------\n        freq : str, default None\n            Frequency associated with the PeriodIndex.\n        copy : bool, default True\n            Whether or not to return a copy.\n\n        Returns\n        -------\n        Series\n            Series with index converted to PeriodIndex.\n        \"\"\"\n        new_values = self._values\n        if copy:\n            new_values = new_values.copy()\n        new_index = self.index.to_period(freq=freq)\n        return self._constructor(new_values, index=new_index).__finalize__(self\n            )\n    str = CachedAccessor('str', StringMethods)\n    dt = CachedAccessor('dt', CombinedDatetimelikeProperties)\n    cat = CachedAccessor('cat', CategoricalAccessor)\n    plot = CachedAccessor('plot', gfx.SeriesPlotMethods)\n    sparse = CachedAccessor('sparse', SparseAccessor)\n    hist = gfx.hist_series\n",
                        "belong_class_name": "Series",
                        "belong_class_init": "def __init__(self, data=None, index=None, dtype=None, name=None, copy=False,\n    fastpath=False):\n    if fastpath:\n        if not isinstance(data, SingleBlockManager):\n            data = SingleBlockManager(data, index, fastpath=True)\n        if copy:\n            data = data.copy()\n        if index is None:\n            index = data.index\n    else:\n        if index is not None:\n            index = ensure_index(index)\n        if data is None:\n            data = {}\n        if dtype is not None:\n            dtype = self._validate_dtype(dtype)\n        if isinstance(data, MultiIndex):\n            raise NotImplementedError(\n                'initializing a Series from a MultiIndex is not supported')\n        elif isinstance(data, Index):\n            if name is None:\n                name = data.name\n            if dtype is not None:\n                data = data.astype(dtype)\n            else:\n                data = data._values.copy()\n                if isinstance(data, ABCDatetimeIndex) and data.tz is not None:\n                    data = data._values.copy(deep=True)\n            copy = False\n        elif isinstance(data, np.ndarray):\n            pass\n        elif isinstance(data, (ABCSeries, ABCSparseSeries)):\n            if name is None:\n                name = data.name\n            if index is None:\n                index = data.index\n            else:\n                data = data.reindex(index, copy=copy)\n            data = data._data\n        elif isinstance(data, dict):\n            data, index = self._init_dict(data, index, dtype)\n            dtype = None\n            copy = False\n        elif isinstance(data, SingleBlockManager):\n            if index is None:\n                index = data.index\n            elif not data.index.equals(index) or copy:\n                raise AssertionError(\n                    'Cannot pass both SingleBlockManager `data` argument and a different `index` argument.  `copy` must be False.'\n                    )\n        elif is_extension_array_dtype(data):\n            pass\n        elif isinstance(data, (set, frozenset)):\n            raise TypeError('{0!r} type is unordered'.format(data.__class__\n                .__name__))\n        elif isinstance(data, compat.Iterable) and not isinstance(data,\n            compat.Sized):\n            data = list(data)\n        elif isinstance(data, ABCSparseArray):\n            data = data.to_dense()\n        if index is None:\n            if not is_list_like(data):\n                data = [data]\n            index = ibase.default_index(len(data))\n        elif is_list_like(data):\n            try:\n                if len(index) != len(data):\n                    raise ValueError(\n                        'Length of passed values is {val}, index implies {ind}'\n                        .format(val=len(data), ind=len(index)))\n            except TypeError:\n                pass\n        if isinstance(data, SingleBlockManager):\n            if dtype is not None:\n                data = data.astype(dtype=dtype, errors='ignore', copy=copy)\n            elif copy:\n                data = data.copy()\n        else:\n            data = sanitize_array(data, index, dtype, copy,\n                raise_cast_failure=True)\n            data = SingleBlockManager(data, index, fastpath=True)\n    generic.NDFrame.__init__(self, data, fastpath=True)\n    self.name = name\n    self._set_axis(0, index, fastpath=True)\n"
                    }
                ]
            ]
        },
        "pandas-25759_indexing": {
            "pytest pandas/tests/indexing/test_iloc.py::TestiLoc::test_iloc_non_integer_raises": [
                [
                    {
                        "function_name": "test_iloc_non_integer_raises",
                        "function_content": "@pytest.mark.parametrize('index,columns', [(np.arange(20), list('ABCDE'))])\n@pytest.mark.parametrize('index_vals,column_vals', [[slice(None), ['A', 'D'\n    ]], (['1', '2'], slice(None)), ([pd.datetime(2019, 1, 1)], slice(None))])\ndef test_iloc_non_integer_raises(self, index, columns, index_vals, column_vals\n    ):\n    df = DataFrame(np.random.randn(len(index), len(columns)), index=index,\n        columns=columns)\n    msg = '.iloc requires numeric indexers, got'\n    with pytest.raises(IndexError, match=msg):\n        df.iloc[index_vals, column_vals]\n",
                        "function_parameter": "(self, index, columns, index_vals, column_vals\n    )",
                        "belong_class_content": "class TestiLoc(Base):\n\n    def test_iloc_exceeds_bounds(self):\n        df = DataFrame(np.random.random_sample((20, 5)), columns=list('ABCDE'))\n        msg = 'positional indexers are out-of-bounds'\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[:, [0, 1, 2, 3, 4, 5]]\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[[1, 30]]\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[[1, -30]]\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[[100]]\n        s = df['A']\n        with pytest.raises(IndexError, match=msg):\n            s.iloc[[100]]\n        with pytest.raises(IndexError, match=msg):\n            s.iloc[[-100]]\n        msg = 'single positional indexer is out-of-bounds'\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[30]\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[-30]\n        with pytest.raises(IndexError, match=msg):\n            s.iloc[30]\n        with pytest.raises(IndexError, match=msg):\n            s.iloc[-30]\n        result = df.iloc[:, 4:10]\n        expected = df.iloc[:, 4:]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, -4:-10]\n        expected = df.iloc[:, :0]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, 10:4:-1]\n        expected = df.iloc[:, :4:-1]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, 4:-10:-1]\n        expected = df.iloc[:, 4::-1]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, -10:4]\n        expected = df.iloc[:, :4]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, 10:4]\n        expected = df.iloc[:, :0]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, -10:-11:-1]\n        expected = df.iloc[:, :0]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, 10:11]\n        expected = df.iloc[:, :0]\n        tm.assert_frame_equal(result, expected)\n        result = s.iloc[18:30]\n        expected = s.iloc[18:]\n        tm.assert_series_equal(result, expected)\n        result = s.iloc[30:]\n        expected = s.iloc[:0]\n        tm.assert_series_equal(result, expected)\n        result = s.iloc[30::-1]\n        expected = s.iloc[::-1]\n        tm.assert_series_equal(result, expected)\n\n        def check(result, expected):\n            str(result)\n            result.dtypes\n            tm.assert_frame_equal(result, expected)\n        dfl = DataFrame(np.random.randn(5, 2), columns=list('AB'))\n        check(dfl.iloc[:, 2:3], DataFrame(index=dfl.index))\n        check(dfl.iloc[:, 1:3], dfl.iloc[:, [1]])\n        check(dfl.iloc[4:6], dfl.iloc[[4]])\n        msg = 'positional indexers are out-of-bounds'\n        with pytest.raises(IndexError, match=msg):\n            dfl.iloc[[4, 5, 6]]\n        msg = 'single positional indexer is out-of-bounds'\n        with pytest.raises(IndexError, match=msg):\n            dfl.iloc[:, 4]\n\n    @pytest.mark.parametrize('index,columns', [(np.arange(20), list('ABCDE'))])\n    @pytest.mark.parametrize('index_vals,column_vals', [[slice(None), ['A',\n        'D']], (['1', '2'], slice(None)), ([pd.datetime(2019, 1, 1)], slice\n        (None))])\n    def test_iloc_non_integer_raises(self, index, columns, index_vals,\n        column_vals):\n        df = DataFrame(np.random.randn(len(index), len(columns)), index=\n            index, columns=columns)\n        msg = '.iloc requires numeric indexers, got'\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[index_vals, column_vals]\n\n    def test_iloc_getitem_int(self):\n        self.check_result('integer', 'iloc', 2, 'ix', {(0): 4, (1): 6, (2):\n            8}, typs=['ints', 'uints'])\n        self.check_result('integer', 'iloc', 2, 'indexer', 2, typs=[\n            'labels', 'mixed', 'ts', 'floats', 'empty'], fails=IndexError)\n\n    def test_iloc_getitem_neg_int(self):\n        self.check_result('neg int', 'iloc', -1, 'ix', {(0): 6, (1): 9, (2):\n            12}, typs=['ints', 'uints'])\n        self.check_result('neg int', 'iloc', -1, 'indexer', -1, typs=[\n            'labels', 'mixed', 'ts', 'floats', 'empty'], fails=IndexError)\n\n    @pytest.mark.parametrize('dims', [1, 2])\n    def test_iloc_getitem_invalid_scalar(self, dims):\n        if dims == 1:\n            s = Series(np.arange(10))\n        else:\n            s = DataFrame(np.arange(100).reshape(10, 10))\n        with pytest.raises(TypeError, match='Cannot index by location index'):\n            s.iloc['a']\n\n    def test_iloc_array_not_mutating_negative_indices(self):\n        array_with_neg_numbers = np.array([1, 2, -1])\n        array_copy = array_with_neg_numbers.copy()\n        df = pd.DataFrame({'A': [100, 101, 102], 'B': [103, 104, 105], 'C':\n            [106, 107, 108]}, index=[1, 2, 3])\n        df.iloc[array_with_neg_numbers]\n        tm.assert_numpy_array_equal(array_with_neg_numbers, array_copy)\n        df.iloc[:, array_with_neg_numbers]\n        tm.assert_numpy_array_equal(array_with_neg_numbers, array_copy)\n\n    def test_iloc_getitem_list_int(self):\n        self.check_result('list int', 'iloc', [0, 1, 2], 'ix', {(0): [0, 2,\n            4], (1): [0, 3, 6], (2): [0, 4, 8]}, typs=['ints', 'uints'])\n        self.check_result('list int', 'iloc', [2], 'ix', {(0): [4], (1): [6\n            ], (2): [8]}, typs=['ints', 'uints'])\n        self.check_result('list int', 'iloc', [0, 1, 2], 'indexer', [0, 1, \n            2], typs=['labels', 'mixed', 'ts', 'floats', 'empty'], fails=\n            IndexError)\n        self.check_result('array int', 'iloc', np.array([0, 1, 2]), 'ix', {\n            (0): [0, 2, 4], (1): [0, 3, 6], (2): [0, 4, 8]}, typs=['ints',\n            'uints'])\n        self.check_result('array int', 'iloc', np.array([2]), 'ix', {(0): [\n            4], (1): [6], (2): [8]}, typs=['ints', 'uints'])\n        self.check_result('array int', 'iloc', np.array([0, 1, 2]),\n            'indexer', [0, 1, 2], typs=['labels', 'mixed', 'ts', 'floats',\n            'empty'], fails=IndexError)\n\n    def test_iloc_getitem_neg_int_can_reach_first_index(self):\n        df = DataFrame({'A': [2, 3, 5], 'B': [7, 11, 13]})\n        s = df['A']\n        expected = df.iloc[0]\n        result = df.iloc[-3]\n        tm.assert_series_equal(result, expected)\n        expected = df.iloc[[0]]\n        result = df.iloc[[-3]]\n        tm.assert_frame_equal(result, expected)\n        expected = s.iloc[0]\n        result = s.iloc[-3]\n        assert result == expected\n        expected = s.iloc[[0]]\n        result = s.iloc[[-3]]\n        tm.assert_series_equal(result, expected)\n        expected = Series(['a'], index=['A'])\n        result = expected.iloc[[-1]]\n        tm.assert_series_equal(result, expected)\n\n    def test_iloc_getitem_dups(self):\n        self.check_result('list int (dups)', 'iloc', [0, 1, 1, 3], 'ix', {(\n            0): [0, 2, 2, 6], (1): [0, 3, 3, 9]}, objs=['series', 'frame'],\n            typs=['ints', 'uints'])\n        df1 = DataFrame([{'A': None, 'B': 1}, {'A': 2, 'B': 2}])\n        df2 = DataFrame([{'A': 3, 'B': 3}, {'A': 4, 'B': 4}])\n        df = concat([df1, df2], axis=1)\n        result = df.iloc[0, 0]\n        assert isna(result)\n        result = df.iloc[0, :]\n        expected = Series([np.nan, 1, 3, 3], index=['A', 'B', 'A', 'B'], name=0\n            )\n        tm.assert_series_equal(result, expected)\n\n    def test_iloc_getitem_array(self):\n        s = Series(index=lrange(1, 4))\n        self.check_result('array like', 'iloc', s.index, 'ix', {(0): [2, 4,\n            6], (1): [3, 6, 9], (2): [4, 8, 12]}, typs=['ints', 'uints'])\n\n    def test_iloc_getitem_bool(self):\n        b = [True, False, True, False]\n        self.check_result('bool', 'iloc', b, 'ix', b, typs=['ints', 'uints'])\n        self.check_result('bool', 'iloc', b, 'ix', b, typs=['labels',\n            'mixed', 'ts', 'floats', 'empty'], fails=IndexError)\n\n    def test_iloc_getitem_slice(self):\n        self.check_result('slice', 'iloc', slice(1, 3), 'ix', {(0): [2, 4],\n            (1): [3, 6], (2): [4, 8]}, typs=['ints', 'uints'])\n        self.check_result('slice', 'iloc', slice(1, 3), 'indexer', slice(1,\n            3), typs=['labels', 'mixed', 'ts', 'floats', 'empty'], fails=\n            IndexError)\n\n    def test_iloc_getitem_slice_dups(self):\n        df1 = DataFrame(np.random.randn(10, 4), columns=['A', 'A', 'B', 'B'])\n        df2 = DataFrame(np.random.randint(0, 10, size=20).reshape(10, 2),\n            columns=['A', 'C'])\n        df = concat([df1, df2], axis=1)\n        tm.assert_frame_equal(df.iloc[:, :4], df1)\n        tm.assert_frame_equal(df.iloc[:, 4:], df2)\n        df = concat([df2, df1], axis=1)\n        tm.assert_frame_equal(df.iloc[:, :2], df2)\n        tm.assert_frame_equal(df.iloc[:, 2:], df1)\n        exp = concat([df2, df1.iloc[:, [0]]], axis=1)\n        tm.assert_frame_equal(df.iloc[:, 0:3], exp)\n        df = concat([df, df], axis=0)\n        tm.assert_frame_equal(df.iloc[0:10, :2], df2)\n        tm.assert_frame_equal(df.iloc[0:10, 2:], df1)\n        tm.assert_frame_equal(df.iloc[10:, :2], df2)\n        tm.assert_frame_equal(df.iloc[10:, 2:], df1)\n\n    def test_iloc_setitem(self):\n        df = self.frame_ints\n        df.iloc[1, 1] = 1\n        result = df.iloc[1, 1]\n        assert result == 1\n        df.iloc[:, 2:3] = 0\n        expected = df.iloc[:, 2:3]\n        result = df.iloc[:, 2:3]\n        tm.assert_frame_equal(result, expected)\n        s = Series(0, index=[4, 5, 6])\n        s.iloc[1:2] += 1\n        expected = Series([0, 1, 0], index=[4, 5, 6])\n        tm.assert_series_equal(s, expected)\n\n    def test_iloc_setitem_list(self):\n        df = DataFrame(np.arange(9).reshape((3, 3)), index=['A', 'B', 'C'],\n            columns=['A', 'B', 'C'])\n        df.iloc[[0, 1], [1, 2]]\n        df.iloc[[0, 1], [1, 2]] += 100\n        expected = DataFrame(np.array([0, 101, 102, 3, 104, 105, 6, 7, 8]).\n            reshape((3, 3)), index=['A', 'B', 'C'], columns=['A', 'B', 'C'])\n        tm.assert_frame_equal(df, expected)\n\n    def test_iloc_setitem_pandas_object(self):\n        s_orig = Series([0, 1, 2, 3])\n        expected = Series([0, -1, -2, 3])\n        s = s_orig.copy()\n        s.iloc[Series([1, 2])] = [-1, -2]\n        tm.assert_series_equal(s, expected)\n        s = s_orig.copy()\n        s.iloc[pd.Index([1, 2])] = [-1, -2]\n        tm.assert_series_equal(s, expected)\n\n    def test_iloc_setitem_dups(self):\n        df1 = DataFrame([{'A': None, 'B': 1}, {'A': 2, 'B': 2}])\n        df2 = DataFrame([{'A': 3, 'B': 3}, {'A': 4, 'B': 4}])\n        df = concat([df1, df2], axis=1)\n        expected = df.fillna(3)\n        expected['A'] = expected['A'].astype('float64')\n        inds = np.isnan(df.iloc[:, 0])\n        mask = inds[inds].index\n        df.iloc[mask, 0] = df.iloc[mask, 2]\n        tm.assert_frame_equal(df, expected)\n        expected = DataFrame({(0): [1, 2], (1): [3, 4]})\n        expected.columns = ['B', 'B']\n        del df['A']\n        tm.assert_frame_equal(df, expected)\n        df.iloc[[0, 1], [0, 1]] = df.iloc[[0, 1], [0, 1]]\n        tm.assert_frame_equal(df, expected)\n        df.iloc[[1, 0], [0, 1]] = df.iloc[[1, 0], [0, 1]].reset_index(drop=True\n            )\n        df.iloc[[1, 0], [0, 1]] = df.iloc[[1, 0], [0, 1]].reset_index(drop=True\n            )\n        tm.assert_frame_equal(df, expected)\n\n    def test_iloc_getitem_frame(self):\n        df = DataFrame(np.random.randn(10, 4), index=lrange(0, 20, 2),\n            columns=lrange(0, 8, 2))\n        result = df.iloc[2]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            exp = df.ix[4]\n        tm.assert_series_equal(result, exp)\n        result = df.iloc[2, 2]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            exp = df.ix[4, 4]\n        assert result == exp\n        result = df.iloc[4:8]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            expected = df.ix[8:14]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, 2:3]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            expected = df.ix[:, 4:5]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[[0, 1, 3]]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            expected = df.ix[[0, 2, 6]]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[[0, 1, 3], [0, 1]]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            expected = df.ix[[0, 2, 6], [0, 2]]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[[-1, 1, 3], [-1, 1]]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            expected = df.ix[[18, 2, 6], [6, 2]]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[[-1, -1, 1, 3], [-1, 1]]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            expected = df.ix[[18, 18, 2, 6], [6, 2]]\n        tm.assert_frame_equal(result, expected)\n        s = Series(index=lrange(1, 5))\n        result = df.iloc[s.index]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            expected = df.ix[[2, 4, 6, 8]]\n        tm.assert_frame_equal(result, expected)\n\n    def test_iloc_getitem_labelled_frame(self):\n        df = DataFrame(np.random.randn(10, 4), index=list('abcdefghij'),\n            columns=list('ABCD'))\n        result = df.iloc[1, 1]\n        exp = df.loc['b', 'B']\n        assert result == exp\n        result = df.iloc[:, 2:3]\n        expected = df.loc[:, ['C']]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[-1, -1]\n        exp = df.loc['j', 'D']\n        assert result == exp\n        msg = 'single positional indexer is out-of-bounds'\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[10, 5]\n        msg = (\n            'Location based indexing can only have \\\\[integer, integer slice \\\\(START point is INCLUDED, END point is EXCLUDED\\\\), listlike of integers, boolean array\\\\] types'\n            )\n        with pytest.raises(ValueError, match=msg):\n            df.iloc['j', 'D']\n\n    def test_iloc_getitem_doc_issue(self):\n        arr = np.random.randn(6, 4)\n        index = date_range('20130101', periods=6)\n        columns = list('ABCD')\n        df = DataFrame(arr, index=index, columns=columns)\n        df.describe()\n        result = df.iloc[3:5, 0:2]\n        str(result)\n        result.dtypes\n        expected = DataFrame(arr[3:5, 0:2], index=index[3:5], columns=\n            columns[0:2])\n        tm.assert_frame_equal(result, expected)\n        df.columns = list('aaaa')\n        result = df.iloc[3:5, 0:2]\n        str(result)\n        result.dtypes\n        expected = DataFrame(arr[3:5, 0:2], index=index[3:5], columns=list(\n            'aa'))\n        tm.assert_frame_equal(result, expected)\n        arr = np.random.randn(6, 4)\n        index = list(range(0, 12, 2))\n        columns = list(range(0, 8, 2))\n        df = DataFrame(arr, index=index, columns=columns)\n        df._data.blocks[0].mgr_locs\n        result = df.iloc[1:5, 2:4]\n        str(result)\n        result.dtypes\n        expected = DataFrame(arr[1:5, 2:4], index=index[1:5], columns=\n            columns[2:4])\n        tm.assert_frame_equal(result, expected)\n\n    def test_iloc_setitem_series(self):\n        df = DataFrame(np.random.randn(10, 4), index=list('abcdefghij'),\n            columns=list('ABCD'))\n        df.iloc[1, 1] = 1\n        result = df.iloc[1, 1]\n        assert result == 1\n        df.iloc[:, 2:3] = 0\n        expected = df.iloc[:, 2:3]\n        result = df.iloc[:, 2:3]\n        tm.assert_frame_equal(result, expected)\n        s = Series(np.random.randn(10), index=lrange(0, 20, 2))\n        s.iloc[1] = 1\n        result = s.iloc[1]\n        assert result == 1\n        s.iloc[:4] = 0\n        expected = s.iloc[:4]\n        result = s.iloc[:4]\n        tm.assert_series_equal(result, expected)\n        s = Series([-1] * 6)\n        s.iloc[0::2] = [0, 2, 4]\n        s.iloc[1::2] = [1, 3, 5]\n        result = s\n        expected = Series([0, 1, 2, 3, 4, 5])\n        tm.assert_series_equal(result, expected)\n\n    def test_iloc_setitem_list_of_lists(self):\n        df = DataFrame(dict(A=np.arange(5, dtype='int64'), B=np.arange(5, \n            10, dtype='int64')))\n        df.iloc[2:4] = [[10, 11], [12, 13]]\n        expected = DataFrame(dict(A=[0, 1, 10, 12, 4], B=[5, 6, 11, 13, 9]))\n        tm.assert_frame_equal(df, expected)\n        df = DataFrame(dict(A=list('abcde'), B=np.arange(5, 10, dtype='int64'))\n            )\n        df.iloc[2:4] = [['x', 11], ['y', 13]]\n        expected = DataFrame(dict(A=['a', 'b', 'x', 'y', 'e'], B=[5, 6, 11,\n            13, 9]))\n        tm.assert_frame_equal(df, expected)\n\n    @pytest.mark.parametrize('indexer', [[0], slice(None, 1, None), np.\n        array([0])])\n    @pytest.mark.parametrize('value', [['Z'], np.array(['Z'])])\n    def test_iloc_setitem_with_scalar_index(self, indexer, value):\n        df = pd.DataFrame([[1, 2], [3, 4]], columns=['A', 'B'])\n        df.iloc[0, indexer] = value\n        result = df.iloc[0, 0]\n        assert is_scalar(result) and result == 'Z'\n\n    def test_iloc_mask(self):\n        df = DataFrame(lrange(5), list('ABCDE'), columns=['a'])\n        mask = df.a % 2 == 0\n        msg = (\n            'iLocation based boolean indexing cannot use an indexable as a mask'\n            )\n        with pytest.raises(ValueError, match=msg):\n            df.iloc[mask]\n        mask.index = lrange(len(mask))\n        msg = (\n            'iLocation based boolean indexing on an integer type is not available'\n            )\n        with pytest.raises(NotImplementedError, match=msg):\n            df.iloc[mask]\n        result = df.iloc[np.array([True] * len(mask), dtype=bool)]\n        tm.assert_frame_equal(result, df)\n        locs = np.arange(4)\n        nums = 2 ** locs\n        reps = lmap(bin, nums)\n        df = DataFrame({'locs': locs, 'nums': nums}, reps)\n        expected = {(None, ''): '0b1100', (None, '.loc'): '0b1100', (None,\n            '.iloc'): '0b1100', ('index', ''): '0b11', ('index', '.loc'):\n            '0b11', ('index', '.iloc'):\n            'iLocation based boolean indexing cannot use an indexable as a mask'\n            , ('locs', ''):\n            'Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match'\n            , ('locs', '.loc'):\n            'Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match'\n            , ('locs', '.iloc'):\n            'iLocation based boolean indexing on an integer type is not available'\n            }\n        with catch_warnings(record=True):\n            simplefilter('ignore', UserWarning)\n            result = dict()\n            for idx in [None, 'index', 'locs']:\n                mask = (df.nums > 2).values\n                if idx:\n                    mask = Series(mask, list(reversed(getattr(df, idx))))\n                for method in ['', '.loc', '.iloc']:\n                    try:\n                        if method:\n                            accessor = getattr(df, method[1:])\n                        else:\n                            accessor = df\n                        ans = str(bin(accessor[mask]['nums'].sum()))\n                    except Exception as e:\n                        ans = str(e)\n                    key = tuple([idx, method])\n                    r = expected.get(key)\n                    if r != ans:\n                        raise AssertionError(\n                            '[%s] does not match [%s], received [%s]' % (\n                            key, ans, r))\n\n    def test_iloc_non_unique_indexing(self):\n        df = DataFrame({'A': [0.1] * 3000, 'B': [1] * 3000})\n        idx = np.array(lrange(30)) * 99\n        expected = df.iloc[idx]\n        df3 = concat([df, 2 * df, 3 * df])\n        result = df3.iloc[idx]\n        tm.assert_frame_equal(result, expected)\n        df2 = DataFrame({'A': [0.1] * 1000, 'B': [1] * 1000})\n        df2 = concat([df2, 2 * df2, 3 * df2])\n        sidx = df2.index.to_series()\n        expected = df2.iloc[idx[idx <= sidx.max()]]\n        new_list = []\n        for r, s in expected.iterrows():\n            new_list.append(s)\n            new_list.append(s * 2)\n            new_list.append(s * 3)\n        expected = DataFrame(new_list)\n        expected = concat([expected, DataFrame(index=idx[idx > sidx.max()])\n            ], sort=True)\n        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n            result = df2.loc[idx]\n        tm.assert_frame_equal(result, expected, check_index_type=False)\n\n    def test_iloc_empty_list_indexer_is_ok(self):\n        from pandas.util.testing import makeCustomDataframe as mkdf\n        df = mkdf(5, 2)\n        tm.assert_frame_equal(df.iloc[:, []], df.iloc[:, :0],\n            check_index_type=True, check_column_type=True)\n        tm.assert_frame_equal(df.iloc[[], :], df.iloc[:0, :],\n            check_index_type=True, check_column_type=True)\n        tm.assert_frame_equal(df.iloc[[]], df.iloc[:0, :], check_index_type\n            =True, check_column_type=True)\n\n    def test_identity_slice_returns_new_object(self):\n        original_df = DataFrame({'a': [1, 2, 3]})\n        sliced_df = original_df.iloc[:]\n        assert sliced_df is not original_df\n        original_df['a'] = [4, 4, 4]\n        assert (sliced_df['a'] == 4).all()\n        original_series = Series([1, 2, 3, 4, 5, 6])\n        sliced_series = original_series.iloc[:]\n        assert sliced_series is not original_series\n        original_series[:3] = [7, 8, 9]\n        assert all(sliced_series[:3] == [7, 8, 9])\n\n    def test_indexing_zerodim_np_array(self):\n        df = DataFrame([[1, 2], [3, 4]])\n        result = df.iloc[np.array(0)]\n        s = pd.Series([1, 2], name=0)\n        tm.assert_series_equal(result, s)\n\n    def test_series_indexing_zerodim_np_array(self):\n        s = Series([1, 2])\n        result = s.iloc[np.array(0)]\n        assert result == 1\n",
                        "belong_class_name": "TestiLoc",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "__getitem__",
                        "function_content": "def __getitem__(self, key):\n    if type(key) is tuple:\n        key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        try:\n            if self._is_scalar_access(key):\n                return self._getitem_scalar(key)\n        except (KeyError, IndexError, AttributeError):\n            pass\n        return self._getitem_tuple(key)\n    else:\n        axis = self.axis or 0\n        maybe_callable = com.apply_if_callable(key, self.obj)\n        return self._getitem_axis(maybe_callable, axis=axis)\n",
                        "function_parameter": "(self, key)",
                        "belong_class_content": "class _LocationIndexer(_NDFrameIndexer):\n    _exception = Exception\n\n    def __getitem__(self, key):\n        if type(key) is tuple:\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n            try:\n                if self._is_scalar_access(key):\n                    return self._getitem_scalar(key)\n            except (KeyError, IndexError, AttributeError):\n                pass\n            return self._getitem_tuple(key)\n        else:\n            axis = self.axis or 0\n            maybe_callable = com.apply_if_callable(key, self.obj)\n            return self._getitem_axis(maybe_callable, axis=axis)\n\n    def _is_scalar_access(self, key):\n        raise NotImplementedError()\n\n    def _getitem_scalar(self, key):\n        raise NotImplementedError()\n\n    def _getitem_axis(self, key, axis=None):\n        raise NotImplementedError()\n\n    def _getbool_axis(self, key, axis=None):\n        if axis is None:\n            axis = self.axis or 0\n        labels = self.obj._get_axis(axis)\n        key = check_bool_indexer(labels, key)\n        inds, = key.nonzero()\n        try:\n            return self.obj._take(inds, axis=axis)\n        except Exception as detail:\n            raise self._exception(detail)\n\n    def _get_slice_axis(self, slice_obj, axis=None):\n        \"\"\" this is pretty simple as we just have to deal with labels \"\"\"\n        if axis is None:\n            axis = self.axis or 0\n        obj = self.obj\n        if not need_slice(slice_obj):\n            return obj.copy(deep=False)\n        labels = obj._get_axis(axis)\n        indexer = labels.slice_indexer(slice_obj.start, slice_obj.stop,\n            slice_obj.step, kind=self.name)\n        if isinstance(indexer, slice):\n            return self._slice(indexer, axis=axis, kind='iloc')\n        else:\n            return self.obj._take(indexer, axis=axis)\n",
                        "belong_class_name": "_LocationIndexer",
                        "belong_class_init": "",
                        "called_function_name": "_getitem_tuple",
                        "called_function_content": "def __getitem__(self, key):\n    if type(key) is tuple:\n        key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        try:\n            if self._is_scalar_access(key):\n                return self._getitem_scalar(key)\n        except (KeyError, IndexError, AttributeError):\n            pass\n        return self._getitem_tuple(key)\n",
                        "called_arguments": "(key)",
                        "called_function_parameter": "(self, tup)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_getitem_tuple",
                        "function_content": "def _getitem_tuple(self, tup):\n    self._has_valid_tuple(tup)\n    try:\n        return self._getitem_lowerdim(tup)\n    except IndexingError:\n        pass\n    retval = self.obj\n    axis = 0\n    for i, key in enumerate(tup):\n        if i >= self.obj.ndim:\n            raise IndexingError('Too many indexers')\n        if com.is_null_slice(key):\n            axis += 1\n            continue\n        retval = getattr(retval, self.name)._getitem_axis(key, axis=axis)\n        if retval.ndim < self.ndim:\n            axis -= 1\n        axis += 1\n    return retval\n",
                        "function_parameter": "(self, tup)",
                        "belong_class_content": "class _iLocIndexer(_LocationIndexer):\n    \"\"\"\n    Purely integer-location based indexing for selection by position.\n\n    ``.iloc[]`` is primarily integer position based (from ``0`` to\n    ``length-1`` of the axis), but may also be used with a boolean\n    array.\n\n    Allowed inputs are:\n\n    - An integer, e.g. ``5``.\n    - A list or array of integers, e.g. ``[4, 3, 0]``.\n    - A slice object with ints, e.g. ``1:7``.\n    - A boolean array.\n    - A ``callable`` function with one argument (the calling Series, DataFrame\n      or Panel) and that returns valid output for indexing (one of the above).\n      This is useful in method chains, when you don't have a reference to the\n      calling object, but would like to base your selection on some value.\n\n    ``.iloc`` will raise ``IndexError`` if a requested indexer is\n    out-of-bounds, except *slice* indexers which allow out-of-bounds\n    indexing (this conforms with python/numpy *slice* semantics).\n\n    See more at ref:`Selection by Position <indexing.integer>`.\n\n    See Also\n    --------\n    DataFrame.iat : Fast integer location scalar accessor.\n    DataFrame.loc : Purely label-location based indexer for selection by label.\n    Series.iloc : Purely integer-location based indexing for\n                   selection by position.\n\n    Examples\n    --------\n\n    >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n    ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n    ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]\n    >>> df = pd.DataFrame(mydict)\n    >>> df\n          a     b     c     d\n    0     1     2     3     4\n    1   100   200   300   400\n    2  1000  2000  3000  4000\n\n    **Indexing just the rows**\n\n    With a scalar integer.\n\n    >>> type(df.iloc[0])\n    <class 'pandas.core.series.Series'>\n    >>> df.iloc[0]\n    a    1\n    b    2\n    c    3\n    d    4\n    Name: 0, dtype: int64\n\n    With a list of integers.\n\n    >>> df.iloc[[0]]\n       a  b  c  d\n    0  1  2  3  4\n    >>> type(df.iloc[[0]])\n    <class 'pandas.core.frame.DataFrame'>\n\n    >>> df.iloc[[0, 1]]\n         a    b    c    d\n    0    1    2    3    4\n    1  100  200  300  400\n\n    With a `slice` object.\n\n    >>> df.iloc[:3]\n          a     b     c     d\n    0     1     2     3     4\n    1   100   200   300   400\n    2  1000  2000  3000  4000\n\n    With a boolean mask the same length as the index.\n\n    >>> df.iloc[[True, False, True]]\n          a     b     c     d\n    0     1     2     3     4\n    2  1000  2000  3000  4000\n\n    With a callable, useful in method chains. The `x` passed\n    to the ``lambda`` is the DataFrame being sliced. This selects\n    the rows whose index label even.\n\n    >>> df.iloc[lambda x: x.index % 2 == 0]\n          a     b     c     d\n    0     1     2     3     4\n    2  1000  2000  3000  4000\n\n    **Indexing both axes**\n\n    You can mix the indexer types for the index and columns. Use ``:`` to\n    select the entire axis.\n\n    With scalar integers.\n\n    >>> df.iloc[0, 1]\n    2\n\n    With lists of integers.\n\n    >>> df.iloc[[0, 2], [1, 3]]\n          b     d\n    0     2     4\n    2  2000  4000\n\n    With `slice` objects.\n\n    >>> df.iloc[1:3, 0:3]\n          a     b     c\n    1   100   200   300\n    2  1000  2000  3000\n\n    With a boolean array whose length matches the columns.\n\n    >>> df.iloc[:, [True, False, True, False]]\n          a     c\n    0     1     3\n    1   100   300\n    2  1000  3000\n\n    With a callable function that expects the Series or DataFrame.\n\n    >>> df.iloc[:, lambda df: [0, 2]]\n          a     c\n    0     1     3\n    1   100   300\n    2  1000  3000\n    \"\"\"\n    _valid_types = (\n        'integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array'\n        )\n    _exception = IndexError\n\n    def _validate_key(self, key, axis):\n        if com.is_bool_indexer(key):\n            if hasattr(key, 'index') and isinstance(key.index, Index):\n                if key.index.inferred_type == 'integer':\n                    raise NotImplementedError(\n                        'iLocation based boolean indexing on an integer type is not available'\n                        )\n                raise ValueError(\n                    'iLocation based boolean indexing cannot use an indexable as a mask'\n                    )\n            return\n        if isinstance(key, slice):\n            return\n        elif is_integer(key):\n            self._validate_integer(key, axis)\n        elif isinstance(key, tuple):\n            raise IndexingError('Too many indexers')\n        elif is_list_like_indexer(key):\n            arr = np.array(key)\n            len_axis = len(self.obj._get_axis(axis))\n            if len(arr) and (arr.max() >= len_axis or arr.min() < -len_axis):\n                raise IndexError('positional indexers are out-of-bounds')\n        else:\n            raise ValueError('Can only index by location with a [{types}]'.\n                format(types=self._valid_types))\n\n    def _has_valid_setitem_indexer(self, indexer):\n        self._has_valid_positional_setitem_indexer(indexer)\n\n    def _is_scalar_access(self, key):\n        if not hasattr(key, '__len__'):\n            return False\n        if len(key) != self.ndim:\n            return False\n        for i, k in enumerate(key):\n            if not is_integer(k):\n                return False\n            ax = self.obj.axes[i]\n            if not ax.is_unique:\n                return False\n        return True\n\n    def _getitem_scalar(self, key):\n        values = self.obj._get_value(*key, takeable=True)\n        return values\n\n    def _validate_integer(self, key, axis):\n        \"\"\"\n        Check that 'key' is a valid position in the desired axis.\n\n        Parameters\n        ----------\n        key : int\n            Requested position\n        axis : int\n            Desired axis\n\n        Returns\n        -------\n        None\n\n        Raises\n        ------\n        IndexError\n            If 'key' is not a valid position in axis 'axis'\n        \"\"\"\n        len_axis = len(self.obj._get_axis(axis))\n        if key >= len_axis or key < -len_axis:\n            raise IndexError('single positional indexer is out-of-bounds')\n\n    def _getitem_tuple(self, tup):\n        self._has_valid_tuple(tup)\n        try:\n            return self._getitem_lowerdim(tup)\n        except IndexingError:\n            pass\n        retval = self.obj\n        axis = 0\n        for i, key in enumerate(tup):\n            if i >= self.obj.ndim:\n                raise IndexingError('Too many indexers')\n            if com.is_null_slice(key):\n                axis += 1\n                continue\n            retval = getattr(retval, self.name)._getitem_axis(key, axis=axis)\n            if retval.ndim < self.ndim:\n                axis -= 1\n            axis += 1\n        return retval\n\n    def _get_slice_axis(self, slice_obj, axis=None):\n        if axis is None:\n            axis = self.axis or 0\n        obj = self.obj\n        if not need_slice(slice_obj):\n            return obj.copy(deep=False)\n        slice_obj = self._convert_slice_indexer(slice_obj, axis)\n        if isinstance(slice_obj, slice):\n            return self._slice(slice_obj, axis=axis, kind='iloc')\n        else:\n            return self.obj._take(slice_obj, axis=axis)\n\n    def _get_list_axis(self, key, axis=None):\n        \"\"\"\n        Return Series values by list or array of integers\n\n        Parameters\n        ----------\n        key : list-like positional indexer\n        axis : int (can only be zero)\n\n        Returns\n        -------\n        Series object\n        \"\"\"\n        if axis is None:\n            axis = self.axis or 0\n        try:\n            return self.obj._take(key, axis=axis)\n        except IndexError:\n            raise IndexError('positional indexers are out-of-bounds')\n\n    def _getitem_axis(self, key, axis=None):\n        if axis is None:\n            axis = self.axis or 0\n        if isinstance(key, slice):\n            return self._get_slice_axis(key, axis=axis)\n        if isinstance(key, list):\n            key = np.asarray(key)\n        if com.is_bool_indexer(key):\n            self._validate_key(key, axis)\n            return self._getbool_axis(key, axis=axis)\n        elif is_list_like_indexer(key):\n            return self._get_list_axis(key, axis=axis)\n        else:\n            key = item_from_zerodim(key)\n            if not is_integer(key):\n                raise TypeError(\n                    'Cannot index by location index with a non-integer key')\n            self._validate_integer(key, axis)\n            return self._get_loc(key, axis=axis)\n\n    def _convert_to_indexer(self, obj, axis=None, is_setter=False):\n        \"\"\" much simpler as we only have to deal with our valid types \"\"\"\n        if axis is None:\n            axis = self.axis or 0\n        if isinstance(obj, slice):\n            return self._convert_slice_indexer(obj, axis)\n        elif is_float(obj):\n            return self._convert_scalar_indexer(obj, axis)\n        try:\n            self._validate_key(obj, axis)\n            return obj\n        except ValueError:\n            raise ValueError('Can only index by location with a [{types}]'.\n                format(types=self._valid_types))\n",
                        "belong_class_name": "_iLocIndexer",
                        "belong_class_init": "",
                        "called_function_name": "_has_valid_tuple",
                        "called_function_content": "def _getitem_tuple(self, tup):\n    self._has_valid_tuple(tup)\n",
                        "called_arguments": "(tup)",
                        "called_function_parameter": "(self, key)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_has_valid_tuple",
                        "function_content": "def _has_valid_tuple(self, key):\n    \"\"\" check the key for valid keys across my indexer \"\"\"\n    for i, k in enumerate(key):\n        if i >= self.obj.ndim:\n            raise IndexingError('Too many indexers')\n        try:\n            self._validate_key(k, i)\n        except ValueError:\n            raise ValueError(\n                'Location based indexing can only have [{types}] types'.\n                format(types=self._valid_types))\n",
                        "function_parameter": "(self, key)",
                        "belong_class_content": "class _NDFrameIndexer(_NDFrameIndexerBase):\n    _valid_types = None\n    _exception = KeyError\n    axis = None\n\n    def __call__(self, axis=None):\n        new_self = self.__class__(self.name, self.obj)\n        if axis is not None:\n            axis = self.obj._get_axis_number(axis)\n        new_self.axis = axis\n        return new_self\n\n    def __iter__(self):\n        raise NotImplementedError('ix is not iterable')\n\n    def __getitem__(self, key):\n        if type(key) is tuple:\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n            try:\n                values = self.obj._get_value(*key)\n                if is_scalar(values):\n                    return values\n            except Exception:\n                pass\n            return self._getitem_tuple(key)\n        else:\n            axis = self.axis or 0\n            key = com.apply_if_callable(key, self.obj)\n            return self._getitem_axis(key, axis=axis)\n\n    def _get_label(self, label, axis=None):\n        if axis is None:\n            axis = self.axis or 0\n        if self.ndim == 1:\n            return self.obj._xs(label, axis=axis)\n        elif isinstance(label, tuple) and isinstance(label[axis], slice):\n            raise IndexingError('no slices here, handle elsewhere')\n        return self.obj._xs(label, axis=axis)\n\n    def _get_loc(self, key, axis=None):\n        if axis is None:\n            axis = self.axis\n        return self.obj._ixs(key, axis=axis)\n\n    def _slice(self, obj, axis=None, kind=None):\n        if axis is None:\n            axis = self.axis\n        return self.obj._slice(obj, axis=axis, kind=kind)\n\n    def _get_setitem_indexer(self, key):\n        if self.axis is not None:\n            return self._convert_tuple(key, is_setter=True)\n        axis = self.obj._get_axis(0)\n        if isinstance(axis, MultiIndex) and self.name != 'iloc':\n            try:\n                return axis.get_loc(key)\n            except Exception:\n                pass\n        if isinstance(key, tuple):\n            try:\n                return self._convert_tuple(key, is_setter=True)\n            except IndexingError:\n                pass\n        if isinstance(key, range):\n            return self._convert_range(key, is_setter=True)\n        try:\n            return self._convert_to_indexer(key, is_setter=True)\n        except TypeError as e:\n            if 'cannot do' in str(e):\n                raise\n            raise IndexingError(key)\n\n    def __setitem__(self, key, value):\n        if isinstance(key, tuple):\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        else:\n            key = com.apply_if_callable(key, self.obj)\n        indexer = self._get_setitem_indexer(key)\n        self._setitem_with_indexer(indexer, value)\n\n    def _validate_key(self, key, axis):\n        \"\"\"\n        Ensure that key is valid for current indexer.\n\n        Parameters\n        ----------\n        key : scalar, slice or list-like\n            The key requested\n\n        axis : int\n            Dimension on which the indexing is being made\n\n        Raises\n        ------\n        TypeError\n            If the key (or some element of it) has wrong type\n\n        IndexError\n            If the key (or some element of it) is out of bounds\n\n        KeyError\n            If the key was not found\n        \"\"\"\n        raise AbstractMethodError()\n\n    def _has_valid_tuple(self, key):\n        \"\"\" check the key for valid keys across my indexer \"\"\"\n        for i, k in enumerate(key):\n            if i >= self.obj.ndim:\n                raise IndexingError('Too many indexers')\n            try:\n                self._validate_key(k, i)\n            except ValueError:\n                raise ValueError(\n                    'Location based indexing can only have [{types}] types'\n                    .format(types=self._valid_types))\n\n    def _is_nested_tuple_indexer(self, tup):\n        if any(isinstance(ax, MultiIndex) for ax in self.obj.axes):\n            return any(is_nested_tuple(tup, ax) for ax in self.obj.axes)\n        return False\n\n    def _convert_tuple(self, key, is_setter=False):\n        keyidx = []\n        if self.axis is not None:\n            axis = self.obj._get_axis_number(self.axis)\n            for i in range(self.ndim):\n                if i == axis:\n                    keyidx.append(self._convert_to_indexer(key, axis=axis,\n                        is_setter=is_setter))\n                else:\n                    keyidx.append(slice(None))\n        else:\n            for i, k in enumerate(key):\n                if i >= self.obj.ndim:\n                    raise IndexingError('Too many indexers')\n                idx = self._convert_to_indexer(k, axis=i, is_setter=is_setter)\n                keyidx.append(idx)\n        return tuple(keyidx)\n\n    def _convert_range(self, key, is_setter=False):\n        \"\"\" convert a range argument \"\"\"\n        return list(key)\n\n    def _convert_scalar_indexer(self, key, axis):\n        if axis is None:\n            axis = 0\n        ax = self.obj._get_axis(min(axis, self.ndim - 1))\n        return ax._convert_scalar_indexer(key, kind=self.name)\n\n    def _convert_slice_indexer(self, key, axis):\n        ax = self.obj._get_axis(min(axis, self.ndim - 1))\n        return ax._convert_slice_indexer(key, kind=self.name)\n\n    def _has_valid_setitem_indexer(self, indexer):\n        return True\n\n    def _has_valid_positional_setitem_indexer(self, indexer):\n        \"\"\" validate that an positional indexer cannot enlarge its target\n        will raise if needed, does not modify the indexer externally\n        \"\"\"\n        if isinstance(indexer, dict):\n            raise IndexError('{0} cannot enlarge its target object'.format(\n                self.name))\n        else:\n            if not isinstance(indexer, tuple):\n                indexer = self._tuplify(indexer)\n            for ax, i in zip(self.obj.axes, indexer):\n                if isinstance(i, slice):\n                    pass\n                elif is_list_like_indexer(i):\n                    pass\n                elif is_integer(i):\n                    if i >= len(ax):\n                        raise IndexError(\n                            '{name} cannot enlarge its target object'.\n                            format(name=self.name))\n                elif isinstance(i, dict):\n                    raise IndexError('{name} cannot enlarge its target object'\n                        .format(name=self.name))\n        return True\n\n    def _setitem_with_indexer(self, indexer, value):\n        self._has_valid_setitem_indexer(indexer)\n        from pandas import Series\n        info_axis = self.obj._info_axis_number\n        take_split_path = self.obj._is_mixed_type\n        if not take_split_path and self.obj._data.blocks:\n            blk, = self.obj._data.blocks\n            if 1 < blk.ndim:\n                val = list(value.values()) if isinstance(value, dict\n                    ) else value\n                take_split_path = not blk._can_hold_element(val)\n        if isinstance(indexer, tuple) and len(indexer) == len(self.obj.axes):\n            for i, ax in zip(indexer, self.obj.axes):\n                if isinstance(ax, MultiIndex) and not (is_integer(i) or com\n                    .is_null_slice(i)):\n                    take_split_path = True\n                    break\n        if isinstance(indexer, tuple):\n            nindexer = []\n            for i, idx in enumerate(indexer):\n                if isinstance(idx, dict):\n                    key, _ = convert_missing_indexer(idx)\n                    if self.ndim > 1 and i == self.obj._info_axis_number:\n                        len_non_info_axes = (len(_ax) for _i, _ax in\n                            enumerate(self.obj.axes) if _i != i)\n                        if any(not l for l in len_non_info_axes):\n                            if not is_list_like_indexer(value):\n                                raise ValueError(\n                                    'cannot set a frame with no defined index and a scalar'\n                                    )\n                            self.obj[key] = value\n                            return self.obj\n                        self.obj[key] = _infer_fill_value(value)\n                        new_indexer = convert_from_missing_indexer_tuple(\n                            indexer, self.obj.axes)\n                        self._setitem_with_indexer(new_indexer, value)\n                        return self.obj\n                    index = self.obj._get_axis(i)\n                    labels = index.insert(len(index), key)\n                    self.obj._data = self.obj.reindex(labels, axis=i)._data\n                    self.obj._maybe_update_cacher(clear=True)\n                    self.obj._is_copy = None\n                    nindexer.append(labels.get_loc(key))\n                else:\n                    nindexer.append(idx)\n            indexer = tuple(nindexer)\n        else:\n            indexer, missing = convert_missing_indexer(indexer)\n            if missing:\n                if self.ndim == 1:\n                    index = self.obj.index\n                    new_index = index.insert(len(index), indexer)\n                    if index.is_unique:\n                        new_indexer = index.get_indexer([new_index[-1]])\n                        if (new_indexer != -1).any():\n                            return self._setitem_with_indexer(new_indexer,\n                                value)\n                    new_values = Series([value])._values\n                    if len(self.obj._values):\n                        try:\n                            new_values = np.concatenate([self.obj._values,\n                                new_values])\n                        except TypeError:\n                            as_obj = self.obj.astype(object)\n                            new_values = np.concatenate([as_obj, new_values])\n                    self.obj._data = self.obj._constructor(new_values,\n                        index=new_index, name=self.obj.name)._data\n                    self.obj._maybe_update_cacher(clear=True)\n                    return self.obj\n                elif self.ndim == 2:\n                    if not len(self.obj.columns):\n                        raise ValueError(\n                            'cannot set a frame with no defined columns')\n                    if isinstance(value, Series):\n                        value = value.reindex(index=self.obj.columns, copy=True\n                            )\n                        value.name = indexer\n                    else:\n                        if is_list_like_indexer(value):\n                            if len(value) != len(self.obj.columns):\n                                raise ValueError(\n                                    'cannot set a row with mismatched columns')\n                        value = Series(value, index=self.obj.columns, name=\n                            indexer)\n                    self.obj._data = self.obj.append(value)._data\n                    self.obj._maybe_update_cacher(clear=True)\n                    return self.obj\n                elif self.ndim >= 3:\n                    return self.obj.__setitem__(indexer, value)\n        item_labels = self.obj._get_axis(info_axis)\n        if take_split_path:\n            if not isinstance(indexer, tuple):\n                indexer = self._tuplify(indexer)\n            if isinstance(value, ABCSeries):\n                value = self._align_series(indexer, value)\n            info_idx = indexer[info_axis]\n            if is_integer(info_idx):\n                info_idx = [info_idx]\n            labels = item_labels[info_idx]\n            if len(labels) == 1 and isinstance(self.obj[labels[0]].axes[0],\n                MultiIndex):\n                item = labels[0]\n                obj = self.obj[item]\n                index = obj.index\n                idx = indexer[:info_axis][0]\n                plane_indexer = tuple([idx]) + indexer[info_axis + 1:]\n                lplane_indexer = length_of_indexer(plane_indexer[0], index)\n                if is_list_like_indexer(value) and np.iterable(value\n                    ) and lplane_indexer != len(value):\n                    if len(obj[idx]) != len(value):\n                        raise ValueError(\n                            'cannot set using a multi-index selection indexer with a different length than the value'\n                            )\n                    value = getattr(value, 'values', value).ravel()\n                    idx = index._convert_slice_indexer(idx)\n                    obj._consolidate_inplace()\n                    obj = obj.copy()\n                    obj._data = obj._data.setitem(indexer=tuple([idx]),\n                        value=value)\n                    self.obj[item] = obj\n                    return\n            else:\n                plane_indexer = indexer[:info_axis] + indexer[info_axis + 1:]\n                if info_axis > 0:\n                    plane_axis = self.obj.axes[:info_axis][0]\n                    lplane_indexer = length_of_indexer(plane_indexer[0],\n                        plane_axis)\n                else:\n                    lplane_indexer = 0\n\n            def setter(item, v):\n                s = self.obj[item]\n                pi = plane_indexer[0] if lplane_indexer == 1 else plane_indexer\n                if isinstance(pi, tuple) and all(com.is_null_slice(idx) or\n                    com.is_full_slice(idx, len(self.obj)) for idx in pi):\n                    s = v\n                else:\n                    s._consolidate_inplace()\n                    s = s.copy()\n                    s._data = s._data.setitem(indexer=pi, value=v)\n                    s._maybe_update_cacher(clear=True)\n                self.obj[item] = s\n\n            def can_do_equal_len():\n                \"\"\" return True if we have an equal len settable \"\"\"\n                if not len(labels) == 1 or not np.iterable(value) or is_scalar(\n                    plane_indexer[0]):\n                    return False\n                item = labels[0]\n                index = self.obj[item].index\n                values_len = len(value)\n                if len(index) == values_len:\n                    return True\n                elif lplane_indexer == values_len:\n                    return True\n                return False\n            if is_list_like_indexer(value) and getattr(value, 'ndim', 1) > 0:\n                if isinstance(value, ABCDataFrame) and value.ndim > 1:\n                    sub_indexer = list(indexer)\n                    multiindex_indexer = isinstance(labels, MultiIndex)\n                    for item in labels:\n                        if item in value:\n                            sub_indexer[info_axis] = item\n                            v = self._align_series(tuple(sub_indexer),\n                                value[item], multiindex_indexer)\n                        else:\n                            v = np.nan\n                        setter(item, v)\n                elif hasattr(value, 'ndim') and value.ndim == 2 or (not\n                    hasattr(value, 'ndim') and np.array(value).ndim) == 2:\n                    value = np.array(value, dtype=object)\n                    if len(labels) != value.shape[1]:\n                        raise ValueError(\n                            'Must have equal len keys and value when setting with an ndarray'\n                            )\n                    for i, item in enumerate(labels):\n                        setter(item, value[:, i].tolist())\n                elif can_do_equal_len():\n                    setter(labels[0], value)\n                else:\n                    if len(labels) != len(value):\n                        raise ValueError(\n                            'Must have equal len keys and value when setting with an iterable'\n                            )\n                    for item, v in zip(labels, value):\n                        setter(item, v)\n            else:\n                for item in labels:\n                    setter(item, value)\n        else:\n            if isinstance(indexer, tuple):\n                indexer = maybe_convert_ix(*indexer)\n                if len(indexer) > info_axis and is_integer(indexer[info_axis]\n                    ) and all(com.is_null_slice(idx) for i, idx in\n                    enumerate(indexer) if i != info_axis\n                    ) and item_labels.is_unique:\n                    self.obj[item_labels[indexer[info_axis]]] = value\n                    return\n            if isinstance(value, (ABCSeries, dict)):\n                value = self._align_series(indexer, Series(value))\n            elif isinstance(value, ABCDataFrame):\n                value = self._align_frame(indexer, value)\n            if isinstance(value, ABCPanel):\n                value = self._align_panel(indexer, value)\n            self.obj._check_is_chained_assignment_possible()\n            self.obj._consolidate_inplace()\n            self.obj._data = self.obj._data.setitem(indexer=indexer, value=\n                value)\n            self.obj._maybe_update_cacher(clear=True)\n\n    def _align_series(self, indexer, ser, multiindex_indexer=False):\n        \"\"\"\n        Parameters\n        ----------\n        indexer : tuple, slice, scalar\n            The indexer used to get the locations that will be set to\n            `ser`\n\n        ser : pd.Series\n            The values to assign to the locations specified by `indexer`\n\n        multiindex_indexer : boolean, optional\n            Defaults to False. Should be set to True if `indexer` was from\n            a `pd.MultiIndex`, to avoid unnecessary broadcasting.\n\n\n        Returns:\n        --------\n        `np.array` of `ser` broadcast to the appropriate shape for assignment\n        to the locations selected by `indexer`\n\n        \"\"\"\n        if isinstance(indexer, (slice, np.ndarray, list, Index)):\n            indexer = tuple([indexer])\n        if isinstance(indexer, tuple):\n\n            def ravel(i):\n                return i.ravel() if isinstance(i, np.ndarray) else i\n            indexer = tuple(map(ravel, indexer))\n            aligners = [(not com.is_null_slice(idx)) for idx in indexer]\n            sum_aligners = sum(aligners)\n            single_aligner = sum_aligners == 1\n            is_frame = self.obj.ndim == 2\n            is_panel = self.obj.ndim >= 3\n            obj = self.obj\n            if is_frame:\n                single_aligner = single_aligner and aligners[0]\n            elif is_panel:\n                single_aligner = single_aligner and (aligners[1] or aligners[2]\n                    )\n            if sum_aligners == self.ndim and all(is_sequence(_) for _ in\n                indexer):\n                ser = ser.reindex(obj.axes[0][indexer[0]], copy=True)._values\n                if len(indexer) > 1 and not multiindex_indexer:\n                    len_indexer = len(indexer[1])\n                    ser = np.tile(ser, len_indexer).reshape(len_indexer, -1).T\n                return ser\n            for i, idx in enumerate(indexer):\n                ax = obj.axes[i]\n                if is_sequence(idx) or isinstance(idx, slice):\n                    if single_aligner and com.is_null_slice(idx):\n                        continue\n                    new_ix = ax[idx]\n                    if not is_list_like_indexer(new_ix):\n                        new_ix = Index([new_ix])\n                    else:\n                        new_ix = Index(new_ix)\n                    if ser.index.equals(new_ix) or not len(new_ix):\n                        return ser._values.copy()\n                    return ser.reindex(new_ix)._values\n                elif single_aligner and is_frame:\n                    ax = self.obj.axes[1]\n                    if ser.index.equals(ax) or not len(ax):\n                        return ser._values.copy()\n                    return ser.reindex(ax)._values\n                elif single_aligner:\n                    broadcast = []\n                    for n, labels in enumerate(self.obj._get_plane_axes(i)):\n                        if len(labels & ser.index):\n                            ser = ser.reindex(labels)\n                        else:\n                            broadcast.append((n, len(labels)))\n                    ser = ser._values.copy()\n                    for axis, l in broadcast:\n                        shape = [-1] * (len(broadcast) + 1)\n                        shape[axis] = l\n                        ser = np.tile(ser, l).reshape(shape)\n                    if self.obj.ndim == 3:\n                        ser = ser.T\n                    return ser\n        elif is_scalar(indexer):\n            ax = self.obj._get_axis(1)\n            if ser.index.equals(ax):\n                return ser._values.copy()\n            return ser.reindex(ax)._values\n        raise ValueError('Incompatible indexer with Series')\n\n    def _align_frame(self, indexer, df):\n        is_frame = self.obj.ndim == 2\n        is_panel = self.obj.ndim >= 3\n        if isinstance(indexer, tuple):\n            idx, cols = None, None\n            sindexers = []\n            for i, ix in enumerate(indexer):\n                ax = self.obj.axes[i]\n                if is_sequence(ix) or isinstance(ix, slice):\n                    if isinstance(ix, np.ndarray):\n                        ix = ix.ravel()\n                    if idx is None:\n                        idx = ax[ix]\n                    elif cols is None:\n                        cols = ax[ix]\n                    else:\n                        break\n                else:\n                    sindexers.append(i)\n            if is_panel:\n                if len(sindexers) == 1 and sindexers[0] != 0:\n                    df = df.T\n                if idx is None:\n                    idx = df.index\n                if cols is None:\n                    cols = df.columns\n            if idx is not None and cols is not None:\n                if df.index.equals(idx) and df.columns.equals(cols):\n                    val = df.copy()._values\n                else:\n                    val = df.reindex(idx, columns=cols)._values\n                return val\n        elif (isinstance(indexer, slice) or is_list_like_indexer(indexer)\n            ) and is_frame:\n            ax = self.obj.index[indexer]\n            if df.index.equals(ax):\n                val = df.copy()._values\n            else:\n                if isinstance(ax, MultiIndex) and isinstance(df.index,\n                    MultiIndex) and ax.nlevels != df.index.nlevels:\n                    raise TypeError(\n                        'cannot align on a multi-index with out specifying the join levels'\n                        )\n                val = df.reindex(index=ax)._values\n            return val\n        elif is_scalar(indexer) and is_panel:\n            idx = self.obj.axes[1]\n            cols = self.obj.axes[2]\n            if idx.equals(df.index) and cols.equals(df.columns):\n                return df.copy()._values\n            return df.reindex(idx, columns=cols)._values\n        raise ValueError('Incompatible indexer with DataFrame')\n\n    def _align_panel(self, indexer, df):\n        raise NotImplementedError(\n            'cannot set using an indexer with a Panel yet!')\n\n    def _getitem_tuple(self, tup):\n        try:\n            return self._getitem_lowerdim(tup)\n        except IndexingError:\n            pass\n        self._has_valid_tuple(tup)\n        if self._multi_take_opportunity(tup):\n            return self._multi_take(tup)\n        retval = self.obj\n        for i, key in enumerate(tup):\n            if i >= self.obj.ndim:\n                raise IndexingError('Too many indexers')\n            if com.is_null_slice(key):\n                continue\n            retval = getattr(retval, self.name)._getitem_axis(key, axis=i)\n        return retval\n\n    def _multi_take_opportunity(self, tup):\n        \"\"\"\n        Check whether there is the possibility to use ``_multi_take``.\n        Currently the limit is that all axes being indexed must be indexed with\n        list-likes.\n\n        Parameters\n        ----------\n        tup : tuple\n            Tuple of indexers, one per axis\n\n        Returns\n        -------\n        boolean: Whether the current indexing can be passed through _multi_take\n        \"\"\"\n        if not all(is_list_like_indexer(x) for x in tup):\n            return False\n        if any(com.is_bool_indexer(x) for x in tup):\n            return False\n        return True\n\n    def _multi_take(self, tup):\n        \"\"\"\n        Create the indexers for the passed tuple of keys, and execute the take\n        operation. This allows the take operation to be executed all at once -\n        rather than once for each dimension - improving efficiency.\n\n        Parameters\n        ----------\n        tup : tuple\n            Tuple of indexers, one per axis\n\n        Returns\n        -------\n        values: same type as the object being indexed\n        \"\"\"\n        o = self.obj\n        d = {axis: self._get_listlike_indexer(key, axis) for key, axis in\n            zip(tup, o._AXIS_ORDERS)}\n        return o._reindex_with_indexers(d, copy=True, allow_dups=True)\n\n    def _convert_for_reindex(self, key, axis=None):\n        return key\n\n    def _handle_lowerdim_multi_index_axis0(self, tup):\n        try:\n            return self._get_label(tup, axis=self.axis)\n        except TypeError:\n            pass\n        except Exception as e1:\n            if isinstance(tup[0], (slice, Index)):\n                raise IndexingError('Handle elsewhere')\n            ax0 = self.obj._get_axis(0)\n            if not ax0.is_lexsorted_for_tuple(tup):\n                raise e1\n        return None\n\n    def _getitem_lowerdim(self, tup):\n        if self.axis is not None:\n            axis = self.obj._get_axis_number(self.axis)\n            return self._getitem_axis(tup, axis=axis)\n        if self._is_nested_tuple_indexer(tup):\n            return self._getitem_nested_tuple(tup)\n        ax0 = self.obj._get_axis(0)\n        if isinstance(ax0, MultiIndex) and self.name != 'iloc':\n            result = self._handle_lowerdim_multi_index_axis0(tup)\n            if result is not None:\n                return result\n        if len(tup) > self.obj.ndim:\n            raise IndexingError('Too many indexers. handle elsewhere')\n        for i, key in enumerate(tup):\n            if is_label_like(key) or isinstance(key, tuple):\n                section = self._getitem_axis(key, axis=i)\n                if not is_list_like_indexer(section):\n                    return section\n                elif section.ndim == self.ndim:\n                    new_key = tup[:i] + (_NS,) + tup[i + 1:]\n                else:\n                    new_key = tup[:i] + tup[i + 1:]\n                    if isinstance(section, ABCDataFrame) and i > 0 and len(\n                        new_key) == 2:\n                        a, b = new_key\n                        new_key = b, a\n                    if len(new_key) == 1:\n                        new_key, = new_key\n                if com.is_null_slice(new_key):\n                    return section\n                return getattr(section, self.name)[new_key]\n        raise IndexingError('not applicable')\n\n    def _getitem_nested_tuple(self, tup):\n        if len(tup) > self.ndim:\n            result = self._handle_lowerdim_multi_index_axis0(tup)\n            if result is not None:\n                return result\n            return self._getitem_axis(tup, axis=self.axis)\n        obj = self.obj\n        axis = 0\n        for i, key in enumerate(tup):\n            if com.is_null_slice(key):\n                axis += 1\n                continue\n            current_ndim = obj.ndim\n            obj = getattr(obj, self.name)._getitem_axis(key, axis=axis)\n            axis += 1\n            if is_scalar(obj) or not hasattr(obj, 'ndim'):\n                break\n            if obj.ndim < current_ndim:\n                if i >= 1 and current_ndim == 3 and obj.ndim == 2:\n                    obj = obj.T\n                axis -= 1\n        return obj\n\n    def _getitem_axis(self, key, axis=None):\n        if axis is None:\n            axis = self.axis or 0\n        if is_iterator(key):\n            key = list(key)\n        self._validate_key(key, axis)\n        labels = self.obj._get_axis(axis)\n        if isinstance(key, slice):\n            return self._get_slice_axis(key, axis=axis)\n        elif is_list_like_indexer(key) and not (isinstance(key, tuple) and\n            isinstance(labels, MultiIndex)):\n            if hasattr(key, 'ndim') and key.ndim > 1:\n                raise ValueError('Cannot index with multidimensional key')\n            return self._getitem_iterable(key, axis=axis)\n        else:\n            key = labels._maybe_cast_indexer(key)\n            if is_integer(key):\n                if axis == 0 and isinstance(labels, MultiIndex):\n                    try:\n                        return self._get_label(key, axis=axis)\n                    except (KeyError, TypeError):\n                        if self.obj.index.levels[0].is_integer():\n                            raise\n                if not labels.is_floating() and not labels.is_integer():\n                    return self._get_loc(key, axis=axis)\n            return self._get_label(key, axis=axis)\n\n    def _get_listlike_indexer(self, key, axis, raise_missing=False):\n        \"\"\"\n        Transform a list-like of keys into a new index and an indexer.\n\n        Parameters\n        ----------\n        key : list-like\n            Target labels\n        axis: int\n            Dimension on which the indexing is being made\n        raise_missing: bool\n            Whether to raise a KeyError if some labels are not found. Will be\n            removed in the future, and then this method will always behave as\n            if raise_missing=True.\n\n        Raises\n        ------\n        KeyError\n            If at least one key was requested but none was found, and\n            raise_missing=True.\n\n        Returns\n        -------\n        keyarr: Index\n            New index (coinciding with 'key' if the axis is unique)\n        values : array-like\n            An indexer for the return object; -1 denotes keys not found\n        \"\"\"\n        o = self.obj\n        ax = o._get_axis(axis)\n        indexer, keyarr = ax._convert_listlike_indexer(key, kind=self.name)\n        if indexer is not None and (indexer != -1).all():\n            self._validate_read_indexer(key, indexer, axis, raise_missing=\n                raise_missing)\n            return ax[indexer], indexer\n        if ax.is_unique:\n            if len(ax) or not len(key):\n                key = self._convert_for_reindex(key, axis)\n            indexer = ax.get_indexer_for(key)\n            keyarr = ax.reindex(keyarr)[0]\n        else:\n            keyarr, indexer, new_indexer = ax._reindex_non_unique(keyarr)\n        self._validate_read_indexer(keyarr, indexer, o._get_axis_number(\n            axis), raise_missing=raise_missing)\n        return keyarr, indexer\n\n    def _getitem_iterable(self, key, axis=None):\n        \"\"\"\n        Index current object with an an iterable key (which can be a boolean\n        indexer, or a collection of keys).\n\n        Parameters\n        ----------\n        key : iterable\n            Target labels, or boolean indexer\n        axis: int, default None\n            Dimension on which the indexing is being made\n\n        Raises\n        ------\n        KeyError\n            If no key was found. Will change in the future to raise if not all\n            keys were found.\n        IndexingError\n            If the boolean indexer is unalignable with the object being\n            indexed.\n\n        Returns\n        -------\n        scalar, DataFrame, or Series: indexed value(s),\n        \"\"\"\n        if axis is None:\n            axis = self.axis or 0\n        self._validate_key(key, axis)\n        labels = self.obj._get_axis(axis)\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(labels, key)\n            inds, = key.nonzero()\n            return self.obj._take(inds, axis=axis)\n        else:\n            keyarr, indexer = self._get_listlike_indexer(key, axis,\n                raise_missing=False)\n            return self.obj._reindex_with_indexers({axis: [keyarr, indexer]\n                }, copy=True, allow_dups=True)\n\n    def _validate_read_indexer(self, key, indexer, axis, raise_missing=False):\n        \"\"\"\n        Check that indexer can be used to return a result (e.g. at least one\n        element was found, unless the list of keys was actually empty).\n\n        Parameters\n        ----------\n        key : list-like\n            Target labels (only used to show correct error message)\n        indexer: array-like of booleans\n            Indices corresponding to the key (with -1 indicating not found)\n        axis: int\n            Dimension on which the indexing is being made\n        raise_missing: bool\n            Whether to raise a KeyError if some labels are not found. Will be\n            removed in the future, and then this method will always behave as\n            if raise_missing=True.\n\n        Raises\n        ------\n        KeyError\n            If at least one key was requested but none was found, and\n            raise_missing=True.\n        \"\"\"\n        ax = self.obj._get_axis(axis)\n        if len(key) == 0:\n            return\n        missing = (indexer < 0).sum()\n        if missing:\n            if missing == len(indexer):\n                raise KeyError('None of [{key}] are in the [{axis}]'.format\n                    (key=key, axis=self.obj._get_axis_name(axis)))\n            if not (self.name == 'loc' and not raise_missing):\n                not_found = list(set(key) - set(ax))\n                raise KeyError('{} not in index'.format(not_found))\n            _missing_key_warning = textwrap.dedent(\n                \"\"\"\n            Passing list-likes to .loc or [] with any missing label will raise\n            KeyError in the future, you can use .reindex() as an alternative.\n\n            See the documentation here:\n            https://pandas.pydata.org/pandas-docs/stable/indexing.html#deprecate-loc-reindex-listlike\"\"\"\n                )\n            if not (ax.is_categorical() or ax.is_interval()):\n                warnings.warn(_missing_key_warning, FutureWarning, stacklevel=6\n                    )\n\n    def _convert_to_indexer(self, obj, axis=None, is_setter=False,\n        raise_missing=False):\n        \"\"\"\n        Convert indexing key into something we can use to do actual fancy\n        indexing on an ndarray\n\n        Examples\n        ix[:5] -> slice(0, 5)\n        ix[[1,2,3]] -> [1,2,3]\n        ix[['foo', 'bar', 'baz']] -> [i, j, k] (indices of foo, bar, baz)\n\n        Going by Zen of Python?\n        'In the face of ambiguity, refuse the temptation to guess.'\n        raise AmbiguousIndexError with integer labels?\n        - No, prefer label-based indexing\n        \"\"\"\n        if axis is None:\n            axis = self.axis or 0\n        labels = self.obj._get_axis(axis)\n        if isinstance(obj, slice):\n            return self._convert_slice_indexer(obj, axis)\n        try:\n            obj = self._convert_scalar_indexer(obj, axis)\n        except TypeError:\n            if is_setter:\n                pass\n        is_int_index = labels.is_integer()\n        is_int_positional = is_integer(obj) and not is_int_index\n        try:\n            return labels.get_loc(obj)\n        except LookupError:\n            if isinstance(obj, tuple) and isinstance(labels, MultiIndex):\n                if is_setter and len(obj) == labels.nlevels:\n                    return {'key': obj}\n                raise\n        except TypeError:\n            pass\n        except ValueError:\n            if not is_int_positional:\n                raise\n        if is_int_positional:\n            if is_setter:\n                if self.name == 'loc':\n                    return {'key': obj}\n                if obj >= self.obj.shape[axis] and not isinstance(labels,\n                    MultiIndex):\n                    raise ValueError(\n                        'cannot set by positional indexing with enlargement')\n            return obj\n        if is_nested_tuple(obj, labels):\n            return labels.get_locs(obj)\n        elif is_list_like_indexer(obj):\n            if com.is_bool_indexer(obj):\n                obj = check_bool_indexer(labels, obj)\n                inds, = obj.nonzero()\n                return inds\n            else:\n                kwargs = {'raise_missing': True if is_setter else raise_missing\n                    }\n                return self._get_listlike_indexer(obj, axis, **kwargs)[1]\n        else:\n            try:\n                return labels.get_loc(obj)\n            except LookupError:\n                if not is_list_like_indexer(obj) and is_setter:\n                    return {'key': obj}\n                raise\n\n    def _tuplify(self, loc):\n        tup = [slice(None, None) for _ in range(self.ndim)]\n        tup[0] = loc\n        return tuple(tup)\n\n    def _get_slice_axis(self, slice_obj, axis=None):\n        obj = self.obj\n        if axis is None:\n            axis = self.axis or 0\n        if not need_slice(slice_obj):\n            return obj.copy(deep=False)\n        indexer = self._convert_slice_indexer(slice_obj, axis)\n        if isinstance(indexer, slice):\n            return self._slice(indexer, axis=axis, kind='iloc')\n        else:\n            return self.obj._take(indexer, axis=axis)\n",
                        "belong_class_name": "_NDFrameIndexer",
                        "belong_class_init": "",
                        "called_function_name": "_validate_key",
                        "called_function_content": "def _has_valid_tuple(self, key):\n    \"\"\" check the key for valid keys across my indexer \"\"\"\n    for i, k in enumerate(key):\n        if i >= self.obj.ndim:\n            raise IndexingError('Too many indexers')\n        try:\n            self._validate_key(k, i)\n",
                        "called_arguments": "(k, i)",
                        "called_function_parameter": "(self, key, axis)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_validate_key",
                        "function_content": "def _validate_key(self, key, axis):\n    if com.is_bool_indexer(key):\n        if hasattr(key, 'index') and isinstance(key.index, Index):\n            if key.index.inferred_type == 'integer':\n                raise NotImplementedError(\n                    'iLocation based boolean indexing on an integer type is not available'\n                    )\n            raise ValueError(\n                'iLocation based boolean indexing cannot use an indexable as a mask'\n                )\n        return\n    if isinstance(key, slice):\n        return\n    elif is_integer(key):\n        self._validate_integer(key, axis)\n    elif isinstance(key, tuple):\n        raise IndexingError('Too many indexers')\n    elif is_list_like_indexer(key):\n        arr = np.array(key)\n        len_axis = len(self.obj._get_axis(axis))\n        if len(arr) and (arr.max() >= len_axis or arr.min() < -len_axis):\n            raise IndexError('positional indexers are out-of-bounds')\n    else:\n        raise ValueError('Can only index by location with a [{types}]'.\n            format(types=self._valid_types))\n",
                        "function_parameter": "(self, key, axis)",
                        "belong_class_content": "class _iLocIndexer(_LocationIndexer):\n    \"\"\"\n    Purely integer-location based indexing for selection by position.\n\n    ``.iloc[]`` is primarily integer position based (from ``0`` to\n    ``length-1`` of the axis), but may also be used with a boolean\n    array.\n\n    Allowed inputs are:\n\n    - An integer, e.g. ``5``.\n    - A list or array of integers, e.g. ``[4, 3, 0]``.\n    - A slice object with ints, e.g. ``1:7``.\n    - A boolean array.\n    - A ``callable`` function with one argument (the calling Series, DataFrame\n      or Panel) and that returns valid output for indexing (one of the above).\n      This is useful in method chains, when you don't have a reference to the\n      calling object, but would like to base your selection on some value.\n\n    ``.iloc`` will raise ``IndexError`` if a requested indexer is\n    out-of-bounds, except *slice* indexers which allow out-of-bounds\n    indexing (this conforms with python/numpy *slice* semantics).\n\n    See more at ref:`Selection by Position <indexing.integer>`.\n\n    See Also\n    --------\n    DataFrame.iat : Fast integer location scalar accessor.\n    DataFrame.loc : Purely label-location based indexer for selection by label.\n    Series.iloc : Purely integer-location based indexing for\n                   selection by position.\n\n    Examples\n    --------\n\n    >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n    ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n    ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]\n    >>> df = pd.DataFrame(mydict)\n    >>> df\n          a     b     c     d\n    0     1     2     3     4\n    1   100   200   300   400\n    2  1000  2000  3000  4000\n\n    **Indexing just the rows**\n\n    With a scalar integer.\n\n    >>> type(df.iloc[0])\n    <class 'pandas.core.series.Series'>\n    >>> df.iloc[0]\n    a    1\n    b    2\n    c    3\n    d    4\n    Name: 0, dtype: int64\n\n    With a list of integers.\n\n    >>> df.iloc[[0]]\n       a  b  c  d\n    0  1  2  3  4\n    >>> type(df.iloc[[0]])\n    <class 'pandas.core.frame.DataFrame'>\n\n    >>> df.iloc[[0, 1]]\n         a    b    c    d\n    0    1    2    3    4\n    1  100  200  300  400\n\n    With a `slice` object.\n\n    >>> df.iloc[:3]\n          a     b     c     d\n    0     1     2     3     4\n    1   100   200   300   400\n    2  1000  2000  3000  4000\n\n    With a boolean mask the same length as the index.\n\n    >>> df.iloc[[True, False, True]]\n          a     b     c     d\n    0     1     2     3     4\n    2  1000  2000  3000  4000\n\n    With a callable, useful in method chains. The `x` passed\n    to the ``lambda`` is the DataFrame being sliced. This selects\n    the rows whose index label even.\n\n    >>> df.iloc[lambda x: x.index % 2 == 0]\n          a     b     c     d\n    0     1     2     3     4\n    2  1000  2000  3000  4000\n\n    **Indexing both axes**\n\n    You can mix the indexer types for the index and columns. Use ``:`` to\n    select the entire axis.\n\n    With scalar integers.\n\n    >>> df.iloc[0, 1]\n    2\n\n    With lists of integers.\n\n    >>> df.iloc[[0, 2], [1, 3]]\n          b     d\n    0     2     4\n    2  2000  4000\n\n    With `slice` objects.\n\n    >>> df.iloc[1:3, 0:3]\n          a     b     c\n    1   100   200   300\n    2  1000  2000  3000\n\n    With a boolean array whose length matches the columns.\n\n    >>> df.iloc[:, [True, False, True, False]]\n          a     c\n    0     1     3\n    1   100   300\n    2  1000  3000\n\n    With a callable function that expects the Series or DataFrame.\n\n    >>> df.iloc[:, lambda df: [0, 2]]\n          a     c\n    0     1     3\n    1   100   300\n    2  1000  3000\n    \"\"\"\n    _valid_types = (\n        'integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array'\n        )\n    _exception = IndexError\n\n    def _validate_key(self, key, axis):\n        if com.is_bool_indexer(key):\n            if hasattr(key, 'index') and isinstance(key.index, Index):\n                if key.index.inferred_type == 'integer':\n                    raise NotImplementedError(\n                        'iLocation based boolean indexing on an integer type is not available'\n                        )\n                raise ValueError(\n                    'iLocation based boolean indexing cannot use an indexable as a mask'\n                    )\n            return\n        if isinstance(key, slice):\n            return\n        elif is_integer(key):\n            self._validate_integer(key, axis)\n        elif isinstance(key, tuple):\n            raise IndexingError('Too many indexers')\n        elif is_list_like_indexer(key):\n            arr = np.array(key)\n            len_axis = len(self.obj._get_axis(axis))\n            if len(arr) and (arr.max() >= len_axis or arr.min() < -len_axis):\n                raise IndexError('positional indexers are out-of-bounds')\n        else:\n            raise ValueError('Can only index by location with a [{types}]'.\n                format(types=self._valid_types))\n\n    def _has_valid_setitem_indexer(self, indexer):\n        self._has_valid_positional_setitem_indexer(indexer)\n\n    def _is_scalar_access(self, key):\n        if not hasattr(key, '__len__'):\n            return False\n        if len(key) != self.ndim:\n            return False\n        for i, k in enumerate(key):\n            if not is_integer(k):\n                return False\n            ax = self.obj.axes[i]\n            if not ax.is_unique:\n                return False\n        return True\n\n    def _getitem_scalar(self, key):\n        values = self.obj._get_value(*key, takeable=True)\n        return values\n\n    def _validate_integer(self, key, axis):\n        \"\"\"\n        Check that 'key' is a valid position in the desired axis.\n\n        Parameters\n        ----------\n        key : int\n            Requested position\n        axis : int\n            Desired axis\n\n        Returns\n        -------\n        None\n\n        Raises\n        ------\n        IndexError\n            If 'key' is not a valid position in axis 'axis'\n        \"\"\"\n        len_axis = len(self.obj._get_axis(axis))\n        if key >= len_axis or key < -len_axis:\n            raise IndexError('single positional indexer is out-of-bounds')\n\n    def _getitem_tuple(self, tup):\n        self._has_valid_tuple(tup)\n        try:\n            return self._getitem_lowerdim(tup)\n        except IndexingError:\n            pass\n        retval = self.obj\n        axis = 0\n        for i, key in enumerate(tup):\n            if i >= self.obj.ndim:\n                raise IndexingError('Too many indexers')\n            if com.is_null_slice(key):\n                axis += 1\n                continue\n            retval = getattr(retval, self.name)._getitem_axis(key, axis=axis)\n            if retval.ndim < self.ndim:\n                axis -= 1\n            axis += 1\n        return retval\n\n    def _get_slice_axis(self, slice_obj, axis=None):\n        if axis is None:\n            axis = self.axis or 0\n        obj = self.obj\n        if not need_slice(slice_obj):\n            return obj.copy(deep=False)\n        slice_obj = self._convert_slice_indexer(slice_obj, axis)\n        if isinstance(slice_obj, slice):\n            return self._slice(slice_obj, axis=axis, kind='iloc')\n        else:\n            return self.obj._take(slice_obj, axis=axis)\n\n    def _get_list_axis(self, key, axis=None):\n        \"\"\"\n        Return Series values by list or array of integers\n\n        Parameters\n        ----------\n        key : list-like positional indexer\n        axis : int (can only be zero)\n\n        Returns\n        -------\n        Series object\n        \"\"\"\n        if axis is None:\n            axis = self.axis or 0\n        try:\n            return self.obj._take(key, axis=axis)\n        except IndexError:\n            raise IndexError('positional indexers are out-of-bounds')\n\n    def _getitem_axis(self, key, axis=None):\n        if axis is None:\n            axis = self.axis or 0\n        if isinstance(key, slice):\n            return self._get_slice_axis(key, axis=axis)\n        if isinstance(key, list):\n            key = np.asarray(key)\n        if com.is_bool_indexer(key):\n            self._validate_key(key, axis)\n            return self._getbool_axis(key, axis=axis)\n        elif is_list_like_indexer(key):\n            return self._get_list_axis(key, axis=axis)\n        else:\n            key = item_from_zerodim(key)\n            if not is_integer(key):\n                raise TypeError(\n                    'Cannot index by location index with a non-integer key')\n            self._validate_integer(key, axis)\n            return self._get_loc(key, axis=axis)\n\n    def _convert_to_indexer(self, obj, axis=None, is_setter=False):\n        \"\"\" much simpler as we only have to deal with our valid types \"\"\"\n        if axis is None:\n            axis = self.axis or 0\n        if isinstance(obj, slice):\n            return self._convert_slice_indexer(obj, axis)\n        elif is_float(obj):\n            return self._convert_scalar_indexer(obj, axis)\n        try:\n            self._validate_key(obj, axis)\n            return obj\n        except ValueError:\n            raise ValueError('Can only index by location with a [{types}]'.\n                format(types=self._valid_types))\n",
                        "belong_class_name": "_iLocIndexer",
                        "belong_class_init": ""
                    }
                ],
                [
                    {
                        "function_name": "test_iloc_non_integer_raises",
                        "function_content": "@pytest.mark.parametrize('index,columns', [(np.arange(20), list('ABCDE'))])\n@pytest.mark.parametrize('index_vals,column_vals', [[slice(None), ['A', 'D'\n    ]], (['1', '2'], slice(None)), ([pd.datetime(2019, 1, 1)], slice(None))])\ndef test_iloc_non_integer_raises(self, index, columns, index_vals, column_vals\n    ):\n    df = DataFrame(np.random.randn(len(index), len(columns)), index=index,\n        columns=columns)\n    msg = '.iloc requires numeric indexers, got'\n    with pytest.raises(IndexError, match=msg):\n        df.iloc[index_vals, column_vals]\n",
                        "function_parameter": "(self, index, columns, index_vals, column_vals\n    )",
                        "belong_class_content": "class TestiLoc(Base):\n\n    def test_iloc_exceeds_bounds(self):\n        df = DataFrame(np.random.random_sample((20, 5)), columns=list('ABCDE'))\n        msg = 'positional indexers are out-of-bounds'\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[:, [0, 1, 2, 3, 4, 5]]\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[[1, 30]]\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[[1, -30]]\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[[100]]\n        s = df['A']\n        with pytest.raises(IndexError, match=msg):\n            s.iloc[[100]]\n        with pytest.raises(IndexError, match=msg):\n            s.iloc[[-100]]\n        msg = 'single positional indexer is out-of-bounds'\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[30]\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[-30]\n        with pytest.raises(IndexError, match=msg):\n            s.iloc[30]\n        with pytest.raises(IndexError, match=msg):\n            s.iloc[-30]\n        result = df.iloc[:, 4:10]\n        expected = df.iloc[:, 4:]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, -4:-10]\n        expected = df.iloc[:, :0]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, 10:4:-1]\n        expected = df.iloc[:, :4:-1]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, 4:-10:-1]\n        expected = df.iloc[:, 4::-1]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, -10:4]\n        expected = df.iloc[:, :4]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, 10:4]\n        expected = df.iloc[:, :0]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, -10:-11:-1]\n        expected = df.iloc[:, :0]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, 10:11]\n        expected = df.iloc[:, :0]\n        tm.assert_frame_equal(result, expected)\n        result = s.iloc[18:30]\n        expected = s.iloc[18:]\n        tm.assert_series_equal(result, expected)\n        result = s.iloc[30:]\n        expected = s.iloc[:0]\n        tm.assert_series_equal(result, expected)\n        result = s.iloc[30::-1]\n        expected = s.iloc[::-1]\n        tm.assert_series_equal(result, expected)\n\n        def check(result, expected):\n            str(result)\n            result.dtypes\n            tm.assert_frame_equal(result, expected)\n        dfl = DataFrame(np.random.randn(5, 2), columns=list('AB'))\n        check(dfl.iloc[:, 2:3], DataFrame(index=dfl.index))\n        check(dfl.iloc[:, 1:3], dfl.iloc[:, [1]])\n        check(dfl.iloc[4:6], dfl.iloc[[4]])\n        msg = 'positional indexers are out-of-bounds'\n        with pytest.raises(IndexError, match=msg):\n            dfl.iloc[[4, 5, 6]]\n        msg = 'single positional indexer is out-of-bounds'\n        with pytest.raises(IndexError, match=msg):\n            dfl.iloc[:, 4]\n\n    @pytest.mark.parametrize('index,columns', [(np.arange(20), list('ABCDE'))])\n    @pytest.mark.parametrize('index_vals,column_vals', [[slice(None), ['A',\n        'D']], (['1', '2'], slice(None)), ([pd.datetime(2019, 1, 1)], slice\n        (None))])\n    def test_iloc_non_integer_raises(self, index, columns, index_vals,\n        column_vals):\n        df = DataFrame(np.random.randn(len(index), len(columns)), index=\n            index, columns=columns)\n        msg = '.iloc requires numeric indexers, got'\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[index_vals, column_vals]\n\n    def test_iloc_getitem_int(self):\n        self.check_result('integer', 'iloc', 2, 'ix', {(0): 4, (1): 6, (2):\n            8}, typs=['ints', 'uints'])\n        self.check_result('integer', 'iloc', 2, 'indexer', 2, typs=[\n            'labels', 'mixed', 'ts', 'floats', 'empty'], fails=IndexError)\n\n    def test_iloc_getitem_neg_int(self):\n        self.check_result('neg int', 'iloc', -1, 'ix', {(0): 6, (1): 9, (2):\n            12}, typs=['ints', 'uints'])\n        self.check_result('neg int', 'iloc', -1, 'indexer', -1, typs=[\n            'labels', 'mixed', 'ts', 'floats', 'empty'], fails=IndexError)\n\n    @pytest.mark.parametrize('dims', [1, 2])\n    def test_iloc_getitem_invalid_scalar(self, dims):\n        if dims == 1:\n            s = Series(np.arange(10))\n        else:\n            s = DataFrame(np.arange(100).reshape(10, 10))\n        with pytest.raises(TypeError, match='Cannot index by location index'):\n            s.iloc['a']\n\n    def test_iloc_array_not_mutating_negative_indices(self):\n        array_with_neg_numbers = np.array([1, 2, -1])\n        array_copy = array_with_neg_numbers.copy()\n        df = pd.DataFrame({'A': [100, 101, 102], 'B': [103, 104, 105], 'C':\n            [106, 107, 108]}, index=[1, 2, 3])\n        df.iloc[array_with_neg_numbers]\n        tm.assert_numpy_array_equal(array_with_neg_numbers, array_copy)\n        df.iloc[:, array_with_neg_numbers]\n        tm.assert_numpy_array_equal(array_with_neg_numbers, array_copy)\n\n    def test_iloc_getitem_list_int(self):\n        self.check_result('list int', 'iloc', [0, 1, 2], 'ix', {(0): [0, 2,\n            4], (1): [0, 3, 6], (2): [0, 4, 8]}, typs=['ints', 'uints'])\n        self.check_result('list int', 'iloc', [2], 'ix', {(0): [4], (1): [6\n            ], (2): [8]}, typs=['ints', 'uints'])\n        self.check_result('list int', 'iloc', [0, 1, 2], 'indexer', [0, 1, \n            2], typs=['labels', 'mixed', 'ts', 'floats', 'empty'], fails=\n            IndexError)\n        self.check_result('array int', 'iloc', np.array([0, 1, 2]), 'ix', {\n            (0): [0, 2, 4], (1): [0, 3, 6], (2): [0, 4, 8]}, typs=['ints',\n            'uints'])\n        self.check_result('array int', 'iloc', np.array([2]), 'ix', {(0): [\n            4], (1): [6], (2): [8]}, typs=['ints', 'uints'])\n        self.check_result('array int', 'iloc', np.array([0, 1, 2]),\n            'indexer', [0, 1, 2], typs=['labels', 'mixed', 'ts', 'floats',\n            'empty'], fails=IndexError)\n\n    def test_iloc_getitem_neg_int_can_reach_first_index(self):\n        df = DataFrame({'A': [2, 3, 5], 'B': [7, 11, 13]})\n        s = df['A']\n        expected = df.iloc[0]\n        result = df.iloc[-3]\n        tm.assert_series_equal(result, expected)\n        expected = df.iloc[[0]]\n        result = df.iloc[[-3]]\n        tm.assert_frame_equal(result, expected)\n        expected = s.iloc[0]\n        result = s.iloc[-3]\n        assert result == expected\n        expected = s.iloc[[0]]\n        result = s.iloc[[-3]]\n        tm.assert_series_equal(result, expected)\n        expected = Series(['a'], index=['A'])\n        result = expected.iloc[[-1]]\n        tm.assert_series_equal(result, expected)\n\n    def test_iloc_getitem_dups(self):\n        self.check_result('list int (dups)', 'iloc', [0, 1, 1, 3], 'ix', {(\n            0): [0, 2, 2, 6], (1): [0, 3, 3, 9]}, objs=['series', 'frame'],\n            typs=['ints', 'uints'])\n        df1 = DataFrame([{'A': None, 'B': 1}, {'A': 2, 'B': 2}])\n        df2 = DataFrame([{'A': 3, 'B': 3}, {'A': 4, 'B': 4}])\n        df = concat([df1, df2], axis=1)\n        result = df.iloc[0, 0]\n        assert isna(result)\n        result = df.iloc[0, :]\n        expected = Series([np.nan, 1, 3, 3], index=['A', 'B', 'A', 'B'], name=0\n            )\n        tm.assert_series_equal(result, expected)\n\n    def test_iloc_getitem_array(self):\n        s = Series(index=lrange(1, 4))\n        self.check_result('array like', 'iloc', s.index, 'ix', {(0): [2, 4,\n            6], (1): [3, 6, 9], (2): [4, 8, 12]}, typs=['ints', 'uints'])\n\n    def test_iloc_getitem_bool(self):\n        b = [True, False, True, False]\n        self.check_result('bool', 'iloc', b, 'ix', b, typs=['ints', 'uints'])\n        self.check_result('bool', 'iloc', b, 'ix', b, typs=['labels',\n            'mixed', 'ts', 'floats', 'empty'], fails=IndexError)\n\n    def test_iloc_getitem_slice(self):\n        self.check_result('slice', 'iloc', slice(1, 3), 'ix', {(0): [2, 4],\n            (1): [3, 6], (2): [4, 8]}, typs=['ints', 'uints'])\n        self.check_result('slice', 'iloc', slice(1, 3), 'indexer', slice(1,\n            3), typs=['labels', 'mixed', 'ts', 'floats', 'empty'], fails=\n            IndexError)\n\n    def test_iloc_getitem_slice_dups(self):\n        df1 = DataFrame(np.random.randn(10, 4), columns=['A', 'A', 'B', 'B'])\n        df2 = DataFrame(np.random.randint(0, 10, size=20).reshape(10, 2),\n            columns=['A', 'C'])\n        df = concat([df1, df2], axis=1)\n        tm.assert_frame_equal(df.iloc[:, :4], df1)\n        tm.assert_frame_equal(df.iloc[:, 4:], df2)\n        df = concat([df2, df1], axis=1)\n        tm.assert_frame_equal(df.iloc[:, :2], df2)\n        tm.assert_frame_equal(df.iloc[:, 2:], df1)\n        exp = concat([df2, df1.iloc[:, [0]]], axis=1)\n        tm.assert_frame_equal(df.iloc[:, 0:3], exp)\n        df = concat([df, df], axis=0)\n        tm.assert_frame_equal(df.iloc[0:10, :2], df2)\n        tm.assert_frame_equal(df.iloc[0:10, 2:], df1)\n        tm.assert_frame_equal(df.iloc[10:, :2], df2)\n        tm.assert_frame_equal(df.iloc[10:, 2:], df1)\n\n    def test_iloc_setitem(self):\n        df = self.frame_ints\n        df.iloc[1, 1] = 1\n        result = df.iloc[1, 1]\n        assert result == 1\n        df.iloc[:, 2:3] = 0\n        expected = df.iloc[:, 2:3]\n        result = df.iloc[:, 2:3]\n        tm.assert_frame_equal(result, expected)\n        s = Series(0, index=[4, 5, 6])\n        s.iloc[1:2] += 1\n        expected = Series([0, 1, 0], index=[4, 5, 6])\n        tm.assert_series_equal(s, expected)\n\n    def test_iloc_setitem_list(self):\n        df = DataFrame(np.arange(9).reshape((3, 3)), index=['A', 'B', 'C'],\n            columns=['A', 'B', 'C'])\n        df.iloc[[0, 1], [1, 2]]\n        df.iloc[[0, 1], [1, 2]] += 100\n        expected = DataFrame(np.array([0, 101, 102, 3, 104, 105, 6, 7, 8]).\n            reshape((3, 3)), index=['A', 'B', 'C'], columns=['A', 'B', 'C'])\n        tm.assert_frame_equal(df, expected)\n\n    def test_iloc_setitem_pandas_object(self):\n        s_orig = Series([0, 1, 2, 3])\n        expected = Series([0, -1, -2, 3])\n        s = s_orig.copy()\n        s.iloc[Series([1, 2])] = [-1, -2]\n        tm.assert_series_equal(s, expected)\n        s = s_orig.copy()\n        s.iloc[pd.Index([1, 2])] = [-1, -2]\n        tm.assert_series_equal(s, expected)\n\n    def test_iloc_setitem_dups(self):\n        df1 = DataFrame([{'A': None, 'B': 1}, {'A': 2, 'B': 2}])\n        df2 = DataFrame([{'A': 3, 'B': 3}, {'A': 4, 'B': 4}])\n        df = concat([df1, df2], axis=1)\n        expected = df.fillna(3)\n        expected['A'] = expected['A'].astype('float64')\n        inds = np.isnan(df.iloc[:, 0])\n        mask = inds[inds].index\n        df.iloc[mask, 0] = df.iloc[mask, 2]\n        tm.assert_frame_equal(df, expected)\n        expected = DataFrame({(0): [1, 2], (1): [3, 4]})\n        expected.columns = ['B', 'B']\n        del df['A']\n        tm.assert_frame_equal(df, expected)\n        df.iloc[[0, 1], [0, 1]] = df.iloc[[0, 1], [0, 1]]\n        tm.assert_frame_equal(df, expected)\n        df.iloc[[1, 0], [0, 1]] = df.iloc[[1, 0], [0, 1]].reset_index(drop=True\n            )\n        df.iloc[[1, 0], [0, 1]] = df.iloc[[1, 0], [0, 1]].reset_index(drop=True\n            )\n        tm.assert_frame_equal(df, expected)\n\n    def test_iloc_getitem_frame(self):\n        df = DataFrame(np.random.randn(10, 4), index=lrange(0, 20, 2),\n            columns=lrange(0, 8, 2))\n        result = df.iloc[2]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            exp = df.ix[4]\n        tm.assert_series_equal(result, exp)\n        result = df.iloc[2, 2]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            exp = df.ix[4, 4]\n        assert result == exp\n        result = df.iloc[4:8]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            expected = df.ix[8:14]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[:, 2:3]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            expected = df.ix[:, 4:5]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[[0, 1, 3]]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            expected = df.ix[[0, 2, 6]]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[[0, 1, 3], [0, 1]]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            expected = df.ix[[0, 2, 6], [0, 2]]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[[-1, 1, 3], [-1, 1]]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            expected = df.ix[[18, 2, 6], [6, 2]]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[[-1, -1, 1, 3], [-1, 1]]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            expected = df.ix[[18, 18, 2, 6], [6, 2]]\n        tm.assert_frame_equal(result, expected)\n        s = Series(index=lrange(1, 5))\n        result = df.iloc[s.index]\n        with catch_warnings(record=True):\n            filterwarnings('ignore', '\\\\n.ix', DeprecationWarning)\n            expected = df.ix[[2, 4, 6, 8]]\n        tm.assert_frame_equal(result, expected)\n\n    def test_iloc_getitem_labelled_frame(self):\n        df = DataFrame(np.random.randn(10, 4), index=list('abcdefghij'),\n            columns=list('ABCD'))\n        result = df.iloc[1, 1]\n        exp = df.loc['b', 'B']\n        assert result == exp\n        result = df.iloc[:, 2:3]\n        expected = df.loc[:, ['C']]\n        tm.assert_frame_equal(result, expected)\n        result = df.iloc[-1, -1]\n        exp = df.loc['j', 'D']\n        assert result == exp\n        msg = 'single positional indexer is out-of-bounds'\n        with pytest.raises(IndexError, match=msg):\n            df.iloc[10, 5]\n        msg = (\n            'Location based indexing can only have \\\\[integer, integer slice \\\\(START point is INCLUDED, END point is EXCLUDED\\\\), listlike of integers, boolean array\\\\] types'\n            )\n        with pytest.raises(ValueError, match=msg):\n            df.iloc['j', 'D']\n\n    def test_iloc_getitem_doc_issue(self):\n        arr = np.random.randn(6, 4)\n        index = date_range('20130101', periods=6)\n        columns = list('ABCD')\n        df = DataFrame(arr, index=index, columns=columns)\n        df.describe()\n        result = df.iloc[3:5, 0:2]\n        str(result)\n        result.dtypes\n        expected = DataFrame(arr[3:5, 0:2], index=index[3:5], columns=\n            columns[0:2])\n        tm.assert_frame_equal(result, expected)\n        df.columns = list('aaaa')\n        result = df.iloc[3:5, 0:2]\n        str(result)\n        result.dtypes\n        expected = DataFrame(arr[3:5, 0:2], index=index[3:5], columns=list(\n            'aa'))\n        tm.assert_frame_equal(result, expected)\n        arr = np.random.randn(6, 4)\n        index = list(range(0, 12, 2))\n        columns = list(range(0, 8, 2))\n        df = DataFrame(arr, index=index, columns=columns)\n        df._data.blocks[0].mgr_locs\n        result = df.iloc[1:5, 2:4]\n        str(result)\n        result.dtypes\n        expected = DataFrame(arr[1:5, 2:4], index=index[1:5], columns=\n            columns[2:4])\n        tm.assert_frame_equal(result, expected)\n\n    def test_iloc_setitem_series(self):\n        df = DataFrame(np.random.randn(10, 4), index=list('abcdefghij'),\n            columns=list('ABCD'))\n        df.iloc[1, 1] = 1\n        result = df.iloc[1, 1]\n        assert result == 1\n        df.iloc[:, 2:3] = 0\n        expected = df.iloc[:, 2:3]\n        result = df.iloc[:, 2:3]\n        tm.assert_frame_equal(result, expected)\n        s = Series(np.random.randn(10), index=lrange(0, 20, 2))\n        s.iloc[1] = 1\n        result = s.iloc[1]\n        assert result == 1\n        s.iloc[:4] = 0\n        expected = s.iloc[:4]\n        result = s.iloc[:4]\n        tm.assert_series_equal(result, expected)\n        s = Series([-1] * 6)\n        s.iloc[0::2] = [0, 2, 4]\n        s.iloc[1::2] = [1, 3, 5]\n        result = s\n        expected = Series([0, 1, 2, 3, 4, 5])\n        tm.assert_series_equal(result, expected)\n\n    def test_iloc_setitem_list_of_lists(self):\n        df = DataFrame(dict(A=np.arange(5, dtype='int64'), B=np.arange(5, \n            10, dtype='int64')))\n        df.iloc[2:4] = [[10, 11], [12, 13]]\n        expected = DataFrame(dict(A=[0, 1, 10, 12, 4], B=[5, 6, 11, 13, 9]))\n        tm.assert_frame_equal(df, expected)\n        df = DataFrame(dict(A=list('abcde'), B=np.arange(5, 10, dtype='int64'))\n            )\n        df.iloc[2:4] = [['x', 11], ['y', 13]]\n        expected = DataFrame(dict(A=['a', 'b', 'x', 'y', 'e'], B=[5, 6, 11,\n            13, 9]))\n        tm.assert_frame_equal(df, expected)\n\n    @pytest.mark.parametrize('indexer', [[0], slice(None, 1, None), np.\n        array([0])])\n    @pytest.mark.parametrize('value', [['Z'], np.array(['Z'])])\n    def test_iloc_setitem_with_scalar_index(self, indexer, value):\n        df = pd.DataFrame([[1, 2], [3, 4]], columns=['A', 'B'])\n        df.iloc[0, indexer] = value\n        result = df.iloc[0, 0]\n        assert is_scalar(result) and result == 'Z'\n\n    def test_iloc_mask(self):\n        df = DataFrame(lrange(5), list('ABCDE'), columns=['a'])\n        mask = df.a % 2 == 0\n        msg = (\n            'iLocation based boolean indexing cannot use an indexable as a mask'\n            )\n        with pytest.raises(ValueError, match=msg):\n            df.iloc[mask]\n        mask.index = lrange(len(mask))\n        msg = (\n            'iLocation based boolean indexing on an integer type is not available'\n            )\n        with pytest.raises(NotImplementedError, match=msg):\n            df.iloc[mask]\n        result = df.iloc[np.array([True] * len(mask), dtype=bool)]\n        tm.assert_frame_equal(result, df)\n        locs = np.arange(4)\n        nums = 2 ** locs\n        reps = lmap(bin, nums)\n        df = DataFrame({'locs': locs, 'nums': nums}, reps)\n        expected = {(None, ''): '0b1100', (None, '.loc'): '0b1100', (None,\n            '.iloc'): '0b1100', ('index', ''): '0b11', ('index', '.loc'):\n            '0b11', ('index', '.iloc'):\n            'iLocation based boolean indexing cannot use an indexable as a mask'\n            , ('locs', ''):\n            'Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match'\n            , ('locs', '.loc'):\n            'Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match'\n            , ('locs', '.iloc'):\n            'iLocation based boolean indexing on an integer type is not available'\n            }\n        with catch_warnings(record=True):\n            simplefilter('ignore', UserWarning)\n            result = dict()\n            for idx in [None, 'index', 'locs']:\n                mask = (df.nums > 2).values\n                if idx:\n                    mask = Series(mask, list(reversed(getattr(df, idx))))\n                for method in ['', '.loc', '.iloc']:\n                    try:\n                        if method:\n                            accessor = getattr(df, method[1:])\n                        else:\n                            accessor = df\n                        ans = str(bin(accessor[mask]['nums'].sum()))\n                    except Exception as e:\n                        ans = str(e)\n                    key = tuple([idx, method])\n                    r = expected.get(key)\n                    if r != ans:\n                        raise AssertionError(\n                            '[%s] does not match [%s], received [%s]' % (\n                            key, ans, r))\n\n    def test_iloc_non_unique_indexing(self):\n        df = DataFrame({'A': [0.1] * 3000, 'B': [1] * 3000})\n        idx = np.array(lrange(30)) * 99\n        expected = df.iloc[idx]\n        df3 = concat([df, 2 * df, 3 * df])\n        result = df3.iloc[idx]\n        tm.assert_frame_equal(result, expected)\n        df2 = DataFrame({'A': [0.1] * 1000, 'B': [1] * 1000})\n        df2 = concat([df2, 2 * df2, 3 * df2])\n        sidx = df2.index.to_series()\n        expected = df2.iloc[idx[idx <= sidx.max()]]\n        new_list = []\n        for r, s in expected.iterrows():\n            new_list.append(s)\n            new_list.append(s * 2)\n            new_list.append(s * 3)\n        expected = DataFrame(new_list)\n        expected = concat([expected, DataFrame(index=idx[idx > sidx.max()])\n            ], sort=True)\n        with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):\n            result = df2.loc[idx]\n        tm.assert_frame_equal(result, expected, check_index_type=False)\n\n    def test_iloc_empty_list_indexer_is_ok(self):\n        from pandas.util.testing import makeCustomDataframe as mkdf\n        df = mkdf(5, 2)\n        tm.assert_frame_equal(df.iloc[:, []], df.iloc[:, :0],\n            check_index_type=True, check_column_type=True)\n        tm.assert_frame_equal(df.iloc[[], :], df.iloc[:0, :],\n            check_index_type=True, check_column_type=True)\n        tm.assert_frame_equal(df.iloc[[]], df.iloc[:0, :], check_index_type\n            =True, check_column_type=True)\n\n    def test_identity_slice_returns_new_object(self):\n        original_df = DataFrame({'a': [1, 2, 3]})\n        sliced_df = original_df.iloc[:]\n        assert sliced_df is not original_df\n        original_df['a'] = [4, 4, 4]\n        assert (sliced_df['a'] == 4).all()\n        original_series = Series([1, 2, 3, 4, 5, 6])\n        sliced_series = original_series.iloc[:]\n        assert sliced_series is not original_series\n        original_series[:3] = [7, 8, 9]\n        assert all(sliced_series[:3] == [7, 8, 9])\n\n    def test_indexing_zerodim_np_array(self):\n        df = DataFrame([[1, 2], [3, 4]])\n        result = df.iloc[np.array(0)]\n        s = pd.Series([1, 2], name=0)\n        tm.assert_series_equal(result, s)\n\n    def test_series_indexing_zerodim_np_array(self):\n        s = Series([1, 2])\n        result = s.iloc[np.array(0)]\n        assert result == 1\n",
                        "belong_class_name": "TestiLoc",
                        "belong_class_init": ""
                    },
                    {
                        "function_name": "__getitem__",
                        "function_content": "def __getitem__(self, key):\n    if type(key) is tuple:\n        key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        try:\n            if self._is_scalar_access(key):\n                return self._getitem_scalar(key)\n        except (KeyError, IndexError, AttributeError):\n            pass\n        return self._getitem_tuple(key)\n    else:\n        axis = self.axis or 0\n        maybe_callable = com.apply_if_callable(key, self.obj)\n        return self._getitem_axis(maybe_callable, axis=axis)\n",
                        "function_parameter": "(self, key)",
                        "belong_class_content": "class _LocationIndexer(_NDFrameIndexer):\n    _exception = Exception\n\n    def __getitem__(self, key):\n        if type(key) is tuple:\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n            try:\n                if self._is_scalar_access(key):\n                    return self._getitem_scalar(key)\n            except (KeyError, IndexError, AttributeError):\n                pass\n            return self._getitem_tuple(key)\n        else:\n            axis = self.axis or 0\n            maybe_callable = com.apply_if_callable(key, self.obj)\n            return self._getitem_axis(maybe_callable, axis=axis)\n\n    def _is_scalar_access(self, key):\n        raise NotImplementedError()\n\n    def _getitem_scalar(self, key):\n        raise NotImplementedError()\n\n    def _getitem_axis(self, key, axis=None):\n        raise NotImplementedError()\n\n    def _getbool_axis(self, key, axis=None):\n        if axis is None:\n            axis = self.axis or 0\n        labels = self.obj._get_axis(axis)\n        key = check_bool_indexer(labels, key)\n        inds, = key.nonzero()\n        try:\n            return self.obj._take(inds, axis=axis)\n        except Exception as detail:\n            raise self._exception(detail)\n\n    def _get_slice_axis(self, slice_obj, axis=None):\n        \"\"\" this is pretty simple as we just have to deal with labels \"\"\"\n        if axis is None:\n            axis = self.axis or 0\n        obj = self.obj\n        if not need_slice(slice_obj):\n            return obj.copy(deep=False)\n        labels = obj._get_axis(axis)\n        indexer = labels.slice_indexer(slice_obj.start, slice_obj.stop,\n            slice_obj.step, kind=self.name)\n        if isinstance(indexer, slice):\n            return self._slice(indexer, axis=axis, kind='iloc')\n        else:\n            return self.obj._take(indexer, axis=axis)\n",
                        "belong_class_name": "_LocationIndexer",
                        "belong_class_init": "",
                        "called_function_name": "_getitem_tuple",
                        "called_function_content": "def __getitem__(self, key):\n    if type(key) is tuple:\n        key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        try:\n            if self._is_scalar_access(key):\n                return self._getitem_scalar(key)\n        except (KeyError, IndexError, AttributeError):\n            pass\n        return self._getitem_tuple(key)\n",
                        "called_arguments": "(key)",
                        "called_function_parameter": "(self, tup)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_getitem_tuple",
                        "function_content": "def _getitem_tuple(self, tup):\n    self._has_valid_tuple(tup)\n    try:\n        return self._getitem_lowerdim(tup)\n    except IndexingError:\n        pass\n    retval = self.obj\n    axis = 0\n    for i, key in enumerate(tup):\n        if i >= self.obj.ndim:\n            raise IndexingError('Too many indexers')\n        if com.is_null_slice(key):\n            axis += 1\n            continue\n        retval = getattr(retval, self.name)._getitem_axis(key, axis=axis)\n        if retval.ndim < self.ndim:\n            axis -= 1\n        axis += 1\n    return retval\n",
                        "function_parameter": "(self, tup)",
                        "belong_class_content": "class _iLocIndexer(_LocationIndexer):\n    \"\"\"\n    Purely integer-location based indexing for selection by position.\n\n    ``.iloc[]`` is primarily integer position based (from ``0`` to\n    ``length-1`` of the axis), but may also be used with a boolean\n    array.\n\n    Allowed inputs are:\n\n    - An integer, e.g. ``5``.\n    - A list or array of integers, e.g. ``[4, 3, 0]``.\n    - A slice object with ints, e.g. ``1:7``.\n    - A boolean array.\n    - A ``callable`` function with one argument (the calling Series, DataFrame\n      or Panel) and that returns valid output for indexing (one of the above).\n      This is useful in method chains, when you don't have a reference to the\n      calling object, but would like to base your selection on some value.\n\n    ``.iloc`` will raise ``IndexError`` if a requested indexer is\n    out-of-bounds, except *slice* indexers which allow out-of-bounds\n    indexing (this conforms with python/numpy *slice* semantics).\n\n    See more at ref:`Selection by Position <indexing.integer>`.\n\n    See Also\n    --------\n    DataFrame.iat : Fast integer location scalar accessor.\n    DataFrame.loc : Purely label-location based indexer for selection by label.\n    Series.iloc : Purely integer-location based indexing for\n                   selection by position.\n\n    Examples\n    --------\n\n    >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n    ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n    ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]\n    >>> df = pd.DataFrame(mydict)\n    >>> df\n          a     b     c     d\n    0     1     2     3     4\n    1   100   200   300   400\n    2  1000  2000  3000  4000\n\n    **Indexing just the rows**\n\n    With a scalar integer.\n\n    >>> type(df.iloc[0])\n    <class 'pandas.core.series.Series'>\n    >>> df.iloc[0]\n    a    1\n    b    2\n    c    3\n    d    4\n    Name: 0, dtype: int64\n\n    With a list of integers.\n\n    >>> df.iloc[[0]]\n       a  b  c  d\n    0  1  2  3  4\n    >>> type(df.iloc[[0]])\n    <class 'pandas.core.frame.DataFrame'>\n\n    >>> df.iloc[[0, 1]]\n         a    b    c    d\n    0    1    2    3    4\n    1  100  200  300  400\n\n    With a `slice` object.\n\n    >>> df.iloc[:3]\n          a     b     c     d\n    0     1     2     3     4\n    1   100   200   300   400\n    2  1000  2000  3000  4000\n\n    With a boolean mask the same length as the index.\n\n    >>> df.iloc[[True, False, True]]\n          a     b     c     d\n    0     1     2     3     4\n    2  1000  2000  3000  4000\n\n    With a callable, useful in method chains. The `x` passed\n    to the ``lambda`` is the DataFrame being sliced. This selects\n    the rows whose index label even.\n\n    >>> df.iloc[lambda x: x.index % 2 == 0]\n          a     b     c     d\n    0     1     2     3     4\n    2  1000  2000  3000  4000\n\n    **Indexing both axes**\n\n    You can mix the indexer types for the index and columns. Use ``:`` to\n    select the entire axis.\n\n    With scalar integers.\n\n    >>> df.iloc[0, 1]\n    2\n\n    With lists of integers.\n\n    >>> df.iloc[[0, 2], [1, 3]]\n          b     d\n    0     2     4\n    2  2000  4000\n\n    With `slice` objects.\n\n    >>> df.iloc[1:3, 0:3]\n          a     b     c\n    1   100   200   300\n    2  1000  2000  3000\n\n    With a boolean array whose length matches the columns.\n\n    >>> df.iloc[:, [True, False, True, False]]\n          a     c\n    0     1     3\n    1   100   300\n    2  1000  3000\n\n    With a callable function that expects the Series or DataFrame.\n\n    >>> df.iloc[:, lambda df: [0, 2]]\n          a     c\n    0     1     3\n    1   100   300\n    2  1000  3000\n    \"\"\"\n    _valid_types = (\n        'integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array'\n        )\n    _exception = IndexError\n\n    def _validate_key(self, key, axis):\n        if com.is_bool_indexer(key):\n            if hasattr(key, 'index') and isinstance(key.index, Index):\n                if key.index.inferred_type == 'integer':\n                    raise NotImplementedError(\n                        'iLocation based boolean indexing on an integer type is not available'\n                        )\n                raise ValueError(\n                    'iLocation based boolean indexing cannot use an indexable as a mask'\n                    )\n            return\n        if isinstance(key, slice):\n            return\n        elif is_integer(key):\n            self._validate_integer(key, axis)\n        elif isinstance(key, tuple):\n            raise IndexingError('Too many indexers')\n        elif is_list_like_indexer(key):\n            arr = np.array(key)\n            len_axis = len(self.obj._get_axis(axis))\n            if len(arr) and (arr.max() >= len_axis or arr.min() < -len_axis):\n                raise IndexError('positional indexers are out-of-bounds')\n        else:\n            raise ValueError('Can only index by location with a [{types}]'.\n                format(types=self._valid_types))\n\n    def _has_valid_setitem_indexer(self, indexer):\n        self._has_valid_positional_setitem_indexer(indexer)\n\n    def _is_scalar_access(self, key):\n        if not hasattr(key, '__len__'):\n            return False\n        if len(key) != self.ndim:\n            return False\n        for i, k in enumerate(key):\n            if not is_integer(k):\n                return False\n            ax = self.obj.axes[i]\n            if not ax.is_unique:\n                return False\n        return True\n\n    def _getitem_scalar(self, key):\n        values = self.obj._get_value(*key, takeable=True)\n        return values\n\n    def _validate_integer(self, key, axis):\n        \"\"\"\n        Check that 'key' is a valid position in the desired axis.\n\n        Parameters\n        ----------\n        key : int\n            Requested position\n        axis : int\n            Desired axis\n\n        Returns\n        -------\n        None\n\n        Raises\n        ------\n        IndexError\n            If 'key' is not a valid position in axis 'axis'\n        \"\"\"\n        len_axis = len(self.obj._get_axis(axis))\n        if key >= len_axis or key < -len_axis:\n            raise IndexError('single positional indexer is out-of-bounds')\n\n    def _getitem_tuple(self, tup):\n        self._has_valid_tuple(tup)\n        try:\n            return self._getitem_lowerdim(tup)\n        except IndexingError:\n            pass\n        retval = self.obj\n        axis = 0\n        for i, key in enumerate(tup):\n            if i >= self.obj.ndim:\n                raise IndexingError('Too many indexers')\n            if com.is_null_slice(key):\n                axis += 1\n                continue\n            retval = getattr(retval, self.name)._getitem_axis(key, axis=axis)\n            if retval.ndim < self.ndim:\n                axis -= 1\n            axis += 1\n        return retval\n\n    def _get_slice_axis(self, slice_obj, axis=None):\n        if axis is None:\n            axis = self.axis or 0\n        obj = self.obj\n        if not need_slice(slice_obj):\n            return obj.copy(deep=False)\n        slice_obj = self._convert_slice_indexer(slice_obj, axis)\n        if isinstance(slice_obj, slice):\n            return self._slice(slice_obj, axis=axis, kind='iloc')\n        else:\n            return self.obj._take(slice_obj, axis=axis)\n\n    def _get_list_axis(self, key, axis=None):\n        \"\"\"\n        Return Series values by list or array of integers\n\n        Parameters\n        ----------\n        key : list-like positional indexer\n        axis : int (can only be zero)\n\n        Returns\n        -------\n        Series object\n        \"\"\"\n        if axis is None:\n            axis = self.axis or 0\n        try:\n            return self.obj._take(key, axis=axis)\n        except IndexError:\n            raise IndexError('positional indexers are out-of-bounds')\n\n    def _getitem_axis(self, key, axis=None):\n        if axis is None:\n            axis = self.axis or 0\n        if isinstance(key, slice):\n            return self._get_slice_axis(key, axis=axis)\n        if isinstance(key, list):\n            key = np.asarray(key)\n        if com.is_bool_indexer(key):\n            self._validate_key(key, axis)\n            return self._getbool_axis(key, axis=axis)\n        elif is_list_like_indexer(key):\n            return self._get_list_axis(key, axis=axis)\n        else:\n            key = item_from_zerodim(key)\n            if not is_integer(key):\n                raise TypeError(\n                    'Cannot index by location index with a non-integer key')\n            self._validate_integer(key, axis)\n            return self._get_loc(key, axis=axis)\n\n    def _convert_to_indexer(self, obj, axis=None, is_setter=False):\n        \"\"\" much simpler as we only have to deal with our valid types \"\"\"\n        if axis is None:\n            axis = self.axis or 0\n        if isinstance(obj, slice):\n            return self._convert_slice_indexer(obj, axis)\n        elif is_float(obj):\n            return self._convert_scalar_indexer(obj, axis)\n        try:\n            self._validate_key(obj, axis)\n            return obj\n        except ValueError:\n            raise ValueError('Can only index by location with a [{types}]'.\n                format(types=self._valid_types))\n",
                        "belong_class_name": "_iLocIndexer",
                        "belong_class_init": "",
                        "called_function_name": "_has_valid_tuple",
                        "called_function_content": "def _getitem_tuple(self, tup):\n    self._has_valid_tuple(tup)\n",
                        "called_arguments": "(tup)",
                        "called_function_parameter": "(self, key)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_has_valid_tuple",
                        "function_content": "def _has_valid_tuple(self, key):\n    \"\"\" check the key for valid keys across my indexer \"\"\"\n    for i, k in enumerate(key):\n        if i >= self.obj.ndim:\n            raise IndexingError('Too many indexers')\n        try:\n            self._validate_key(k, i)\n        except ValueError:\n            raise ValueError(\n                'Location based indexing can only have [{types}] types'.\n                format(types=self._valid_types))\n",
                        "function_parameter": "(self, key)",
                        "belong_class_content": "class _NDFrameIndexer(_NDFrameIndexerBase):\n    _valid_types = None\n    _exception = KeyError\n    axis = None\n\n    def __call__(self, axis=None):\n        new_self = self.__class__(self.name, self.obj)\n        if axis is not None:\n            axis = self.obj._get_axis_number(axis)\n        new_self.axis = axis\n        return new_self\n\n    def __iter__(self):\n        raise NotImplementedError('ix is not iterable')\n\n    def __getitem__(self, key):\n        if type(key) is tuple:\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n            try:\n                values = self.obj._get_value(*key)\n                if is_scalar(values):\n                    return values\n            except Exception:\n                pass\n            return self._getitem_tuple(key)\n        else:\n            axis = self.axis or 0\n            key = com.apply_if_callable(key, self.obj)\n            return self._getitem_axis(key, axis=axis)\n\n    def _get_label(self, label, axis=None):\n        if axis is None:\n            axis = self.axis or 0\n        if self.ndim == 1:\n            return self.obj._xs(label, axis=axis)\n        elif isinstance(label, tuple) and isinstance(label[axis], slice):\n            raise IndexingError('no slices here, handle elsewhere')\n        return self.obj._xs(label, axis=axis)\n\n    def _get_loc(self, key, axis=None):\n        if axis is None:\n            axis = self.axis\n        return self.obj._ixs(key, axis=axis)\n\n    def _slice(self, obj, axis=None, kind=None):\n        if axis is None:\n            axis = self.axis\n        return self.obj._slice(obj, axis=axis, kind=kind)\n\n    def _get_setitem_indexer(self, key):\n        if self.axis is not None:\n            return self._convert_tuple(key, is_setter=True)\n        axis = self.obj._get_axis(0)\n        if isinstance(axis, MultiIndex) and self.name != 'iloc':\n            try:\n                return axis.get_loc(key)\n            except Exception:\n                pass\n        if isinstance(key, tuple):\n            try:\n                return self._convert_tuple(key, is_setter=True)\n            except IndexingError:\n                pass\n        if isinstance(key, range):\n            return self._convert_range(key, is_setter=True)\n        try:\n            return self._convert_to_indexer(key, is_setter=True)\n        except TypeError as e:\n            if 'cannot do' in str(e):\n                raise\n            raise IndexingError(key)\n\n    def __setitem__(self, key, value):\n        if isinstance(key, tuple):\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        else:\n            key = com.apply_if_callable(key, self.obj)\n        indexer = self._get_setitem_indexer(key)\n        self._setitem_with_indexer(indexer, value)\n\n    def _validate_key(self, key, axis):\n        \"\"\"\n        Ensure that key is valid for current indexer.\n\n        Parameters\n        ----------\n        key : scalar, slice or list-like\n            The key requested\n\n        axis : int\n            Dimension on which the indexing is being made\n\n        Raises\n        ------\n        TypeError\n            If the key (or some element of it) has wrong type\n\n        IndexError\n            If the key (or some element of it) is out of bounds\n\n        KeyError\n            If the key was not found\n        \"\"\"\n        raise AbstractMethodError()\n\n    def _has_valid_tuple(self, key):\n        \"\"\" check the key for valid keys across my indexer \"\"\"\n        for i, k in enumerate(key):\n            if i >= self.obj.ndim:\n                raise IndexingError('Too many indexers')\n            try:\n                self._validate_key(k, i)\n            except ValueError:\n                raise ValueError(\n                    'Location based indexing can only have [{types}] types'\n                    .format(types=self._valid_types))\n\n    def _is_nested_tuple_indexer(self, tup):\n        if any(isinstance(ax, MultiIndex) for ax in self.obj.axes):\n            return any(is_nested_tuple(tup, ax) for ax in self.obj.axes)\n        return False\n\n    def _convert_tuple(self, key, is_setter=False):\n        keyidx = []\n        if self.axis is not None:\n            axis = self.obj._get_axis_number(self.axis)\n            for i in range(self.ndim):\n                if i == axis:\n                    keyidx.append(self._convert_to_indexer(key, axis=axis,\n                        is_setter=is_setter))\n                else:\n                    keyidx.append(slice(None))\n        else:\n            for i, k in enumerate(key):\n                if i >= self.obj.ndim:\n                    raise IndexingError('Too many indexers')\n                idx = self._convert_to_indexer(k, axis=i, is_setter=is_setter)\n                keyidx.append(idx)\n        return tuple(keyidx)\n\n    def _convert_range(self, key, is_setter=False):\n        \"\"\" convert a range argument \"\"\"\n        return list(key)\n\n    def _convert_scalar_indexer(self, key, axis):\n        if axis is None:\n            axis = 0\n        ax = self.obj._get_axis(min(axis, self.ndim - 1))\n        return ax._convert_scalar_indexer(key, kind=self.name)\n\n    def _convert_slice_indexer(self, key, axis):\n        ax = self.obj._get_axis(min(axis, self.ndim - 1))\n        return ax._convert_slice_indexer(key, kind=self.name)\n\n    def _has_valid_setitem_indexer(self, indexer):\n        return True\n\n    def _has_valid_positional_setitem_indexer(self, indexer):\n        \"\"\" validate that an positional indexer cannot enlarge its target\n        will raise if needed, does not modify the indexer externally\n        \"\"\"\n        if isinstance(indexer, dict):\n            raise IndexError('{0} cannot enlarge its target object'.format(\n                self.name))\n        else:\n            if not isinstance(indexer, tuple):\n                indexer = self._tuplify(indexer)\n            for ax, i in zip(self.obj.axes, indexer):\n                if isinstance(i, slice):\n                    pass\n                elif is_list_like_indexer(i):\n                    pass\n                elif is_integer(i):\n                    if i >= len(ax):\n                        raise IndexError(\n                            '{name} cannot enlarge its target object'.\n                            format(name=self.name))\n                elif isinstance(i, dict):\n                    raise IndexError('{name} cannot enlarge its target object'\n                        .format(name=self.name))\n        return True\n\n    def _setitem_with_indexer(self, indexer, value):\n        self._has_valid_setitem_indexer(indexer)\n        from pandas import Series\n        info_axis = self.obj._info_axis_number\n        take_split_path = self.obj._is_mixed_type\n        if not take_split_path and self.obj._data.blocks:\n            blk, = self.obj._data.blocks\n            if 1 < blk.ndim:\n                val = list(value.values()) if isinstance(value, dict\n                    ) else value\n                take_split_path = not blk._can_hold_element(val)\n        if isinstance(indexer, tuple) and len(indexer) == len(self.obj.axes):\n            for i, ax in zip(indexer, self.obj.axes):\n                if isinstance(ax, MultiIndex) and not (is_integer(i) or com\n                    .is_null_slice(i)):\n                    take_split_path = True\n                    break\n        if isinstance(indexer, tuple):\n            nindexer = []\n            for i, idx in enumerate(indexer):\n                if isinstance(idx, dict):\n                    key, _ = convert_missing_indexer(idx)\n                    if self.ndim > 1 and i == self.obj._info_axis_number:\n                        len_non_info_axes = (len(_ax) for _i, _ax in\n                            enumerate(self.obj.axes) if _i != i)\n                        if any(not l for l in len_non_info_axes):\n                            if not is_list_like_indexer(value):\n                                raise ValueError(\n                                    'cannot set a frame with no defined index and a scalar'\n                                    )\n                            self.obj[key] = value\n                            return self.obj\n                        self.obj[key] = _infer_fill_value(value)\n                        new_indexer = convert_from_missing_indexer_tuple(\n                            indexer, self.obj.axes)\n                        self._setitem_with_indexer(new_indexer, value)\n                        return self.obj\n                    index = self.obj._get_axis(i)\n                    labels = index.insert(len(index), key)\n                    self.obj._data = self.obj.reindex(labels, axis=i)._data\n                    self.obj._maybe_update_cacher(clear=True)\n                    self.obj._is_copy = None\n                    nindexer.append(labels.get_loc(key))\n                else:\n                    nindexer.append(idx)\n            indexer = tuple(nindexer)\n        else:\n            indexer, missing = convert_missing_indexer(indexer)\n            if missing:\n                if self.ndim == 1:\n                    index = self.obj.index\n                    new_index = index.insert(len(index), indexer)\n                    if index.is_unique:\n                        new_indexer = index.get_indexer([new_index[-1]])\n                        if (new_indexer != -1).any():\n                            return self._setitem_with_indexer(new_indexer,\n                                value)\n                    new_values = Series([value])._values\n                    if len(self.obj._values):\n                        try:\n                            new_values = np.concatenate([self.obj._values,\n                                new_values])\n                        except TypeError:\n                            as_obj = self.obj.astype(object)\n                            new_values = np.concatenate([as_obj, new_values])\n                    self.obj._data = self.obj._constructor(new_values,\n                        index=new_index, name=self.obj.name)._data\n                    self.obj._maybe_update_cacher(clear=True)\n                    return self.obj\n                elif self.ndim == 2:\n                    if not len(self.obj.columns):\n                        raise ValueError(\n                            'cannot set a frame with no defined columns')\n                    if isinstance(value, Series):\n                        value = value.reindex(index=self.obj.columns, copy=True\n                            )\n                        value.name = indexer\n                    else:\n                        if is_list_like_indexer(value):\n                            if len(value) != len(self.obj.columns):\n                                raise ValueError(\n                                    'cannot set a row with mismatched columns')\n                        value = Series(value, index=self.obj.columns, name=\n                            indexer)\n                    self.obj._data = self.obj.append(value)._data\n                    self.obj._maybe_update_cacher(clear=True)\n                    return self.obj\n                elif self.ndim >= 3:\n                    return self.obj.__setitem__(indexer, value)\n        item_labels = self.obj._get_axis(info_axis)\n        if take_split_path:\n            if not isinstance(indexer, tuple):\n                indexer = self._tuplify(indexer)\n            if isinstance(value, ABCSeries):\n                value = self._align_series(indexer, value)\n            info_idx = indexer[info_axis]\n            if is_integer(info_idx):\n                info_idx = [info_idx]\n            labels = item_labels[info_idx]\n            if len(labels) == 1 and isinstance(self.obj[labels[0]].axes[0],\n                MultiIndex):\n                item = labels[0]\n                obj = self.obj[item]\n                index = obj.index\n                idx = indexer[:info_axis][0]\n                plane_indexer = tuple([idx]) + indexer[info_axis + 1:]\n                lplane_indexer = length_of_indexer(plane_indexer[0], index)\n                if is_list_like_indexer(value) and np.iterable(value\n                    ) and lplane_indexer != len(value):\n                    if len(obj[idx]) != len(value):\n                        raise ValueError(\n                            'cannot set using a multi-index selection indexer with a different length than the value'\n                            )\n                    value = getattr(value, 'values', value).ravel()\n                    idx = index._convert_slice_indexer(idx)\n                    obj._consolidate_inplace()\n                    obj = obj.copy()\n                    obj._data = obj._data.setitem(indexer=tuple([idx]),\n                        value=value)\n                    self.obj[item] = obj\n                    return\n            else:\n                plane_indexer = indexer[:info_axis] + indexer[info_axis + 1:]\n                if info_axis > 0:\n                    plane_axis = self.obj.axes[:info_axis][0]\n                    lplane_indexer = length_of_indexer(plane_indexer[0],\n                        plane_axis)\n                else:\n                    lplane_indexer = 0\n\n            def setter(item, v):\n                s = self.obj[item]\n                pi = plane_indexer[0] if lplane_indexer == 1 else plane_indexer\n                if isinstance(pi, tuple) and all(com.is_null_slice(idx) or\n                    com.is_full_slice(idx, len(self.obj)) for idx in pi):\n                    s = v\n                else:\n                    s._consolidate_inplace()\n                    s = s.copy()\n                    s._data = s._data.setitem(indexer=pi, value=v)\n                    s._maybe_update_cacher(clear=True)\n                self.obj[item] = s\n\n            def can_do_equal_len():\n                \"\"\" return True if we have an equal len settable \"\"\"\n                if not len(labels) == 1 or not np.iterable(value) or is_scalar(\n                    plane_indexer[0]):\n                    return False\n                item = labels[0]\n                index = self.obj[item].index\n                values_len = len(value)\n                if len(index) == values_len:\n                    return True\n                elif lplane_indexer == values_len:\n                    return True\n                return False\n            if is_list_like_indexer(value) and getattr(value, 'ndim', 1) > 0:\n                if isinstance(value, ABCDataFrame) and value.ndim > 1:\n                    sub_indexer = list(indexer)\n                    multiindex_indexer = isinstance(labels, MultiIndex)\n                    for item in labels:\n                        if item in value:\n                            sub_indexer[info_axis] = item\n                            v = self._align_series(tuple(sub_indexer),\n                                value[item], multiindex_indexer)\n                        else:\n                            v = np.nan\n                        setter(item, v)\n                elif hasattr(value, 'ndim') and value.ndim == 2 or (not\n                    hasattr(value, 'ndim') and np.array(value).ndim) == 2:\n                    value = np.array(value, dtype=object)\n                    if len(labels) != value.shape[1]:\n                        raise ValueError(\n                            'Must have equal len keys and value when setting with an ndarray'\n                            )\n                    for i, item in enumerate(labels):\n                        setter(item, value[:, i].tolist())\n                elif can_do_equal_len():\n                    setter(labels[0], value)\n                else:\n                    if len(labels) != len(value):\n                        raise ValueError(\n                            'Must have equal len keys and value when setting with an iterable'\n                            )\n                    for item, v in zip(labels, value):\n                        setter(item, v)\n            else:\n                for item in labels:\n                    setter(item, value)\n        else:\n            if isinstance(indexer, tuple):\n                indexer = maybe_convert_ix(*indexer)\n                if len(indexer) > info_axis and is_integer(indexer[info_axis]\n                    ) and all(com.is_null_slice(idx) for i, idx in\n                    enumerate(indexer) if i != info_axis\n                    ) and item_labels.is_unique:\n                    self.obj[item_labels[indexer[info_axis]]] = value\n                    return\n            if isinstance(value, (ABCSeries, dict)):\n                value = self._align_series(indexer, Series(value))\n            elif isinstance(value, ABCDataFrame):\n                value = self._align_frame(indexer, value)\n            if isinstance(value, ABCPanel):\n                value = self._align_panel(indexer, value)\n            self.obj._check_is_chained_assignment_possible()\n            self.obj._consolidate_inplace()\n            self.obj._data = self.obj._data.setitem(indexer=indexer, value=\n                value)\n            self.obj._maybe_update_cacher(clear=True)\n\n    def _align_series(self, indexer, ser, multiindex_indexer=False):\n        \"\"\"\n        Parameters\n        ----------\n        indexer : tuple, slice, scalar\n            The indexer used to get the locations that will be set to\n            `ser`\n\n        ser : pd.Series\n            The values to assign to the locations specified by `indexer`\n\n        multiindex_indexer : boolean, optional\n            Defaults to False. Should be set to True if `indexer` was from\n            a `pd.MultiIndex`, to avoid unnecessary broadcasting.\n\n\n        Returns:\n        --------\n        `np.array` of `ser` broadcast to the appropriate shape for assignment\n        to the locations selected by `indexer`\n\n        \"\"\"\n        if isinstance(indexer, (slice, np.ndarray, list, Index)):\n            indexer = tuple([indexer])\n        if isinstance(indexer, tuple):\n\n            def ravel(i):\n                return i.ravel() if isinstance(i, np.ndarray) else i\n            indexer = tuple(map(ravel, indexer))\n            aligners = [(not com.is_null_slice(idx)) for idx in indexer]\n            sum_aligners = sum(aligners)\n            single_aligner = sum_aligners == 1\n            is_frame = self.obj.ndim == 2\n            is_panel = self.obj.ndim >= 3\n            obj = self.obj\n            if is_frame:\n                single_aligner = single_aligner and aligners[0]\n            elif is_panel:\n                single_aligner = single_aligner and (aligners[1] or aligners[2]\n                    )\n            if sum_aligners == self.ndim and all(is_sequence(_) for _ in\n                indexer):\n                ser = ser.reindex(obj.axes[0][indexer[0]], copy=True)._values\n                if len(indexer) > 1 and not multiindex_indexer:\n                    len_indexer = len(indexer[1])\n                    ser = np.tile(ser, len_indexer).reshape(len_indexer, -1).T\n                return ser\n            for i, idx in enumerate(indexer):\n                ax = obj.axes[i]\n                if is_sequence(idx) or isinstance(idx, slice):\n                    if single_aligner and com.is_null_slice(idx):\n                        continue\n                    new_ix = ax[idx]\n                    if not is_list_like_indexer(new_ix):\n                        new_ix = Index([new_ix])\n                    else:\n                        new_ix = Index(new_ix)\n                    if ser.index.equals(new_ix) or not len(new_ix):\n                        return ser._values.copy()\n                    return ser.reindex(new_ix)._values\n                elif single_aligner and is_frame:\n                    ax = self.obj.axes[1]\n                    if ser.index.equals(ax) or not len(ax):\n                        return ser._values.copy()\n                    return ser.reindex(ax)._values\n                elif single_aligner:\n                    broadcast = []\n                    for n, labels in enumerate(self.obj._get_plane_axes(i)):\n                        if len(labels & ser.index):\n                            ser = ser.reindex(labels)\n                        else:\n                            broadcast.append((n, len(labels)))\n                    ser = ser._values.copy()\n                    for axis, l in broadcast:\n                        shape = [-1] * (len(broadcast) + 1)\n                        shape[axis] = l\n                        ser = np.tile(ser, l).reshape(shape)\n                    if self.obj.ndim == 3:\n                        ser = ser.T\n                    return ser\n        elif is_scalar(indexer):\n            ax = self.obj._get_axis(1)\n            if ser.index.equals(ax):\n                return ser._values.copy()\n            return ser.reindex(ax)._values\n        raise ValueError('Incompatible indexer with Series')\n\n    def _align_frame(self, indexer, df):\n        is_frame = self.obj.ndim == 2\n        is_panel = self.obj.ndim >= 3\n        if isinstance(indexer, tuple):\n            idx, cols = None, None\n            sindexers = []\n            for i, ix in enumerate(indexer):\n                ax = self.obj.axes[i]\n                if is_sequence(ix) or isinstance(ix, slice):\n                    if isinstance(ix, np.ndarray):\n                        ix = ix.ravel()\n                    if idx is None:\n                        idx = ax[ix]\n                    elif cols is None:\n                        cols = ax[ix]\n                    else:\n                        break\n                else:\n                    sindexers.append(i)\n            if is_panel:\n                if len(sindexers) == 1 and sindexers[0] != 0:\n                    df = df.T\n                if idx is None:\n                    idx = df.index\n                if cols is None:\n                    cols = df.columns\n            if idx is not None and cols is not None:\n                if df.index.equals(idx) and df.columns.equals(cols):\n                    val = df.copy()._values\n                else:\n                    val = df.reindex(idx, columns=cols)._values\n                return val\n        elif (isinstance(indexer, slice) or is_list_like_indexer(indexer)\n            ) and is_frame:\n            ax = self.obj.index[indexer]\n            if df.index.equals(ax):\n                val = df.copy()._values\n            else:\n                if isinstance(ax, MultiIndex) and isinstance(df.index,\n                    MultiIndex) and ax.nlevels != df.index.nlevels:\n                    raise TypeError(\n                        'cannot align on a multi-index with out specifying the join levels'\n                        )\n                val = df.reindex(index=ax)._values\n            return val\n        elif is_scalar(indexer) and is_panel:\n            idx = self.obj.axes[1]\n            cols = self.obj.axes[2]\n            if idx.equals(df.index) and cols.equals(df.columns):\n                return df.copy()._values\n            return df.reindex(idx, columns=cols)._values\n        raise ValueError('Incompatible indexer with DataFrame')\n\n    def _align_panel(self, indexer, df):\n        raise NotImplementedError(\n            'cannot set using an indexer with a Panel yet!')\n\n    def _getitem_tuple(self, tup):\n        try:\n            return self._getitem_lowerdim(tup)\n        except IndexingError:\n            pass\n        self._has_valid_tuple(tup)\n        if self._multi_take_opportunity(tup):\n            return self._multi_take(tup)\n        retval = self.obj\n        for i, key in enumerate(tup):\n            if i >= self.obj.ndim:\n                raise IndexingError('Too many indexers')\n            if com.is_null_slice(key):\n                continue\n            retval = getattr(retval, self.name)._getitem_axis(key, axis=i)\n        return retval\n\n    def _multi_take_opportunity(self, tup):\n        \"\"\"\n        Check whether there is the possibility to use ``_multi_take``.\n        Currently the limit is that all axes being indexed must be indexed with\n        list-likes.\n\n        Parameters\n        ----------\n        tup : tuple\n            Tuple of indexers, one per axis\n\n        Returns\n        -------\n        boolean: Whether the current indexing can be passed through _multi_take\n        \"\"\"\n        if not all(is_list_like_indexer(x) for x in tup):\n            return False\n        if any(com.is_bool_indexer(x) for x in tup):\n            return False\n        return True\n\n    def _multi_take(self, tup):\n        \"\"\"\n        Create the indexers for the passed tuple of keys, and execute the take\n        operation. This allows the take operation to be executed all at once -\n        rather than once for each dimension - improving efficiency.\n\n        Parameters\n        ----------\n        tup : tuple\n            Tuple of indexers, one per axis\n\n        Returns\n        -------\n        values: same type as the object being indexed\n        \"\"\"\n        o = self.obj\n        d = {axis: self._get_listlike_indexer(key, axis) for key, axis in\n            zip(tup, o._AXIS_ORDERS)}\n        return o._reindex_with_indexers(d, copy=True, allow_dups=True)\n\n    def _convert_for_reindex(self, key, axis=None):\n        return key\n\n    def _handle_lowerdim_multi_index_axis0(self, tup):\n        try:\n            return self._get_label(tup, axis=self.axis)\n        except TypeError:\n            pass\n        except Exception as e1:\n            if isinstance(tup[0], (slice, Index)):\n                raise IndexingError('Handle elsewhere')\n            ax0 = self.obj._get_axis(0)\n            if not ax0.is_lexsorted_for_tuple(tup):\n                raise e1\n        return None\n\n    def _getitem_lowerdim(self, tup):\n        if self.axis is not None:\n            axis = self.obj._get_axis_number(self.axis)\n            return self._getitem_axis(tup, axis=axis)\n        if self._is_nested_tuple_indexer(tup):\n            return self._getitem_nested_tuple(tup)\n        ax0 = self.obj._get_axis(0)\n        if isinstance(ax0, MultiIndex) and self.name != 'iloc':\n            result = self._handle_lowerdim_multi_index_axis0(tup)\n            if result is not None:\n                return result\n        if len(tup) > self.obj.ndim:\n            raise IndexingError('Too many indexers. handle elsewhere')\n        for i, key in enumerate(tup):\n            if is_label_like(key) or isinstance(key, tuple):\n                section = self._getitem_axis(key, axis=i)\n                if not is_list_like_indexer(section):\n                    return section\n                elif section.ndim == self.ndim:\n                    new_key = tup[:i] + (_NS,) + tup[i + 1:]\n                else:\n                    new_key = tup[:i] + tup[i + 1:]\n                    if isinstance(section, ABCDataFrame) and i > 0 and len(\n                        new_key) == 2:\n                        a, b = new_key\n                        new_key = b, a\n                    if len(new_key) == 1:\n                        new_key, = new_key\n                if com.is_null_slice(new_key):\n                    return section\n                return getattr(section, self.name)[new_key]\n        raise IndexingError('not applicable')\n\n    def _getitem_nested_tuple(self, tup):\n        if len(tup) > self.ndim:\n            result = self._handle_lowerdim_multi_index_axis0(tup)\n            if result is not None:\n                return result\n            return self._getitem_axis(tup, axis=self.axis)\n        obj = self.obj\n        axis = 0\n        for i, key in enumerate(tup):\n            if com.is_null_slice(key):\n                axis += 1\n                continue\n            current_ndim = obj.ndim\n            obj = getattr(obj, self.name)._getitem_axis(key, axis=axis)\n            axis += 1\n            if is_scalar(obj) or not hasattr(obj, 'ndim'):\n                break\n            if obj.ndim < current_ndim:\n                if i >= 1 and current_ndim == 3 and obj.ndim == 2:\n                    obj = obj.T\n                axis -= 1\n        return obj\n\n    def _getitem_axis(self, key, axis=None):\n        if axis is None:\n            axis = self.axis or 0\n        if is_iterator(key):\n            key = list(key)\n        self._validate_key(key, axis)\n        labels = self.obj._get_axis(axis)\n        if isinstance(key, slice):\n            return self._get_slice_axis(key, axis=axis)\n        elif is_list_like_indexer(key) and not (isinstance(key, tuple) and\n            isinstance(labels, MultiIndex)):\n            if hasattr(key, 'ndim') and key.ndim > 1:\n                raise ValueError('Cannot index with multidimensional key')\n            return self._getitem_iterable(key, axis=axis)\n        else:\n            key = labels._maybe_cast_indexer(key)\n            if is_integer(key):\n                if axis == 0 and isinstance(labels, MultiIndex):\n                    try:\n                        return self._get_label(key, axis=axis)\n                    except (KeyError, TypeError):\n                        if self.obj.index.levels[0].is_integer():\n                            raise\n                if not labels.is_floating() and not labels.is_integer():\n                    return self._get_loc(key, axis=axis)\n            return self._get_label(key, axis=axis)\n\n    def _get_listlike_indexer(self, key, axis, raise_missing=False):\n        \"\"\"\n        Transform a list-like of keys into a new index and an indexer.\n\n        Parameters\n        ----------\n        key : list-like\n            Target labels\n        axis: int\n            Dimension on which the indexing is being made\n        raise_missing: bool\n            Whether to raise a KeyError if some labels are not found. Will be\n            removed in the future, and then this method will always behave as\n            if raise_missing=True.\n\n        Raises\n        ------\n        KeyError\n            If at least one key was requested but none was found, and\n            raise_missing=True.\n\n        Returns\n        -------\n        keyarr: Index\n            New index (coinciding with 'key' if the axis is unique)\n        values : array-like\n            An indexer for the return object; -1 denotes keys not found\n        \"\"\"\n        o = self.obj\n        ax = o._get_axis(axis)\n        indexer, keyarr = ax._convert_listlike_indexer(key, kind=self.name)\n        if indexer is not None and (indexer != -1).all():\n            self._validate_read_indexer(key, indexer, axis, raise_missing=\n                raise_missing)\n            return ax[indexer], indexer\n        if ax.is_unique:\n            if len(ax) or not len(key):\n                key = self._convert_for_reindex(key, axis)\n            indexer = ax.get_indexer_for(key)\n            keyarr = ax.reindex(keyarr)[0]\n        else:\n            keyarr, indexer, new_indexer = ax._reindex_non_unique(keyarr)\n        self._validate_read_indexer(keyarr, indexer, o._get_axis_number(\n            axis), raise_missing=raise_missing)\n        return keyarr, indexer\n\n    def _getitem_iterable(self, key, axis=None):\n        \"\"\"\n        Index current object with an an iterable key (which can be a boolean\n        indexer, or a collection of keys).\n\n        Parameters\n        ----------\n        key : iterable\n            Target labels, or boolean indexer\n        axis: int, default None\n            Dimension on which the indexing is being made\n\n        Raises\n        ------\n        KeyError\n            If no key was found. Will change in the future to raise if not all\n            keys were found.\n        IndexingError\n            If the boolean indexer is unalignable with the object being\n            indexed.\n\n        Returns\n        -------\n        scalar, DataFrame, or Series: indexed value(s),\n        \"\"\"\n        if axis is None:\n            axis = self.axis or 0\n        self._validate_key(key, axis)\n        labels = self.obj._get_axis(axis)\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(labels, key)\n            inds, = key.nonzero()\n            return self.obj._take(inds, axis=axis)\n        else:\n            keyarr, indexer = self._get_listlike_indexer(key, axis,\n                raise_missing=False)\n            return self.obj._reindex_with_indexers({axis: [keyarr, indexer]\n                }, copy=True, allow_dups=True)\n\n    def _validate_read_indexer(self, key, indexer, axis, raise_missing=False):\n        \"\"\"\n        Check that indexer can be used to return a result (e.g. at least one\n        element was found, unless the list of keys was actually empty).\n\n        Parameters\n        ----------\n        key : list-like\n            Target labels (only used to show correct error message)\n        indexer: array-like of booleans\n            Indices corresponding to the key (with -1 indicating not found)\n        axis: int\n            Dimension on which the indexing is being made\n        raise_missing: bool\n            Whether to raise a KeyError if some labels are not found. Will be\n            removed in the future, and then this method will always behave as\n            if raise_missing=True.\n\n        Raises\n        ------\n        KeyError\n            If at least one key was requested but none was found, and\n            raise_missing=True.\n        \"\"\"\n        ax = self.obj._get_axis(axis)\n        if len(key) == 0:\n            return\n        missing = (indexer < 0).sum()\n        if missing:\n            if missing == len(indexer):\n                raise KeyError('None of [{key}] are in the [{axis}]'.format\n                    (key=key, axis=self.obj._get_axis_name(axis)))\n            if not (self.name == 'loc' and not raise_missing):\n                not_found = list(set(key) - set(ax))\n                raise KeyError('{} not in index'.format(not_found))\n            _missing_key_warning = textwrap.dedent(\n                \"\"\"\n            Passing list-likes to .loc or [] with any missing label will raise\n            KeyError in the future, you can use .reindex() as an alternative.\n\n            See the documentation here:\n            https://pandas.pydata.org/pandas-docs/stable/indexing.html#deprecate-loc-reindex-listlike\"\"\"\n                )\n            if not (ax.is_categorical() or ax.is_interval()):\n                warnings.warn(_missing_key_warning, FutureWarning, stacklevel=6\n                    )\n\n    def _convert_to_indexer(self, obj, axis=None, is_setter=False,\n        raise_missing=False):\n        \"\"\"\n        Convert indexing key into something we can use to do actual fancy\n        indexing on an ndarray\n\n        Examples\n        ix[:5] -> slice(0, 5)\n        ix[[1,2,3]] -> [1,2,3]\n        ix[['foo', 'bar', 'baz']] -> [i, j, k] (indices of foo, bar, baz)\n\n        Going by Zen of Python?\n        'In the face of ambiguity, refuse the temptation to guess.'\n        raise AmbiguousIndexError with integer labels?\n        - No, prefer label-based indexing\n        \"\"\"\n        if axis is None:\n            axis = self.axis or 0\n        labels = self.obj._get_axis(axis)\n        if isinstance(obj, slice):\n            return self._convert_slice_indexer(obj, axis)\n        try:\n            obj = self._convert_scalar_indexer(obj, axis)\n        except TypeError:\n            if is_setter:\n                pass\n        is_int_index = labels.is_integer()\n        is_int_positional = is_integer(obj) and not is_int_index\n        try:\n            return labels.get_loc(obj)\n        except LookupError:\n            if isinstance(obj, tuple) and isinstance(labels, MultiIndex):\n                if is_setter and len(obj) == labels.nlevels:\n                    return {'key': obj}\n                raise\n        except TypeError:\n            pass\n        except ValueError:\n            if not is_int_positional:\n                raise\n        if is_int_positional:\n            if is_setter:\n                if self.name == 'loc':\n                    return {'key': obj}\n                if obj >= self.obj.shape[axis] and not isinstance(labels,\n                    MultiIndex):\n                    raise ValueError(\n                        'cannot set by positional indexing with enlargement')\n            return obj\n        if is_nested_tuple(obj, labels):\n            return labels.get_locs(obj)\n        elif is_list_like_indexer(obj):\n            if com.is_bool_indexer(obj):\n                obj = check_bool_indexer(labels, obj)\n                inds, = obj.nonzero()\n                return inds\n            else:\n                kwargs = {'raise_missing': True if is_setter else raise_missing\n                    }\n                return self._get_listlike_indexer(obj, axis, **kwargs)[1]\n        else:\n            try:\n                return labels.get_loc(obj)\n            except LookupError:\n                if not is_list_like_indexer(obj) and is_setter:\n                    return {'key': obj}\n                raise\n\n    def _tuplify(self, loc):\n        tup = [slice(None, None) for _ in range(self.ndim)]\n        tup[0] = loc\n        return tuple(tup)\n\n    def _get_slice_axis(self, slice_obj, axis=None):\n        obj = self.obj\n        if axis is None:\n            axis = self.axis or 0\n        if not need_slice(slice_obj):\n            return obj.copy(deep=False)\n        indexer = self._convert_slice_indexer(slice_obj, axis)\n        if isinstance(indexer, slice):\n            return self._slice(indexer, axis=axis, kind='iloc')\n        else:\n            return self.obj._take(indexer, axis=axis)\n",
                        "belong_class_name": "_NDFrameIndexer",
                        "belong_class_init": "",
                        "called_function_name": "_validate_key",
                        "called_function_content": "def _has_valid_tuple(self, key):\n    \"\"\" check the key for valid keys across my indexer \"\"\"\n    for i, k in enumerate(key):\n        if i >= self.obj.ndim:\n            raise IndexingError('Too many indexers')\n        try:\n            self._validate_key(k, i)\n",
                        "called_arguments": "(k, i)",
                        "called_function_parameter": "(self, key, axis)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_validate_key",
                        "function_content": "def _validate_key(self, key, axis):\n    if com.is_bool_indexer(key):\n        if hasattr(key, 'index') and isinstance(key.index, Index):\n            if key.index.inferred_type == 'integer':\n                raise NotImplementedError(\n                    'iLocation based boolean indexing on an integer type is not available'\n                    )\n            raise ValueError(\n                'iLocation based boolean indexing cannot use an indexable as a mask'\n                )\n        return\n    if isinstance(key, slice):\n        return\n    elif is_integer(key):\n        self._validate_integer(key, axis)\n    elif isinstance(key, tuple):\n        raise IndexingError('Too many indexers')\n    elif is_list_like_indexer(key):\n        arr = np.array(key)\n        len_axis = len(self.obj._get_axis(axis))\n        if len(arr) and (arr.max() >= len_axis or arr.min() < -len_axis):\n            raise IndexError('positional indexers are out-of-bounds')\n    else:\n        raise ValueError('Can only index by location with a [{types}]'.\n            format(types=self._valid_types))\n",
                        "function_parameter": "(self, key, axis)",
                        "belong_class_content": "class _iLocIndexer(_LocationIndexer):\n    \"\"\"\n    Purely integer-location based indexing for selection by position.\n\n    ``.iloc[]`` is primarily integer position based (from ``0`` to\n    ``length-1`` of the axis), but may also be used with a boolean\n    array.\n\n    Allowed inputs are:\n\n    - An integer, e.g. ``5``.\n    - A list or array of integers, e.g. ``[4, 3, 0]``.\n    - A slice object with ints, e.g. ``1:7``.\n    - A boolean array.\n    - A ``callable`` function with one argument (the calling Series, DataFrame\n      or Panel) and that returns valid output for indexing (one of the above).\n      This is useful in method chains, when you don't have a reference to the\n      calling object, but would like to base your selection on some value.\n\n    ``.iloc`` will raise ``IndexError`` if a requested indexer is\n    out-of-bounds, except *slice* indexers which allow out-of-bounds\n    indexing (this conforms with python/numpy *slice* semantics).\n\n    See more at ref:`Selection by Position <indexing.integer>`.\n\n    See Also\n    --------\n    DataFrame.iat : Fast integer location scalar accessor.\n    DataFrame.loc : Purely label-location based indexer for selection by label.\n    Series.iloc : Purely integer-location based indexing for\n                   selection by position.\n\n    Examples\n    --------\n\n    >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n    ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n    ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]\n    >>> df = pd.DataFrame(mydict)\n    >>> df\n          a     b     c     d\n    0     1     2     3     4\n    1   100   200   300   400\n    2  1000  2000  3000  4000\n\n    **Indexing just the rows**\n\n    With a scalar integer.\n\n    >>> type(df.iloc[0])\n    <class 'pandas.core.series.Series'>\n    >>> df.iloc[0]\n    a    1\n    b    2\n    c    3\n    d    4\n    Name: 0, dtype: int64\n\n    With a list of integers.\n\n    >>> df.iloc[[0]]\n       a  b  c  d\n    0  1  2  3  4\n    >>> type(df.iloc[[0]])\n    <class 'pandas.core.frame.DataFrame'>\n\n    >>> df.iloc[[0, 1]]\n         a    b    c    d\n    0    1    2    3    4\n    1  100  200  300  400\n\n    With a `slice` object.\n\n    >>> df.iloc[:3]\n          a     b     c     d\n    0     1     2     3     4\n    1   100   200   300   400\n    2  1000  2000  3000  4000\n\n    With a boolean mask the same length as the index.\n\n    >>> df.iloc[[True, False, True]]\n          a     b     c     d\n    0     1     2     3     4\n    2  1000  2000  3000  4000\n\n    With a callable, useful in method chains. The `x` passed\n    to the ``lambda`` is the DataFrame being sliced. This selects\n    the rows whose index label even.\n\n    >>> df.iloc[lambda x: x.index % 2 == 0]\n          a     b     c     d\n    0     1     2     3     4\n    2  1000  2000  3000  4000\n\n    **Indexing both axes**\n\n    You can mix the indexer types for the index and columns. Use ``:`` to\n    select the entire axis.\n\n    With scalar integers.\n\n    >>> df.iloc[0, 1]\n    2\n\n    With lists of integers.\n\n    >>> df.iloc[[0, 2], [1, 3]]\n          b     d\n    0     2     4\n    2  2000  4000\n\n    With `slice` objects.\n\n    >>> df.iloc[1:3, 0:3]\n          a     b     c\n    1   100   200   300\n    2  1000  2000  3000\n\n    With a boolean array whose length matches the columns.\n\n    >>> df.iloc[:, [True, False, True, False]]\n          a     c\n    0     1     3\n    1   100   300\n    2  1000  3000\n\n    With a callable function that expects the Series or DataFrame.\n\n    >>> df.iloc[:, lambda df: [0, 2]]\n          a     c\n    0     1     3\n    1   100   300\n    2  1000  3000\n    \"\"\"\n    _valid_types = (\n        'integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array'\n        )\n    _exception = IndexError\n\n    def _validate_key(self, key, axis):\n        if com.is_bool_indexer(key):\n            if hasattr(key, 'index') and isinstance(key.index, Index):\n                if key.index.inferred_type == 'integer':\n                    raise NotImplementedError(\n                        'iLocation based boolean indexing on an integer type is not available'\n                        )\n                raise ValueError(\n                    'iLocation based boolean indexing cannot use an indexable as a mask'\n                    )\n            return\n        if isinstance(key, slice):\n            return\n        elif is_integer(key):\n            self._validate_integer(key, axis)\n        elif isinstance(key, tuple):\n            raise IndexingError('Too many indexers')\n        elif is_list_like_indexer(key):\n            arr = np.array(key)\n            len_axis = len(self.obj._get_axis(axis))\n            if len(arr) and (arr.max() >= len_axis or arr.min() < -len_axis):\n                raise IndexError('positional indexers are out-of-bounds')\n        else:\n            raise ValueError('Can only index by location with a [{types}]'.\n                format(types=self._valid_types))\n\n    def _has_valid_setitem_indexer(self, indexer):\n        self._has_valid_positional_setitem_indexer(indexer)\n\n    def _is_scalar_access(self, key):\n        if not hasattr(key, '__len__'):\n            return False\n        if len(key) != self.ndim:\n            return False\n        for i, k in enumerate(key):\n            if not is_integer(k):\n                return False\n            ax = self.obj.axes[i]\n            if not ax.is_unique:\n                return False\n        return True\n\n    def _getitem_scalar(self, key):\n        values = self.obj._get_value(*key, takeable=True)\n        return values\n\n    def _validate_integer(self, key, axis):\n        \"\"\"\n        Check that 'key' is a valid position in the desired axis.\n\n        Parameters\n        ----------\n        key : int\n            Requested position\n        axis : int\n            Desired axis\n\n        Returns\n        -------\n        None\n\n        Raises\n        ------\n        IndexError\n            If 'key' is not a valid position in axis 'axis'\n        \"\"\"\n        len_axis = len(self.obj._get_axis(axis))\n        if key >= len_axis or key < -len_axis:\n            raise IndexError('single positional indexer is out-of-bounds')\n\n    def _getitem_tuple(self, tup):\n        self._has_valid_tuple(tup)\n        try:\n            return self._getitem_lowerdim(tup)\n        except IndexingError:\n            pass\n        retval = self.obj\n        axis = 0\n        for i, key in enumerate(tup):\n            if i >= self.obj.ndim:\n                raise IndexingError('Too many indexers')\n            if com.is_null_slice(key):\n                axis += 1\n                continue\n            retval = getattr(retval, self.name)._getitem_axis(key, axis=axis)\n            if retval.ndim < self.ndim:\n                axis -= 1\n            axis += 1\n        return retval\n\n    def _get_slice_axis(self, slice_obj, axis=None):\n        if axis is None:\n            axis = self.axis or 0\n        obj = self.obj\n        if not need_slice(slice_obj):\n            return obj.copy(deep=False)\n        slice_obj = self._convert_slice_indexer(slice_obj, axis)\n        if isinstance(slice_obj, slice):\n            return self._slice(slice_obj, axis=axis, kind='iloc')\n        else:\n            return self.obj._take(slice_obj, axis=axis)\n\n    def _get_list_axis(self, key, axis=None):\n        \"\"\"\n        Return Series values by list or array of integers\n\n        Parameters\n        ----------\n        key : list-like positional indexer\n        axis : int (can only be zero)\n\n        Returns\n        -------\n        Series object\n        \"\"\"\n        if axis is None:\n            axis = self.axis or 0\n        try:\n            return self.obj._take(key, axis=axis)\n        except IndexError:\n            raise IndexError('positional indexers are out-of-bounds')\n\n    def _getitem_axis(self, key, axis=None):\n        if axis is None:\n            axis = self.axis or 0\n        if isinstance(key, slice):\n            return self._get_slice_axis(key, axis=axis)\n        if isinstance(key, list):\n            key = np.asarray(key)\n        if com.is_bool_indexer(key):\n            self._validate_key(key, axis)\n            return self._getbool_axis(key, axis=axis)\n        elif is_list_like_indexer(key):\n            return self._get_list_axis(key, axis=axis)\n        else:\n            key = item_from_zerodim(key)\n            if not is_integer(key):\n                raise TypeError(\n                    'Cannot index by location index with a non-integer key')\n            self._validate_integer(key, axis)\n            return self._get_loc(key, axis=axis)\n\n    def _convert_to_indexer(self, obj, axis=None, is_setter=False):\n        \"\"\" much simpler as we only have to deal with our valid types \"\"\"\n        if axis is None:\n            axis = self.axis or 0\n        if isinstance(obj, slice):\n            return self._convert_slice_indexer(obj, axis)\n        elif is_float(obj):\n            return self._convert_scalar_indexer(obj, axis)\n        try:\n            self._validate_key(obj, axis)\n            return obj\n        except ValueError:\n            raise ValueError('Can only index by location with a [{types}]'.\n                format(types=self._valid_types))\n",
                        "belong_class_name": "_iLocIndexer",
                        "belong_class_init": ""
                    }
                ]
            ]
        },
        "pandas-36950_frame": {
            "pytest pandas/tests/frame/apply/test_frame_apply.py::TestDataFrameAggregate::test_agg_args_kwargs": [
                [
                    {
                        "function_name": "test_agg_args_kwargs",
                        "function_content": "@pytest.mark.parametrize('axis', [0, 1])\n@pytest.mark.parametrize('args, kwargs', [((1, 2, 3), {}), ((8, 7, 15), {}),\n    ((1, 2), {}), ((1,), {'b': 2}), ((), {'a': 1, 'b': 2}), ((), {'a': 2,\n    'b': 1}), ((), {'a': 1, 'b': 2, 'c': 3})])\ndef test_agg_args_kwargs(self, axis, args, kwargs):\n\n    def f(x, a, b, c=3):\n        return x.sum() + (a + b) / c\n    df = pd.DataFrame([[1, 2], [3, 4]])\n    if axis == 0:\n        expected = pd.Series([5.0, 7.0])\n    else:\n        expected = pd.Series([4.0, 8.0])\n    result = df.agg(f, axis, *args, **kwargs)\n    tm.assert_series_equal(result, expected)\n",
                        "function_parameter": "(self, axis, args, kwargs)",
                        "belong_class_content": "class TestDataFrameAggregate:\n\n    def test_agg_transform(self, axis, float_frame):\n        other_axis = 1 if axis in {0, 'index'} else 0\n        with np.errstate(all='ignore'):\n            f_abs = np.abs(float_frame)\n            f_sqrt = np.sqrt(float_frame)\n            expected = f_sqrt.copy()\n            result = float_frame.apply(np.sqrt, axis=axis)\n            tm.assert_frame_equal(result, expected)\n            result = float_frame.apply([np.sqrt], axis=axis)\n            expected = f_sqrt.copy()\n            if axis in {0, 'index'}:\n                expected.columns = pd.MultiIndex.from_product([float_frame.\n                    columns, ['sqrt']])\n            else:\n                expected.index = pd.MultiIndex.from_product([float_frame.\n                    index, ['sqrt']])\n            tm.assert_frame_equal(result, expected)\n            result = float_frame.apply([np.abs, np.sqrt], axis=axis)\n            expected = zip_frames([f_abs, f_sqrt], axis=other_axis)\n            if axis in {0, 'index'}:\n                expected.columns = pd.MultiIndex.from_product([float_frame.\n                    columns, ['absolute', 'sqrt']])\n            else:\n                expected.index = pd.MultiIndex.from_product([float_frame.\n                    index, ['absolute', 'sqrt']])\n            tm.assert_frame_equal(result, expected)\n\n    def test_transform_and_agg_err(self, axis, float_frame):\n        msg = 'cannot combine transform and aggregation operations'\n        with pytest.raises(ValueError, match=msg):\n            with np.errstate(all='ignore'):\n                float_frame.agg(['max', 'sqrt'], axis=axis)\n        df = pd.DataFrame({'A': range(5), 'B': 5})\n\n        def f():\n            with np.errstate(all='ignore'):\n                df.agg({'A': ['abs', 'sum'], 'B': ['mean', 'max']}, axis=axis)\n\n    def test_demo(self):\n        df = pd.DataFrame({'A': range(5), 'B': 5})\n        result = df.agg(['min', 'max'])\n        expected = DataFrame({'A': [0, 4], 'B': [5, 5]}, columns=['A', 'B'],\n            index=['min', 'max'])\n        tm.assert_frame_equal(result, expected)\n        result = df.agg({'A': ['min', 'max'], 'B': ['sum', 'max']})\n        expected = DataFrame({'A': [4.0, 0.0, np.nan], 'B': [5.0, np.nan, \n            25.0]}, columns=['A', 'B'], index=['max', 'min', 'sum'])\n        tm.assert_frame_equal(result.reindex_like(expected), expected)\n\n    def test_agg_with_name_as_column_name(self):\n        data = {'name': ['foo', 'bar']}\n        df = pd.DataFrame(data)\n        result = df.agg({'name': 'count'})\n        expected = pd.Series({'name': 2})\n        tm.assert_series_equal(result, expected)\n        result = df['name'].agg({'name': 'count'})\n        expected = pd.Series({'name': 2}, name='name')\n        tm.assert_series_equal(result, expected)\n\n    def test_agg_multiple_mixed_no_warning(self):\n        mdf = pd.DataFrame({'A': [1, 2, 3], 'B': [1.0, 2.0, 3.0], 'C': [\n            'foo', 'bar', 'baz'], 'D': pd.date_range('20130101', periods=3)})\n        expected = pd.DataFrame({'A': [1, 6], 'B': [1.0, 6.0], 'C': ['bar',\n            'foobarbaz'], 'D': [pd.Timestamp('2013-01-01'), pd.NaT]}, index\n            =['min', 'sum'])\n        with tm.assert_produces_warning(None):\n            result = mdf.agg(['min', 'sum'])\n        tm.assert_frame_equal(result, expected)\n        with tm.assert_produces_warning(None):\n            result = mdf[['D', 'C', 'B', 'A']].agg(['sum', 'min'])\n        expected = expected[['D', 'C', 'B', 'A']]\n        tm.assert_frame_equal(result, expected)\n\n    def test_agg_dict_nested_renaming_depr(self):\n        df = pd.DataFrame({'A': range(5), 'B': 5})\n        msg = 'nested renamer is not supported'\n        with pytest.raises(SpecificationError, match=msg):\n            df.agg({'A': {'foo': 'min'}, 'B': {'bar': 'max'}})\n\n    def test_agg_reduce(self, axis, float_frame):\n        other_axis = 1 if axis in {0, 'index'} else 0\n        name1, name2 = float_frame.axes[other_axis].unique()[:2].sort_values()\n        expected = pd.concat([float_frame.mean(axis=axis), float_frame.max(\n            axis=axis), float_frame.sum(axis=axis)], axis=1)\n        expected.columns = ['mean', 'max', 'sum']\n        expected = expected.T if axis in {0, 'index'} else expected\n        result = float_frame.agg(['mean', 'max', 'sum'], axis=axis)\n        tm.assert_frame_equal(result, expected)\n        func = dict([(name1, 'mean'), (name2, 'sum')])\n        result = float_frame.agg(func, axis=axis)\n        expected = Series([float_frame.loc(other_axis)[name1].mean(),\n            float_frame.loc(other_axis)[name2].sum()], index=[name1, name2])\n        tm.assert_series_equal(result, expected)\n        func = dict([(name1, ['mean']), (name2, ['sum'])])\n        result = float_frame.agg(func, axis=axis)\n        expected = DataFrame({name1: Series([float_frame.loc(other_axis)[\n            name1].mean()], index=['mean']), name2: Series([float_frame.loc\n            (other_axis)[name2].sum()], index=['sum'])})\n        expected = expected.T if axis in {1, 'columns'} else expected\n        tm.assert_frame_equal(result, expected)\n        func = dict([(name1, ['mean', 'sum']), (name2, ['sum', 'max'])])\n        result = float_frame.agg(func, axis=axis)\n        expected = DataFrame(dict([(name1, Series([float_frame.loc(\n            other_axis)[name1].mean(), float_frame.loc(other_axis)[name1].\n            sum()], index=['mean', 'sum'])), (name2, Series([float_frame.\n            loc(other_axis)[name2].sum(), float_frame.loc(other_axis)[name2\n            ].max()], index=['sum', 'max']))]))\n        expected = expected.T if axis in {1, 'columns'} else expected\n        tm.assert_frame_equal(result, expected)\n\n    def test_nuiscance_columns(self):\n        df = DataFrame({'A': [1, 2, 3], 'B': [1.0, 2.0, 3.0], 'C': ['foo',\n            'bar', 'baz'], 'D': pd.date_range('20130101', periods=3)})\n        result = df.agg('min')\n        expected = Series([1, 1.0, 'bar', pd.Timestamp('20130101')], index=\n            df.columns)\n        tm.assert_series_equal(result, expected)\n        result = df.agg(['min'])\n        expected = DataFrame([[1, 1.0, 'bar', pd.Timestamp('20130101')]],\n            index=['min'], columns=df.columns)\n        tm.assert_frame_equal(result, expected)\n        result = df.agg('sum')\n        expected = Series([6, 6.0, 'foobarbaz'], index=['A', 'B', 'C'])\n        tm.assert_series_equal(result, expected)\n        result = df.agg(['sum'])\n        expected = DataFrame([[6, 6.0, 'foobarbaz']], index=['sum'],\n            columns=['A', 'B', 'C'])\n        tm.assert_frame_equal(result, expected)\n\n    def test_non_callable_aggregates(self):\n        df = DataFrame({'A': [None, 2, 3], 'B': [1.0, np.nan, 3.0], 'C': [\n            'foo', None, 'bar']})\n        result = df.agg({'A': 'count'})\n        expected = Series({'A': 2})\n        tm.assert_series_equal(result, expected)\n        result = df.agg({'A': 'size'})\n        expected = Series({'A': 3})\n        tm.assert_series_equal(result, expected)\n        result1 = df.agg(['count', 'size'])\n        result2 = df.agg({'A': ['count', 'size'], 'B': ['count', 'size'],\n            'C': ['count', 'size']})\n        expected = pd.DataFrame({'A': {'count': 2, 'size': 3}, 'B': {\n            'count': 2, 'size': 3}, 'C': {'count': 2, 'size': 3}})\n        tm.assert_frame_equal(result1, result2, check_like=True)\n        tm.assert_frame_equal(result2, expected, check_like=True)\n        result = df.agg('count')\n        expected = df.count()\n        tm.assert_series_equal(result, expected)\n        result = df.agg('size')\n        expected = df.size\n        assert result == expected\n\n    def test_agg_listlike_result(self):\n        df = DataFrame({'A': [2, 2, 3], 'B': [1.5, np.nan, 1.5], 'C': [\n            'foo', None, 'bar']})\n\n        def func(group_col):\n            return list(group_col.dropna().unique())\n        result = df.agg(func)\n        expected = pd.Series([[2, 3], [1.5], ['foo', 'bar']], index=['A',\n            'B', 'C'])\n        tm.assert_series_equal(result, expected)\n        result = df.agg([func])\n        expected = expected.to_frame('func').T\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize('df, func, expected', chain(tm.\n        get_cython_table_params(DataFrame(), [('sum', Series(dtype=\n        'float64')), ('max', Series(dtype='float64')), ('min', Series(dtype\n        ='float64')), ('all', Series(dtype=bool)), ('any', Series(dtype=\n        bool)), ('mean', Series(dtype='float64')), ('prod', Series(dtype=\n        'float64')), ('std', Series(dtype='float64')), ('var', Series(dtype\n        ='float64')), ('median', Series(dtype='float64'))]), tm.\n        get_cython_table_params(DataFrame([[np.nan, 1], [1, 2]]), [('sum',\n        Series([1.0, 3])), ('max', Series([1.0, 2])), ('min', Series([1.0, \n        1])), ('all', Series([True, True])), ('any', Series([True, True])),\n        ('mean', Series([1, 1.5])), ('prod', Series([1.0, 2])), ('std',\n        Series([np.nan, 0.707107])), ('var', Series([np.nan, 0.5])), (\n        'median', Series([1, 1.5]))])))\n    def test_agg_cython_table(self, df, func, expected, axis):\n        result = df.agg(func, axis=axis)\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize('df, func, expected', chain(tm.\n        get_cython_table_params(DataFrame(), [('cumprod', DataFrame()), (\n        'cumsum', DataFrame())]), tm.get_cython_table_params(DataFrame([[np\n        .nan, 1], [1, 2]]), [('cumprod', DataFrame([[np.nan, 1], [1, 2]])),\n        ('cumsum', DataFrame([[np.nan, 1], [1, 3]]))])))\n    def test_agg_cython_table_transform(self, df, func, expected, axis):\n        if axis == 'columns' or axis == 1:\n            expected = expected.astype('float64')\n        result = df.agg(func, axis=axis)\n        tm.assert_frame_equal(result, expected)\n\n    @pytest.mark.parametrize('df, func, expected', tm.\n        get_cython_table_params(DataFrame([['a', 'b'], ['b', 'a']]), [[\n        'cumprod', TypeError]]))\n    def test_agg_cython_table_raises(self, df, func, expected, axis):\n        msg = \"can't multiply sequence by non-int of type 'str'\"\n        with pytest.raises(expected, match=msg):\n            df.agg(func, axis=axis)\n\n    @pytest.mark.parametrize('axis', [0, 1])\n    @pytest.mark.parametrize('args, kwargs', [((1, 2, 3), {}), ((8, 7, 15),\n        {}), ((1, 2), {}), ((1,), {'b': 2}), ((), {'a': 1, 'b': 2}), ((), {\n        'a': 2, 'b': 1}), ((), {'a': 1, 'b': 2, 'c': 3})])\n    def test_agg_args_kwargs(self, axis, args, kwargs):\n\n        def f(x, a, b, c=3):\n            return x.sum() + (a + b) / c\n        df = pd.DataFrame([[1, 2], [3, 4]])\n        if axis == 0:\n            expected = pd.Series([5.0, 7.0])\n        else:\n            expected = pd.Series([4.0, 8.0])\n        result = df.agg(f, axis, *args, **kwargs)\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize('num_cols', [2, 3, 5])\n    def test_frequency_is_original(self, num_cols):\n        index = pd.DatetimeIndex(['1950-06-30', '1952-10-24', '1953-05-29'])\n        original = index.copy()\n        df = DataFrame(1, index=index, columns=range(num_cols))\n        df.apply(lambda x: x)\n        assert index.freq == original.freq\n\n    def test_apply_datetime_tz_issue(self):\n        timestamps = [pd.Timestamp('2019-03-15 12:34:31.909000+0000', tz=\n            'UTC'), pd.Timestamp('2019-03-15 12:34:34.359000+0000', tz=\n            'UTC'), pd.Timestamp('2019-03-15 12:34:34.660000+0000', tz='UTC')]\n        df = DataFrame(data=[0, 1, 2], index=timestamps)\n        result = df.apply(lambda x: x.name, axis=1)\n        expected = pd.Series(index=timestamps, data=timestamps)\n        tm.assert_series_equal(result, expected)\n\n    @pytest.mark.parametrize('df', [pd.DataFrame({'A': ['a', None], 'B': [\n        'c', 'd']})])\n    @pytest.mark.parametrize('method', ['min', 'max', 'sum'])\n    def test_consistency_of_aggregates_of_columns_with_missing_values(self,\n        df, method):\n        none_in_first_column_result = getattr(df[['A', 'B']], method)()\n        none_in_second_column_result = getattr(df[['B', 'A']], method)()\n        tm.assert_series_equal(none_in_first_column_result,\n            none_in_second_column_result)\n\n    @pytest.mark.parametrize('col', [1, 1.0, True, 'a', np.nan])\n    def test_apply_dtype(self, col):\n        df = pd.DataFrame([[1.0, col]], columns=['a', 'b'])\n        result = df.apply(lambda x: x.dtype)\n        expected = df.dtypes\n        tm.assert_series_equal(result, expected)\n",
                        "belong_class_name": "TestDataFrameAggregate",
                        "belong_class_init": ""
                    }
                ]
            ]
        },
        "pandas-37736_html": {
            "pytest pandas/tests/io/test_html.py::TestReadHtml::test_parse_path_object": [
                [
                    {
                        "function_name": "test_parse_path_object",
                        "function_content": "def test_parse_path_object(self, datapath):\n    file_path_string = datapath('io', 'data', 'html', 'spam.html')\n    file_path = Path(file_path_string)\n    df1 = self.read_html(file_path_string)[0]\n    df2 = self.read_html(file_path)[0]\n    tm.assert_frame_equal(df1, df2)\n",
                        "function_parameter": "(self, datapath)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    },
                    {
                        "function_name": "read_html",
                        "function_content": "@deprecate_nonkeyword_arguments(version='2.0')\ndef read_html(io: FilePathOrBuffer, match: Union[str, Pattern]='.+', flavor:\n    Optional[str]=None, header: Optional[Union[int, Sequence[int]]]=None,\n    index_col: Optional[Union[int, Sequence[int]]]=None, skiprows: Optional\n    [Union[int, Sequence[int], slice]]=None, attrs: Optional[Dict[str, str]\n    ]=None, parse_dates: bool=False, thousands: Optional[str]=',', encoding:\n    Optional[str]=None, decimal: str='.', converters: Optional[Dict]=None,\n    na_values=None, keep_default_na: bool=True, displayed_only: bool=True\n    ) ->List[DataFrame]:\n    \"\"\"\n    Read HTML tables into a ``list`` of ``DataFrame`` objects.\n\n    Parameters\n    ----------\n    io : str, path object or file-like object\n        A URL, a file-like object, or a raw string containing HTML. Note that\n        lxml only accepts the http, ftp and file url protocols. If you have a\n        URL that starts with ``'https'`` you might try removing the ``'s'``.\n\n    match : str or compiled regular expression, optional\n        The set of tables containing text matching this regex or string will be\n        returned. Unless the HTML is extremely simple you will probably need to\n        pass a non-empty string here. Defaults to '.+' (match any non-empty\n        string). The default value will return all tables contained on a page.\n        This value is converted to a regular expression so that there is\n        consistent behavior between Beautiful Soup and lxml.\n\n    flavor : str, optional\n        The parsing engine to use. 'bs4' and 'html5lib' are synonymous with\n        each other, they are both there for backwards compatibility. The\n        default of ``None`` tries to use ``lxml`` to parse and if that fails it\n        falls back on ``bs4`` + ``html5lib``.\n\n    header : int or list-like, optional\n        The row (or list of rows for a :class:`~pandas.MultiIndex`) to use to\n        make the columns headers.\n\n    index_col : int or list-like, optional\n        The column (or list of columns) to use to create the index.\n\n    skiprows : int, list-like or slice, optional\n        Number of rows to skip after parsing the column integer. 0-based. If a\n        sequence of integers or a slice is given, will skip the rows indexed by\n        that sequence.  Note that a single element sequence means 'skip the nth\n        row' whereas an integer means 'skip n rows'.\n\n    attrs : dict, optional\n        This is a dictionary of attributes that you can pass to use to identify\n        the table in the HTML. These are not checked for validity before being\n        passed to lxml or Beautiful Soup. However, these attributes must be\n        valid HTML table attributes to work correctly. For example, ::\n\n            attrs = {'id': 'table'}\n\n        is a valid attribute dictionary because the 'id' HTML tag attribute is\n        a valid HTML attribute for *any* HTML tag as per `this document\n        <https://html.spec.whatwg.org/multipage/dom.html#global-attributes>`__. ::\n\n            attrs = {'asdf': 'table'}\n\n        is *not* a valid attribute dictionary because 'asdf' is not a valid\n        HTML attribute even if it is a valid XML attribute.  Valid HTML 4.01\n        table attributes can be found `here\n        <http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.2>`__. A\n        working draft of the HTML 5 spec can be found `here\n        <https://html.spec.whatwg.org/multipage/tables.html>`__. It contains the\n        latest information on table attributes for the modern web.\n\n    parse_dates : bool, optional\n        See :func:`~read_csv` for more details.\n\n    thousands : str, optional\n        Separator to use to parse thousands. Defaults to ``','``.\n\n    encoding : str, optional\n        The encoding used to decode the web page. Defaults to ``None``.``None``\n        preserves the previous encoding behavior, which depends on the\n        underlying parser library (e.g., the parser library will try to use\n        the encoding provided by the document).\n\n    decimal : str, default '.'\n        Character to recognize as decimal point (e.g. use ',' for European\n        data).\n\n    converters : dict, default None\n        Dict of functions for converting values in certain columns. Keys can\n        either be integers or column labels, values are functions that take one\n        input argument, the cell (not column) content, and return the\n        transformed content.\n\n    na_values : iterable, default None\n        Custom NA values.\n\n    keep_default_na : bool, default True\n        If na_values are specified and keep_default_na is False the default NaN\n        values are overridden, otherwise they're appended to.\n\n    displayed_only : bool, default True\n        Whether elements with \"display: none\" should be parsed.\n\n    Returns\n    -------\n    dfs\n        A list of DataFrames.\n\n    See Also\n    --------\n    read_csv : Read a comma-separated values (csv) file into DataFrame.\n\n    Notes\n    -----\n    Before using this function you should read the :ref:`gotchas about the\n    HTML parsing libraries <io.html.gotchas>`.\n\n    Expect to do some cleanup after you call this function. For example, you\n    might need to manually assign column names if the column names are\n    converted to NaN when you pass the `header=0` argument. We try to assume as\n    little as possible about the structure of the table and push the\n    idiosyncrasies of the HTML contained in the table to the user.\n\n    This function searches for ``<table>`` elements and only for ``<tr>``\n    and ``<th>`` rows and ``<td>`` elements within each ``<tr>`` or ``<th>``\n    element in the table. ``<td>`` stands for \"table data\". This function\n    attempts to properly handle ``colspan`` and ``rowspan`` attributes.\n    If the function has a ``<thead>`` argument, it is used to construct\n    the header, otherwise the function attempts to find the header within\n    the body (by putting rows with only ``<th>`` elements into the header).\n\n    Similar to :func:`~read_csv` the `header` argument is applied\n    **after** `skiprows` is applied.\n\n    This function will *always* return a list of :class:`DataFrame` *or*\n    it will fail, e.g., it will *not* return an empty list.\n\n    Examples\n    --------\n    See the :ref:`read_html documentation in the IO section of the docs\n    <io.read_html>` for some examples of reading in HTML tables.\n    \"\"\"\n    _importers()\n    if isinstance(skiprows, numbers.Integral) and skiprows < 0:\n        raise ValueError(\n            'cannot skip rows starting from the end of the data (you passed a negative value)'\n            )\n    validate_header_arg(header)\n    return _parse(flavor=flavor, io=io, match=match, header=header,\n        index_col=index_col, skiprows=skiprows, parse_dates=parse_dates,\n        thousands=thousands, attrs=attrs, encoding=encoding, decimal=\n        decimal, converters=converters, na_values=na_values,\n        keep_default_na=keep_default_na, displayed_only=displayed_only)\n",
                        "function_parameter": "(io: FilePathOrBuffer, match: Union[str, Pattern]='.+', flavor:\n    Optional[str]=None, header: Optional[Union[int, Sequence[int]]]=None,\n    index_col: Optional[Union[int, Sequence[int]]]=None, skiprows: Optional\n    [Union[int, Sequence[int], slice]]=None, attrs: Optional[Dict[str, str]\n    ]=None, parse_dates: bool=False, thousands: Optional[str]=',', encoding:\n    Optional[str]=None, decimal: str='.', converters: Optional[Dict]=None,\n    na_values=None, keep_default_na: bool=True, displayed_only: bool=True\n    )",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "_parse",
                        "called_function_content": "@deprecate_nonkeyword_arguments(version='2.0')\ndef read_html(io: FilePathOrBuffer, match: Union[str, Pattern]='.+', flavor:\n    Optional[str]=None, header: Optional[Union[int, Sequence[int]]]=None,\n    index_col: Optional[Union[int, Sequence[int]]]=None, skiprows: Optional\n    [Union[int, Sequence[int], slice]]=None, attrs: Optional[Dict[str, str]\n    ]=None, parse_dates: bool=False, thousands: Optional[str]=',', encoding:\n    Optional[str]=None, decimal: str='.', converters: Optional[Dict]=None,\n    na_values=None, keep_default_na: bool=True, displayed_only: bool=True\n    ) ->List[DataFrame]:\n    \"\"\"\n    Read HTML tables into a ``list`` of ``DataFrame`` objects.\n\n    Parameters\n    ----------\n    io : str, path object or file-like object\n        A URL, a file-like object, or a raw string containing HTML. Note that\n        lxml only accepts the http, ftp and file url protocols. If you have a\n        URL that starts with ``'https'`` you might try removing the ``'s'``.\n\n    match : str or compiled regular expression, optional\n        The set of tables containing text matching this regex or string will be\n        returned. Unless the HTML is extremely simple you will probably need to\n        pass a non-empty string here. Defaults to '.+' (match any non-empty\n        string). The default value will return all tables contained on a page.\n        This value is converted to a regular expression so that there is\n        consistent behavior between Beautiful Soup and lxml.\n\n    flavor : str, optional\n        The parsing engine to use. 'bs4' and 'html5lib' are synonymous with\n        each other, they are both there for backwards compatibility. The\n        default of ``None`` tries to use ``lxml`` to parse and if that fails it\n        falls back on ``bs4`` + ``html5lib``.\n\n    header : int or list-like, optional\n        The row (or list of rows for a :class:`~pandas.MultiIndex`) to use to\n        make the columns headers.\n\n    index_col : int or list-like, optional\n        The column (or list of columns) to use to create the index.\n\n    skiprows : int, list-like or slice, optional\n        Number of rows to skip after parsing the column integer. 0-based. If a\n        sequence of integers or a slice is given, will skip the rows indexed by\n        that sequence.  Note that a single element sequence means 'skip the nth\n        row' whereas an integer means 'skip n rows'.\n\n    attrs : dict, optional\n        This is a dictionary of attributes that you can pass to use to identify\n        the table in the HTML. These are not checked for validity before being\n        passed to lxml or Beautiful Soup. However, these attributes must be\n        valid HTML table attributes to work correctly. For example, ::\n\n            attrs = {'id': 'table'}\n\n        is a valid attribute dictionary because the 'id' HTML tag attribute is\n        a valid HTML attribute for *any* HTML tag as per `this document\n        <https://html.spec.whatwg.org/multipage/dom.html#global-attributes>`__. ::\n\n            attrs = {'asdf': 'table'}\n\n        is *not* a valid attribute dictionary because 'asdf' is not a valid\n        HTML attribute even if it is a valid XML attribute.  Valid HTML 4.01\n        table attributes can be found `here\n        <http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.2>`__. A\n        working draft of the HTML 5 spec can be found `here\n        <https://html.spec.whatwg.org/multipage/tables.html>`__. It contains the\n        latest information on table attributes for the modern web.\n\n    parse_dates : bool, optional\n        See :func:`~read_csv` for more details.\n\n    thousands : str, optional\n        Separator to use to parse thousands. Defaults to ``','``.\n\n    encoding : str, optional\n        The encoding used to decode the web page. Defaults to ``None``.``None``\n        preserves the previous encoding behavior, which depends on the\n        underlying parser library (e.g., the parser library will try to use\n        the encoding provided by the document).\n\n    decimal : str, default '.'\n        Character to recognize as decimal point (e.g. use ',' for European\n        data).\n\n    converters : dict, default None\n        Dict of functions for converting values in certain columns. Keys can\n        either be integers or column labels, values are functions that take one\n        input argument, the cell (not column) content, and return the\n        transformed content.\n\n    na_values : iterable, default None\n        Custom NA values.\n\n    keep_default_na : bool, default True\n        If na_values are specified and keep_default_na is False the default NaN\n        values are overridden, otherwise they're appended to.\n\n    displayed_only : bool, default True\n        Whether elements with \"display: none\" should be parsed.\n\n    Returns\n    -------\n    dfs\n        A list of DataFrames.\n\n    See Also\n    --------\n    read_csv : Read a comma-separated values (csv) file into DataFrame.\n\n    Notes\n    -----\n    Before using this function you should read the :ref:`gotchas about the\n    HTML parsing libraries <io.html.gotchas>`.\n\n    Expect to do some cleanup after you call this function. For example, you\n    might need to manually assign column names if the column names are\n    converted to NaN when you pass the `header=0` argument. We try to assume as\n    little as possible about the structure of the table and push the\n    idiosyncrasies of the HTML contained in the table to the user.\n\n    This function searches for ``<table>`` elements and only for ``<tr>``\n    and ``<th>`` rows and ``<td>`` elements within each ``<tr>`` or ``<th>``\n    element in the table. ``<td>`` stands for \"table data\". This function\n    attempts to properly handle ``colspan`` and ``rowspan`` attributes.\n    If the function has a ``<thead>`` argument, it is used to construct\n    the header, otherwise the function attempts to find the header within\n    the body (by putting rows with only ``<th>`` elements into the header).\n\n    Similar to :func:`~read_csv` the `header` argument is applied\n    **after** `skiprows` is applied.\n\n    This function will *always* return a list of :class:`DataFrame` *or*\n    it will fail, e.g., it will *not* return an empty list.\n\n    Examples\n    --------\n    See the :ref:`read_html documentation in the IO section of the docs\n    <io.read_html>` for some examples of reading in HTML tables.\n    \"\"\"\n    _importers()\n    if isinstance(skiprows, numbers.Integral) and skiprows < 0:\n        raise ValueError(\n            'cannot skip rows starting from the end of the data (you passed a negative value)'\n            )\n    validate_header_arg(header)\n    return _parse(flavor=flavor, io=io, match=match, header=header,\n        index_col=index_col, skiprows=skiprows, parse_dates=parse_dates,\n        thousands=thousands, attrs=attrs, encoding=encoding, decimal=\n        decimal, converters=converters, na_values=na_values,\n        keep_default_na=keep_default_na, displayed_only=displayed_only)\n",
                        "called_arguments": "(flavor=flavor, io=io, match=match, header=header,\n        index_col=index_col, skiprows=skiprows, parse_dates=parse_dates,\n        thousands=thousands, attrs=attrs, encoding=encoding, decimal=\n        decimal, converters=converters, na_values=na_values,\n        keep_default_na=keep_default_na, displayed_only=displayed_only)",
                        "called_function_parameter": "(flavor, io, match, attrs, encoding, displayed_only, **kwargs)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_parse",
                        "function_content": "def _parse(flavor, io, match, attrs, encoding, displayed_only, **kwargs):\n    flavor = _validate_flavor(flavor)\n    compiled_match = re.compile(match)\n    retained = None\n    for flav in flavor:\n        parser = _parser_dispatch(flav)\n        p = parser(io, compiled_match, attrs, encoding, displayed_only)\n        try:\n            tables = p.parse_tables()\n        except ValueError as caught:\n            if hasattr(io, 'seekable') and io.seekable():\n                io.seek(0)\n            elif hasattr(io, 'seekable') and not io.seekable():\n                raise ValueError(\n                    f\"The flavor {flav} failed to parse your input. Since you passed a non-rewindable file object, we can't rewind it to try another parser. Try read_html() with a different flavor.\"\n                    ) from caught\n            retained = caught\n        else:\n            break\n    else:\n        assert retained is not None\n        raise retained\n    ret = []\n    for table in tables:\n        try:\n            ret.append(_data_to_frame(data=table, **kwargs))\n        except EmptyDataError:\n            continue\n    return ret\n",
                        "function_parameter": "(flavor, io, match, attrs, encoding, displayed_only, **kwargs)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "parse_tables",
                        "called_function_content": "def _parse(flavor, io, match, attrs, encoding, displayed_only, **kwargs):\n    flavor = _validate_flavor(flavor)\n    compiled_match = re.compile(match)\n    retained = None\n    for flav in flavor:\n        parser = _parser_dispatch(flav)\n        p = parser(io, compiled_match, attrs, encoding, displayed_only)\n        try:\n            tables = p.parse_tables()\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(self)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "parse_tables",
                        "function_content": "def parse_tables(self):\n    \"\"\"\n        Parse and return all tables from the DOM.\n\n        Returns\n        -------\n        list of parsed (header, body, footer) tuples from tables.\n        \"\"\"\n    tables = self._parse_tables(self._build_doc(), self.match, self.attrs)\n    return (self._parse_thead_tbody_tfoot(table) for table in tables)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class _HtmlFrameParser:\n    \"\"\"\n    Base class for parsers that parse HTML into DataFrames.\n\n    Parameters\n    ----------\n    io : str or file-like\n        This can be either a string of raw HTML, a valid URL using the HTTP,\n        FTP, or FILE protocols or a file-like object.\n\n    match : str or regex\n        The text to match in the document.\n\n    attrs : dict\n        List of HTML <table> element attributes to match.\n\n    encoding : str\n        Encoding to be used by parser\n\n    displayed_only : bool\n        Whether or not items with \"display:none\" should be ignored\n\n    Attributes\n    ----------\n    io : str or file-like\n        raw HTML, URL, or file-like object\n\n    match : regex\n        The text to match in the raw HTML\n\n    attrs : dict-like\n        A dictionary of valid table attributes to use to search for table\n        elements.\n\n    encoding : str\n        Encoding to be used by parser\n\n    displayed_only : bool\n        Whether or not items with \"display:none\" should be ignored\n\n    Notes\n    -----\n    To subclass this class effectively you must override the following methods:\n        * :func:`_build_doc`\n        * :func:`_attr_getter`\n        * :func:`_text_getter`\n        * :func:`_parse_td`\n        * :func:`_parse_thead_tr`\n        * :func:`_parse_tbody_tr`\n        * :func:`_parse_tfoot_tr`\n        * :func:`_parse_tables`\n        * :func:`_equals_tag`\n    See each method's respective documentation for details on their\n    functionality.\n    \"\"\"\n\n    def __init__(self, io, match, attrs, encoding, displayed_only):\n        self.io = io\n        self.match = match\n        self.attrs = attrs\n        self.encoding = encoding\n        self.displayed_only = displayed_only\n\n    def parse_tables(self):\n        \"\"\"\n        Parse and return all tables from the DOM.\n\n        Returns\n        -------\n        list of parsed (header, body, footer) tuples from tables.\n        \"\"\"\n        tables = self._parse_tables(self._build_doc(), self.match, self.attrs)\n        return (self._parse_thead_tbody_tfoot(table) for table in tables)\n\n    def _attr_getter(self, obj, attr):\n        \"\"\"\n        Return the attribute value of an individual DOM node.\n\n        Parameters\n        ----------\n        obj : node-like\n            A DOM node.\n\n        attr : str or unicode\n            The attribute, such as \"colspan\"\n\n        Returns\n        -------\n        str or unicode\n            The attribute value.\n        \"\"\"\n        return obj.get(attr)\n\n    def _text_getter(self, obj):\n        \"\"\"\n        Return the text of an individual DOM node.\n\n        Parameters\n        ----------\n        obj : node-like\n            A DOM node.\n\n        Returns\n        -------\n        text : str or unicode\n            The text from an individual DOM node.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _parse_td(self, obj):\n        \"\"\"\n        Return the td elements from a row element.\n\n        Parameters\n        ----------\n        obj : node-like\n            A DOM <tr> node.\n\n        Returns\n        -------\n        list of node-like\n            These are the elements of each row, i.e., the columns.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _parse_thead_tr(self, table):\n        \"\"\"\n        Return the list of thead row elements from the parsed table element.\n\n        Parameters\n        ----------\n        table : a table element that contains zero or more thead elements.\n\n        Returns\n        -------\n        list of node-like\n            These are the <tr> row elements of a table.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _parse_tbody_tr(self, table):\n        \"\"\"\n        Return the list of tbody row elements from the parsed table element.\n\n        HTML5 table bodies consist of either 0 or more <tbody> elements (which\n        only contain <tr> elements) or 0 or more <tr> elements. This method\n        checks for both structures.\n\n        Parameters\n        ----------\n        table : a table element that contains row elements.\n\n        Returns\n        -------\n        list of node-like\n            These are the <tr> row elements of a table.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _parse_tfoot_tr(self, table):\n        \"\"\"\n        Return the list of tfoot row elements from the parsed table element.\n\n        Parameters\n        ----------\n        table : a table element that contains row elements.\n\n        Returns\n        -------\n        list of node-like\n            These are the <tr> row elements of a table.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _parse_tables(self, doc, match, attrs):\n        \"\"\"\n        Return all tables from the parsed DOM.\n\n        Parameters\n        ----------\n        doc : the DOM from which to parse the table element.\n\n        match : str or regular expression\n            The text to search for in the DOM tree.\n\n        attrs : dict\n            A dictionary of table attributes that can be used to disambiguate\n            multiple tables on a page.\n\n        Raises\n        ------\n        ValueError : `match` does not match any text in the document.\n\n        Returns\n        -------\n        list of node-like\n            HTML <table> elements to be parsed into raw data.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _equals_tag(self, obj, tag):\n        \"\"\"\n        Return whether an individual DOM node matches a tag\n\n        Parameters\n        ----------\n        obj : node-like\n            A DOM node.\n\n        tag : str\n            Tag name to be checked for equality.\n\n        Returns\n        -------\n        boolean\n            Whether `obj`'s tag name is `tag`\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _build_doc(self):\n        \"\"\"\n        Return a tree-like object that can be used to iterate over the DOM.\n\n        Returns\n        -------\n        node-like\n            The DOM from which to parse the table element.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _parse_thead_tbody_tfoot(self, table_html):\n        \"\"\"\n        Given a table, return parsed header, body, and foot.\n\n        Parameters\n        ----------\n        table_html : node-like\n\n        Returns\n        -------\n        tuple of (header, body, footer), each a list of list-of-text rows.\n\n        Notes\n        -----\n        Header and body are lists-of-lists. Top level list is a list of\n        rows. Each row is a list of str text.\n\n        Logic: Use <thead>, <tbody>, <tfoot> elements to identify\n               header, body, and footer, otherwise:\n               - Put all rows into body\n               - Move rows from top of body to header only if\n                 all elements inside row are <th>\n               - Move rows from bottom of body to footer only if\n                 all elements inside row are <th>\n        \"\"\"\n        header_rows = self._parse_thead_tr(table_html)\n        body_rows = self._parse_tbody_tr(table_html)\n        footer_rows = self._parse_tfoot_tr(table_html)\n\n        def row_is_all_th(row):\n            return all(self._equals_tag(t, 'th') for t in self._parse_td(row))\n        if not header_rows:\n            while body_rows and row_is_all_th(body_rows[0]):\n                header_rows.append(body_rows.pop(0))\n        header = self._expand_colspan_rowspan(header_rows)\n        body = self._expand_colspan_rowspan(body_rows)\n        footer = self._expand_colspan_rowspan(footer_rows)\n        return header, body, footer\n\n    def _expand_colspan_rowspan(self, rows):\n        \"\"\"\n        Given a list of <tr>s, return a list of text rows.\n\n        Parameters\n        ----------\n        rows : list of node-like\n            List of <tr>s\n\n        Returns\n        -------\n        list of list\n            Each returned row is a list of str text.\n\n        Notes\n        -----\n        Any cell with ``rowspan`` or ``colspan`` will have its contents copied\n        to subsequent cells.\n        \"\"\"\n        all_texts = []\n        remainder: List[Tuple[int, str, int]] = []\n        for tr in rows:\n            texts = []\n            next_remainder = []\n            index = 0\n            tds = self._parse_td(tr)\n            for td in tds:\n                while remainder and remainder[0][0] <= index:\n                    prev_i, prev_text, prev_rowspan = remainder.pop(0)\n                    texts.append(prev_text)\n                    if prev_rowspan > 1:\n                        next_remainder.append((prev_i, prev_text, \n                            prev_rowspan - 1))\n                    index += 1\n                text = _remove_whitespace(self._text_getter(td))\n                rowspan = int(self._attr_getter(td, 'rowspan') or 1)\n                colspan = int(self._attr_getter(td, 'colspan') or 1)\n                for _ in range(colspan):\n                    texts.append(text)\n                    if rowspan > 1:\n                        next_remainder.append((index, text, rowspan - 1))\n                    index += 1\n            for prev_i, prev_text, prev_rowspan in remainder:\n                texts.append(prev_text)\n                if prev_rowspan > 1:\n                    next_remainder.append((prev_i, prev_text, prev_rowspan - 1)\n                        )\n            all_texts.append(texts)\n            remainder = next_remainder\n        while remainder:\n            next_remainder = []\n            texts = []\n            for prev_i, prev_text, prev_rowspan in remainder:\n                texts.append(prev_text)\n                if prev_rowspan > 1:\n                    next_remainder.append((prev_i, prev_text, prev_rowspan - 1)\n                        )\n            all_texts.append(texts)\n            remainder = next_remainder\n        return all_texts\n\n    def _handle_hidden_tables(self, tbl_list, attr_name):\n        \"\"\"\n        Return list of tables, potentially removing hidden elements\n\n        Parameters\n        ----------\n        tbl_list : list of node-like\n            Type of list elements will vary depending upon parser used\n        attr_name : str\n            Name of the accessor for retrieving HTML attributes\n\n        Returns\n        -------\n        list of node-like\n            Return type matches `tbl_list`\n        \"\"\"\n        if not self.displayed_only:\n            return tbl_list\n        return [x for x in tbl_list if 'display:none' not in getattr(x,\n            attr_name).get('style', '').replace(' ', '')]\n",
                        "belong_class_name": "_HtmlFrameParser",
                        "belong_class_init": "def __init__(self, io, match, attrs, encoding, displayed_only):\n    self.io = io\n    self.match = match\n    self.attrs = attrs\n    self.encoding = encoding\n    self.displayed_only = displayed_only\n",
                        "called_function_name": "_build_doc",
                        "called_function_content": "def parse_tables(self):\n    \"\"\"\n        Parse and return all tables from the DOM.\n\n        Returns\n        -------\n        list of parsed (header, body, footer) tuples from tables.\n        \"\"\"\n    tables = self._parse_tables(self._build_doc()\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(self)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_build_doc",
                        "function_content": "def _build_doc(self):\n    from bs4 import BeautifulSoup\n    bdoc = self._setup_build_doc()\n    if isinstance(bdoc, bytes) and self.encoding is not None:\n        udoc = bdoc.decode(self.encoding)\n        from_encoding = None\n    else:\n        udoc = bdoc\n        from_encoding = self.encoding\n    return BeautifulSoup(udoc, features='html5lib', from_encoding=from_encoding\n        )\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class _BeautifulSoupHtml5LibFrameParser(_HtmlFrameParser):\n    \"\"\"\n    HTML to DataFrame parser that uses BeautifulSoup under the hood.\n\n    See Also\n    --------\n    pandas.io.html._HtmlFrameParser\n    pandas.io.html._LxmlFrameParser\n\n    Notes\n    -----\n    Documentation strings for this class are in the base class\n    :class:`pandas.io.html._HtmlFrameParser`.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        from bs4 import SoupStrainer\n        self._strainer = SoupStrainer('table')\n\n    def _parse_tables(self, doc, match, attrs):\n        element_name = self._strainer.name\n        tables = doc.find_all(element_name, attrs=attrs)\n        if not tables:\n            raise ValueError('No tables found')\n        result = []\n        unique_tables = set()\n        tables = self._handle_hidden_tables(tables, 'attrs')\n        for table in tables:\n            if self.displayed_only:\n                for elem in table.find_all(style=re.compile('display:\\\\s*none')\n                    ):\n                    elem.decompose()\n            if table not in unique_tables and table.find(text=match\n                ) is not None:\n                result.append(table)\n            unique_tables.add(table)\n        if not result:\n            raise ValueError(\n                f'No tables found matching pattern {repr(match.pattern)}')\n        return result\n\n    def _text_getter(self, obj):\n        return obj.text\n\n    def _equals_tag(self, obj, tag):\n        return obj.name == tag\n\n    def _parse_td(self, row):\n        return row.find_all(('td', 'th'), recursive=False)\n\n    def _parse_thead_tr(self, table):\n        return table.select('thead tr')\n\n    def _parse_tbody_tr(self, table):\n        from_tbody = table.select('tbody tr')\n        from_root = table.find_all('tr', recursive=False)\n        return from_tbody + from_root\n\n    def _parse_tfoot_tr(self, table):\n        return table.select('tfoot tr')\n\n    def _setup_build_doc(self):\n        raw_text = _read(self.io)\n        if not raw_text:\n            raise ValueError(f'No text parsed from document: {self.io}')\n        return raw_text\n\n    def _build_doc(self):\n        from bs4 import BeautifulSoup\n        bdoc = self._setup_build_doc()\n        if isinstance(bdoc, bytes) and self.encoding is not None:\n            udoc = bdoc.decode(self.encoding)\n            from_encoding = None\n        else:\n            udoc = bdoc\n            from_encoding = self.encoding\n        return BeautifulSoup(udoc, features='html5lib', from_encoding=\n            from_encoding)\n",
                        "belong_class_name": "_BeautifulSoupHtml5LibFrameParser",
                        "belong_class_init": "def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    from bs4 import SoupStrainer\n    self._strainer = SoupStrainer('table')\n",
                        "called_function_name": "_setup_build_doc",
                        "called_function_content": "def _build_doc(self):\n    from bs4 import BeautifulSoup\n    bdoc = self._setup_build_doc()\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(self)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_setup_build_doc",
                        "function_content": "def _setup_build_doc(self):\n    raw_text = _read(self.io)\n    if not raw_text:\n        raise ValueError(f'No text parsed from document: {self.io}')\n    return raw_text\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class _BeautifulSoupHtml5LibFrameParser(_HtmlFrameParser):\n    \"\"\"\n    HTML to DataFrame parser that uses BeautifulSoup under the hood.\n\n    See Also\n    --------\n    pandas.io.html._HtmlFrameParser\n    pandas.io.html._LxmlFrameParser\n\n    Notes\n    -----\n    Documentation strings for this class are in the base class\n    :class:`pandas.io.html._HtmlFrameParser`.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        from bs4 import SoupStrainer\n        self._strainer = SoupStrainer('table')\n\n    def _parse_tables(self, doc, match, attrs):\n        element_name = self._strainer.name\n        tables = doc.find_all(element_name, attrs=attrs)\n        if not tables:\n            raise ValueError('No tables found')\n        result = []\n        unique_tables = set()\n        tables = self._handle_hidden_tables(tables, 'attrs')\n        for table in tables:\n            if self.displayed_only:\n                for elem in table.find_all(style=re.compile('display:\\\\s*none')\n                    ):\n                    elem.decompose()\n            if table not in unique_tables and table.find(text=match\n                ) is not None:\n                result.append(table)\n            unique_tables.add(table)\n        if not result:\n            raise ValueError(\n                f'No tables found matching pattern {repr(match.pattern)}')\n        return result\n\n    def _text_getter(self, obj):\n        return obj.text\n\n    def _equals_tag(self, obj, tag):\n        return obj.name == tag\n\n    def _parse_td(self, row):\n        return row.find_all(('td', 'th'), recursive=False)\n\n    def _parse_thead_tr(self, table):\n        return table.select('thead tr')\n\n    def _parse_tbody_tr(self, table):\n        from_tbody = table.select('tbody tr')\n        from_root = table.find_all('tr', recursive=False)\n        return from_tbody + from_root\n\n    def _parse_tfoot_tr(self, table):\n        return table.select('tfoot tr')\n\n    def _setup_build_doc(self):\n        raw_text = _read(self.io)\n        if not raw_text:\n            raise ValueError(f'No text parsed from document: {self.io}')\n        return raw_text\n\n    def _build_doc(self):\n        from bs4 import BeautifulSoup\n        bdoc = self._setup_build_doc()\n        if isinstance(bdoc, bytes) and self.encoding is not None:\n            udoc = bdoc.decode(self.encoding)\n            from_encoding = None\n        else:\n            udoc = bdoc\n            from_encoding = self.encoding\n        return BeautifulSoup(udoc, features='html5lib', from_encoding=\n            from_encoding)\n",
                        "belong_class_name": "_BeautifulSoupHtml5LibFrameParser",
                        "belong_class_init": "def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    from bs4 import SoupStrainer\n    self._strainer = SoupStrainer('table')\n",
                        "called_function_name": "_read",
                        "called_function_content": "def _setup_build_doc(self):\n    raw_text = _read(self.io)\n",
                        "called_arguments": "(self.io)",
                        "called_function_parameter": "(obj)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_read",
                        "function_content": "def _read(obj):\n    \"\"\"\n    Try to read from a url, file or string.\n\n    Parameters\n    ----------\n    obj : str, unicode, or file-like\n\n    Returns\n    -------\n    raw_text : str\n    \"\"\"\n    if is_url(obj):\n        with urlopen(obj) as url:\n            text = url.read()\n    elif hasattr(obj, 'read'):\n        text = obj.read()\n    elif isinstance(obj, (str, bytes)):\n        text = obj\n        try:\n            if os.path.isfile(text):\n                with open(text, 'rb') as f:\n                    return f.read()\n        except (TypeError, ValueError):\n            pass\n    else:\n        raise TypeError(f\"Cannot read object of type '{type(obj).__name__}'\")\n    return text\n",
                        "function_parameter": "(obj)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ],
                [
                    {
                        "function_name": "test_parse_path_object",
                        "function_content": "def test_parse_path_object(self, datapath):\n    file_path_string = datapath('io', 'data', 'html', 'spam.html')\n    file_path = Path(file_path_string)\n    df1 = self.read_html(file_path_string)[0]\n    df2 = self.read_html(file_path)[0]\n    tm.assert_frame_equal(df1, df2)\n",
                        "function_parameter": "(self, datapath)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    },
                    {
                        "function_name": "read_html",
                        "function_content": "@deprecate_nonkeyword_arguments(version='2.0')\ndef read_html(io: FilePathOrBuffer, match: Union[str, Pattern]='.+', flavor:\n    Optional[str]=None, header: Optional[Union[int, Sequence[int]]]=None,\n    index_col: Optional[Union[int, Sequence[int]]]=None, skiprows: Optional\n    [Union[int, Sequence[int], slice]]=None, attrs: Optional[Dict[str, str]\n    ]=None, parse_dates: bool=False, thousands: Optional[str]=',', encoding:\n    Optional[str]=None, decimal: str='.', converters: Optional[Dict]=None,\n    na_values=None, keep_default_na: bool=True, displayed_only: bool=True\n    ) ->List[DataFrame]:\n    \"\"\"\n    Read HTML tables into a ``list`` of ``DataFrame`` objects.\n\n    Parameters\n    ----------\n    io : str, path object or file-like object\n        A URL, a file-like object, or a raw string containing HTML. Note that\n        lxml only accepts the http, ftp and file url protocols. If you have a\n        URL that starts with ``'https'`` you might try removing the ``'s'``.\n\n    match : str or compiled regular expression, optional\n        The set of tables containing text matching this regex or string will be\n        returned. Unless the HTML is extremely simple you will probably need to\n        pass a non-empty string here. Defaults to '.+' (match any non-empty\n        string). The default value will return all tables contained on a page.\n        This value is converted to a regular expression so that there is\n        consistent behavior between Beautiful Soup and lxml.\n\n    flavor : str, optional\n        The parsing engine to use. 'bs4' and 'html5lib' are synonymous with\n        each other, they are both there for backwards compatibility. The\n        default of ``None`` tries to use ``lxml`` to parse and if that fails it\n        falls back on ``bs4`` + ``html5lib``.\n\n    header : int or list-like, optional\n        The row (or list of rows for a :class:`~pandas.MultiIndex`) to use to\n        make the columns headers.\n\n    index_col : int or list-like, optional\n        The column (or list of columns) to use to create the index.\n\n    skiprows : int, list-like or slice, optional\n        Number of rows to skip after parsing the column integer. 0-based. If a\n        sequence of integers or a slice is given, will skip the rows indexed by\n        that sequence.  Note that a single element sequence means 'skip the nth\n        row' whereas an integer means 'skip n rows'.\n\n    attrs : dict, optional\n        This is a dictionary of attributes that you can pass to use to identify\n        the table in the HTML. These are not checked for validity before being\n        passed to lxml or Beautiful Soup. However, these attributes must be\n        valid HTML table attributes to work correctly. For example, ::\n\n            attrs = {'id': 'table'}\n\n        is a valid attribute dictionary because the 'id' HTML tag attribute is\n        a valid HTML attribute for *any* HTML tag as per `this document\n        <https://html.spec.whatwg.org/multipage/dom.html#global-attributes>`__. ::\n\n            attrs = {'asdf': 'table'}\n\n        is *not* a valid attribute dictionary because 'asdf' is not a valid\n        HTML attribute even if it is a valid XML attribute.  Valid HTML 4.01\n        table attributes can be found `here\n        <http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.2>`__. A\n        working draft of the HTML 5 spec can be found `here\n        <https://html.spec.whatwg.org/multipage/tables.html>`__. It contains the\n        latest information on table attributes for the modern web.\n\n    parse_dates : bool, optional\n        See :func:`~read_csv` for more details.\n\n    thousands : str, optional\n        Separator to use to parse thousands. Defaults to ``','``.\n\n    encoding : str, optional\n        The encoding used to decode the web page. Defaults to ``None``.``None``\n        preserves the previous encoding behavior, which depends on the\n        underlying parser library (e.g., the parser library will try to use\n        the encoding provided by the document).\n\n    decimal : str, default '.'\n        Character to recognize as decimal point (e.g. use ',' for European\n        data).\n\n    converters : dict, default None\n        Dict of functions for converting values in certain columns. Keys can\n        either be integers or column labels, values are functions that take one\n        input argument, the cell (not column) content, and return the\n        transformed content.\n\n    na_values : iterable, default None\n        Custom NA values.\n\n    keep_default_na : bool, default True\n        If na_values are specified and keep_default_na is False the default NaN\n        values are overridden, otherwise they're appended to.\n\n    displayed_only : bool, default True\n        Whether elements with \"display: none\" should be parsed.\n\n    Returns\n    -------\n    dfs\n        A list of DataFrames.\n\n    See Also\n    --------\n    read_csv : Read a comma-separated values (csv) file into DataFrame.\n\n    Notes\n    -----\n    Before using this function you should read the :ref:`gotchas about the\n    HTML parsing libraries <io.html.gotchas>`.\n\n    Expect to do some cleanup after you call this function. For example, you\n    might need to manually assign column names if the column names are\n    converted to NaN when you pass the `header=0` argument. We try to assume as\n    little as possible about the structure of the table and push the\n    idiosyncrasies of the HTML contained in the table to the user.\n\n    This function searches for ``<table>`` elements and only for ``<tr>``\n    and ``<th>`` rows and ``<td>`` elements within each ``<tr>`` or ``<th>``\n    element in the table. ``<td>`` stands for \"table data\". This function\n    attempts to properly handle ``colspan`` and ``rowspan`` attributes.\n    If the function has a ``<thead>`` argument, it is used to construct\n    the header, otherwise the function attempts to find the header within\n    the body (by putting rows with only ``<th>`` elements into the header).\n\n    Similar to :func:`~read_csv` the `header` argument is applied\n    **after** `skiprows` is applied.\n\n    This function will *always* return a list of :class:`DataFrame` *or*\n    it will fail, e.g., it will *not* return an empty list.\n\n    Examples\n    --------\n    See the :ref:`read_html documentation in the IO section of the docs\n    <io.read_html>` for some examples of reading in HTML tables.\n    \"\"\"\n    _importers()\n    if isinstance(skiprows, numbers.Integral) and skiprows < 0:\n        raise ValueError(\n            'cannot skip rows starting from the end of the data (you passed a negative value)'\n            )\n    validate_header_arg(header)\n    return _parse(flavor=flavor, io=io, match=match, header=header,\n        index_col=index_col, skiprows=skiprows, parse_dates=parse_dates,\n        thousands=thousands, attrs=attrs, encoding=encoding, decimal=\n        decimal, converters=converters, na_values=na_values,\n        keep_default_na=keep_default_na, displayed_only=displayed_only)\n",
                        "function_parameter": "(io: FilePathOrBuffer, match: Union[str, Pattern]='.+', flavor:\n    Optional[str]=None, header: Optional[Union[int, Sequence[int]]]=None,\n    index_col: Optional[Union[int, Sequence[int]]]=None, skiprows: Optional\n    [Union[int, Sequence[int], slice]]=None, attrs: Optional[Dict[str, str]\n    ]=None, parse_dates: bool=False, thousands: Optional[str]=',', encoding:\n    Optional[str]=None, decimal: str='.', converters: Optional[Dict]=None,\n    na_values=None, keep_default_na: bool=True, displayed_only: bool=True\n    )",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "_parse",
                        "called_function_content": "@deprecate_nonkeyword_arguments(version='2.0')\ndef read_html(io: FilePathOrBuffer, match: Union[str, Pattern]='.+', flavor:\n    Optional[str]=None, header: Optional[Union[int, Sequence[int]]]=None,\n    index_col: Optional[Union[int, Sequence[int]]]=None, skiprows: Optional\n    [Union[int, Sequence[int], slice]]=None, attrs: Optional[Dict[str, str]\n    ]=None, parse_dates: bool=False, thousands: Optional[str]=',', encoding:\n    Optional[str]=None, decimal: str='.', converters: Optional[Dict]=None,\n    na_values=None, keep_default_na: bool=True, displayed_only: bool=True\n    ) ->List[DataFrame]:\n    \"\"\"\n    Read HTML tables into a ``list`` of ``DataFrame`` objects.\n\n    Parameters\n    ----------\n    io : str, path object or file-like object\n        A URL, a file-like object, or a raw string containing HTML. Note that\n        lxml only accepts the http, ftp and file url protocols. If you have a\n        URL that starts with ``'https'`` you might try removing the ``'s'``.\n\n    match : str or compiled regular expression, optional\n        The set of tables containing text matching this regex or string will be\n        returned. Unless the HTML is extremely simple you will probably need to\n        pass a non-empty string here. Defaults to '.+' (match any non-empty\n        string). The default value will return all tables contained on a page.\n        This value is converted to a regular expression so that there is\n        consistent behavior between Beautiful Soup and lxml.\n\n    flavor : str, optional\n        The parsing engine to use. 'bs4' and 'html5lib' are synonymous with\n        each other, they are both there for backwards compatibility. The\n        default of ``None`` tries to use ``lxml`` to parse and if that fails it\n        falls back on ``bs4`` + ``html5lib``.\n\n    header : int or list-like, optional\n        The row (or list of rows for a :class:`~pandas.MultiIndex`) to use to\n        make the columns headers.\n\n    index_col : int or list-like, optional\n        The column (or list of columns) to use to create the index.\n\n    skiprows : int, list-like or slice, optional\n        Number of rows to skip after parsing the column integer. 0-based. If a\n        sequence of integers or a slice is given, will skip the rows indexed by\n        that sequence.  Note that a single element sequence means 'skip the nth\n        row' whereas an integer means 'skip n rows'.\n\n    attrs : dict, optional\n        This is a dictionary of attributes that you can pass to use to identify\n        the table in the HTML. These are not checked for validity before being\n        passed to lxml or Beautiful Soup. However, these attributes must be\n        valid HTML table attributes to work correctly. For example, ::\n\n            attrs = {'id': 'table'}\n\n        is a valid attribute dictionary because the 'id' HTML tag attribute is\n        a valid HTML attribute for *any* HTML tag as per `this document\n        <https://html.spec.whatwg.org/multipage/dom.html#global-attributes>`__. ::\n\n            attrs = {'asdf': 'table'}\n\n        is *not* a valid attribute dictionary because 'asdf' is not a valid\n        HTML attribute even if it is a valid XML attribute.  Valid HTML 4.01\n        table attributes can be found `here\n        <http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.2>`__. A\n        working draft of the HTML 5 spec can be found `here\n        <https://html.spec.whatwg.org/multipage/tables.html>`__. It contains the\n        latest information on table attributes for the modern web.\n\n    parse_dates : bool, optional\n        See :func:`~read_csv` for more details.\n\n    thousands : str, optional\n        Separator to use to parse thousands. Defaults to ``','``.\n\n    encoding : str, optional\n        The encoding used to decode the web page. Defaults to ``None``.``None``\n        preserves the previous encoding behavior, which depends on the\n        underlying parser library (e.g., the parser library will try to use\n        the encoding provided by the document).\n\n    decimal : str, default '.'\n        Character to recognize as decimal point (e.g. use ',' for European\n        data).\n\n    converters : dict, default None\n        Dict of functions for converting values in certain columns. Keys can\n        either be integers or column labels, values are functions that take one\n        input argument, the cell (not column) content, and return the\n        transformed content.\n\n    na_values : iterable, default None\n        Custom NA values.\n\n    keep_default_na : bool, default True\n        If na_values are specified and keep_default_na is False the default NaN\n        values are overridden, otherwise they're appended to.\n\n    displayed_only : bool, default True\n        Whether elements with \"display: none\" should be parsed.\n\n    Returns\n    -------\n    dfs\n        A list of DataFrames.\n\n    See Also\n    --------\n    read_csv : Read a comma-separated values (csv) file into DataFrame.\n\n    Notes\n    -----\n    Before using this function you should read the :ref:`gotchas about the\n    HTML parsing libraries <io.html.gotchas>`.\n\n    Expect to do some cleanup after you call this function. For example, you\n    might need to manually assign column names if the column names are\n    converted to NaN when you pass the `header=0` argument. We try to assume as\n    little as possible about the structure of the table and push the\n    idiosyncrasies of the HTML contained in the table to the user.\n\n    This function searches for ``<table>`` elements and only for ``<tr>``\n    and ``<th>`` rows and ``<td>`` elements within each ``<tr>`` or ``<th>``\n    element in the table. ``<td>`` stands for \"table data\". This function\n    attempts to properly handle ``colspan`` and ``rowspan`` attributes.\n    If the function has a ``<thead>`` argument, it is used to construct\n    the header, otherwise the function attempts to find the header within\n    the body (by putting rows with only ``<th>`` elements into the header).\n\n    Similar to :func:`~read_csv` the `header` argument is applied\n    **after** `skiprows` is applied.\n\n    This function will *always* return a list of :class:`DataFrame` *or*\n    it will fail, e.g., it will *not* return an empty list.\n\n    Examples\n    --------\n    See the :ref:`read_html documentation in the IO section of the docs\n    <io.read_html>` for some examples of reading in HTML tables.\n    \"\"\"\n    _importers()\n    if isinstance(skiprows, numbers.Integral) and skiprows < 0:\n        raise ValueError(\n            'cannot skip rows starting from the end of the data (you passed a negative value)'\n            )\n    validate_header_arg(header)\n    return _parse(flavor=flavor, io=io, match=match, header=header,\n        index_col=index_col, skiprows=skiprows, parse_dates=parse_dates,\n        thousands=thousands, attrs=attrs, encoding=encoding, decimal=\n        decimal, converters=converters, na_values=na_values,\n        keep_default_na=keep_default_na, displayed_only=displayed_only)\n",
                        "called_arguments": "(flavor=flavor, io=io, match=match, header=header,\n        index_col=index_col, skiprows=skiprows, parse_dates=parse_dates,\n        thousands=thousands, attrs=attrs, encoding=encoding, decimal=\n        decimal, converters=converters, na_values=na_values,\n        keep_default_na=keep_default_na, displayed_only=displayed_only)",
                        "called_function_parameter": "(flavor, io, match, attrs, encoding, displayed_only, **kwargs)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_parse",
                        "function_content": "def _parse(flavor, io, match, attrs, encoding, displayed_only, **kwargs):\n    flavor = _validate_flavor(flavor)\n    compiled_match = re.compile(match)\n    retained = None\n    for flav in flavor:\n        parser = _parser_dispatch(flav)\n        p = parser(io, compiled_match, attrs, encoding, displayed_only)\n        try:\n            tables = p.parse_tables()\n        except ValueError as caught:\n            if hasattr(io, 'seekable') and io.seekable():\n                io.seek(0)\n            elif hasattr(io, 'seekable') and not io.seekable():\n                raise ValueError(\n                    f\"The flavor {flav} failed to parse your input. Since you passed a non-rewindable file object, we can't rewind it to try another parser. Try read_html() with a different flavor.\"\n                    ) from caught\n            retained = caught\n        else:\n            break\n    else:\n        assert retained is not None\n        raise retained\n    ret = []\n    for table in tables:\n        try:\n            ret.append(_data_to_frame(data=table, **kwargs))\n        except EmptyDataError:\n            continue\n    return ret\n",
                        "function_parameter": "(flavor, io, match, attrs, encoding, displayed_only, **kwargs)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "parse_tables",
                        "called_function_content": "def _parse(flavor, io, match, attrs, encoding, displayed_only, **kwargs):\n    flavor = _validate_flavor(flavor)\n    compiled_match = re.compile(match)\n    retained = None\n    for flav in flavor:\n        parser = _parser_dispatch(flav)\n        p = parser(io, compiled_match, attrs, encoding, displayed_only)\n        try:\n            tables = p.parse_tables()\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(self)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "parse_tables",
                        "function_content": "def parse_tables(self):\n    \"\"\"\n        Parse and return all tables from the DOM.\n\n        Returns\n        -------\n        list of parsed (header, body, footer) tuples from tables.\n        \"\"\"\n    tables = self._parse_tables(self._build_doc(), self.match, self.attrs)\n    return (self._parse_thead_tbody_tfoot(table) for table in tables)\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class _HtmlFrameParser:\n    \"\"\"\n    Base class for parsers that parse HTML into DataFrames.\n\n    Parameters\n    ----------\n    io : str or file-like\n        This can be either a string of raw HTML, a valid URL using the HTTP,\n        FTP, or FILE protocols or a file-like object.\n\n    match : str or regex\n        The text to match in the document.\n\n    attrs : dict\n        List of HTML <table> element attributes to match.\n\n    encoding : str\n        Encoding to be used by parser\n\n    displayed_only : bool\n        Whether or not items with \"display:none\" should be ignored\n\n    Attributes\n    ----------\n    io : str or file-like\n        raw HTML, URL, or file-like object\n\n    match : regex\n        The text to match in the raw HTML\n\n    attrs : dict-like\n        A dictionary of valid table attributes to use to search for table\n        elements.\n\n    encoding : str\n        Encoding to be used by parser\n\n    displayed_only : bool\n        Whether or not items with \"display:none\" should be ignored\n\n    Notes\n    -----\n    To subclass this class effectively you must override the following methods:\n        * :func:`_build_doc`\n        * :func:`_attr_getter`\n        * :func:`_text_getter`\n        * :func:`_parse_td`\n        * :func:`_parse_thead_tr`\n        * :func:`_parse_tbody_tr`\n        * :func:`_parse_tfoot_tr`\n        * :func:`_parse_tables`\n        * :func:`_equals_tag`\n    See each method's respective documentation for details on their\n    functionality.\n    \"\"\"\n\n    def __init__(self, io, match, attrs, encoding, displayed_only):\n        self.io = io\n        self.match = match\n        self.attrs = attrs\n        self.encoding = encoding\n        self.displayed_only = displayed_only\n\n    def parse_tables(self):\n        \"\"\"\n        Parse and return all tables from the DOM.\n\n        Returns\n        -------\n        list of parsed (header, body, footer) tuples from tables.\n        \"\"\"\n        tables = self._parse_tables(self._build_doc(), self.match, self.attrs)\n        return (self._parse_thead_tbody_tfoot(table) for table in tables)\n\n    def _attr_getter(self, obj, attr):\n        \"\"\"\n        Return the attribute value of an individual DOM node.\n\n        Parameters\n        ----------\n        obj : node-like\n            A DOM node.\n\n        attr : str or unicode\n            The attribute, such as \"colspan\"\n\n        Returns\n        -------\n        str or unicode\n            The attribute value.\n        \"\"\"\n        return obj.get(attr)\n\n    def _text_getter(self, obj):\n        \"\"\"\n        Return the text of an individual DOM node.\n\n        Parameters\n        ----------\n        obj : node-like\n            A DOM node.\n\n        Returns\n        -------\n        text : str or unicode\n            The text from an individual DOM node.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _parse_td(self, obj):\n        \"\"\"\n        Return the td elements from a row element.\n\n        Parameters\n        ----------\n        obj : node-like\n            A DOM <tr> node.\n\n        Returns\n        -------\n        list of node-like\n            These are the elements of each row, i.e., the columns.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _parse_thead_tr(self, table):\n        \"\"\"\n        Return the list of thead row elements from the parsed table element.\n\n        Parameters\n        ----------\n        table : a table element that contains zero or more thead elements.\n\n        Returns\n        -------\n        list of node-like\n            These are the <tr> row elements of a table.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _parse_tbody_tr(self, table):\n        \"\"\"\n        Return the list of tbody row elements from the parsed table element.\n\n        HTML5 table bodies consist of either 0 or more <tbody> elements (which\n        only contain <tr> elements) or 0 or more <tr> elements. This method\n        checks for both structures.\n\n        Parameters\n        ----------\n        table : a table element that contains row elements.\n\n        Returns\n        -------\n        list of node-like\n            These are the <tr> row elements of a table.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _parse_tfoot_tr(self, table):\n        \"\"\"\n        Return the list of tfoot row elements from the parsed table element.\n\n        Parameters\n        ----------\n        table : a table element that contains row elements.\n\n        Returns\n        -------\n        list of node-like\n            These are the <tr> row elements of a table.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _parse_tables(self, doc, match, attrs):\n        \"\"\"\n        Return all tables from the parsed DOM.\n\n        Parameters\n        ----------\n        doc : the DOM from which to parse the table element.\n\n        match : str or regular expression\n            The text to search for in the DOM tree.\n\n        attrs : dict\n            A dictionary of table attributes that can be used to disambiguate\n            multiple tables on a page.\n\n        Raises\n        ------\n        ValueError : `match` does not match any text in the document.\n\n        Returns\n        -------\n        list of node-like\n            HTML <table> elements to be parsed into raw data.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _equals_tag(self, obj, tag):\n        \"\"\"\n        Return whether an individual DOM node matches a tag\n\n        Parameters\n        ----------\n        obj : node-like\n            A DOM node.\n\n        tag : str\n            Tag name to be checked for equality.\n\n        Returns\n        -------\n        boolean\n            Whether `obj`'s tag name is `tag`\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _build_doc(self):\n        \"\"\"\n        Return a tree-like object that can be used to iterate over the DOM.\n\n        Returns\n        -------\n        node-like\n            The DOM from which to parse the table element.\n        \"\"\"\n        raise AbstractMethodError(self)\n\n    def _parse_thead_tbody_tfoot(self, table_html):\n        \"\"\"\n        Given a table, return parsed header, body, and foot.\n\n        Parameters\n        ----------\n        table_html : node-like\n\n        Returns\n        -------\n        tuple of (header, body, footer), each a list of list-of-text rows.\n\n        Notes\n        -----\n        Header and body are lists-of-lists. Top level list is a list of\n        rows. Each row is a list of str text.\n\n        Logic: Use <thead>, <tbody>, <tfoot> elements to identify\n               header, body, and footer, otherwise:\n               - Put all rows into body\n               - Move rows from top of body to header only if\n                 all elements inside row are <th>\n               - Move rows from bottom of body to footer only if\n                 all elements inside row are <th>\n        \"\"\"\n        header_rows = self._parse_thead_tr(table_html)\n        body_rows = self._parse_tbody_tr(table_html)\n        footer_rows = self._parse_tfoot_tr(table_html)\n\n        def row_is_all_th(row):\n            return all(self._equals_tag(t, 'th') for t in self._parse_td(row))\n        if not header_rows:\n            while body_rows and row_is_all_th(body_rows[0]):\n                header_rows.append(body_rows.pop(0))\n        header = self._expand_colspan_rowspan(header_rows)\n        body = self._expand_colspan_rowspan(body_rows)\n        footer = self._expand_colspan_rowspan(footer_rows)\n        return header, body, footer\n\n    def _expand_colspan_rowspan(self, rows):\n        \"\"\"\n        Given a list of <tr>s, return a list of text rows.\n\n        Parameters\n        ----------\n        rows : list of node-like\n            List of <tr>s\n\n        Returns\n        -------\n        list of list\n            Each returned row is a list of str text.\n\n        Notes\n        -----\n        Any cell with ``rowspan`` or ``colspan`` will have its contents copied\n        to subsequent cells.\n        \"\"\"\n        all_texts = []\n        remainder: List[Tuple[int, str, int]] = []\n        for tr in rows:\n            texts = []\n            next_remainder = []\n            index = 0\n            tds = self._parse_td(tr)\n            for td in tds:\n                while remainder and remainder[0][0] <= index:\n                    prev_i, prev_text, prev_rowspan = remainder.pop(0)\n                    texts.append(prev_text)\n                    if prev_rowspan > 1:\n                        next_remainder.append((prev_i, prev_text, \n                            prev_rowspan - 1))\n                    index += 1\n                text = _remove_whitespace(self._text_getter(td))\n                rowspan = int(self._attr_getter(td, 'rowspan') or 1)\n                colspan = int(self._attr_getter(td, 'colspan') or 1)\n                for _ in range(colspan):\n                    texts.append(text)\n                    if rowspan > 1:\n                        next_remainder.append((index, text, rowspan - 1))\n                    index += 1\n            for prev_i, prev_text, prev_rowspan in remainder:\n                texts.append(prev_text)\n                if prev_rowspan > 1:\n                    next_remainder.append((prev_i, prev_text, prev_rowspan - 1)\n                        )\n            all_texts.append(texts)\n            remainder = next_remainder\n        while remainder:\n            next_remainder = []\n            texts = []\n            for prev_i, prev_text, prev_rowspan in remainder:\n                texts.append(prev_text)\n                if prev_rowspan > 1:\n                    next_remainder.append((prev_i, prev_text, prev_rowspan - 1)\n                        )\n            all_texts.append(texts)\n            remainder = next_remainder\n        return all_texts\n\n    def _handle_hidden_tables(self, tbl_list, attr_name):\n        \"\"\"\n        Return list of tables, potentially removing hidden elements\n\n        Parameters\n        ----------\n        tbl_list : list of node-like\n            Type of list elements will vary depending upon parser used\n        attr_name : str\n            Name of the accessor for retrieving HTML attributes\n\n        Returns\n        -------\n        list of node-like\n            Return type matches `tbl_list`\n        \"\"\"\n        if not self.displayed_only:\n            return tbl_list\n        return [x for x in tbl_list if 'display:none' not in getattr(x,\n            attr_name).get('style', '').replace(' ', '')]\n",
                        "belong_class_name": "_HtmlFrameParser",
                        "belong_class_init": "def __init__(self, io, match, attrs, encoding, displayed_only):\n    self.io = io\n    self.match = match\n    self.attrs = attrs\n    self.encoding = encoding\n    self.displayed_only = displayed_only\n",
                        "called_function_name": "_build_doc",
                        "called_function_content": "def parse_tables(self):\n    \"\"\"\n        Parse and return all tables from the DOM.\n\n        Returns\n        -------\n        list of parsed (header, body, footer) tuples from tables.\n        \"\"\"\n    tables = self._parse_tables(self._build_doc()\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(self)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_build_doc",
                        "function_content": "def _build_doc(self):\n    \"\"\"\n        Raises\n        ------\n        ValueError\n            * If a URL that lxml cannot parse is passed.\n\n        Exception\n            * Any other ``Exception`` thrown. For example, trying to parse a\n              URL that is syntactically correct on a machine with no internet\n              connection will fail.\n\n        See Also\n        --------\n        pandas.io.html._HtmlFrameParser._build_doc\n        \"\"\"\n    from lxml.etree import XMLSyntaxError\n    from lxml.html import HTMLParser, fromstring, parse\n    parser = HTMLParser(recover=True, encoding=self.encoding)\n    try:\n        if is_url(self.io):\n            with urlopen(self.io) as f:\n                r = parse(f, parser=parser)\n        else:\n            r = parse(self.io, parser=parser)\n        try:\n            r = r.getroot()\n        except AttributeError:\n            pass\n    except (UnicodeDecodeError, OSError) as e:\n        if not is_url(self.io):\n            r = fromstring(self.io, parser=parser)\n            try:\n                r = r.getroot()\n            except AttributeError:\n                pass\n        else:\n            raise e\n    else:\n        if not hasattr(r, 'text_content'):\n            raise XMLSyntaxError('no text parsed from document', 0, 0, 0)\n    return r\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class _LxmlFrameParser(_HtmlFrameParser):\n    \"\"\"\n    HTML to DataFrame parser that uses lxml under the hood.\n\n    Warning\n    -------\n    This parser can only handle HTTP, FTP, and FILE urls.\n\n    See Also\n    --------\n    _HtmlFrameParser\n    _BeautifulSoupLxmlFrameParser\n\n    Notes\n    -----\n    Documentation strings for this class are in the base class\n    :class:`_HtmlFrameParser`.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def _text_getter(self, obj):\n        return obj.text_content()\n\n    def _parse_td(self, row):\n        return row.xpath('./td|./th')\n\n    def _parse_tables(self, doc, match, kwargs):\n        pattern = match.pattern\n        xpath_expr = (\n            f'//table//*[re:test(text(), {repr(pattern)})]/ancestor::table')\n        if kwargs:\n            xpath_expr += _build_xpath_expr(kwargs)\n        tables = doc.xpath(xpath_expr, namespaces=_re_namespace)\n        tables = self._handle_hidden_tables(tables, 'attrib')\n        if self.displayed_only:\n            for table in tables:\n                for elem in table.xpath('.//*[@style]'):\n                    if 'display:none' in elem.attrib.get('style', '').replace(\n                        ' ', ''):\n                        elem.getparent().remove(elem)\n        if not tables:\n            raise ValueError(f'No tables found matching regex {repr(pattern)}')\n        return tables\n\n    def _equals_tag(self, obj, tag):\n        return obj.tag == tag\n\n    def _build_doc(self):\n        \"\"\"\n        Raises\n        ------\n        ValueError\n            * If a URL that lxml cannot parse is passed.\n\n        Exception\n            * Any other ``Exception`` thrown. For example, trying to parse a\n              URL that is syntactically correct on a machine with no internet\n              connection will fail.\n\n        See Also\n        --------\n        pandas.io.html._HtmlFrameParser._build_doc\n        \"\"\"\n        from lxml.etree import XMLSyntaxError\n        from lxml.html import HTMLParser, fromstring, parse\n        parser = HTMLParser(recover=True, encoding=self.encoding)\n        try:\n            if is_url(self.io):\n                with urlopen(self.io) as f:\n                    r = parse(f, parser=parser)\n            else:\n                r = parse(self.io, parser=parser)\n            try:\n                r = r.getroot()\n            except AttributeError:\n                pass\n        except (UnicodeDecodeError, OSError) as e:\n            if not is_url(self.io):\n                r = fromstring(self.io, parser=parser)\n                try:\n                    r = r.getroot()\n                except AttributeError:\n                    pass\n            else:\n                raise e\n        else:\n            if not hasattr(r, 'text_content'):\n                raise XMLSyntaxError('no text parsed from document', 0, 0, 0)\n        return r\n\n    def _parse_thead_tr(self, table):\n        rows = []\n        for thead in table.xpath('.//thead'):\n            rows.extend(thead.xpath('./tr'))\n            elements_at_root = thead.xpath('./td|./th')\n            if elements_at_root:\n                rows.append(thead)\n        return rows\n\n    def _parse_tbody_tr(self, table):\n        from_tbody = table.xpath('.//tbody//tr')\n        from_root = table.xpath('./tr')\n        return from_tbody + from_root\n\n    def _parse_tfoot_tr(self, table):\n        return table.xpath('.//tfoot//tr')\n",
                        "belong_class_name": "_LxmlFrameParser",
                        "belong_class_init": "def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n"
                    }
                ]
            ]
        }
    },
    "rasa": {
        "rasa-8704_model": {
            "poetry run pytest tests/nlu/test_model.py::test_exception_pickling": [
                [
                    {
                        "function_name": "test_exception_pickling",
                        "function_content": "def test_exception_pickling():\n    exception = UnsupportedModelError('test run')\n    cycled_exception = pickle.loads(pickle.dumps(exception))\n    assert exception.message == cycled_exception.message\n",
                        "function_parameter": "()",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ]
            ]
        },
        "rasa-8704_model-60": {
            "poetry run pytest tests/nlu/test_model.py::test_exception_pickling": [
                [
                    {
                        "function_name": "test_exception_pickling",
                        "function_content": "def test_exception_pickling():\n    exception = UnsupportedModelError('test run')\n    cycled_exception = pickle.loads(pickle.dumps(exception))\n    assert exception.message == cycled_exception.message\n",
                        "function_parameter": "()",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ]
            ]
        }
    },
    "requests": {
        "requests-4723_utils": {
            "pytest tests/test_utils.py::test_should_bypass_proxies": [
                [
                    {
                        "function_name": "test_should_bypass_proxies",
                        "function_content": "@pytest.mark.parametrize('url, expected', (('http://192.168.0.1:5000/', \n    True), ('http://192.168.0.1/', True), ('http://172.16.1.1/', True), (\n    'http://172.16.1.1:5000/', True), (\n    'http://localhost.localdomain:5000/v1.0/', True), (\n    'http://google.com:6000/', True), ('http://172.16.1.12/', False), (\n    'http://172.16.1.12:5000/', False), ('http://google.com:5000/v1.0/', \n    False), ('file:///some/path/on/disk', True)))\ndef test_should_bypass_proxies(url, expected, monkeypatch):\n    \"\"\"Tests for function should_bypass_proxies to check if proxy\n    can be bypassed or not\n    \"\"\"\n    monkeypatch.setenv('no_proxy',\n        '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1, google.com:6000'\n        )\n    monkeypatch.setenv('NO_PROXY',\n        '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1, google.com:6000'\n        )\n    assert should_bypass_proxies(url, no_proxy=None) == expected\n",
                        "function_parameter": "(url, expected, monkeypatch)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    },
                    {
                        "function_name": "should_bypass_proxies",
                        "function_content": "def should_bypass_proxies(url, no_proxy):\n    \"\"\"\n    Returns whether we should bypass proxies or not.\n\n    :rtype: bool\n    \"\"\"\n    get_proxy = lambda k: os.environ.get(k) or os.environ.get(k.upper())\n    no_proxy_arg = no_proxy\n    if no_proxy is None:\n        no_proxy = get_proxy('no_proxy')\n    parsed = urlparse(url)\n    if no_proxy:\n        no_proxy = (host for host in no_proxy.replace(' ', '').split(',') if\n            host)\n        if is_ipv4_address(parsed.hostname):\n            for proxy_ip in no_proxy:\n                if is_valid_cidr(proxy_ip):\n                    if address_in_network(parsed.hostname, proxy_ip):\n                        return True\n                elif parsed.hostname == proxy_ip:\n                    return True\n        else:\n            host_with_port = parsed.hostname\n            if parsed.port:\n                host_with_port += ':{0}'.format(parsed.port)\n            for host in no_proxy:\n                if parsed.hostname.endswith(host) or host_with_port.endswith(\n                    host):\n                    return True\n    with set_environ('no_proxy', no_proxy_arg):\n        try:\n            bypass = proxy_bypass(parsed.hostname)\n        except (TypeError, socket.gaierror):\n            bypass = False\n    if bypass:\n        return True\n    return False\n",
                        "function_parameter": "(url, no_proxy)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "is_ipv4_address",
                        "called_function_content": "def should_bypass_proxies(url, no_proxy):\n    \"\"\"\n    Returns whether we should bypass proxies or not.\n\n    :rtype: bool\n    \"\"\"\n    get_proxy = lambda k: os.environ.get(k) or os.environ.get(k.upper())\n    no_proxy_arg = no_proxy\n    if no_proxy is None:\n        no_proxy = get_proxy('no_proxy')\n    parsed = urlparse(url)\n    if no_proxy:\n        no_proxy = (host for host in no_proxy.replace(' ', '').split(',') if\n            host)\n        if is_ipv4_address(parsed.hostname)\n",
                        "called_arguments": "(parsed.hostname)",
                        "called_function_parameter": "(string_ip)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "is_ipv4_address",
                        "function_content": "def is_ipv4_address(string_ip):\n    \"\"\"\n    :rtype: bool\n    \"\"\"\n    try:\n        socket.inet_aton(string_ip)\n    except socket.error:\n        return False\n    return True\n",
                        "function_parameter": "(string_ip)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ]
            ]
        }
    },
    "rich": {
        "rich-919__inspect": {
            "poetry run pytest tests/test_inspect.py::test_broken_call_attr": [
                [
                    {
                        "function_name": "test_broken_call_attr",
                        "function_content": "@skip_py36\n@skip_py37\ndef test_broken_call_attr():\n\n\n    class NotCallable:\n        __call__ = 5\n\n        def __repr__(self):\n            return 'NotCallable()'\n\n\n    class Foo:\n        foo = NotCallable()\n    foo = Foo()\n    assert callable(foo.foo)\n    expected = \"\"\"\u256d\u2500 <class 'tests.test_inspect.test_broken_call_attr.<locals>.Foo'> \u2500\u256e\n\u2502 foo = NotCallable()                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\"\"\"\n    result = render(foo, methods=True, width=100)\n    print(repr(result))\n    assert expected == result\n",
                        "function_parameter": "()",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    },
                    {
                        "function_name": "render",
                        "function_content": "def render(obj, methods=False, value=False, width=50) ->str:\n    console = Console(file=io.StringIO(), width=width, legacy_windows=False)\n    inspect(obj, console=console, methods=methods, value=value)\n    return console.file.getvalue()\n",
                        "function_parameter": "(obj, methods=False, value=False, width=50)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "inspect",
                        "called_function_content": "def render(obj, methods=False, value=False, width=50) ->str:\n    console = Console(file=io.StringIO(), width=width, legacy_windows=False)\n    inspect(obj, console=console, methods=methods, value=value)\n",
                        "called_arguments": "(obj, console=console, methods=methods, value=value)",
                        "called_function_parameter": "(obj: Any, *, console: 'Console'=None, title: str=None, help:\n    bool=False, methods: bool=False, docs: bool=True, private: bool=False,\n    dunder: bool=False, sort: bool=True, all: bool=False, value: bool=True)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "inspect",
                        "function_content": "def inspect(obj: Any, *, console: 'Console'=None, title: str=None, help:\n    bool=False, methods: bool=False, docs: bool=True, private: bool=False,\n    dunder: bool=False, sort: bool=True, all: bool=False, value: bool=True):\n    \"\"\"Inspect any Python object.\n\n    * inspect(<OBJECT>) to see summarized info.\n    * inspect(<OBJECT>, methods=True) to see methods.\n    * inspect(<OBJECT>, help=True) to see full (non-abbreviated) help.\n    * inspect(<OBJECT>, private=True) to see private attributes (single underscore).\n    * inspect(<OBJECT>, dunder=True) to see attributes beginning with double underscore.\n    * inspect(<OBJECT>, all=True) to see all attributes.\n\n    Args:\n        obj (Any): An object to inspect.\n        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.\n        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.\n        methods (bool, optional): Enable inspection of callables. Defaults to False.\n        docs (bool, optional): Also render doc strings. Defaults to True.\n        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.\n        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.\n        sort (bool, optional): Sort attributes alphabetically. Defaults to True.\n        all (bool, optional): Show all attributes. Defaults to False.\n        value (bool, optional): Pretty print value. Defaults to True.\n    \"\"\"\n    _console = console or get_console()\n    from rich._inspect import Inspect\n    is_inspect = obj is inspect\n    _inspect = Inspect(obj, title=title, help=is_inspect or help, methods=\n        is_inspect or methods, docs=is_inspect or docs, private=private,\n        dunder=dunder, sort=sort, all=all, value=value)\n    _console.print(_inspect)\n",
                        "function_parameter": "(obj: Any, *, console: 'Console'=None, title: str=None, help:\n    bool=False, methods: bool=False, docs: bool=True, private: bool=False,\n    dunder: bool=False, sort: bool=True, all: bool=False, value: bool=True)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "print",
                        "called_function_content": "def inspect(obj: Any, *, console: 'Console'=None, title: str=None, help:\n    bool=False, methods: bool=False, docs: bool=True, private: bool=False,\n    dunder: bool=False, sort: bool=True, all: bool=False, value: bool=True):\n    \"\"\"Inspect any Python object.\n\n    * inspect(<OBJECT>) to see summarized info.\n    * inspect(<OBJECT>, methods=True) to see methods.\n    * inspect(<OBJECT>, help=True) to see full (non-abbreviated) help.\n    * inspect(<OBJECT>, private=True) to see private attributes (single underscore).\n    * inspect(<OBJECT>, dunder=True) to see attributes beginning with double underscore.\n    * inspect(<OBJECT>, all=True) to see all attributes.\n\n    Args:\n        obj (Any): An object to inspect.\n        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.\n        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.\n        methods (bool, optional): Enable inspection of callables. Defaults to False.\n        docs (bool, optional): Also render doc strings. Defaults to True.\n        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.\n        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.\n        sort (bool, optional): Sort attributes alphabetically. Defaults to True.\n        all (bool, optional): Show all attributes. Defaults to False.\n        value (bool, optional): Pretty print value. Defaults to True.\n    \"\"\"\n    _console = console or get_console()\n    from rich._inspect import Inspect\n    is_inspect = obj is inspect\n    _inspect = Inspect(obj, title=title, help=is_inspect or help, methods=\n        is_inspect or methods, docs=is_inspect or docs, private=private,\n        dunder=dunder, sort=sort, all=all, value=value)\n    _console.print(_inspect)\n",
                        "called_arguments": "(_inspect)",
                        "called_function_parameter": "(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style]=\n    None, justify: JustifyMethod=None, overflow: OverflowMethod=None,\n    no_wrap: bool=None, emoji: bool=None, markup: bool=None, highlight:\n    bool=None, width: int=None, crop: bool=True, soft_wrap: bool=None)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "print",
                        "function_content": "def print(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style]=\n    None, justify: JustifyMethod=None, overflow: OverflowMethod=None,\n    no_wrap: bool=None, emoji: bool=None, markup: bool=None, highlight:\n    bool=None, width: int=None, crop: bool=True, soft_wrap: bool=None) ->None:\n    \"\"\"Print to the console.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): Justify method: \"default\", \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"ignore\", \"crop\", \"fold\", or \"ellipsis\". Defaults to None.\n            no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to ``None``.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to ``None``.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to ``None``.\n            width (Optional[int], optional): Width of output, or ``None`` to auto-detect. Defaults to ``None``.\n            crop (Optional[bool], optional): Crop output to width of terminal. Defaults to True.\n            soft_wrap (bool, optional): Enable soft wrap mode which disables word wrapping and cropping of text or None for\n                Console default. Defaults to ``None``.\n        \"\"\"\n    if not objects:\n        self.line()\n        return\n    if soft_wrap is None:\n        soft_wrap = self.soft_wrap\n    if soft_wrap:\n        if no_wrap is None:\n            no_wrap = True\n        if overflow is None:\n            overflow = 'ignore'\n        crop = False\n    with self:\n        renderables = self._collect_renderables(objects, sep, end, justify=\n            justify, emoji=emoji, markup=markup, highlight=highlight)\n        for hook in self._render_hooks:\n            renderables = hook.process_renderables(renderables)\n        render_options = self.options.update(justify='default', overflow=\n            overflow, width=min(width, self.width) if width else None,\n            no_wrap=no_wrap)\n        new_segments: List[Segment] = []\n        extend = new_segments.extend\n        render = self.render\n        if style is None:\n            for renderable in renderables:\n                extend(render(renderable, render_options))\n        else:\n            for renderable in renderables:\n                extend(Segment.apply_style(render(renderable,\n                    render_options), self.get_style(style)))\n        if crop:\n            buffer_extend = self._buffer.extend\n            for line in Segment.split_and_crop_lines(new_segments, self.\n                width, pad=False):\n                buffer_extend(line)\n        else:\n            self._buffer.extend(new_segments)\n",
                        "function_parameter": "(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style]=\n    None, justify: JustifyMethod=None, overflow: OverflowMethod=None,\n    no_wrap: bool=None, emoji: bool=None, markup: bool=None, highlight:\n    bool=None, width: int=None, crop: bool=True, soft_wrap: bool=None)",
                        "belong_class_content": "class Console:\n    \"\"\"A high level console interface.\n\n    Args:\n        color_system (str, optional): The color system supported by your terminal,\n            either ``\"standard\"``, ``\"256\"`` or ``\"truecolor\"``. Leave as ``\"auto\"`` to autodetect.\n        force_terminal (Optional[bool], optional): Enable/disable terminal control codes, or None to auto-detect terminal. Defaults to None.\n        force_jupyter (Optional[bool], optional): Enable/disable Jupyter rendering, or None to auto-detect Jupyter. Defaults to None.\n        soft_wrap (Optional[bool], optional): Set soft wrap default on print method. Defaults to False.\n        theme (Theme, optional): An optional style theme object, or ``None`` for default theme.\n        stderr (bool, optional): Use stderr rather than stdout if ``file `` is not specified. Defaults to False.\n        file (IO, optional): A file object where the console should write to. Defaults to stdout.\n        width (int, optional): The width of the terminal. Leave as default to auto-detect width.\n        height (int, optional): The height of the terminal. Leave as default to auto-detect height.\n        style (StyleType, optional): Style to apply to all output, or None for no style. Defaults to None.\n        no_color (Optional[bool], optional): Enabled no color mode, or None to auto detect. Defaults to None.\n        record (bool, optional): Boolean to enable recording of terminal output,\n            required to call :meth:`export_html` and :meth:`export_text`. Defaults to False.\n        markup (bool, optional): Boolean to enable :ref:`console_markup`. Defaults to True.\n        emoji (bool, optional): Enable emoji code. Defaults to True.\n        highlight (bool, optional): Enable automatic highlighting. Defaults to True.\n        log_time (bool, optional): Boolean to enable logging of time by :meth:`log` methods. Defaults to True.\n        log_path (bool, optional): Boolean to enable the logging of the caller by :meth:`log`. Defaults to True.\n        log_time_format (str, optional): Log time format if ``log_time`` is enabled. Defaults to \"[%X] \".\n        highlighter (HighlighterType, optional): Default highlighter.\n        legacy_windows (bool, optional): Enable legacy Windows mode, or ``None`` to auto detect. Defaults to ``None``.\n        safe_box (bool, optional): Restrict box options that don't render on legacy Windows.\n        get_datetime (Callable[[], datetime], optional): Callable that gets the current time as a datetime.datetime object (used by Console.log),\n            or None for datetime.now.\n        get_time (Callable[[], time], optional): Callable that gets the current time in seconds, default uses time.monotonic.\n    \"\"\"\n\n    def __init__(self, *, color_system: Optional[Literal['auto', 'standard',\n        '256', 'truecolor', 'windows']]='auto', force_terminal: bool=None,\n        force_jupyter: bool=None, soft_wrap: bool=False, theme: Theme=None,\n        stderr: bool=False, file: IO[str]=None, width: int=None, height:\n        int=None, style: StyleType=None, no_color: bool=None, tab_size: int\n        =8, record: bool=False, markup: bool=True, emoji: bool=True,\n        highlight: bool=True, log_time: bool=True, log_path: bool=True,\n        log_time_format: str='[%X]', highlighter: Optional[\n        'HighlighterType']=ReprHighlighter(), legacy_windows: bool=None,\n        safe_box: bool=True, get_datetime: Callable[[], datetime]=None,\n        get_time: Callable[[], float]=None, _environ: Dict[str, str]=None):\n        self._environ = os.environ if _environ is None else _environ\n        self.is_jupyter = _is_jupyter(\n            ) if force_jupyter is None else force_jupyter\n        if self.is_jupyter:\n            width = width or 93\n            height = height or 100\n        self.soft_wrap = soft_wrap\n        self._width = width\n        self._height = height\n        self.tab_size = tab_size\n        self.record = record\n        self._markup = markup\n        self._emoji = emoji\n        self._highlight = highlight\n        self.legacy_windows: bool = detect_legacy_windows(\n            ) and not self.is_jupyter if legacy_windows is None else legacy_windows\n        self._color_system: Optional[ColorSystem]\n        self._force_terminal = force_terminal\n        self._file = file\n        self.stderr = stderr\n        if color_system is None:\n            self._color_system = None\n        elif color_system == 'auto':\n            self._color_system = self._detect_color_system()\n        else:\n            self._color_system = COLOR_SYSTEMS[color_system]\n        self._lock = threading.RLock()\n        self._log_render = LogRender(show_time=log_time, show_path=log_path,\n            time_format=log_time_format)\n        self.highlighter: HighlighterType = highlighter or _null_highlighter\n        self.safe_box = safe_box\n        self.get_datetime = get_datetime or datetime.now\n        self.get_time = get_time or monotonic\n        self.style = style\n        self.no_color = (no_color if no_color is not None else 'NO_COLOR' in\n            self._environ)\n        self._record_buffer_lock = threading.RLock()\n        self._thread_locals = ConsoleThreadLocals(theme_stack=ThemeStack(\n            themes.DEFAULT if theme is None else theme))\n        self._record_buffer: List[Segment] = []\n        self._render_hooks: List[RenderHook] = []\n\n    def __repr__(self) ->str:\n        return f'<console width={self.width} {str(self._color_system)}>'\n\n    @property\n    def file(self) ->IO[str]:\n        \"\"\"Get the file object to write to.\"\"\"\n        file = self._file or (sys.stderr if self.stderr else sys.stdout)\n        file = getattr(file, 'rich_proxied_file', file)\n        return file\n\n    @file.setter\n    def file(self, new_file: IO[str]) ->None:\n        \"\"\"Set a new file object.\"\"\"\n        self._file = new_file\n\n    @property\n    def _buffer(self) ->List[Segment]:\n        \"\"\"Get a thread local buffer.\"\"\"\n        return self._thread_locals.buffer\n\n    @property\n    def _buffer_index(self) ->int:\n        \"\"\"Get a thread local buffer.\"\"\"\n        return self._thread_locals.buffer_index\n\n    @_buffer_index.setter\n    def _buffer_index(self, value: int) ->None:\n        self._thread_locals.buffer_index = value\n\n    @property\n    def _theme_stack(self) ->ThemeStack:\n        \"\"\"Get the thread local theme stack.\"\"\"\n        return self._thread_locals.theme_stack\n\n    def _detect_color_system(self) ->Optional[ColorSystem]:\n        \"\"\"Detect color system from env vars.\"\"\"\n        if self.is_jupyter:\n            return ColorSystem.TRUECOLOR\n        if not self.is_terminal or self.is_dumb_terminal:\n            return None\n        if WINDOWS:\n            if self.legacy_windows:\n                return ColorSystem.WINDOWS\n            windows_console_features = get_windows_console_features()\n            return (ColorSystem.TRUECOLOR if windows_console_features.\n                truecolor else ColorSystem.EIGHT_BIT)\n        else:\n            color_term = self._environ.get('COLORTERM', '').strip().lower()\n            if color_term in ('truecolor', '24bit'):\n                return ColorSystem.TRUECOLOR\n            term = self._environ.get('TERM', '').strip().lower()\n            _term_name, _hyphen, colors = term.partition('-')\n            color_system = _TERM_COLORS.get(colors, ColorSystem.STANDARD)\n            return color_system\n\n    def _enter_buffer(self) ->None:\n        \"\"\"Enter in to a buffer context, and buffer all output.\"\"\"\n        self._buffer_index += 1\n\n    def _exit_buffer(self) ->None:\n        \"\"\"Leave buffer context, and render content if required.\"\"\"\n        self._buffer_index -= 1\n        self._check_buffer()\n\n    def push_render_hook(self, hook: RenderHook) ->None:\n        \"\"\"Add a new render hook to the stack.\n\n        Args:\n            hook (RenderHook): Render hook instance.\n        \"\"\"\n        self._render_hooks.append(hook)\n\n    def pop_render_hook(self) ->None:\n        \"\"\"Pop the last renderhook from the stack.\"\"\"\n        self._render_hooks.pop()\n\n    def __enter__(self) ->'Console':\n        \"\"\"Own context manager to enter buffer context.\"\"\"\n        self._enter_buffer()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback) ->None:\n        \"\"\"Exit buffer context.\"\"\"\n        self._exit_buffer()\n\n    def begin_capture(self) ->None:\n        \"\"\"Begin capturing console output. Call :meth:`end_capture` to exit capture mode and return output.\"\"\"\n        self._enter_buffer()\n\n    def end_capture(self) ->str:\n        \"\"\"End capture mode and return captured string.\n\n        Returns:\n            str: Console output.\n        \"\"\"\n        render_result = self._render_buffer(self._buffer)\n        del self._buffer[:]\n        self._exit_buffer()\n        return render_result\n\n    def push_theme(self, theme: Theme, *, inherit: bool=True) ->None:\n        \"\"\"Push a new theme on to the top of the stack, replacing the styles from the previous theme.\n        Generally speaking, you should call :meth:`~rich.console.Console.use_theme` to get a context manager, rather\n        than calling this method directly.\n\n        Args:\n            theme (Theme): A theme instance.\n            inherit (bool, optional): Inherit existing styles. Defaults to True.\n        \"\"\"\n        self._theme_stack.push_theme(theme, inherit=inherit)\n\n    def pop_theme(self) ->None:\n        \"\"\"Remove theme from top of stack, restoring previous theme.\"\"\"\n        self._theme_stack.pop_theme()\n\n    def use_theme(self, theme: Theme, *, inherit: bool=True) ->ThemeContext:\n        \"\"\"Use a different theme for the duration of the context manager.\n\n        Args:\n            theme (Theme): Theme instance to user.\n            inherit (bool, optional): Inherit existing console styles. Defaults to True.\n\n        Returns:\n            ThemeContext: [description]\n        \"\"\"\n        return ThemeContext(self, theme, inherit)\n\n    @property\n    def color_system(self) ->Optional[str]:\n        \"\"\"Get color system string.\n\n        Returns:\n            Optional[str]: \"standard\", \"256\" or \"truecolor\".\n        \"\"\"\n        if self._color_system is not None:\n            return _COLOR_SYSTEMS_NAMES[self._color_system]\n        else:\n            return None\n\n    @property\n    def encoding(self) ->str:\n        \"\"\"Get the encoding of the console file, e.g. ``\"utf-8\"``.\n\n        Returns:\n            str: A standard encoding string.\n        \"\"\"\n        return (getattr(self.file, 'encoding', 'utf-8') or 'utf-8').lower()\n\n    @property\n    def is_terminal(self) ->bool:\n        \"\"\"Check if the console is writing to a terminal.\n\n        Returns:\n            bool: True if the console writing to a device capable of\n            understanding terminal codes, otherwise False.\n        \"\"\"\n        if self._force_terminal is not None:\n            return self._force_terminal\n        isatty = getattr(self.file, 'isatty', None)\n        return False if isatty is None else isatty()\n\n    @property\n    def is_dumb_terminal(self) ->bool:\n        \"\"\"Detect dumb terminal.\n\n        Returns:\n            bool: True if writing to a dumb terminal, otherwise False.\n\n        \"\"\"\n        _term = self._environ.get('TERM', '')\n        is_dumb = _term.lower() in ('dumb', 'unknown')\n        return self.is_terminal and is_dumb\n\n    @property\n    def options(self) ->ConsoleOptions:\n        \"\"\"Get default console options.\"\"\"\n        return ConsoleOptions(legacy_windows=self.legacy_windows, min_width\n            =1, max_width=self.width, encoding=self.encoding, is_terminal=\n            self.is_terminal)\n\n    @property\n    def size(self) ->ConsoleDimensions:\n        \"\"\"Get the size of the console.\n\n        Returns:\n            ConsoleDimensions: A named tuple containing the dimensions.\n        \"\"\"\n        if self._width is not None and self._height is not None:\n            return ConsoleDimensions(self._width, self._height)\n        if self.is_dumb_terminal:\n            return ConsoleDimensions(80, 25)\n        width: Optional[int] = None\n        height: Optional[int] = None\n        if WINDOWS:\n            width, height = shutil.get_terminal_size()\n        else:\n            try:\n                width, height = os.get_terminal_size(sys.stdin.fileno())\n            except (AttributeError, ValueError, OSError):\n                try:\n                    width, height = os.get_terminal_size(sys.stdout.fileno())\n                except (AttributeError, ValueError, OSError):\n                    pass\n        width = width or 80\n        height = height or 25\n        return ConsoleDimensions(width - self.legacy_windows if self._width is\n            None else self._width, height if self._height is None else self\n            ._height)\n\n    @property\n    def width(self) ->int:\n        \"\"\"Get the width of the console.\n\n        Returns:\n            int: The width (in characters) of the console.\n        \"\"\"\n        width, _ = self.size\n        return width\n\n    def bell(self) ->None:\n        \"\"\"Play a 'bell' sound (if supported by the terminal).\"\"\"\n        self.control('\\x07')\n\n    def capture(self) ->Capture:\n        \"\"\"A context manager to *capture* the result of print() or log() in a string,\n        rather than writing it to the console.\n\n        Example:\n            >>> from rich.console import Console\n            >>> console = Console()\n            >>> with console.capture() as capture:\n            ...     console.print(\"[bold magenta]Hello World[/]\")\n            >>> print(capture.get())\n\n        Returns:\n            Capture: Context manager with disables writing to the terminal.\n        \"\"\"\n        capture = Capture(self)\n        return capture\n\n    def pager(self, pager: Pager=None, styles: bool=False, links: bool=False\n        ) ->PagerContext:\n        \"\"\"A context manager to display anything printed within a \"pager\". The pager application\n        is defined by the system and will typically support at least pressing a key to scroll.\n\n        Args:\n            pager (Pager, optional): A pager object, or None to use :class:~rich.pager.SystemPager`. Defaults to None.\n            styles (bool, optional): Show styles in pager. Defaults to False.\n            links (bool, optional): Show links in pager. Defaults to False.\n\n        Example:\n            >>> from rich.console import Console\n            >>> from rich.__main__ import make_test_card\n            >>> console = Console()\n            >>> with console.pager():\n                    console.print(make_test_card())\n\n        Returns:\n            PagerContext: A context manager.\n        \"\"\"\n        return PagerContext(self, pager=pager, styles=styles, links=links)\n\n    def line(self, count: int=1) ->None:\n        \"\"\"Write new line(s).\n\n        Args:\n            count (int, optional): Number of new lines. Defaults to 1.\n        \"\"\"\n        assert count >= 0, 'count must be >= 0'\n        if count:\n            self._buffer.append(Segment('\\n' * count))\n            self._check_buffer()\n\n    def clear(self, home: bool=True) ->None:\n        \"\"\"Clear the screen.\n\n        Args:\n            home (bool, optional): Also move the cursor to 'home' position. Defaults to True.\n        \"\"\"\n        self.control('\\x1b[2J\\x1b[H' if home else '\\x1b[2J')\n\n    def status(self, status: RenderableType, spinner: str='dots',\n        spinner_style: str='status.spinner', speed: float=1.0,\n        refresh_per_second: float=12.5) ->'Status':\n        \"\"\"Display a status and spinner.\n\n        Args:\n            status (RenderableType): A status renderable (str or Text typically).\n            console (Console, optional): Console instance to use, or None for global console. Defaults to None.\n            spinner (str, optional): Name of spinner animation (see python -m rich.spinner). Defaults to \"dots\".\n            spinner_style (StyleType, optional): Style of spinner. Defaults to \"status.spinner\".\n            speed (float, optional): Speed factor for spinner animation. Defaults to 1.0.\n            refresh_per_second (float, optional): Number of refreshes per second. Defaults to 12.5.\n\n        Returns:\n            Status: A Status object that may be used as a context manager.\n        \"\"\"\n        from .status import Status\n        status_renderable = Status(status, console=self, spinner=spinner,\n            spinner_style=spinner_style, speed=speed, refresh_per_second=\n            refresh_per_second)\n        return status_renderable\n\n    def show_cursor(self, show: bool=True) ->None:\n        \"\"\"Show or hide the cursor.\n\n        Args:\n            show (bool, optional): Set visibility of the cursor.\n        \"\"\"\n        if self.is_terminal and not self.legacy_windows:\n            self.control('\\x1b[?25h' if show else '\\x1b[?25l')\n\n    def render(self, renderable: RenderableType, options: ConsoleOptions=None\n        ) ->Iterable[Segment]:\n        \"\"\"Render an object in to an iterable of `Segment` instances.\n\n        This method contains the logic for rendering objects with the console protocol.\n        You are unlikely to need to use it directly, unless you are extending the library.\n\n        Args:\n            renderable (RenderableType): An object supporting the console protocol, or\n                an object that may be converted to a string.\n            options (ConsoleOptions, optional): An options object, or None to use self.options. Defaults to None.\n\n        Returns:\n            Iterable[Segment]: An iterable of segments that may be rendered.\n        \"\"\"\n        _options = options or self.options\n        if _options.max_width < 1:\n            return\n        render_iterable: RenderResult\n        if isinstance(renderable, RichCast):\n            renderable = renderable.__rich__()\n        if isinstance(renderable, ConsoleRenderable):\n            render_iterable = renderable.__rich_console__(self, _options)\n        elif isinstance(renderable, str):\n            yield from self.render(self.render_str(renderable, highlight=\n                _options.highlight), _options)\n            return\n        else:\n            raise errors.NotRenderableError(\n                f'Unable to render {renderable!r}; A str, Segment or object with __rich_console__ method is required'\n                )\n        try:\n            iter_render = iter(render_iterable)\n        except TypeError:\n            raise errors.NotRenderableError(\n                f'object {render_iterable!r} is not renderable')\n        for render_output in iter_render:\n            if isinstance(render_output, Segment):\n                yield render_output\n            else:\n                yield from self.render(render_output, _options)\n\n    def render_lines(self, renderable: RenderableType, options: Optional[\n        ConsoleOptions]=None, *, style: Optional[Style]=None, pad: bool=True\n        ) ->List[List[Segment]]:\n        \"\"\"Render objects in to a list of lines.\n\n        The output of render_lines is useful when further formatting of rendered console text\n        is required, such as the Panel class which draws a border around any renderable object.\n\n        Args:\n            renderable (RenderableType): Any object renderable in the console.\n            options (Optional[ConsoleOptions], optional): Console options, or None to use self.options. Default to ``None``.\n            style (Style, optional): Optional style to apply to renderables. Defaults to ``None``.\n            pad (bool, optional): Pad lines shorter than render width. Defaults to ``True``.\n\n        Returns:\n            List[List[Segment]]: A list of lines, where a line is a list of Segment objects.\n        \"\"\"\n        render_options = options or self.options\n        _rendered = self.render(renderable, render_options)\n        if style is not None:\n            _rendered = Segment.apply_style(_rendered, style)\n        lines = list(Segment.split_and_crop_lines(_rendered, render_options\n            .max_width, include_new_lines=False, pad=pad))\n        return lines\n\n    def render_str(self, text: str, *, style: Union[str, Style]='', justify:\n        JustifyMethod=None, overflow: OverflowMethod=None, emoji: bool=None,\n        markup: bool=None, highlight: bool=None, highlighter:\n        HighlighterType=None) ->'Text':\n        \"\"\"Convert a string to a Text instance. This is is called automatically if\n        you print or log a string.\n\n        Args:\n            text (str): Text to render.\n            style (Union[str, Style], optional): Style to apply to rendered text.\n            justify (str, optional): Justify method: \"default\", \"left\", \"center\", \"full\", or \"right\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", or \"ellipsis\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji, or ``None`` to use Console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use Console default.\n            highlight (Optional[bool], optional): Enable highlighting, or ``None`` to use Console default.\n            highlighter (HighlighterType, optional): Optional highlighter to apply.\n        Returns:\n            ConsoleRenderable: Renderable object.\n\n        \"\"\"\n        emoji_enabled = emoji or emoji is None and self._emoji\n        markup_enabled = markup or markup is None and self._markup\n        highlight_enabled = highlight or highlight is None and self._highlight\n        if markup_enabled:\n            rich_text = render_markup(text, style=style, emoji=emoji_enabled)\n            rich_text.justify = justify\n            rich_text.overflow = overflow\n        else:\n            rich_text = Text(_emoji_replace(text) if emoji_enabled else\n                text, justify=justify, overflow=overflow, style=style)\n        _highlighter = (highlighter or self.highlighter if\n            highlight_enabled else None)\n        if _highlighter is not None:\n            highlight_text = _highlighter(str(rich_text))\n            highlight_text.copy_styles(rich_text)\n            return highlight_text\n        return rich_text\n\n    def get_style(self, name: Union[str, Style], *, default: Union[Style,\n        str]=None) ->Style:\n        \"\"\"Get a Style instance by it's theme name or parse a definition.\n\n        Args:\n            name (str): The name of a style or a style definition.\n\n        Returns:\n            Style: A Style object.\n\n        Raises:\n            MissingStyle: If no style could be parsed from name.\n\n        \"\"\"\n        if isinstance(name, Style):\n            return name\n        try:\n            style = self._theme_stack.get(name)\n            if style is None:\n                style = Style.parse(name)\n            return style.copy() if style.link else style\n        except errors.StyleSyntaxError as error:\n            if default is not None:\n                return self.get_style(default)\n            raise errors.MissingStyle(f'Failed to get style {name!r}; {error}')\n\n    def _collect_renderables(self, objects: Iterable[Any], sep: str, end:\n        str, *, justify: JustifyMethod=None, emoji: bool=None, markup: bool\n        =None, highlight: bool=None) ->List[ConsoleRenderable]:\n        \"\"\"Combined a number of renderables and text in to one renderable.\n\n        Args:\n            objects (Iterable[Any]): Anything that Rich can render.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            justify (str, optional): One of \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default.\n\n        Returns:\n            List[ConsoleRenderable]: A list oxf things to render.\n        \"\"\"\n        renderables: List[ConsoleRenderable] = []\n        _append = renderables.append\n        text: List[Text] = []\n        append_text = text.append\n        append = _append\n        if justify in ('left', 'center', 'right'):\n\n            def align_append(renderable: RenderableType) ->None:\n                _append(Align(renderable, cast(AlignMethod, justify)))\n            append = align_append\n        _highlighter: HighlighterType = _null_highlighter\n        if highlight or highlight is None and self._highlight:\n            _highlighter = self.highlighter\n\n        def check_text() ->None:\n            if text:\n                sep_text = Text(sep, justify=justify, end=end)\n                append(sep_text.join(text))\n                del text[:]\n        for renderable in objects:\n            if hasattr(renderable, 'jwevpw_eors4dfo6mwo345ermk7kdnfnwerwer'):\n                renderable = repr(renderable)\n            rich_cast = getattr(renderable, '__rich__', None)\n            if rich_cast:\n                renderable = rich_cast()\n            if isinstance(renderable, str):\n                append_text(self.render_str(renderable, emoji=emoji, markup\n                    =markup, highlighter=_highlighter))\n            elif isinstance(renderable, ConsoleRenderable):\n                check_text()\n                append(renderable)\n            elif isinstance(renderable, (abc.Mapping, abc.Sequence, abc.Set)):\n                check_text()\n                append(Pretty(renderable, highlighter=_highlighter))\n            else:\n                append_text(_highlighter(str(renderable)))\n        check_text()\n        if self.style is not None:\n            style = self.get_style(self.style)\n            renderables = [Styled(renderable, style) for renderable in\n                renderables]\n        return renderables\n\n    def rule(self, title: TextType='', *, characters: str='\u2500', style: Union\n        [str, Style]='rule.line', align: AlignMethod='center') ->None:\n        \"\"\"Draw a line with optional centered title.\n\n        Args:\n            title (str, optional): Text to render over the rule. Defaults to \"\".\n            characters (str, optional): Character(s) to form the line. Defaults to \"\u2500\".\n            style (str, optional): Style of line. Defaults to \"rule.line\".\n            align (str, optional): How to align the title, one of \"left\", \"center\", or \"right\". Defaults to \"center\".\n        \"\"\"\n        from .rule import Rule\n        rule = Rule(title=title, characters=characters, style=style, align=\n            align)\n        self.print(rule)\n\n    def control(self, control_codes: Union['Control', str]) ->None:\n        \"\"\"Insert non-printing control codes.\n\n        Args:\n            control_codes (str): Control codes, such as those that may move the cursor.\n        \"\"\"\n        if not self.is_dumb_terminal:\n            self._buffer.append(Segment.control(str(control_codes)))\n            self._check_buffer()\n\n    def out(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style\n        ]=None, highlight: bool=None) ->None:\n        \"\"\"Output to the terminal. This is a low-level way of writing to the terminal which unlike\n        :meth:`~rich.console.Console.print` won't pretty print, wrap text, or apply markup, but will\n        optionally apply highlighting and a basic style.\n\n        Args:\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use\n                console default. Defaults to ``None``.\n        \"\"\"\n        raw_output: str = sep.join(str(_object) for _object in objects)\n        self.print(raw_output, style=style, highlight=highlight, emoji=\n            False, markup=False, no_wrap=True, overflow='ignore', crop=\n            False, end=end)\n\n    def print(self, *objects: Any, sep=' ', end='\\n', style: Union[str,\n        Style]=None, justify: JustifyMethod=None, overflow: OverflowMethod=\n        None, no_wrap: bool=None, emoji: bool=None, markup: bool=None,\n        highlight: bool=None, width: int=None, crop: bool=True, soft_wrap:\n        bool=None) ->None:\n        \"\"\"Print to the console.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): Justify method: \"default\", \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"ignore\", \"crop\", \"fold\", or \"ellipsis\". Defaults to None.\n            no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to ``None``.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to ``None``.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to ``None``.\n            width (Optional[int], optional): Width of output, or ``None`` to auto-detect. Defaults to ``None``.\n            crop (Optional[bool], optional): Crop output to width of terminal. Defaults to True.\n            soft_wrap (bool, optional): Enable soft wrap mode which disables word wrapping and cropping of text or None for\n                Console default. Defaults to ``None``.\n        \"\"\"\n        if not objects:\n            self.line()\n            return\n        if soft_wrap is None:\n            soft_wrap = self.soft_wrap\n        if soft_wrap:\n            if no_wrap is None:\n                no_wrap = True\n            if overflow is None:\n                overflow = 'ignore'\n            crop = False\n        with self:\n            renderables = self._collect_renderables(objects, sep, end,\n                justify=justify, emoji=emoji, markup=markup, highlight=\n                highlight)\n            for hook in self._render_hooks:\n                renderables = hook.process_renderables(renderables)\n            render_options = self.options.update(justify='default',\n                overflow=overflow, width=min(width, self.width) if width else\n                None, no_wrap=no_wrap)\n            new_segments: List[Segment] = []\n            extend = new_segments.extend\n            render = self.render\n            if style is None:\n                for renderable in renderables:\n                    extend(render(renderable, render_options))\n            else:\n                for renderable in renderables:\n                    extend(Segment.apply_style(render(renderable,\n                        render_options), self.get_style(style)))\n            if crop:\n                buffer_extend = self._buffer.extend\n                for line in Segment.split_and_crop_lines(new_segments, self\n                    .width, pad=False):\n                    buffer_extend(line)\n            else:\n                self._buffer.extend(new_segments)\n\n    def print_exception(self, *, width: Optional[int]=100, extra_lines: int\n        =3, theme: Optional[str]=None, word_wrap: bool=False, show_locals:\n        bool=False) ->None:\n        \"\"\"Prints a rich render of the last exception and traceback.\n\n        Args:\n            width (Optional[int], optional): Number of characters used to render code. Defaults to 88.\n            extra_lines (int, optional): Additional lines of code to render. Defaults to 3.\n            theme (str, optional): Override pygments theme used in traceback\n            word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.\n            show_locals (bool, optional): Enable display of local variables. Defaults to False.\n        \"\"\"\n        from .traceback import Traceback\n        traceback = Traceback(width=width, extra_lines=extra_lines, theme=\n            theme, word_wrap=word_wrap, show_locals=show_locals)\n        self.print(traceback)\n\n    def log(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style\n        ]=None, justify: JustifyMethod=None, emoji: bool=None, markup: bool\n        =None, highlight: bool=None, log_locals: bool=False, _stack_offset=1\n        ) ->None:\n        \"\"\"Log rich content to the terminal.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): One of \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", or \"ellipsis\". Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to None.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to None.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to None.\n            log_locals (bool, optional): Boolean to enable logging of locals where ``log()``\n                was called. Defaults to False.\n            _stack_offset (int, optional): Offset of caller from end of call stack. Defaults to 1.\n        \"\"\"\n        if not objects:\n            self.line()\n            return\n        with self:\n            renderables = self._collect_renderables(objects, sep, end,\n                justify=justify, emoji=emoji, markup=markup, highlight=\n                highlight)\n            if style is not None:\n                renderables = [Styled(renderable, style) for renderable in\n                    renderables]\n            caller = inspect.stack()[_stack_offset]\n            link_path = None if caller.filename.startswith('<'\n                ) else os.path.abspath(caller.filename)\n            path = caller.filename.rpartition(os.sep)[-1]\n            line_no = caller.lineno\n            if log_locals:\n                locals_map = {key: value for key, value in caller.frame.\n                    f_locals.items() if not key.startswith('__')}\n                renderables.append(render_scope(locals_map, title='[i]locals'))\n            renderables = [self._log_render(self, renderables, log_time=\n                self.get_datetime(), path=path, line_no=line_no, link_path=\n                link_path)]\n            for hook in self._render_hooks:\n                renderables = hook.process_renderables(renderables)\n            new_segments: List[Segment] = []\n            extend = new_segments.extend\n            render = self.render\n            render_options = self.options\n            for renderable in renderables:\n                extend(render(renderable, render_options))\n            buffer_extend = self._buffer.extend\n            for line in Segment.split_and_crop_lines(new_segments, self.\n                width, pad=False):\n                buffer_extend(line)\n\n    def _check_buffer(self) ->None:\n        \"\"\"Check if the buffer may be rendered.\"\"\"\n        with self._lock:\n            if self._buffer_index == 0:\n                if self.is_jupyter:\n                    from .jupyter import display\n                    display(self._buffer)\n                    del self._buffer[:]\n                else:\n                    text = self._render_buffer(self._buffer[:])\n                    del self._buffer[:]\n                    if text:\n                        try:\n                            if WINDOWS:\n                                write = self.file.write\n                                for line in text.splitlines(True):\n                                    write(line)\n                            else:\n                                self.file.write(text)\n                            self.file.flush()\n                        except UnicodeEncodeError as error:\n                            error.reason = f\"\"\"{error.reason}\n*** You may need to add PYTHONIOENCODING=utf-8 to your environment ***\"\"\"\n                            raise\n\n    def _render_buffer(self, buffer: Iterable[Segment]) ->str:\n        \"\"\"Render buffered output, and clear buffer.\"\"\"\n        output: List[str] = []\n        append = output.append\n        color_system = self._color_system\n        legacy_windows = self.legacy_windows\n        if self.record:\n            with self._record_buffer_lock:\n                self._record_buffer.extend(buffer)\n        not_terminal = not self.is_terminal\n        if self.no_color and color_system:\n            buffer = Segment.remove_color(buffer)\n        for text, style, is_control in buffer:\n            if style:\n                append(style.render(text, color_system=color_system,\n                    legacy_windows=legacy_windows))\n            elif not (not_terminal and is_control):\n                append(text)\n        rendered = ''.join(output)\n        return rendered\n\n    def input(self, prompt: TextType='', *, markup: bool=True, emoji: bool=\n        True, password: bool=False, stream: TextIO=None) ->str:\n        \"\"\"Displays a prompt and waits for input from the user. The prompt may contain color / style.\n\n        Args:\n            prompt (Union[str, Text]): Text to render in the prompt.\n            markup (bool, optional): Enable console markup (requires a str prompt). Defaults to True.\n            emoji (bool, optional): Enable emoji (requires a str prompt). Defaults to True.\n            password: (bool, optional): Hide typed text. Defaults to False.\n            stream: (TextIO, optional): Optional file to read input from (rather than stdin). Defaults to None.\n\n        Returns:\n            str: Text read from stdin.\n        \"\"\"\n        prompt_str = ''\n        if prompt:\n            with self.capture() as capture:\n                self.print(prompt, markup=markup, emoji=emoji, end='')\n            prompt_str = capture.get()\n        if self.legacy_windows:\n            self.file.write(prompt_str)\n            prompt_str = ''\n        if password:\n            result = getpass(prompt_str, stream=stream)\n        elif stream:\n            self.file.write(prompt_str)\n            result = stream.readline()\n        else:\n            result = input(prompt_str)\n        return result\n\n    def export_text(self, *, clear: bool=True, styles: bool=False) ->str:\n        \"\"\"Generate text from console contents (requires record=True argument in constructor).\n\n        Args:\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            styles (bool, optional): If ``True``, ansi escape codes will be included. ``False`` for plain text.\n                Defaults to ``False``.\n\n        Returns:\n            str: String containing console contents.\n\n        \"\"\"\n        assert self.record, 'To export console contents set record=True in the constructor or instance'\n        with self._record_buffer_lock:\n            if styles:\n                text = ''.join(style.render(text) if style else text for \n                    text, style, _ in self._record_buffer)\n            else:\n                text = ''.join(segment.text for segment in self.\n                    _record_buffer if not segment.is_control)\n            if clear:\n                del self._record_buffer[:]\n        return text\n\n    def save_text(self, path: str, *, clear: bool=True, styles: bool=False\n        ) ->None:\n        \"\"\"Generate text from console and save to a given location (requires record=True argument in constructor).\n\n        Args:\n            path (str): Path to write text files.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            styles (bool, optional): If ``True``, ansi style codes will be included. ``False`` for plain text.\n                Defaults to ``False``.\n\n        \"\"\"\n        text = self.export_text(clear=clear, styles=styles)\n        with open(path, 'wt', encoding='utf-8') as write_file:\n            write_file.write(text)\n\n    def export_html(self, *, theme: TerminalTheme=None, clear: bool=True,\n        code_format: str=None, inline_styles: bool=False) ->str:\n        \"\"\"Generate HTML from console contents (requires record=True argument in constructor).\n\n        Args:\n            theme (TerminalTheme, optional): TerminalTheme object containing console colors.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            code_format (str, optional): Format string to render HTML, should contain {foreground}\n                {background} and {code}.\n            inline_styles (bool, optional): If ``True`` styles will be inlined in to spans, which makes files\n                larger but easier to cut and paste markup. If ``False``, styles will be embedded in a style tag.\n                Defaults to False.\n\n        Returns:\n            str: String containing console contents as HTML.\n        \"\"\"\n        assert self.record, 'To export console contents set record=True in the constructor or instance'\n        fragments: List[str] = []\n        append = fragments.append\n        _theme = theme or DEFAULT_TERMINAL_THEME\n        stylesheet = ''\n\n        def escape(text: str) ->str:\n            \"\"\"Escape html.\"\"\"\n            return text.replace('&', '&amp;').replace('<', '&lt;').replace('>',\n                '&gt;')\n        render_code_format = (CONSOLE_HTML_FORMAT if code_format is None else\n            code_format)\n        with self._record_buffer_lock:\n            if inline_styles:\n                for text, style, _ in Segment.filter_control(Segment.\n                    simplify(self._record_buffer)):\n                    text = escape(text)\n                    if style:\n                        rule = style.get_html_style(_theme)\n                        text = (f'<span style=\"{rule}\">{text}</span>' if\n                            rule else text)\n                        if style.link:\n                            text = f'<a href=\"{style.link}\">{text}</a>'\n                    append(text)\n            else:\n                styles: Dict[str, int] = {}\n                for text, style, _ in Segment.filter_control(Segment.\n                    simplify(self._record_buffer)):\n                    text = escape(text)\n                    if style:\n                        rule = style.get_html_style(_theme)\n                        if rule:\n                            style_number = styles.setdefault(rule, len(\n                                styles) + 1)\n                            text = (\n                                f'<span class=\"r{style_number}\">{text}</span>')\n                        if style.link:\n                            text = f'<a href=\"{style.link}\">{text}</a>'\n                    append(text)\n                stylesheet_rules: List[str] = []\n                stylesheet_append = stylesheet_rules.append\n                for style_rule, style_number in styles.items():\n                    if style_rule:\n                        stylesheet_append(f'.r{style_number} {{{style_rule}}}')\n                stylesheet = '\\n'.join(stylesheet_rules)\n            rendered_code = render_code_format.format(code=''.join(\n                fragments), stylesheet=stylesheet, foreground=_theme.\n                foreground_color.hex, background=_theme.background_color.hex)\n            if clear:\n                del self._record_buffer[:]\n        return rendered_code\n\n    def save_html(self, path: str, *, theme: TerminalTheme=None, clear:\n        bool=True, code_format=CONSOLE_HTML_FORMAT, inline_styles: bool=False\n        ) ->None:\n        \"\"\"Generate HTML from console contents and write to a file (requires record=True argument in constructor).\n\n        Args:\n            path (str): Path to write html file.\n            theme (TerminalTheme, optional): TerminalTheme object containing console colors.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            code_format (str, optional): Format string to render HTML, should contain {foreground}\n                {background} and {code}.\n            inline_styles (bool, optional): If ``True`` styles will be inlined in to spans, which makes files\n                larger but easier to cut and paste markup. If ``False``, styles will be embedded in a style tag.\n                Defaults to False.\n\n        \"\"\"\n        html = self.export_html(theme=theme, clear=clear, code_format=\n            code_format, inline_styles=inline_styles)\n        with open(path, 'wt', encoding='utf-8') as write_file:\n            write_file.write(html)\n",
                        "belong_class_name": "Console",
                        "belong_class_init": "def __init__(self, *, color_system: Optional[Literal['auto', 'standard',\n    '256', 'truecolor', 'windows']]='auto', force_terminal: bool=None,\n    force_jupyter: bool=None, soft_wrap: bool=False, theme: Theme=None,\n    stderr: bool=False, file: IO[str]=None, width: int=None, height: int=\n    None, style: StyleType=None, no_color: bool=None, tab_size: int=8,\n    record: bool=False, markup: bool=True, emoji: bool=True, highlight:\n    bool=True, log_time: bool=True, log_path: bool=True, log_time_format:\n    str='[%X]', highlighter: Optional['HighlighterType']=ReprHighlighter(),\n    legacy_windows: bool=None, safe_box: bool=True, get_datetime: Callable[\n    [], datetime]=None, get_time: Callable[[], float]=None, _environ: Dict[\n    str, str]=None):\n    self._environ = os.environ if _environ is None else _environ\n    self.is_jupyter = _is_jupyter() if force_jupyter is None else force_jupyter\n    if self.is_jupyter:\n        width = width or 93\n        height = height or 100\n    self.soft_wrap = soft_wrap\n    self._width = width\n    self._height = height\n    self.tab_size = tab_size\n    self.record = record\n    self._markup = markup\n    self._emoji = emoji\n    self._highlight = highlight\n    self.legacy_windows: bool = detect_legacy_windows(\n        ) and not self.is_jupyter if legacy_windows is None else legacy_windows\n    self._color_system: Optional[ColorSystem]\n    self._force_terminal = force_terminal\n    self._file = file\n    self.stderr = stderr\n    if color_system is None:\n        self._color_system = None\n    elif color_system == 'auto':\n        self._color_system = self._detect_color_system()\n    else:\n        self._color_system = COLOR_SYSTEMS[color_system]\n    self._lock = threading.RLock()\n    self._log_render = LogRender(show_time=log_time, show_path=log_path,\n        time_format=log_time_format)\n    self.highlighter: HighlighterType = highlighter or _null_highlighter\n    self.safe_box = safe_box\n    self.get_datetime = get_datetime or datetime.now\n    self.get_time = get_time or monotonic\n    self.style = style\n    self.no_color = (no_color if no_color is not None else 'NO_COLOR' in\n        self._environ)\n    self._record_buffer_lock = threading.RLock()\n    self._thread_locals = ConsoleThreadLocals(theme_stack=ThemeStack(themes\n        .DEFAULT if theme is None else theme))\n    self._record_buffer: List[Segment] = []\n    self._render_hooks: List[RenderHook] = []\n",
                        "called_function_name": "_collect_renderables",
                        "called_function_content": "def print(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style]=\n    None, justify: JustifyMethod=None, overflow: OverflowMethod=None,\n    no_wrap: bool=None, emoji: bool=None, markup: bool=None, highlight:\n    bool=None, width: int=None, crop: bool=True, soft_wrap: bool=None) ->None:\n    \"\"\"Print to the console.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): Justify method: \"default\", \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"ignore\", \"crop\", \"fold\", or \"ellipsis\". Defaults to None.\n            no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to ``None``.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to ``None``.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to ``None``.\n            width (Optional[int], optional): Width of output, or ``None`` to auto-detect. Defaults to ``None``.\n            crop (Optional[bool], optional): Crop output to width of terminal. Defaults to True.\n            soft_wrap (bool, optional): Enable soft wrap mode which disables word wrapping and cropping of text or None for\n                Console default. Defaults to ``None``.\n        \"\"\"\n    if not objects:\n        self.line()\n        return\n    if soft_wrap is None:\n        soft_wrap = self.soft_wrap\n    if soft_wrap:\n        if no_wrap is None:\n            no_wrap = True\n        if overflow is None:\n            overflow = 'ignore'\n        crop = False\n    with self:\n        renderables = self._collect_renderables(objects, sep, end, justify=\n            justify, emoji=emoji, markup=markup, highlight=highlight)\n",
                        "called_arguments": "(objects, sep, end, justify=\n            justify, emoji=emoji, markup=markup, highlight=highlight)",
                        "called_function_parameter": "(self, objects: Iterable[Any], sep: str, end: str,\n    *, justify: JustifyMethod=None, emoji: bool=None, markup: bool=None,\n    highlight: bool=None)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_collect_renderables",
                        "function_content": "def _collect_renderables(self, objects: Iterable[Any], sep: str, end: str,\n    *, justify: JustifyMethod=None, emoji: bool=None, markup: bool=None,\n    highlight: bool=None) ->List[ConsoleRenderable]:\n    \"\"\"Combined a number of renderables and text in to one renderable.\n\n        Args:\n            objects (Iterable[Any]): Anything that Rich can render.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            justify (str, optional): One of \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default.\n\n        Returns:\n            List[ConsoleRenderable]: A list oxf things to render.\n        \"\"\"\n    renderables: List[ConsoleRenderable] = []\n    _append = renderables.append\n    text: List[Text] = []\n    append_text = text.append\n    append = _append\n    if justify in ('left', 'center', 'right'):\n\n        def align_append(renderable: RenderableType) ->None:\n            _append(Align(renderable, cast(AlignMethod, justify)))\n        append = align_append\n    _highlighter: HighlighterType = _null_highlighter\n    if highlight or highlight is None and self._highlight:\n        _highlighter = self.highlighter\n\n    def check_text() ->None:\n        if text:\n            sep_text = Text(sep, justify=justify, end=end)\n            append(sep_text.join(text))\n            del text[:]\n    for renderable in objects:\n        if hasattr(renderable, 'jwevpw_eors4dfo6mwo345ermk7kdnfnwerwer'):\n            renderable = repr(renderable)\n        rich_cast = getattr(renderable, '__rich__', None)\n        if rich_cast:\n            renderable = rich_cast()\n        if isinstance(renderable, str):\n            append_text(self.render_str(renderable, emoji=emoji, markup=\n                markup, highlighter=_highlighter))\n        elif isinstance(renderable, ConsoleRenderable):\n            check_text()\n            append(renderable)\n        elif isinstance(renderable, (abc.Mapping, abc.Sequence, abc.Set)):\n            check_text()\n            append(Pretty(renderable, highlighter=_highlighter))\n        else:\n            append_text(_highlighter(str(renderable)))\n    check_text()\n    if self.style is not None:\n        style = self.get_style(self.style)\n        renderables = [Styled(renderable, style) for renderable in renderables]\n    return renderables\n",
                        "function_parameter": "(self, objects: Iterable[Any], sep: str, end: str,\n    *, justify: JustifyMethod=None, emoji: bool=None, markup: bool=None,\n    highlight: bool=None)",
                        "belong_class_content": "class Console:\n    \"\"\"A high level console interface.\n\n    Args:\n        color_system (str, optional): The color system supported by your terminal,\n            either ``\"standard\"``, ``\"256\"`` or ``\"truecolor\"``. Leave as ``\"auto\"`` to autodetect.\n        force_terminal (Optional[bool], optional): Enable/disable terminal control codes, or None to auto-detect terminal. Defaults to None.\n        force_jupyter (Optional[bool], optional): Enable/disable Jupyter rendering, or None to auto-detect Jupyter. Defaults to None.\n        soft_wrap (Optional[bool], optional): Set soft wrap default on print method. Defaults to False.\n        theme (Theme, optional): An optional style theme object, or ``None`` for default theme.\n        stderr (bool, optional): Use stderr rather than stdout if ``file `` is not specified. Defaults to False.\n        file (IO, optional): A file object where the console should write to. Defaults to stdout.\n        width (int, optional): The width of the terminal. Leave as default to auto-detect width.\n        height (int, optional): The height of the terminal. Leave as default to auto-detect height.\n        style (StyleType, optional): Style to apply to all output, or None for no style. Defaults to None.\n        no_color (Optional[bool], optional): Enabled no color mode, or None to auto detect. Defaults to None.\n        record (bool, optional): Boolean to enable recording of terminal output,\n            required to call :meth:`export_html` and :meth:`export_text`. Defaults to False.\n        markup (bool, optional): Boolean to enable :ref:`console_markup`. Defaults to True.\n        emoji (bool, optional): Enable emoji code. Defaults to True.\n        highlight (bool, optional): Enable automatic highlighting. Defaults to True.\n        log_time (bool, optional): Boolean to enable logging of time by :meth:`log` methods. Defaults to True.\n        log_path (bool, optional): Boolean to enable the logging of the caller by :meth:`log`. Defaults to True.\n        log_time_format (str, optional): Log time format if ``log_time`` is enabled. Defaults to \"[%X] \".\n        highlighter (HighlighterType, optional): Default highlighter.\n        legacy_windows (bool, optional): Enable legacy Windows mode, or ``None`` to auto detect. Defaults to ``None``.\n        safe_box (bool, optional): Restrict box options that don't render on legacy Windows.\n        get_datetime (Callable[[], datetime], optional): Callable that gets the current time as a datetime.datetime object (used by Console.log),\n            or None for datetime.now.\n        get_time (Callable[[], time], optional): Callable that gets the current time in seconds, default uses time.monotonic.\n    \"\"\"\n\n    def __init__(self, *, color_system: Optional[Literal['auto', 'standard',\n        '256', 'truecolor', 'windows']]='auto', force_terminal: bool=None,\n        force_jupyter: bool=None, soft_wrap: bool=False, theme: Theme=None,\n        stderr: bool=False, file: IO[str]=None, width: int=None, height:\n        int=None, style: StyleType=None, no_color: bool=None, tab_size: int\n        =8, record: bool=False, markup: bool=True, emoji: bool=True,\n        highlight: bool=True, log_time: bool=True, log_path: bool=True,\n        log_time_format: str='[%X]', highlighter: Optional[\n        'HighlighterType']=ReprHighlighter(), legacy_windows: bool=None,\n        safe_box: bool=True, get_datetime: Callable[[], datetime]=None,\n        get_time: Callable[[], float]=None, _environ: Dict[str, str]=None):\n        self._environ = os.environ if _environ is None else _environ\n        self.is_jupyter = _is_jupyter(\n            ) if force_jupyter is None else force_jupyter\n        if self.is_jupyter:\n            width = width or 93\n            height = height or 100\n        self.soft_wrap = soft_wrap\n        self._width = width\n        self._height = height\n        self.tab_size = tab_size\n        self.record = record\n        self._markup = markup\n        self._emoji = emoji\n        self._highlight = highlight\n        self.legacy_windows: bool = detect_legacy_windows(\n            ) and not self.is_jupyter if legacy_windows is None else legacy_windows\n        self._color_system: Optional[ColorSystem]\n        self._force_terminal = force_terminal\n        self._file = file\n        self.stderr = stderr\n        if color_system is None:\n            self._color_system = None\n        elif color_system == 'auto':\n            self._color_system = self._detect_color_system()\n        else:\n            self._color_system = COLOR_SYSTEMS[color_system]\n        self._lock = threading.RLock()\n        self._log_render = LogRender(show_time=log_time, show_path=log_path,\n            time_format=log_time_format)\n        self.highlighter: HighlighterType = highlighter or _null_highlighter\n        self.safe_box = safe_box\n        self.get_datetime = get_datetime or datetime.now\n        self.get_time = get_time or monotonic\n        self.style = style\n        self.no_color = (no_color if no_color is not None else 'NO_COLOR' in\n            self._environ)\n        self._record_buffer_lock = threading.RLock()\n        self._thread_locals = ConsoleThreadLocals(theme_stack=ThemeStack(\n            themes.DEFAULT if theme is None else theme))\n        self._record_buffer: List[Segment] = []\n        self._render_hooks: List[RenderHook] = []\n\n    def __repr__(self) ->str:\n        return f'<console width={self.width} {str(self._color_system)}>'\n\n    @property\n    def file(self) ->IO[str]:\n        \"\"\"Get the file object to write to.\"\"\"\n        file = self._file or (sys.stderr if self.stderr else sys.stdout)\n        file = getattr(file, 'rich_proxied_file', file)\n        return file\n\n    @file.setter\n    def file(self, new_file: IO[str]) ->None:\n        \"\"\"Set a new file object.\"\"\"\n        self._file = new_file\n\n    @property\n    def _buffer(self) ->List[Segment]:\n        \"\"\"Get a thread local buffer.\"\"\"\n        return self._thread_locals.buffer\n\n    @property\n    def _buffer_index(self) ->int:\n        \"\"\"Get a thread local buffer.\"\"\"\n        return self._thread_locals.buffer_index\n\n    @_buffer_index.setter\n    def _buffer_index(self, value: int) ->None:\n        self._thread_locals.buffer_index = value\n\n    @property\n    def _theme_stack(self) ->ThemeStack:\n        \"\"\"Get the thread local theme stack.\"\"\"\n        return self._thread_locals.theme_stack\n\n    def _detect_color_system(self) ->Optional[ColorSystem]:\n        \"\"\"Detect color system from env vars.\"\"\"\n        if self.is_jupyter:\n            return ColorSystem.TRUECOLOR\n        if not self.is_terminal or self.is_dumb_terminal:\n            return None\n        if WINDOWS:\n            if self.legacy_windows:\n                return ColorSystem.WINDOWS\n            windows_console_features = get_windows_console_features()\n            return (ColorSystem.TRUECOLOR if windows_console_features.\n                truecolor else ColorSystem.EIGHT_BIT)\n        else:\n            color_term = self._environ.get('COLORTERM', '').strip().lower()\n            if color_term in ('truecolor', '24bit'):\n                return ColorSystem.TRUECOLOR\n            term = self._environ.get('TERM', '').strip().lower()\n            _term_name, _hyphen, colors = term.partition('-')\n            color_system = _TERM_COLORS.get(colors, ColorSystem.STANDARD)\n            return color_system\n\n    def _enter_buffer(self) ->None:\n        \"\"\"Enter in to a buffer context, and buffer all output.\"\"\"\n        self._buffer_index += 1\n\n    def _exit_buffer(self) ->None:\n        \"\"\"Leave buffer context, and render content if required.\"\"\"\n        self._buffer_index -= 1\n        self._check_buffer()\n\n    def push_render_hook(self, hook: RenderHook) ->None:\n        \"\"\"Add a new render hook to the stack.\n\n        Args:\n            hook (RenderHook): Render hook instance.\n        \"\"\"\n        self._render_hooks.append(hook)\n\n    def pop_render_hook(self) ->None:\n        \"\"\"Pop the last renderhook from the stack.\"\"\"\n        self._render_hooks.pop()\n\n    def __enter__(self) ->'Console':\n        \"\"\"Own context manager to enter buffer context.\"\"\"\n        self._enter_buffer()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback) ->None:\n        \"\"\"Exit buffer context.\"\"\"\n        self._exit_buffer()\n\n    def begin_capture(self) ->None:\n        \"\"\"Begin capturing console output. Call :meth:`end_capture` to exit capture mode and return output.\"\"\"\n        self._enter_buffer()\n\n    def end_capture(self) ->str:\n        \"\"\"End capture mode and return captured string.\n\n        Returns:\n            str: Console output.\n        \"\"\"\n        render_result = self._render_buffer(self._buffer)\n        del self._buffer[:]\n        self._exit_buffer()\n        return render_result\n\n    def push_theme(self, theme: Theme, *, inherit: bool=True) ->None:\n        \"\"\"Push a new theme on to the top of the stack, replacing the styles from the previous theme.\n        Generally speaking, you should call :meth:`~rich.console.Console.use_theme` to get a context manager, rather\n        than calling this method directly.\n\n        Args:\n            theme (Theme): A theme instance.\n            inherit (bool, optional): Inherit existing styles. Defaults to True.\n        \"\"\"\n        self._theme_stack.push_theme(theme, inherit=inherit)\n\n    def pop_theme(self) ->None:\n        \"\"\"Remove theme from top of stack, restoring previous theme.\"\"\"\n        self._theme_stack.pop_theme()\n\n    def use_theme(self, theme: Theme, *, inherit: bool=True) ->ThemeContext:\n        \"\"\"Use a different theme for the duration of the context manager.\n\n        Args:\n            theme (Theme): Theme instance to user.\n            inherit (bool, optional): Inherit existing console styles. Defaults to True.\n\n        Returns:\n            ThemeContext: [description]\n        \"\"\"\n        return ThemeContext(self, theme, inherit)\n\n    @property\n    def color_system(self) ->Optional[str]:\n        \"\"\"Get color system string.\n\n        Returns:\n            Optional[str]: \"standard\", \"256\" or \"truecolor\".\n        \"\"\"\n        if self._color_system is not None:\n            return _COLOR_SYSTEMS_NAMES[self._color_system]\n        else:\n            return None\n\n    @property\n    def encoding(self) ->str:\n        \"\"\"Get the encoding of the console file, e.g. ``\"utf-8\"``.\n\n        Returns:\n            str: A standard encoding string.\n        \"\"\"\n        return (getattr(self.file, 'encoding', 'utf-8') or 'utf-8').lower()\n\n    @property\n    def is_terminal(self) ->bool:\n        \"\"\"Check if the console is writing to a terminal.\n\n        Returns:\n            bool: True if the console writing to a device capable of\n            understanding terminal codes, otherwise False.\n        \"\"\"\n        if self._force_terminal is not None:\n            return self._force_terminal\n        isatty = getattr(self.file, 'isatty', None)\n        return False if isatty is None else isatty()\n\n    @property\n    def is_dumb_terminal(self) ->bool:\n        \"\"\"Detect dumb terminal.\n\n        Returns:\n            bool: True if writing to a dumb terminal, otherwise False.\n\n        \"\"\"\n        _term = self._environ.get('TERM', '')\n        is_dumb = _term.lower() in ('dumb', 'unknown')\n        return self.is_terminal and is_dumb\n\n    @property\n    def options(self) ->ConsoleOptions:\n        \"\"\"Get default console options.\"\"\"\n        return ConsoleOptions(legacy_windows=self.legacy_windows, min_width\n            =1, max_width=self.width, encoding=self.encoding, is_terminal=\n            self.is_terminal)\n\n    @property\n    def size(self) ->ConsoleDimensions:\n        \"\"\"Get the size of the console.\n\n        Returns:\n            ConsoleDimensions: A named tuple containing the dimensions.\n        \"\"\"\n        if self._width is not None and self._height is not None:\n            return ConsoleDimensions(self._width, self._height)\n        if self.is_dumb_terminal:\n            return ConsoleDimensions(80, 25)\n        width: Optional[int] = None\n        height: Optional[int] = None\n        if WINDOWS:\n            width, height = shutil.get_terminal_size()\n        else:\n            try:\n                width, height = os.get_terminal_size(sys.stdin.fileno())\n            except (AttributeError, ValueError, OSError):\n                try:\n                    width, height = os.get_terminal_size(sys.stdout.fileno())\n                except (AttributeError, ValueError, OSError):\n                    pass\n        width = width or 80\n        height = height or 25\n        return ConsoleDimensions(width - self.legacy_windows if self._width is\n            None else self._width, height if self._height is None else self\n            ._height)\n\n    @property\n    def width(self) ->int:\n        \"\"\"Get the width of the console.\n\n        Returns:\n            int: The width (in characters) of the console.\n        \"\"\"\n        width, _ = self.size\n        return width\n\n    def bell(self) ->None:\n        \"\"\"Play a 'bell' sound (if supported by the terminal).\"\"\"\n        self.control('\\x07')\n\n    def capture(self) ->Capture:\n        \"\"\"A context manager to *capture* the result of print() or log() in a string,\n        rather than writing it to the console.\n\n        Example:\n            >>> from rich.console import Console\n            >>> console = Console()\n            >>> with console.capture() as capture:\n            ...     console.print(\"[bold magenta]Hello World[/]\")\n            >>> print(capture.get())\n\n        Returns:\n            Capture: Context manager with disables writing to the terminal.\n        \"\"\"\n        capture = Capture(self)\n        return capture\n\n    def pager(self, pager: Pager=None, styles: bool=False, links: bool=False\n        ) ->PagerContext:\n        \"\"\"A context manager to display anything printed within a \"pager\". The pager application\n        is defined by the system and will typically support at least pressing a key to scroll.\n\n        Args:\n            pager (Pager, optional): A pager object, or None to use :class:~rich.pager.SystemPager`. Defaults to None.\n            styles (bool, optional): Show styles in pager. Defaults to False.\n            links (bool, optional): Show links in pager. Defaults to False.\n\n        Example:\n            >>> from rich.console import Console\n            >>> from rich.__main__ import make_test_card\n            >>> console = Console()\n            >>> with console.pager():\n                    console.print(make_test_card())\n\n        Returns:\n            PagerContext: A context manager.\n        \"\"\"\n        return PagerContext(self, pager=pager, styles=styles, links=links)\n\n    def line(self, count: int=1) ->None:\n        \"\"\"Write new line(s).\n\n        Args:\n            count (int, optional): Number of new lines. Defaults to 1.\n        \"\"\"\n        assert count >= 0, 'count must be >= 0'\n        if count:\n            self._buffer.append(Segment('\\n' * count))\n            self._check_buffer()\n\n    def clear(self, home: bool=True) ->None:\n        \"\"\"Clear the screen.\n\n        Args:\n            home (bool, optional): Also move the cursor to 'home' position. Defaults to True.\n        \"\"\"\n        self.control('\\x1b[2J\\x1b[H' if home else '\\x1b[2J')\n\n    def status(self, status: RenderableType, spinner: str='dots',\n        spinner_style: str='status.spinner', speed: float=1.0,\n        refresh_per_second: float=12.5) ->'Status':\n        \"\"\"Display a status and spinner.\n\n        Args:\n            status (RenderableType): A status renderable (str or Text typically).\n            console (Console, optional): Console instance to use, or None for global console. Defaults to None.\n            spinner (str, optional): Name of spinner animation (see python -m rich.spinner). Defaults to \"dots\".\n            spinner_style (StyleType, optional): Style of spinner. Defaults to \"status.spinner\".\n            speed (float, optional): Speed factor for spinner animation. Defaults to 1.0.\n            refresh_per_second (float, optional): Number of refreshes per second. Defaults to 12.5.\n\n        Returns:\n            Status: A Status object that may be used as a context manager.\n        \"\"\"\n        from .status import Status\n        status_renderable = Status(status, console=self, spinner=spinner,\n            spinner_style=spinner_style, speed=speed, refresh_per_second=\n            refresh_per_second)\n        return status_renderable\n\n    def show_cursor(self, show: bool=True) ->None:\n        \"\"\"Show or hide the cursor.\n\n        Args:\n            show (bool, optional): Set visibility of the cursor.\n        \"\"\"\n        if self.is_terminal and not self.legacy_windows:\n            self.control('\\x1b[?25h' if show else '\\x1b[?25l')\n\n    def render(self, renderable: RenderableType, options: ConsoleOptions=None\n        ) ->Iterable[Segment]:\n        \"\"\"Render an object in to an iterable of `Segment` instances.\n\n        This method contains the logic for rendering objects with the console protocol.\n        You are unlikely to need to use it directly, unless you are extending the library.\n\n        Args:\n            renderable (RenderableType): An object supporting the console protocol, or\n                an object that may be converted to a string.\n            options (ConsoleOptions, optional): An options object, or None to use self.options. Defaults to None.\n\n        Returns:\n            Iterable[Segment]: An iterable of segments that may be rendered.\n        \"\"\"\n        _options = options or self.options\n        if _options.max_width < 1:\n            return\n        render_iterable: RenderResult\n        if isinstance(renderable, RichCast):\n            renderable = renderable.__rich__()\n        if isinstance(renderable, ConsoleRenderable):\n            render_iterable = renderable.__rich_console__(self, _options)\n        elif isinstance(renderable, str):\n            yield from self.render(self.render_str(renderable, highlight=\n                _options.highlight), _options)\n            return\n        else:\n            raise errors.NotRenderableError(\n                f'Unable to render {renderable!r}; A str, Segment or object with __rich_console__ method is required'\n                )\n        try:\n            iter_render = iter(render_iterable)\n        except TypeError:\n            raise errors.NotRenderableError(\n                f'object {render_iterable!r} is not renderable')\n        for render_output in iter_render:\n            if isinstance(render_output, Segment):\n                yield render_output\n            else:\n                yield from self.render(render_output, _options)\n\n    def render_lines(self, renderable: RenderableType, options: Optional[\n        ConsoleOptions]=None, *, style: Optional[Style]=None, pad: bool=True\n        ) ->List[List[Segment]]:\n        \"\"\"Render objects in to a list of lines.\n\n        The output of render_lines is useful when further formatting of rendered console text\n        is required, such as the Panel class which draws a border around any renderable object.\n\n        Args:\n            renderable (RenderableType): Any object renderable in the console.\n            options (Optional[ConsoleOptions], optional): Console options, or None to use self.options. Default to ``None``.\n            style (Style, optional): Optional style to apply to renderables. Defaults to ``None``.\n            pad (bool, optional): Pad lines shorter than render width. Defaults to ``True``.\n\n        Returns:\n            List[List[Segment]]: A list of lines, where a line is a list of Segment objects.\n        \"\"\"\n        render_options = options or self.options\n        _rendered = self.render(renderable, render_options)\n        if style is not None:\n            _rendered = Segment.apply_style(_rendered, style)\n        lines = list(Segment.split_and_crop_lines(_rendered, render_options\n            .max_width, include_new_lines=False, pad=pad))\n        return lines\n\n    def render_str(self, text: str, *, style: Union[str, Style]='', justify:\n        JustifyMethod=None, overflow: OverflowMethod=None, emoji: bool=None,\n        markup: bool=None, highlight: bool=None, highlighter:\n        HighlighterType=None) ->'Text':\n        \"\"\"Convert a string to a Text instance. This is is called automatically if\n        you print or log a string.\n\n        Args:\n            text (str): Text to render.\n            style (Union[str, Style], optional): Style to apply to rendered text.\n            justify (str, optional): Justify method: \"default\", \"left\", \"center\", \"full\", or \"right\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", or \"ellipsis\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji, or ``None`` to use Console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use Console default.\n            highlight (Optional[bool], optional): Enable highlighting, or ``None`` to use Console default.\n            highlighter (HighlighterType, optional): Optional highlighter to apply.\n        Returns:\n            ConsoleRenderable: Renderable object.\n\n        \"\"\"\n        emoji_enabled = emoji or emoji is None and self._emoji\n        markup_enabled = markup or markup is None and self._markup\n        highlight_enabled = highlight or highlight is None and self._highlight\n        if markup_enabled:\n            rich_text = render_markup(text, style=style, emoji=emoji_enabled)\n            rich_text.justify = justify\n            rich_text.overflow = overflow\n        else:\n            rich_text = Text(_emoji_replace(text) if emoji_enabled else\n                text, justify=justify, overflow=overflow, style=style)\n        _highlighter = (highlighter or self.highlighter if\n            highlight_enabled else None)\n        if _highlighter is not None:\n            highlight_text = _highlighter(str(rich_text))\n            highlight_text.copy_styles(rich_text)\n            return highlight_text\n        return rich_text\n\n    def get_style(self, name: Union[str, Style], *, default: Union[Style,\n        str]=None) ->Style:\n        \"\"\"Get a Style instance by it's theme name or parse a definition.\n\n        Args:\n            name (str): The name of a style or a style definition.\n\n        Returns:\n            Style: A Style object.\n\n        Raises:\n            MissingStyle: If no style could be parsed from name.\n\n        \"\"\"\n        if isinstance(name, Style):\n            return name\n        try:\n            style = self._theme_stack.get(name)\n            if style is None:\n                style = Style.parse(name)\n            return style.copy() if style.link else style\n        except errors.StyleSyntaxError as error:\n            if default is not None:\n                return self.get_style(default)\n            raise errors.MissingStyle(f'Failed to get style {name!r}; {error}')\n\n    def _collect_renderables(self, objects: Iterable[Any], sep: str, end:\n        str, *, justify: JustifyMethod=None, emoji: bool=None, markup: bool\n        =None, highlight: bool=None) ->List[ConsoleRenderable]:\n        \"\"\"Combined a number of renderables and text in to one renderable.\n\n        Args:\n            objects (Iterable[Any]): Anything that Rich can render.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            justify (str, optional): One of \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default.\n\n        Returns:\n            List[ConsoleRenderable]: A list oxf things to render.\n        \"\"\"\n        renderables: List[ConsoleRenderable] = []\n        _append = renderables.append\n        text: List[Text] = []\n        append_text = text.append\n        append = _append\n        if justify in ('left', 'center', 'right'):\n\n            def align_append(renderable: RenderableType) ->None:\n                _append(Align(renderable, cast(AlignMethod, justify)))\n            append = align_append\n        _highlighter: HighlighterType = _null_highlighter\n        if highlight or highlight is None and self._highlight:\n            _highlighter = self.highlighter\n\n        def check_text() ->None:\n            if text:\n                sep_text = Text(sep, justify=justify, end=end)\n                append(sep_text.join(text))\n                del text[:]\n        for renderable in objects:\n            if hasattr(renderable, 'jwevpw_eors4dfo6mwo345ermk7kdnfnwerwer'):\n                renderable = repr(renderable)\n            rich_cast = getattr(renderable, '__rich__', None)\n            if rich_cast:\n                renderable = rich_cast()\n            if isinstance(renderable, str):\n                append_text(self.render_str(renderable, emoji=emoji, markup\n                    =markup, highlighter=_highlighter))\n            elif isinstance(renderable, ConsoleRenderable):\n                check_text()\n                append(renderable)\n            elif isinstance(renderable, (abc.Mapping, abc.Sequence, abc.Set)):\n                check_text()\n                append(Pretty(renderable, highlighter=_highlighter))\n            else:\n                append_text(_highlighter(str(renderable)))\n        check_text()\n        if self.style is not None:\n            style = self.get_style(self.style)\n            renderables = [Styled(renderable, style) for renderable in\n                renderables]\n        return renderables\n\n    def rule(self, title: TextType='', *, characters: str='\u2500', style: Union\n        [str, Style]='rule.line', align: AlignMethod='center') ->None:\n        \"\"\"Draw a line with optional centered title.\n\n        Args:\n            title (str, optional): Text to render over the rule. Defaults to \"\".\n            characters (str, optional): Character(s) to form the line. Defaults to \"\u2500\".\n            style (str, optional): Style of line. Defaults to \"rule.line\".\n            align (str, optional): How to align the title, one of \"left\", \"center\", or \"right\". Defaults to \"center\".\n        \"\"\"\n        from .rule import Rule\n        rule = Rule(title=title, characters=characters, style=style, align=\n            align)\n        self.print(rule)\n\n    def control(self, control_codes: Union['Control', str]) ->None:\n        \"\"\"Insert non-printing control codes.\n\n        Args:\n            control_codes (str): Control codes, such as those that may move the cursor.\n        \"\"\"\n        if not self.is_dumb_terminal:\n            self._buffer.append(Segment.control(str(control_codes)))\n            self._check_buffer()\n\n    def out(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style\n        ]=None, highlight: bool=None) ->None:\n        \"\"\"Output to the terminal. This is a low-level way of writing to the terminal which unlike\n        :meth:`~rich.console.Console.print` won't pretty print, wrap text, or apply markup, but will\n        optionally apply highlighting and a basic style.\n\n        Args:\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use\n                console default. Defaults to ``None``.\n        \"\"\"\n        raw_output: str = sep.join(str(_object) for _object in objects)\n        self.print(raw_output, style=style, highlight=highlight, emoji=\n            False, markup=False, no_wrap=True, overflow='ignore', crop=\n            False, end=end)\n\n    def print(self, *objects: Any, sep=' ', end='\\n', style: Union[str,\n        Style]=None, justify: JustifyMethod=None, overflow: OverflowMethod=\n        None, no_wrap: bool=None, emoji: bool=None, markup: bool=None,\n        highlight: bool=None, width: int=None, crop: bool=True, soft_wrap:\n        bool=None) ->None:\n        \"\"\"Print to the console.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): Justify method: \"default\", \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"ignore\", \"crop\", \"fold\", or \"ellipsis\". Defaults to None.\n            no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to ``None``.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to ``None``.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to ``None``.\n            width (Optional[int], optional): Width of output, or ``None`` to auto-detect. Defaults to ``None``.\n            crop (Optional[bool], optional): Crop output to width of terminal. Defaults to True.\n            soft_wrap (bool, optional): Enable soft wrap mode which disables word wrapping and cropping of text or None for\n                Console default. Defaults to ``None``.\n        \"\"\"\n        if not objects:\n            self.line()\n            return\n        if soft_wrap is None:\n            soft_wrap = self.soft_wrap\n        if soft_wrap:\n            if no_wrap is None:\n                no_wrap = True\n            if overflow is None:\n                overflow = 'ignore'\n            crop = False\n        with self:\n            renderables = self._collect_renderables(objects, sep, end,\n                justify=justify, emoji=emoji, markup=markup, highlight=\n                highlight)\n            for hook in self._render_hooks:\n                renderables = hook.process_renderables(renderables)\n            render_options = self.options.update(justify='default',\n                overflow=overflow, width=min(width, self.width) if width else\n                None, no_wrap=no_wrap)\n            new_segments: List[Segment] = []\n            extend = new_segments.extend\n            render = self.render\n            if style is None:\n                for renderable in renderables:\n                    extend(render(renderable, render_options))\n            else:\n                for renderable in renderables:\n                    extend(Segment.apply_style(render(renderable,\n                        render_options), self.get_style(style)))\n            if crop:\n                buffer_extend = self._buffer.extend\n                for line in Segment.split_and_crop_lines(new_segments, self\n                    .width, pad=False):\n                    buffer_extend(line)\n            else:\n                self._buffer.extend(new_segments)\n\n    def print_exception(self, *, width: Optional[int]=100, extra_lines: int\n        =3, theme: Optional[str]=None, word_wrap: bool=False, show_locals:\n        bool=False) ->None:\n        \"\"\"Prints a rich render of the last exception and traceback.\n\n        Args:\n            width (Optional[int], optional): Number of characters used to render code. Defaults to 88.\n            extra_lines (int, optional): Additional lines of code to render. Defaults to 3.\n            theme (str, optional): Override pygments theme used in traceback\n            word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.\n            show_locals (bool, optional): Enable display of local variables. Defaults to False.\n        \"\"\"\n        from .traceback import Traceback\n        traceback = Traceback(width=width, extra_lines=extra_lines, theme=\n            theme, word_wrap=word_wrap, show_locals=show_locals)\n        self.print(traceback)\n\n    def log(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style\n        ]=None, justify: JustifyMethod=None, emoji: bool=None, markup: bool\n        =None, highlight: bool=None, log_locals: bool=False, _stack_offset=1\n        ) ->None:\n        \"\"\"Log rich content to the terminal.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): One of \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", or \"ellipsis\". Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to None.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to None.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to None.\n            log_locals (bool, optional): Boolean to enable logging of locals where ``log()``\n                was called. Defaults to False.\n            _stack_offset (int, optional): Offset of caller from end of call stack. Defaults to 1.\n        \"\"\"\n        if not objects:\n            self.line()\n            return\n        with self:\n            renderables = self._collect_renderables(objects, sep, end,\n                justify=justify, emoji=emoji, markup=markup, highlight=\n                highlight)\n            if style is not None:\n                renderables = [Styled(renderable, style) for renderable in\n                    renderables]\n            caller = inspect.stack()[_stack_offset]\n            link_path = None if caller.filename.startswith('<'\n                ) else os.path.abspath(caller.filename)\n            path = caller.filename.rpartition(os.sep)[-1]\n            line_no = caller.lineno\n            if log_locals:\n                locals_map = {key: value for key, value in caller.frame.\n                    f_locals.items() if not key.startswith('__')}\n                renderables.append(render_scope(locals_map, title='[i]locals'))\n            renderables = [self._log_render(self, renderables, log_time=\n                self.get_datetime(), path=path, line_no=line_no, link_path=\n                link_path)]\n            for hook in self._render_hooks:\n                renderables = hook.process_renderables(renderables)\n            new_segments: List[Segment] = []\n            extend = new_segments.extend\n            render = self.render\n            render_options = self.options\n            for renderable in renderables:\n                extend(render(renderable, render_options))\n            buffer_extend = self._buffer.extend\n            for line in Segment.split_and_crop_lines(new_segments, self.\n                width, pad=False):\n                buffer_extend(line)\n\n    def _check_buffer(self) ->None:\n        \"\"\"Check if the buffer may be rendered.\"\"\"\n        with self._lock:\n            if self._buffer_index == 0:\n                if self.is_jupyter:\n                    from .jupyter import display\n                    display(self._buffer)\n                    del self._buffer[:]\n                else:\n                    text = self._render_buffer(self._buffer[:])\n                    del self._buffer[:]\n                    if text:\n                        try:\n                            if WINDOWS:\n                                write = self.file.write\n                                for line in text.splitlines(True):\n                                    write(line)\n                            else:\n                                self.file.write(text)\n                            self.file.flush()\n                        except UnicodeEncodeError as error:\n                            error.reason = f\"\"\"{error.reason}\n*** You may need to add PYTHONIOENCODING=utf-8 to your environment ***\"\"\"\n                            raise\n\n    def _render_buffer(self, buffer: Iterable[Segment]) ->str:\n        \"\"\"Render buffered output, and clear buffer.\"\"\"\n        output: List[str] = []\n        append = output.append\n        color_system = self._color_system\n        legacy_windows = self.legacy_windows\n        if self.record:\n            with self._record_buffer_lock:\n                self._record_buffer.extend(buffer)\n        not_terminal = not self.is_terminal\n        if self.no_color and color_system:\n            buffer = Segment.remove_color(buffer)\n        for text, style, is_control in buffer:\n            if style:\n                append(style.render(text, color_system=color_system,\n                    legacy_windows=legacy_windows))\n            elif not (not_terminal and is_control):\n                append(text)\n        rendered = ''.join(output)\n        return rendered\n\n    def input(self, prompt: TextType='', *, markup: bool=True, emoji: bool=\n        True, password: bool=False, stream: TextIO=None) ->str:\n        \"\"\"Displays a prompt and waits for input from the user. The prompt may contain color / style.\n\n        Args:\n            prompt (Union[str, Text]): Text to render in the prompt.\n            markup (bool, optional): Enable console markup (requires a str prompt). Defaults to True.\n            emoji (bool, optional): Enable emoji (requires a str prompt). Defaults to True.\n            password: (bool, optional): Hide typed text. Defaults to False.\n            stream: (TextIO, optional): Optional file to read input from (rather than stdin). Defaults to None.\n\n        Returns:\n            str: Text read from stdin.\n        \"\"\"\n        prompt_str = ''\n        if prompt:\n            with self.capture() as capture:\n                self.print(prompt, markup=markup, emoji=emoji, end='')\n            prompt_str = capture.get()\n        if self.legacy_windows:\n            self.file.write(prompt_str)\n            prompt_str = ''\n        if password:\n            result = getpass(prompt_str, stream=stream)\n        elif stream:\n            self.file.write(prompt_str)\n            result = stream.readline()\n        else:\n            result = input(prompt_str)\n        return result\n\n    def export_text(self, *, clear: bool=True, styles: bool=False) ->str:\n        \"\"\"Generate text from console contents (requires record=True argument in constructor).\n\n        Args:\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            styles (bool, optional): If ``True``, ansi escape codes will be included. ``False`` for plain text.\n                Defaults to ``False``.\n\n        Returns:\n            str: String containing console contents.\n\n        \"\"\"\n        assert self.record, 'To export console contents set record=True in the constructor or instance'\n        with self._record_buffer_lock:\n            if styles:\n                text = ''.join(style.render(text) if style else text for \n                    text, style, _ in self._record_buffer)\n            else:\n                text = ''.join(segment.text for segment in self.\n                    _record_buffer if not segment.is_control)\n            if clear:\n                del self._record_buffer[:]\n        return text\n\n    def save_text(self, path: str, *, clear: bool=True, styles: bool=False\n        ) ->None:\n        \"\"\"Generate text from console and save to a given location (requires record=True argument in constructor).\n\n        Args:\n            path (str): Path to write text files.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            styles (bool, optional): If ``True``, ansi style codes will be included. ``False`` for plain text.\n                Defaults to ``False``.\n\n        \"\"\"\n        text = self.export_text(clear=clear, styles=styles)\n        with open(path, 'wt', encoding='utf-8') as write_file:\n            write_file.write(text)\n\n    def export_html(self, *, theme: TerminalTheme=None, clear: bool=True,\n        code_format: str=None, inline_styles: bool=False) ->str:\n        \"\"\"Generate HTML from console contents (requires record=True argument in constructor).\n\n        Args:\n            theme (TerminalTheme, optional): TerminalTheme object containing console colors.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            code_format (str, optional): Format string to render HTML, should contain {foreground}\n                {background} and {code}.\n            inline_styles (bool, optional): If ``True`` styles will be inlined in to spans, which makes files\n                larger but easier to cut and paste markup. If ``False``, styles will be embedded in a style tag.\n                Defaults to False.\n\n        Returns:\n            str: String containing console contents as HTML.\n        \"\"\"\n        assert self.record, 'To export console contents set record=True in the constructor or instance'\n        fragments: List[str] = []\n        append = fragments.append\n        _theme = theme or DEFAULT_TERMINAL_THEME\n        stylesheet = ''\n\n        def escape(text: str) ->str:\n            \"\"\"Escape html.\"\"\"\n            return text.replace('&', '&amp;').replace('<', '&lt;').replace('>',\n                '&gt;')\n        render_code_format = (CONSOLE_HTML_FORMAT if code_format is None else\n            code_format)\n        with self._record_buffer_lock:\n            if inline_styles:\n                for text, style, _ in Segment.filter_control(Segment.\n                    simplify(self._record_buffer)):\n                    text = escape(text)\n                    if style:\n                        rule = style.get_html_style(_theme)\n                        text = (f'<span style=\"{rule}\">{text}</span>' if\n                            rule else text)\n                        if style.link:\n                            text = f'<a href=\"{style.link}\">{text}</a>'\n                    append(text)\n            else:\n                styles: Dict[str, int] = {}\n                for text, style, _ in Segment.filter_control(Segment.\n                    simplify(self._record_buffer)):\n                    text = escape(text)\n                    if style:\n                        rule = style.get_html_style(_theme)\n                        if rule:\n                            style_number = styles.setdefault(rule, len(\n                                styles) + 1)\n                            text = (\n                                f'<span class=\"r{style_number}\">{text}</span>')\n                        if style.link:\n                            text = f'<a href=\"{style.link}\">{text}</a>'\n                    append(text)\n                stylesheet_rules: List[str] = []\n                stylesheet_append = stylesheet_rules.append\n                for style_rule, style_number in styles.items():\n                    if style_rule:\n                        stylesheet_append(f'.r{style_number} {{{style_rule}}}')\n                stylesheet = '\\n'.join(stylesheet_rules)\n            rendered_code = render_code_format.format(code=''.join(\n                fragments), stylesheet=stylesheet, foreground=_theme.\n                foreground_color.hex, background=_theme.background_color.hex)\n            if clear:\n                del self._record_buffer[:]\n        return rendered_code\n\n    def save_html(self, path: str, *, theme: TerminalTheme=None, clear:\n        bool=True, code_format=CONSOLE_HTML_FORMAT, inline_styles: bool=False\n        ) ->None:\n        \"\"\"Generate HTML from console contents and write to a file (requires record=True argument in constructor).\n\n        Args:\n            path (str): Path to write html file.\n            theme (TerminalTheme, optional): TerminalTheme object containing console colors.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            code_format (str, optional): Format string to render HTML, should contain {foreground}\n                {background} and {code}.\n            inline_styles (bool, optional): If ``True`` styles will be inlined in to spans, which makes files\n                larger but easier to cut and paste markup. If ``False``, styles will be embedded in a style tag.\n                Defaults to False.\n\n        \"\"\"\n        html = self.export_html(theme=theme, clear=clear, code_format=\n            code_format, inline_styles=inline_styles)\n        with open(path, 'wt', encoding='utf-8') as write_file:\n            write_file.write(html)\n",
                        "belong_class_name": "Console",
                        "belong_class_init": "def __init__(self, *, color_system: Optional[Literal['auto', 'standard',\n    '256', 'truecolor', 'windows']]='auto', force_terminal: bool=None,\n    force_jupyter: bool=None, soft_wrap: bool=False, theme: Theme=None,\n    stderr: bool=False, file: IO[str]=None, width: int=None, height: int=\n    None, style: StyleType=None, no_color: bool=None, tab_size: int=8,\n    record: bool=False, markup: bool=True, emoji: bool=True, highlight:\n    bool=True, log_time: bool=True, log_path: bool=True, log_time_format:\n    str='[%X]', highlighter: Optional['HighlighterType']=ReprHighlighter(),\n    legacy_windows: bool=None, safe_box: bool=True, get_datetime: Callable[\n    [], datetime]=None, get_time: Callable[[], float]=None, _environ: Dict[\n    str, str]=None):\n    self._environ = os.environ if _environ is None else _environ\n    self.is_jupyter = _is_jupyter() if force_jupyter is None else force_jupyter\n    if self.is_jupyter:\n        width = width or 93\n        height = height or 100\n    self.soft_wrap = soft_wrap\n    self._width = width\n    self._height = height\n    self.tab_size = tab_size\n    self.record = record\n    self._markup = markup\n    self._emoji = emoji\n    self._highlight = highlight\n    self.legacy_windows: bool = detect_legacy_windows(\n        ) and not self.is_jupyter if legacy_windows is None else legacy_windows\n    self._color_system: Optional[ColorSystem]\n    self._force_terminal = force_terminal\n    self._file = file\n    self.stderr = stderr\n    if color_system is None:\n        self._color_system = None\n    elif color_system == 'auto':\n        self._color_system = self._detect_color_system()\n    else:\n        self._color_system = COLOR_SYSTEMS[color_system]\n    self._lock = threading.RLock()\n    self._log_render = LogRender(show_time=log_time, show_path=log_path,\n        time_format=log_time_format)\n    self.highlighter: HighlighterType = highlighter or _null_highlighter\n    self.safe_box = safe_box\n    self.get_datetime = get_datetime or datetime.now\n    self.get_time = get_time or monotonic\n    self.style = style\n    self.no_color = (no_color if no_color is not None else 'NO_COLOR' in\n        self._environ)\n    self._record_buffer_lock = threading.RLock()\n    self._thread_locals = ConsoleThreadLocals(theme_stack=ThemeStack(themes\n        .DEFAULT if theme is None else theme))\n    self._record_buffer: List[Segment] = []\n    self._render_hooks: List[RenderHook] = []\n",
                        "called_function_name": "__rich__",
                        "called_function_content": "def _collect_renderables(self, objects: Iterable[Any], sep: str, end: str,\n    *, justify: JustifyMethod=None, emoji: bool=None, markup: bool=None,\n    highlight: bool=None) ->List[ConsoleRenderable]:\n    \"\"\"Combined a number of renderables and text in to one renderable.\n\n        Args:\n            objects (Iterable[Any]): Anything that Rich can render.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            justify (str, optional): One of \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default.\n\n        Returns:\n            List[ConsoleRenderable]: A list oxf things to render.\n        \"\"\"\n    renderables: List[ConsoleRenderable] = []\n    _append = renderables.append\n    text: List[Text] = []\n    append_text = text.append\n    append = _append\n    if justify in ('left', 'center', 'right'):\n\n        def align_append(renderable: RenderableType) ->None:\n            _append(Align(renderable, cast(AlignMethod, justify)))\n        append = align_append\n    _highlighter: HighlighterType = _null_highlighter\n    if highlight or highlight is None and self._highlight:\n        _highlighter = self.highlighter\n\n    def check_text() ->None:\n        if text:\n            sep_text = Text(sep, justify=justify, end=end)\n            append(sep_text.join(text))\n            del text[:]\n    for renderable in objects:\n        if hasattr(renderable, 'jwevpw_eors4dfo6mwo345ermk7kdnfnwerwer'):\n            renderable = repr(renderable)\n        rich_cast = getattr(renderable, '__rich__', None)\n        if rich_cast:\n            renderable = rich_cast()\n        if isinstance(renderable, str):\n            append_text(self.render_str(renderable, emoji=emoji, markup=\n                markup, highlighter=_highlighter))\n        elif isinstance(renderable, ConsoleRenderable):\n            check_text()\n            append(renderable)\n        elif isinstance(renderable, (abc.Mapping, abc.Sequence, abc.Set)):\n            check_text()\n            append(Pretty(renderable, highlighter=_highlighter))\n        else:\n            append_text(_highlighter(str(renderable)))\n    check_text()\n    if self.style is not None:\n        style = self.get_style(self.style)\n        renderables = [Styled(renderable, style) for renderable in renderables]\n    return renderables\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(self)",
                        "split_result": "failure"
                    },
                    {
                        "function_name": "__rich__",
                        "function_content": "def __rich__(self) ->Panel:\n    return Panel.fit(RenderGroup(*self._render()), title=self.title,\n        border_style='scope.border', padding=(0, 1))\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class Inspect(JupyterMixin):\n    \"\"\"A renderable to inspect any Python Object.\n\n    Args:\n        obj (Any): An object to inspect.\n        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.\n        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.\n        methods (bool, optional): Enable inspection of callables. Defaults to False.\n        docs (bool, optional): Also render doc strings. Defaults to True.\n        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.\n        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.\n        sort (bool, optional): Sort attributes alphabetically. Defaults to True.\n        all (bool, optional): Show all attributes. Defaults to False.\n        value (bool, optional): Pretty print value of object. Defaults to True.\n    \"\"\"\n\n    def __init__(self, obj: Any, *, title: TextType=None, help: bool=False,\n        methods: bool=False, docs: bool=True, private: bool=False, dunder:\n        bool=False, sort: bool=True, all: bool=True, value: bool=True) ->None:\n        self.highlighter = ReprHighlighter()\n        self.obj = obj\n        self.title = title or self._make_title(obj)\n        if all:\n            methods = private = dunder = True\n        self.help = help\n        self.methods = methods\n        self.docs = docs or help\n        self.private = private or dunder\n        self.dunder = dunder\n        self.sort = sort\n        self.value = value\n\n    def _make_title(self, obj: Any) ->Text:\n        \"\"\"Make a default title.\"\"\"\n        title_str = str(obj) if isclass(obj) or callable(obj) or ismodule(obj\n            ) else str(type(obj))\n        title_text = self.highlighter(title_str)\n        return title_text\n\n    def __rich__(self) ->Panel:\n        return Panel.fit(RenderGroup(*self._render()), title=self.title,\n            border_style='scope.border', padding=(0, 1))\n\n    def _get_signature(self, name: str, obj: Any) ->Text:\n        \"\"\"Get a signature for a callable.\"\"\"\n        try:\n            _signature = str(signature(obj)) + ':'\n        except ValueError:\n            _signature = '(...)'\n        source_filename: Optional[str] = None\n        try:\n            source_filename = getfile(obj)\n        except TypeError:\n            pass\n        callable_name = Text(name, style='inspect.callable')\n        if source_filename:\n            callable_name.stylize(f'link file://{source_filename}')\n        signature_text = self.highlighter(_signature)\n        qualname = name or getattr(obj, '__qualname__', name)\n        qual_signature = Text.assemble(('def ', 'inspect.def'), (qualname,\n            'inspect.callable'), signature_text)\n        return qual_signature\n\n    def _render(self) ->Iterable[RenderableType]:\n        \"\"\"Render object.\"\"\"\n\n        def sort_items(item: Tuple[str, Any]) ->Tuple[bool, str]:\n            key, (_error, value) = item\n            return callable(value), key.strip('_').lower()\n\n        def safe_getattr(attr_name: str) ->Tuple[Any, Any]:\n            \"\"\"Get attribute or any exception.\"\"\"\n            try:\n                return None, getattr(obj, attr_name)\n            except Exception as error:\n                return error, None\n        obj = self.obj\n        keys = dir(obj)\n        total_items = len(keys)\n        if not self.dunder:\n            keys = [key for key in keys if not key.startswith('__')]\n        if not self.private:\n            keys = [key for key in keys if not key.startswith('_')]\n        not_shown_count = total_items - len(keys)\n        items = [(key, safe_getattr(key)) for key in keys]\n        if self.sort:\n            items.sort(key=sort_items)\n        items_table = Table.grid(padding=(0, 1), expand=False)\n        items_table.add_column(justify='right')\n        add_row = items_table.add_row\n        highlighter = self.highlighter\n        if callable(obj):\n            yield self._get_signature('', obj)\n            yield ''\n        _doc = getdoc(obj)\n        if _doc is not None:\n            if not self.help:\n                _doc = _first_paragraph(_doc)\n            doc_text = Text(_reformat_doc(_doc), style='inspect.help')\n            doc_text = highlighter(doc_text)\n            yield doc_text\n            yield ''\n        if self.value and not (isclass(obj) or callable(obj) or ismodule(obj)):\n            yield Panel(Pretty(obj, indent_guides=True, max_length=10,\n                max_string=60), border_style='inspect.value.border')\n            yield ''\n        for key, (error, value) in items:\n            key_text = Text.assemble((key, 'inspect.attr.dunder' if key.\n                startswith('__') else 'inspect.attr'), (' =', 'inspect.equals')\n                )\n            if error is not None:\n                warning = key_text.copy()\n                warning.stylize('inspect.error')\n                add_row(warning, highlighter(repr(error)))\n                continue\n            if callable(value):\n                if not self.methods:\n                    continue\n                _signature_text = self._get_signature(key, value)\n                if self.docs:\n                    docs = getdoc(value)\n                    if docs is not None:\n                        _doc = _reformat_doc(str(docs))\n                        if not self.help:\n                            _doc = _first_paragraph(_doc)\n                        _signature_text.append('\\n' if '\\n' in _doc else ' ')\n                        doc = highlighter(_doc)\n                        doc.stylize('inspect.doc')\n                        _signature_text.append(doc)\n                add_row(key_text, _signature_text)\n            else:\n                add_row(key_text, Pretty(value, highlighter=highlighter))\n        if items_table.row_count:\n            yield items_table\n        else:\n            yield self.highlighter(Text.from_markup(\n                f'[i][b]{not_shown_count}[/b] attribute(s) not shown.[/i] Run [b][red]inspect[/red]([not b]inspect[/])[/b] for options.'\n                ))\n",
                        "belong_class_name": "Inspect",
                        "belong_class_init": "def __init__(self, obj: Any, *, title: TextType=None, help: bool=False,\n    methods: bool=False, docs: bool=True, private: bool=False, dunder: bool\n    =False, sort: bool=True, all: bool=True, value: bool=True) ->None:\n    self.highlighter = ReprHighlighter()\n    self.obj = obj\n    self.title = title or self._make_title(obj)\n    if all:\n        methods = private = dunder = True\n    self.help = help\n    self.methods = methods\n    self.docs = docs or help\n    self.private = private or dunder\n    self.dunder = dunder\n    self.sort = sort\n    self.value = value\n",
                        "called_function_name": "_render",
                        "called_function_content": "def __rich__(self) ->Panel:\n    return Panel.fit(RenderGroup(*self._render()\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(self)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_render",
                        "function_content": "def _render(self) ->Iterable[RenderableType]:\n    \"\"\"Render object.\"\"\"\n\n    def sort_items(item: Tuple[str, Any]) ->Tuple[bool, str]:\n        key, (_error, value) = item\n        return callable(value), key.strip('_').lower()\n\n    def safe_getattr(attr_name: str) ->Tuple[Any, Any]:\n        \"\"\"Get attribute or any exception.\"\"\"\n        try:\n            return None, getattr(obj, attr_name)\n        except Exception as error:\n            return error, None\n    obj = self.obj\n    keys = dir(obj)\n    total_items = len(keys)\n    if not self.dunder:\n        keys = [key for key in keys if not key.startswith('__')]\n    if not self.private:\n        keys = [key for key in keys if not key.startswith('_')]\n    not_shown_count = total_items - len(keys)\n    items = [(key, safe_getattr(key)) for key in keys]\n    if self.sort:\n        items.sort(key=sort_items)\n    items_table = Table.grid(padding=(0, 1), expand=False)\n    items_table.add_column(justify='right')\n    add_row = items_table.add_row\n    highlighter = self.highlighter\n    if callable(obj):\n        yield self._get_signature('', obj)\n        yield ''\n    _doc = getdoc(obj)\n    if _doc is not None:\n        if not self.help:\n            _doc = _first_paragraph(_doc)\n        doc_text = Text(_reformat_doc(_doc), style='inspect.help')\n        doc_text = highlighter(doc_text)\n        yield doc_text\n        yield ''\n    if self.value and not (isclass(obj) or callable(obj) or ismodule(obj)):\n        yield Panel(Pretty(obj, indent_guides=True, max_length=10,\n            max_string=60), border_style='inspect.value.border')\n        yield ''\n    for key, (error, value) in items:\n        key_text = Text.assemble((key, 'inspect.attr.dunder' if key.\n            startswith('__') else 'inspect.attr'), (' =', 'inspect.equals'))\n        if error is not None:\n            warning = key_text.copy()\n            warning.stylize('inspect.error')\n            add_row(warning, highlighter(repr(error)))\n            continue\n        if callable(value):\n            if not self.methods:\n                continue\n            _signature_text = self._get_signature(key, value)\n            if self.docs:\n                docs = getdoc(value)\n                if docs is not None:\n                    _doc = _reformat_doc(str(docs))\n                    if not self.help:\n                        _doc = _first_paragraph(_doc)\n                    _signature_text.append('\\n' if '\\n' in _doc else ' ')\n                    doc = highlighter(_doc)\n                    doc.stylize('inspect.doc')\n                    _signature_text.append(doc)\n            add_row(key_text, _signature_text)\n        else:\n            add_row(key_text, Pretty(value, highlighter=highlighter))\n    if items_table.row_count:\n        yield items_table\n    else:\n        yield self.highlighter(Text.from_markup(\n            f'[i][b]{not_shown_count}[/b] attribute(s) not shown.[/i] Run [b][red]inspect[/red]([not b]inspect[/])[/b] for options.'\n            ))\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class Inspect(JupyterMixin):\n    \"\"\"A renderable to inspect any Python Object.\n\n    Args:\n        obj (Any): An object to inspect.\n        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.\n        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.\n        methods (bool, optional): Enable inspection of callables. Defaults to False.\n        docs (bool, optional): Also render doc strings. Defaults to True.\n        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.\n        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.\n        sort (bool, optional): Sort attributes alphabetically. Defaults to True.\n        all (bool, optional): Show all attributes. Defaults to False.\n        value (bool, optional): Pretty print value of object. Defaults to True.\n    \"\"\"\n\n    def __init__(self, obj: Any, *, title: TextType=None, help: bool=False,\n        methods: bool=False, docs: bool=True, private: bool=False, dunder:\n        bool=False, sort: bool=True, all: bool=True, value: bool=True) ->None:\n        self.highlighter = ReprHighlighter()\n        self.obj = obj\n        self.title = title or self._make_title(obj)\n        if all:\n            methods = private = dunder = True\n        self.help = help\n        self.methods = methods\n        self.docs = docs or help\n        self.private = private or dunder\n        self.dunder = dunder\n        self.sort = sort\n        self.value = value\n\n    def _make_title(self, obj: Any) ->Text:\n        \"\"\"Make a default title.\"\"\"\n        title_str = str(obj) if isclass(obj) or callable(obj) or ismodule(obj\n            ) else str(type(obj))\n        title_text = self.highlighter(title_str)\n        return title_text\n\n    def __rich__(self) ->Panel:\n        return Panel.fit(RenderGroup(*self._render()), title=self.title,\n            border_style='scope.border', padding=(0, 1))\n\n    def _get_signature(self, name: str, obj: Any) ->Text:\n        \"\"\"Get a signature for a callable.\"\"\"\n        try:\n            _signature = str(signature(obj)) + ':'\n        except ValueError:\n            _signature = '(...)'\n        source_filename: Optional[str] = None\n        try:\n            source_filename = getfile(obj)\n        except TypeError:\n            pass\n        callable_name = Text(name, style='inspect.callable')\n        if source_filename:\n            callable_name.stylize(f'link file://{source_filename}')\n        signature_text = self.highlighter(_signature)\n        qualname = name or getattr(obj, '__qualname__', name)\n        qual_signature = Text.assemble(('def ', 'inspect.def'), (qualname,\n            'inspect.callable'), signature_text)\n        return qual_signature\n\n    def _render(self) ->Iterable[RenderableType]:\n        \"\"\"Render object.\"\"\"\n\n        def sort_items(item: Tuple[str, Any]) ->Tuple[bool, str]:\n            key, (_error, value) = item\n            return callable(value), key.strip('_').lower()\n\n        def safe_getattr(attr_name: str) ->Tuple[Any, Any]:\n            \"\"\"Get attribute or any exception.\"\"\"\n            try:\n                return None, getattr(obj, attr_name)\n            except Exception as error:\n                return error, None\n        obj = self.obj\n        keys = dir(obj)\n        total_items = len(keys)\n        if not self.dunder:\n            keys = [key for key in keys if not key.startswith('__')]\n        if not self.private:\n            keys = [key for key in keys if not key.startswith('_')]\n        not_shown_count = total_items - len(keys)\n        items = [(key, safe_getattr(key)) for key in keys]\n        if self.sort:\n            items.sort(key=sort_items)\n        items_table = Table.grid(padding=(0, 1), expand=False)\n        items_table.add_column(justify='right')\n        add_row = items_table.add_row\n        highlighter = self.highlighter\n        if callable(obj):\n            yield self._get_signature('', obj)\n            yield ''\n        _doc = getdoc(obj)\n        if _doc is not None:\n            if not self.help:\n                _doc = _first_paragraph(_doc)\n            doc_text = Text(_reformat_doc(_doc), style='inspect.help')\n            doc_text = highlighter(doc_text)\n            yield doc_text\n            yield ''\n        if self.value and not (isclass(obj) or callable(obj) or ismodule(obj)):\n            yield Panel(Pretty(obj, indent_guides=True, max_length=10,\n                max_string=60), border_style='inspect.value.border')\n            yield ''\n        for key, (error, value) in items:\n            key_text = Text.assemble((key, 'inspect.attr.dunder' if key.\n                startswith('__') else 'inspect.attr'), (' =', 'inspect.equals')\n                )\n            if error is not None:\n                warning = key_text.copy()\n                warning.stylize('inspect.error')\n                add_row(warning, highlighter(repr(error)))\n                continue\n            if callable(value):\n                if not self.methods:\n                    continue\n                _signature_text = self._get_signature(key, value)\n                if self.docs:\n                    docs = getdoc(value)\n                    if docs is not None:\n                        _doc = _reformat_doc(str(docs))\n                        if not self.help:\n                            _doc = _first_paragraph(_doc)\n                        _signature_text.append('\\n' if '\\n' in _doc else ' ')\n                        doc = highlighter(_doc)\n                        doc.stylize('inspect.doc')\n                        _signature_text.append(doc)\n                add_row(key_text, _signature_text)\n            else:\n                add_row(key_text, Pretty(value, highlighter=highlighter))\n        if items_table.row_count:\n            yield items_table\n        else:\n            yield self.highlighter(Text.from_markup(\n                f'[i][b]{not_shown_count}[/b] attribute(s) not shown.[/i] Run [b][red]inspect[/red]([not b]inspect[/])[/b] for options.'\n                ))\n",
                        "belong_class_name": "Inspect",
                        "belong_class_init": "def __init__(self, obj: Any, *, title: TextType=None, help: bool=False,\n    methods: bool=False, docs: bool=True, private: bool=False, dunder: bool\n    =False, sort: bool=True, all: bool=True, value: bool=True) ->None:\n    self.highlighter = ReprHighlighter()\n    self.obj = obj\n    self.title = title or self._make_title(obj)\n    if all:\n        methods = private = dunder = True\n    self.help = help\n    self.methods = methods\n    self.docs = docs or help\n    self.private = private or dunder\n    self.dunder = dunder\n    self.sort = sort\n    self.value = value\n",
                        "called_function_name": "_get_signature",
                        "called_function_content": "def _render(self) ->Iterable[RenderableType]:\n    \"\"\"Render object.\"\"\"\n\n    def sort_items(item: Tuple[str, Any]) ->Tuple[bool, str]:\n        key, (_error, value) = item\n        return callable(value), key.strip('_').lower()\n\n    def safe_getattr(attr_name: str) ->Tuple[Any, Any]:\n        \"\"\"Get attribute or any exception.\"\"\"\n        try:\n            return None, getattr(obj, attr_name)\n        except Exception as error:\n            return error, None\n    obj = self.obj\n    keys = dir(obj)\n    total_items = len(keys)\n    if not self.dunder:\n        keys = [key for key in keys if not key.startswith('__')]\n    if not self.private:\n        keys = [key for key in keys if not key.startswith('_')]\n    not_shown_count = total_items - len(keys)\n    items = [(key, safe_getattr(key)) for key in keys]\n    if self.sort:\n        items.sort(key=sort_items)\n    items_table = Table.grid(padding=(0, 1), expand=False)\n    items_table.add_column(justify='right')\n    add_row = items_table.add_row\n    highlighter = self.highlighter\n    if callable(obj):\n        yield self._get_signature('', obj)\n        yield ''\n    _doc = getdoc(obj)\n    if _doc is not None:\n        if not self.help:\n            _doc = _first_paragraph(_doc)\n        doc_text = Text(_reformat_doc(_doc), style='inspect.help')\n        doc_text = highlighter(doc_text)\n        yield doc_text\n        yield ''\n    if self.value and not (isclass(obj) or callable(obj) or ismodule(obj)):\n        yield Panel(Pretty(obj, indent_guides=True, max_length=10,\n            max_string=60), border_style='inspect.value.border')\n        yield ''\n    for key, (error, value) in items:\n        key_text = Text.assemble((key, 'inspect.attr.dunder' if key.\n            startswith('__') else 'inspect.attr'), (' =', 'inspect.equals'))\n        if error is not None:\n            warning = key_text.copy()\n            warning.stylize('inspect.error')\n            add_row(warning, highlighter(repr(error)))\n            continue\n        if callable(value):\n            if not self.methods:\n                continue\n            _signature_text = self._get_signature(key, value)\n",
                        "called_arguments": "(key, value)",
                        "called_function_parameter": "(self, name: str, obj: Any)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_get_signature",
                        "function_content": "def _get_signature(self, name: str, obj: Any) ->Text:\n    \"\"\"Get a signature for a callable.\"\"\"\n    try:\n        _signature = str(signature(obj)) + ':'\n    except ValueError:\n        _signature = '(...)'\n    source_filename: Optional[str] = None\n    try:\n        source_filename = getfile(obj)\n    except TypeError:\n        pass\n    callable_name = Text(name, style='inspect.callable')\n    if source_filename:\n        callable_name.stylize(f'link file://{source_filename}')\n    signature_text = self.highlighter(_signature)\n    qualname = name or getattr(obj, '__qualname__', name)\n    qual_signature = Text.assemble(('def ', 'inspect.def'), (qualname,\n        'inspect.callable'), signature_text)\n    return qual_signature\n",
                        "function_parameter": "(self, name: str, obj: Any)",
                        "belong_class_content": "class Inspect(JupyterMixin):\n    \"\"\"A renderable to inspect any Python Object.\n\n    Args:\n        obj (Any): An object to inspect.\n        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.\n        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.\n        methods (bool, optional): Enable inspection of callables. Defaults to False.\n        docs (bool, optional): Also render doc strings. Defaults to True.\n        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.\n        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.\n        sort (bool, optional): Sort attributes alphabetically. Defaults to True.\n        all (bool, optional): Show all attributes. Defaults to False.\n        value (bool, optional): Pretty print value of object. Defaults to True.\n    \"\"\"\n\n    def __init__(self, obj: Any, *, title: TextType=None, help: bool=False,\n        methods: bool=False, docs: bool=True, private: bool=False, dunder:\n        bool=False, sort: bool=True, all: bool=True, value: bool=True) ->None:\n        self.highlighter = ReprHighlighter()\n        self.obj = obj\n        self.title = title or self._make_title(obj)\n        if all:\n            methods = private = dunder = True\n        self.help = help\n        self.methods = methods\n        self.docs = docs or help\n        self.private = private or dunder\n        self.dunder = dunder\n        self.sort = sort\n        self.value = value\n\n    def _make_title(self, obj: Any) ->Text:\n        \"\"\"Make a default title.\"\"\"\n        title_str = str(obj) if isclass(obj) or callable(obj) or ismodule(obj\n            ) else str(type(obj))\n        title_text = self.highlighter(title_str)\n        return title_text\n\n    def __rich__(self) ->Panel:\n        return Panel.fit(RenderGroup(*self._render()), title=self.title,\n            border_style='scope.border', padding=(0, 1))\n\n    def _get_signature(self, name: str, obj: Any) ->Text:\n        \"\"\"Get a signature for a callable.\"\"\"\n        try:\n            _signature = str(signature(obj)) + ':'\n        except ValueError:\n            _signature = '(...)'\n        source_filename: Optional[str] = None\n        try:\n            source_filename = getfile(obj)\n        except TypeError:\n            pass\n        callable_name = Text(name, style='inspect.callable')\n        if source_filename:\n            callable_name.stylize(f'link file://{source_filename}')\n        signature_text = self.highlighter(_signature)\n        qualname = name or getattr(obj, '__qualname__', name)\n        qual_signature = Text.assemble(('def ', 'inspect.def'), (qualname,\n            'inspect.callable'), signature_text)\n        return qual_signature\n\n    def _render(self) ->Iterable[RenderableType]:\n        \"\"\"Render object.\"\"\"\n\n        def sort_items(item: Tuple[str, Any]) ->Tuple[bool, str]:\n            key, (_error, value) = item\n            return callable(value), key.strip('_').lower()\n\n        def safe_getattr(attr_name: str) ->Tuple[Any, Any]:\n            \"\"\"Get attribute or any exception.\"\"\"\n            try:\n                return None, getattr(obj, attr_name)\n            except Exception as error:\n                return error, None\n        obj = self.obj\n        keys = dir(obj)\n        total_items = len(keys)\n        if not self.dunder:\n            keys = [key for key in keys if not key.startswith('__')]\n        if not self.private:\n            keys = [key for key in keys if not key.startswith('_')]\n        not_shown_count = total_items - len(keys)\n        items = [(key, safe_getattr(key)) for key in keys]\n        if self.sort:\n            items.sort(key=sort_items)\n        items_table = Table.grid(padding=(0, 1), expand=False)\n        items_table.add_column(justify='right')\n        add_row = items_table.add_row\n        highlighter = self.highlighter\n        if callable(obj):\n            yield self._get_signature('', obj)\n            yield ''\n        _doc = getdoc(obj)\n        if _doc is not None:\n            if not self.help:\n                _doc = _first_paragraph(_doc)\n            doc_text = Text(_reformat_doc(_doc), style='inspect.help')\n            doc_text = highlighter(doc_text)\n            yield doc_text\n            yield ''\n        if self.value and not (isclass(obj) or callable(obj) or ismodule(obj)):\n            yield Panel(Pretty(obj, indent_guides=True, max_length=10,\n                max_string=60), border_style='inspect.value.border')\n            yield ''\n        for key, (error, value) in items:\n            key_text = Text.assemble((key, 'inspect.attr.dunder' if key.\n                startswith('__') else 'inspect.attr'), (' =', 'inspect.equals')\n                )\n            if error is not None:\n                warning = key_text.copy()\n                warning.stylize('inspect.error')\n                add_row(warning, highlighter(repr(error)))\n                continue\n            if callable(value):\n                if not self.methods:\n                    continue\n                _signature_text = self._get_signature(key, value)\n                if self.docs:\n                    docs = getdoc(value)\n                    if docs is not None:\n                        _doc = _reformat_doc(str(docs))\n                        if not self.help:\n                            _doc = _first_paragraph(_doc)\n                        _signature_text.append('\\n' if '\\n' in _doc else ' ')\n                        doc = highlighter(_doc)\n                        doc.stylize('inspect.doc')\n                        _signature_text.append(doc)\n                add_row(key_text, _signature_text)\n            else:\n                add_row(key_text, Pretty(value, highlighter=highlighter))\n        if items_table.row_count:\n            yield items_table\n        else:\n            yield self.highlighter(Text.from_markup(\n                f'[i][b]{not_shown_count}[/b] attribute(s) not shown.[/i] Run [b][red]inspect[/red]([not b]inspect[/])[/b] for options.'\n                ))\n",
                        "belong_class_name": "Inspect",
                        "belong_class_init": "def __init__(self, obj: Any, *, title: TextType=None, help: bool=False,\n    methods: bool=False, docs: bool=True, private: bool=False, dunder: bool\n    =False, sort: bool=True, all: bool=True, value: bool=True) ->None:\n    self.highlighter = ReprHighlighter()\n    self.obj = obj\n    self.title = title or self._make_title(obj)\n    if all:\n        methods = private = dunder = True\n    self.help = help\n    self.methods = methods\n    self.docs = docs or help\n    self.private = private or dunder\n    self.dunder = dunder\n    self.sort = sort\n    self.value = value\n"
                    }
                ]
            ]
        },
        "rich-919__inspect-92": {
            "poetry run pytest tests/test_inspect.py::test_broken_call_attr": [
                [
                    {
                        "function_name": "test_broken_call_attr",
                        "function_content": "@skip_py36\n@skip_py37\ndef test_broken_call_attr():\n\n\n    class NotCallable:\n        __call__ = 5\n\n        def __repr__(self):\n            return 'NotCallable()'\n\n\n    class Foo:\n        foo = NotCallable()\n    foo = Foo()\n    assert callable(foo.foo)\n    expected = \"\"\"\u256d\u2500 <class 'tests.test_inspect.test_broken_call_attr.<locals>.Foo'> \u2500\u256e\n\u2502 foo = NotCallable()                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\"\"\"\n    result = render(foo, methods=True, width=100)\n    print(repr(result))\n    assert expected == result\n",
                        "function_parameter": "()",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    },
                    {
                        "function_name": "render",
                        "function_content": "def render(obj, methods=False, value=False, width=50) ->str:\n    console = Console(file=io.StringIO(), width=width, legacy_windows=False)\n    inspect(obj, console=console, methods=methods, value=value)\n    return console.file.getvalue()\n",
                        "function_parameter": "(obj, methods=False, value=False, width=50)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "inspect",
                        "called_function_content": "def render(obj, methods=False, value=False, width=50) ->str:\n    console = Console(file=io.StringIO(), width=width, legacy_windows=False)\n    inspect(obj, console=console, methods=methods, value=value)\n",
                        "called_arguments": "(obj, console=console, methods=methods, value=value)",
                        "called_function_parameter": "(obj: Any, *, console: 'Console'=None, title: str=None, help:\n    bool=False, methods: bool=False, docs: bool=True, private: bool=False,\n    dunder: bool=False, sort: bool=True, all: bool=False, value: bool=True)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "inspect",
                        "function_content": "def inspect(obj: Any, *, console: 'Console'=None, title: str=None, help:\n    bool=False, methods: bool=False, docs: bool=True, private: bool=False,\n    dunder: bool=False, sort: bool=True, all: bool=False, value: bool=True):\n    \"\"\"Inspect any Python object.\n\n    * inspect(<OBJECT>) to see summarized info.\n    * inspect(<OBJECT>, methods=True) to see methods.\n    * inspect(<OBJECT>, help=True) to see full (non-abbreviated) help.\n    * inspect(<OBJECT>, private=True) to see private attributes (single underscore).\n    * inspect(<OBJECT>, dunder=True) to see attributes beginning with double underscore.\n    * inspect(<OBJECT>, all=True) to see all attributes.\n\n    Args:\n        obj (Any): An object to inspect.\n        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.\n        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.\n        methods (bool, optional): Enable inspection of callables. Defaults to False.\n        docs (bool, optional): Also render doc strings. Defaults to True.\n        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.\n        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.\n        sort (bool, optional): Sort attributes alphabetically. Defaults to True.\n        all (bool, optional): Show all attributes. Defaults to False.\n        value (bool, optional): Pretty print value. Defaults to True.\n    \"\"\"\n    _console = console or get_console()\n    from rich._inspect import Inspect\n    is_inspect = obj is inspect\n    _inspect = Inspect(obj, title=title, help=is_inspect or help, methods=\n        is_inspect or methods, docs=is_inspect or docs, private=private,\n        dunder=dunder, sort=sort, all=all, value=value)\n    _console.print(_inspect)\n",
                        "function_parameter": "(obj: Any, *, console: 'Console'=None, title: str=None, help:\n    bool=False, methods: bool=False, docs: bool=True, private: bool=False,\n    dunder: bool=False, sort: bool=True, all: bool=False, value: bool=True)",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null,
                        "called_function_name": "print",
                        "called_function_content": "def inspect(obj: Any, *, console: 'Console'=None, title: str=None, help:\n    bool=False, methods: bool=False, docs: bool=True, private: bool=False,\n    dunder: bool=False, sort: bool=True, all: bool=False, value: bool=True):\n    \"\"\"Inspect any Python object.\n\n    * inspect(<OBJECT>) to see summarized info.\n    * inspect(<OBJECT>, methods=True) to see methods.\n    * inspect(<OBJECT>, help=True) to see full (non-abbreviated) help.\n    * inspect(<OBJECT>, private=True) to see private attributes (single underscore).\n    * inspect(<OBJECT>, dunder=True) to see attributes beginning with double underscore.\n    * inspect(<OBJECT>, all=True) to see all attributes.\n\n    Args:\n        obj (Any): An object to inspect.\n        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.\n        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.\n        methods (bool, optional): Enable inspection of callables. Defaults to False.\n        docs (bool, optional): Also render doc strings. Defaults to True.\n        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.\n        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.\n        sort (bool, optional): Sort attributes alphabetically. Defaults to True.\n        all (bool, optional): Show all attributes. Defaults to False.\n        value (bool, optional): Pretty print value. Defaults to True.\n    \"\"\"\n    _console = console or get_console()\n    from rich._inspect import Inspect\n    is_inspect = obj is inspect\n    _inspect = Inspect(obj, title=title, help=is_inspect or help, methods=\n        is_inspect or methods, docs=is_inspect or docs, private=private,\n        dunder=dunder, sort=sort, all=all, value=value)\n    _console.print(_inspect)\n",
                        "called_arguments": "(_inspect)",
                        "called_function_parameter": "(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style]=\n    None, justify: JustifyMethod=None, overflow: OverflowMethod=None,\n    no_wrap: bool=None, emoji: bool=None, markup: bool=None, highlight:\n    bool=None, width: int=None, crop: bool=True, soft_wrap: bool=None)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "print",
                        "function_content": "def print(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style]=\n    None, justify: JustifyMethod=None, overflow: OverflowMethod=None,\n    no_wrap: bool=None, emoji: bool=None, markup: bool=None, highlight:\n    bool=None, width: int=None, crop: bool=True, soft_wrap: bool=None) ->None:\n    \"\"\"Print to the console.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): Justify method: \"default\", \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"ignore\", \"crop\", \"fold\", or \"ellipsis\". Defaults to None.\n            no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to ``None``.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to ``None``.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to ``None``.\n            width (Optional[int], optional): Width of output, or ``None`` to auto-detect. Defaults to ``None``.\n            crop (Optional[bool], optional): Crop output to width of terminal. Defaults to True.\n            soft_wrap (bool, optional): Enable soft wrap mode which disables word wrapping and cropping of text or None for\n                Console default. Defaults to ``None``.\n        \"\"\"\n    if not objects:\n        self.line()\n        return\n    if soft_wrap is None:\n        soft_wrap = self.soft_wrap\n    if soft_wrap:\n        if no_wrap is None:\n            no_wrap = True\n        if overflow is None:\n            overflow = 'ignore'\n        crop = False\n    with self:\n        renderables = self._collect_renderables(objects, sep, end, justify=\n            justify, emoji=emoji, markup=markup, highlight=highlight)\n        for hook in self._render_hooks:\n            renderables = hook.process_renderables(renderables)\n        render_options = self.options.update(justify='default', overflow=\n            overflow, width=min(width, self.width) if width else None,\n            no_wrap=no_wrap)\n        new_segments: List[Segment] = []\n        extend = new_segments.extend\n        render = self.render\n        if style is None:\n            for renderable in renderables:\n                extend(render(renderable, render_options))\n        else:\n            for renderable in renderables:\n                extend(Segment.apply_style(render(renderable,\n                    render_options), self.get_style(style)))\n        if crop:\n            buffer_extend = self._buffer.extend\n            for line in Segment.split_and_crop_lines(new_segments, self.\n                width, pad=False):\n                buffer_extend(line)\n        else:\n            self._buffer.extend(new_segments)\n",
                        "function_parameter": "(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style]=\n    None, justify: JustifyMethod=None, overflow: OverflowMethod=None,\n    no_wrap: bool=None, emoji: bool=None, markup: bool=None, highlight:\n    bool=None, width: int=None, crop: bool=True, soft_wrap: bool=None)",
                        "belong_class_content": "class Console:\n    \"\"\"A high level console interface.\n\n    Args:\n        color_system (str, optional): The color system supported by your terminal,\n            either ``\"standard\"``, ``\"256\"`` or ``\"truecolor\"``. Leave as ``\"auto\"`` to autodetect.\n        force_terminal (Optional[bool], optional): Enable/disable terminal control codes, or None to auto-detect terminal. Defaults to None.\n        force_jupyter (Optional[bool], optional): Enable/disable Jupyter rendering, or None to auto-detect Jupyter. Defaults to None.\n        soft_wrap (Optional[bool], optional): Set soft wrap default on print method. Defaults to False.\n        theme (Theme, optional): An optional style theme object, or ``None`` for default theme.\n        stderr (bool, optional): Use stderr rather than stdout if ``file `` is not specified. Defaults to False.\n        file (IO, optional): A file object where the console should write to. Defaults to stdout.\n        width (int, optional): The width of the terminal. Leave as default to auto-detect width.\n        height (int, optional): The height of the terminal. Leave as default to auto-detect height.\n        style (StyleType, optional): Style to apply to all output, or None for no style. Defaults to None.\n        no_color (Optional[bool], optional): Enabled no color mode, or None to auto detect. Defaults to None.\n        record (bool, optional): Boolean to enable recording of terminal output,\n            required to call :meth:`export_html` and :meth:`export_text`. Defaults to False.\n        markup (bool, optional): Boolean to enable :ref:`console_markup`. Defaults to True.\n        emoji (bool, optional): Enable emoji code. Defaults to True.\n        highlight (bool, optional): Enable automatic highlighting. Defaults to True.\n        log_time (bool, optional): Boolean to enable logging of time by :meth:`log` methods. Defaults to True.\n        log_path (bool, optional): Boolean to enable the logging of the caller by :meth:`log`. Defaults to True.\n        log_time_format (str, optional): Log time format if ``log_time`` is enabled. Defaults to \"[%X] \".\n        highlighter (HighlighterType, optional): Default highlighter.\n        legacy_windows (bool, optional): Enable legacy Windows mode, or ``None`` to auto detect. Defaults to ``None``.\n        safe_box (bool, optional): Restrict box options that don't render on legacy Windows.\n        get_datetime (Callable[[], datetime], optional): Callable that gets the current time as a datetime.datetime object (used by Console.log),\n            or None for datetime.now.\n        get_time (Callable[[], time], optional): Callable that gets the current time in seconds, default uses time.monotonic.\n    \"\"\"\n\n    def __init__(self, *, color_system: Optional[Literal['auto', 'standard',\n        '256', 'truecolor', 'windows']]='auto', force_terminal: bool=None,\n        force_jupyter: bool=None, soft_wrap: bool=False, theme: Theme=None,\n        stderr: bool=False, file: IO[str]=None, width: int=None, height:\n        int=None, style: StyleType=None, no_color: bool=None, tab_size: int\n        =8, record: bool=False, markup: bool=True, emoji: bool=True,\n        highlight: bool=True, log_time: bool=True, log_path: bool=True,\n        log_time_format: str='[%X]', highlighter: Optional[\n        'HighlighterType']=ReprHighlighter(), legacy_windows: bool=None,\n        safe_box: bool=True, get_datetime: Callable[[], datetime]=None,\n        get_time: Callable[[], float]=None, _environ: Dict[str, str]=None):\n        self._environ = os.environ if _environ is None else _environ\n        self.is_jupyter = _is_jupyter(\n            ) if force_jupyter is None else force_jupyter\n        if self.is_jupyter:\n            width = width or 93\n            height = height or 100\n        self.soft_wrap = soft_wrap\n        self._width = width\n        self._height = height\n        self.tab_size = tab_size\n        self.record = record\n        self._markup = markup\n        self._emoji = emoji\n        self._highlight = highlight\n        self.legacy_windows: bool = detect_legacy_windows(\n            ) and not self.is_jupyter if legacy_windows is None else legacy_windows\n        self._color_system: Optional[ColorSystem]\n        self._force_terminal = force_terminal\n        self._file = file\n        self.stderr = stderr\n        if color_system is None:\n            self._color_system = None\n        elif color_system == 'auto':\n            self._color_system = self._detect_color_system()\n        else:\n            self._color_system = COLOR_SYSTEMS[color_system]\n        self._lock = threading.RLock()\n        self._log_render = LogRender(show_time=log_time, show_path=log_path,\n            time_format=log_time_format)\n        self.highlighter: HighlighterType = highlighter or _null_highlighter\n        self.safe_box = safe_box\n        self.get_datetime = get_datetime or datetime.now\n        self.get_time = get_time or monotonic\n        self.style = style\n        self.no_color = (no_color if no_color is not None else 'NO_COLOR' in\n            self._environ)\n        self._record_buffer_lock = threading.RLock()\n        self._thread_locals = ConsoleThreadLocals(theme_stack=ThemeStack(\n            themes.DEFAULT if theme is None else theme))\n        self._record_buffer: List[Segment] = []\n        self._render_hooks: List[RenderHook] = []\n\n    def __repr__(self) ->str:\n        return f'<console width={self.width} {str(self._color_system)}>'\n\n    @property\n    def file(self) ->IO[str]:\n        \"\"\"Get the file object to write to.\"\"\"\n        file = self._file or (sys.stderr if self.stderr else sys.stdout)\n        file = getattr(file, 'rich_proxied_file', file)\n        return file\n\n    @file.setter\n    def file(self, new_file: IO[str]) ->None:\n        \"\"\"Set a new file object.\"\"\"\n        self._file = new_file\n\n    @property\n    def _buffer(self) ->List[Segment]:\n        \"\"\"Get a thread local buffer.\"\"\"\n        return self._thread_locals.buffer\n\n    @property\n    def _buffer_index(self) ->int:\n        \"\"\"Get a thread local buffer.\"\"\"\n        return self._thread_locals.buffer_index\n\n    @_buffer_index.setter\n    def _buffer_index(self, value: int) ->None:\n        self._thread_locals.buffer_index = value\n\n    @property\n    def _theme_stack(self) ->ThemeStack:\n        \"\"\"Get the thread local theme stack.\"\"\"\n        return self._thread_locals.theme_stack\n\n    def _detect_color_system(self) ->Optional[ColorSystem]:\n        \"\"\"Detect color system from env vars.\"\"\"\n        if self.is_jupyter:\n            return ColorSystem.TRUECOLOR\n        if not self.is_terminal or self.is_dumb_terminal:\n            return None\n        if WINDOWS:\n            if self.legacy_windows:\n                return ColorSystem.WINDOWS\n            windows_console_features = get_windows_console_features()\n            return (ColorSystem.TRUECOLOR if windows_console_features.\n                truecolor else ColorSystem.EIGHT_BIT)\n        else:\n            color_term = self._environ.get('COLORTERM', '').strip().lower()\n            if color_term in ('truecolor', '24bit'):\n                return ColorSystem.TRUECOLOR\n            term = self._environ.get('TERM', '').strip().lower()\n            _term_name, _hyphen, colors = term.partition('-')\n            color_system = _TERM_COLORS.get(colors, ColorSystem.STANDARD)\n            return color_system\n\n    def _enter_buffer(self) ->None:\n        \"\"\"Enter in to a buffer context, and buffer all output.\"\"\"\n        self._buffer_index += 1\n\n    def _exit_buffer(self) ->None:\n        \"\"\"Leave buffer context, and render content if required.\"\"\"\n        self._buffer_index -= 1\n        self._check_buffer()\n\n    def push_render_hook(self, hook: RenderHook) ->None:\n        \"\"\"Add a new render hook to the stack.\n\n        Args:\n            hook (RenderHook): Render hook instance.\n        \"\"\"\n        self._render_hooks.append(hook)\n\n    def pop_render_hook(self) ->None:\n        \"\"\"Pop the last renderhook from the stack.\"\"\"\n        self._render_hooks.pop()\n\n    def __enter__(self) ->'Console':\n        \"\"\"Own context manager to enter buffer context.\"\"\"\n        self._enter_buffer()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback) ->None:\n        \"\"\"Exit buffer context.\"\"\"\n        self._exit_buffer()\n\n    def begin_capture(self) ->None:\n        \"\"\"Begin capturing console output. Call :meth:`end_capture` to exit capture mode and return output.\"\"\"\n        self._enter_buffer()\n\n    def end_capture(self) ->str:\n        \"\"\"End capture mode and return captured string.\n\n        Returns:\n            str: Console output.\n        \"\"\"\n        render_result = self._render_buffer(self._buffer)\n        del self._buffer[:]\n        self._exit_buffer()\n        return render_result\n\n    def push_theme(self, theme: Theme, *, inherit: bool=True) ->None:\n        \"\"\"Push a new theme on to the top of the stack, replacing the styles from the previous theme.\n        Generally speaking, you should call :meth:`~rich.console.Console.use_theme` to get a context manager, rather\n        than calling this method directly.\n\n        Args:\n            theme (Theme): A theme instance.\n            inherit (bool, optional): Inherit existing styles. Defaults to True.\n        \"\"\"\n        self._theme_stack.push_theme(theme, inherit=inherit)\n\n    def pop_theme(self) ->None:\n        \"\"\"Remove theme from top of stack, restoring previous theme.\"\"\"\n        self._theme_stack.pop_theme()\n\n    def use_theme(self, theme: Theme, *, inherit: bool=True) ->ThemeContext:\n        \"\"\"Use a different theme for the duration of the context manager.\n\n        Args:\n            theme (Theme): Theme instance to user.\n            inherit (bool, optional): Inherit existing console styles. Defaults to True.\n\n        Returns:\n            ThemeContext: [description]\n        \"\"\"\n        return ThemeContext(self, theme, inherit)\n\n    @property\n    def color_system(self) ->Optional[str]:\n        \"\"\"Get color system string.\n\n        Returns:\n            Optional[str]: \"standard\", \"256\" or \"truecolor\".\n        \"\"\"\n        if self._color_system is not None:\n            return _COLOR_SYSTEMS_NAMES[self._color_system]\n        else:\n            return None\n\n    @property\n    def encoding(self) ->str:\n        \"\"\"Get the encoding of the console file, e.g. ``\"utf-8\"``.\n\n        Returns:\n            str: A standard encoding string.\n        \"\"\"\n        return (getattr(self.file, 'encoding', 'utf-8') or 'utf-8').lower()\n\n    @property\n    def is_terminal(self) ->bool:\n        \"\"\"Check if the console is writing to a terminal.\n\n        Returns:\n            bool: True if the console writing to a device capable of\n            understanding terminal codes, otherwise False.\n        \"\"\"\n        if self._force_terminal is not None:\n            return self._force_terminal\n        isatty = getattr(self.file, 'isatty', None)\n        return False if isatty is None else isatty()\n\n    @property\n    def is_dumb_terminal(self) ->bool:\n        \"\"\"Detect dumb terminal.\n\n        Returns:\n            bool: True if writing to a dumb terminal, otherwise False.\n\n        \"\"\"\n        _term = self._environ.get('TERM', '')\n        is_dumb = _term.lower() in ('dumb', 'unknown')\n        return self.is_terminal and is_dumb\n\n    @property\n    def options(self) ->ConsoleOptions:\n        \"\"\"Get default console options.\"\"\"\n        return ConsoleOptions(legacy_windows=self.legacy_windows, min_width\n            =1, max_width=self.width, encoding=self.encoding, is_terminal=\n            self.is_terminal)\n\n    @property\n    def size(self) ->ConsoleDimensions:\n        \"\"\"Get the size of the console.\n\n        Returns:\n            ConsoleDimensions: A named tuple containing the dimensions.\n        \"\"\"\n        if self._width is not None and self._height is not None:\n            return ConsoleDimensions(self._width, self._height)\n        if self.is_dumb_terminal:\n            return ConsoleDimensions(80, 25)\n        width: Optional[int] = None\n        height: Optional[int] = None\n        if WINDOWS:\n            width, height = shutil.get_terminal_size()\n        else:\n            try:\n                width, height = os.get_terminal_size(sys.stdin.fileno())\n            except (AttributeError, ValueError, OSError):\n                try:\n                    width, height = os.get_terminal_size(sys.stdout.fileno())\n                except (AttributeError, ValueError, OSError):\n                    pass\n        width = width or 80\n        height = height or 25\n        return ConsoleDimensions(width - self.legacy_windows if self._width is\n            None else self._width, height if self._height is None else self\n            ._height)\n\n    @property\n    def width(self) ->int:\n        \"\"\"Get the width of the console.\n\n        Returns:\n            int: The width (in characters) of the console.\n        \"\"\"\n        width, _ = self.size\n        return width\n\n    def bell(self) ->None:\n        \"\"\"Play a 'bell' sound (if supported by the terminal).\"\"\"\n        self.control('\\x07')\n\n    def capture(self) ->Capture:\n        \"\"\"A context manager to *capture* the result of print() or log() in a string,\n        rather than writing it to the console.\n\n        Example:\n            >>> from rich.console import Console\n            >>> console = Console()\n            >>> with console.capture() as capture:\n            ...     console.print(\"[bold magenta]Hello World[/]\")\n            >>> print(capture.get())\n\n        Returns:\n            Capture: Context manager with disables writing to the terminal.\n        \"\"\"\n        capture = Capture(self)\n        return capture\n\n    def pager(self, pager: Pager=None, styles: bool=False, links: bool=False\n        ) ->PagerContext:\n        \"\"\"A context manager to display anything printed within a \"pager\". The pager application\n        is defined by the system and will typically support at least pressing a key to scroll.\n\n        Args:\n            pager (Pager, optional): A pager object, or None to use :class:~rich.pager.SystemPager`. Defaults to None.\n            styles (bool, optional): Show styles in pager. Defaults to False.\n            links (bool, optional): Show links in pager. Defaults to False.\n\n        Example:\n            >>> from rich.console import Console\n            >>> from rich.__main__ import make_test_card\n            >>> console = Console()\n            >>> with console.pager():\n                    console.print(make_test_card())\n\n        Returns:\n            PagerContext: A context manager.\n        \"\"\"\n        return PagerContext(self, pager=pager, styles=styles, links=links)\n\n    def line(self, count: int=1) ->None:\n        \"\"\"Write new line(s).\n\n        Args:\n            count (int, optional): Number of new lines. Defaults to 1.\n        \"\"\"\n        assert count >= 0, 'count must be >= 0'\n        if count:\n            self._buffer.append(Segment('\\n' * count))\n            self._check_buffer()\n\n    def clear(self, home: bool=True) ->None:\n        \"\"\"Clear the screen.\n\n        Args:\n            home (bool, optional): Also move the cursor to 'home' position. Defaults to True.\n        \"\"\"\n        self.control('\\x1b[2J\\x1b[H' if home else '\\x1b[2J')\n\n    def status(self, status: RenderableType, spinner: str='dots',\n        spinner_style: str='status.spinner', speed: float=1.0,\n        refresh_per_second: float=12.5) ->'Status':\n        \"\"\"Display a status and spinner.\n\n        Args:\n            status (RenderableType): A status renderable (str or Text typically).\n            console (Console, optional): Console instance to use, or None for global console. Defaults to None.\n            spinner (str, optional): Name of spinner animation (see python -m rich.spinner). Defaults to \"dots\".\n            spinner_style (StyleType, optional): Style of spinner. Defaults to \"status.spinner\".\n            speed (float, optional): Speed factor for spinner animation. Defaults to 1.0.\n            refresh_per_second (float, optional): Number of refreshes per second. Defaults to 12.5.\n\n        Returns:\n            Status: A Status object that may be used as a context manager.\n        \"\"\"\n        from .status import Status\n        status_renderable = Status(status, console=self, spinner=spinner,\n            spinner_style=spinner_style, speed=speed, refresh_per_second=\n            refresh_per_second)\n        return status_renderable\n\n    def show_cursor(self, show: bool=True) ->None:\n        \"\"\"Show or hide the cursor.\n\n        Args:\n            show (bool, optional): Set visibility of the cursor.\n        \"\"\"\n        if self.is_terminal and not self.legacy_windows:\n            self.control('\\x1b[?25h' if show else '\\x1b[?25l')\n\n    def render(self, renderable: RenderableType, options: ConsoleOptions=None\n        ) ->Iterable[Segment]:\n        \"\"\"Render an object in to an iterable of `Segment` instances.\n\n        This method contains the logic for rendering objects with the console protocol.\n        You are unlikely to need to use it directly, unless you are extending the library.\n\n        Args:\n            renderable (RenderableType): An object supporting the console protocol, or\n                an object that may be converted to a string.\n            options (ConsoleOptions, optional): An options object, or None to use self.options. Defaults to None.\n\n        Returns:\n            Iterable[Segment]: An iterable of segments that may be rendered.\n        \"\"\"\n        _options = options or self.options\n        if _options.max_width < 1:\n            return\n        render_iterable: RenderResult\n        if isinstance(renderable, RichCast):\n            renderable = renderable.__rich__()\n        if isinstance(renderable, ConsoleRenderable):\n            render_iterable = renderable.__rich_console__(self, _options)\n        elif isinstance(renderable, str):\n            yield from self.render(self.render_str(renderable, highlight=\n                _options.highlight), _options)\n            return\n        else:\n            raise errors.NotRenderableError(\n                f'Unable to render {renderable!r}; A str, Segment or object with __rich_console__ method is required'\n                )\n        try:\n            iter_render = iter(render_iterable)\n        except TypeError:\n            raise errors.NotRenderableError(\n                f'object {render_iterable!r} is not renderable')\n        for render_output in iter_render:\n            if isinstance(render_output, Segment):\n                yield render_output\n            else:\n                yield from self.render(render_output, _options)\n\n    def render_lines(self, renderable: RenderableType, options: Optional[\n        ConsoleOptions]=None, *, style: Optional[Style]=None, pad: bool=True\n        ) ->List[List[Segment]]:\n        \"\"\"Render objects in to a list of lines.\n\n        The output of render_lines is useful when further formatting of rendered console text\n        is required, such as the Panel class which draws a border around any renderable object.\n\n        Args:\n            renderable (RenderableType): Any object renderable in the console.\n            options (Optional[ConsoleOptions], optional): Console options, or None to use self.options. Default to ``None``.\n            style (Style, optional): Optional style to apply to renderables. Defaults to ``None``.\n            pad (bool, optional): Pad lines shorter than render width. Defaults to ``True``.\n\n        Returns:\n            List[List[Segment]]: A list of lines, where a line is a list of Segment objects.\n        \"\"\"\n        render_options = options or self.options\n        _rendered = self.render(renderable, render_options)\n        if style is not None:\n            _rendered = Segment.apply_style(_rendered, style)\n        lines = list(Segment.split_and_crop_lines(_rendered, render_options\n            .max_width, include_new_lines=False, pad=pad))\n        return lines\n\n    def render_str(self, text: str, *, style: Union[str, Style]='', justify:\n        JustifyMethod=None, overflow: OverflowMethod=None, emoji: bool=None,\n        markup: bool=None, highlight: bool=None, highlighter:\n        HighlighterType=None) ->'Text':\n        \"\"\"Convert a string to a Text instance. This is is called automatically if\n        you print or log a string.\n\n        Args:\n            text (str): Text to render.\n            style (Union[str, Style], optional): Style to apply to rendered text.\n            justify (str, optional): Justify method: \"default\", \"left\", \"center\", \"full\", or \"right\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", or \"ellipsis\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji, or ``None`` to use Console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use Console default.\n            highlight (Optional[bool], optional): Enable highlighting, or ``None`` to use Console default.\n            highlighter (HighlighterType, optional): Optional highlighter to apply.\n        Returns:\n            ConsoleRenderable: Renderable object.\n\n        \"\"\"\n        emoji_enabled = emoji or emoji is None and self._emoji\n        markup_enabled = markup or markup is None and self._markup\n        highlight_enabled = highlight or highlight is None and self._highlight\n        if markup_enabled:\n            rich_text = render_markup(text, style=style, emoji=emoji_enabled)\n            rich_text.justify = justify\n            rich_text.overflow = overflow\n        else:\n            rich_text = Text(_emoji_replace(text) if emoji_enabled else\n                text, justify=justify, overflow=overflow, style=style)\n        _highlighter = (highlighter or self.highlighter if\n            highlight_enabled else None)\n        if _highlighter is not None:\n            highlight_text = _highlighter(str(rich_text))\n            highlight_text.copy_styles(rich_text)\n            return highlight_text\n        return rich_text\n\n    def get_style(self, name: Union[str, Style], *, default: Union[Style,\n        str]=None) ->Style:\n        \"\"\"Get a Style instance by it's theme name or parse a definition.\n\n        Args:\n            name (str): The name of a style or a style definition.\n\n        Returns:\n            Style: A Style object.\n\n        Raises:\n            MissingStyle: If no style could be parsed from name.\n\n        \"\"\"\n        if isinstance(name, Style):\n            return name\n        try:\n            style = self._theme_stack.get(name)\n            if style is None:\n                style = Style.parse(name)\n            return style.copy() if style.link else style\n        except errors.StyleSyntaxError as error:\n            if default is not None:\n                return self.get_style(default)\n            raise errors.MissingStyle(f'Failed to get style {name!r}; {error}')\n\n    def _collect_renderables(self, objects: Iterable[Any], sep: str, end:\n        str, *, justify: JustifyMethod=None, emoji: bool=None, markup: bool\n        =None, highlight: bool=None) ->List[ConsoleRenderable]:\n        \"\"\"Combined a number of renderables and text in to one renderable.\n\n        Args:\n            objects (Iterable[Any]): Anything that Rich can render.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            justify (str, optional): One of \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default.\n\n        Returns:\n            List[ConsoleRenderable]: A list oxf things to render.\n        \"\"\"\n        renderables: List[ConsoleRenderable] = []\n        _append = renderables.append\n        text: List[Text] = []\n        append_text = text.append\n        append = _append\n        if justify in ('left', 'center', 'right'):\n\n            def align_append(renderable: RenderableType) ->None:\n                _append(Align(renderable, cast(AlignMethod, justify)))\n            append = align_append\n        _highlighter: HighlighterType = _null_highlighter\n        if highlight or highlight is None and self._highlight:\n            _highlighter = self.highlighter\n\n        def check_text() ->None:\n            if text:\n                sep_text = Text(sep, justify=justify, end=end)\n                append(sep_text.join(text))\n                del text[:]\n        for renderable in objects:\n            if hasattr(renderable, 'jwevpw_eors4dfo6mwo345ermk7kdnfnwerwer'):\n                renderable = repr(renderable)\n            rich_cast = getattr(renderable, '__rich__', None)\n            if rich_cast:\n                renderable = rich_cast()\n            if isinstance(renderable, str):\n                append_text(self.render_str(renderable, emoji=emoji, markup\n                    =markup, highlighter=_highlighter))\n            elif isinstance(renderable, ConsoleRenderable):\n                check_text()\n                append(renderable)\n            elif isinstance(renderable, (abc.Mapping, abc.Sequence, abc.Set)):\n                check_text()\n                append(Pretty(renderable, highlighter=_highlighter))\n            else:\n                append_text(_highlighter(str(renderable)))\n        check_text()\n        if self.style is not None:\n            style = self.get_style(self.style)\n            renderables = [Styled(renderable, style) for renderable in\n                renderables]\n        return renderables\n\n    def rule(self, title: TextType='', *, characters: str='\u2500', style: Union\n        [str, Style]='rule.line', align: AlignMethod='center') ->None:\n        \"\"\"Draw a line with optional centered title.\n\n        Args:\n            title (str, optional): Text to render over the rule. Defaults to \"\".\n            characters (str, optional): Character(s) to form the line. Defaults to \"\u2500\".\n            style (str, optional): Style of line. Defaults to \"rule.line\".\n            align (str, optional): How to align the title, one of \"left\", \"center\", or \"right\". Defaults to \"center\".\n        \"\"\"\n        from .rule import Rule\n        rule = Rule(title=title, characters=characters, style=style, align=\n            align)\n        self.print(rule)\n\n    def control(self, control_codes: Union['Control', str]) ->None:\n        \"\"\"Insert non-printing control codes.\n\n        Args:\n            control_codes (str): Control codes, such as those that may move the cursor.\n        \"\"\"\n        if not self.is_dumb_terminal:\n            self._buffer.append(Segment.control(str(control_codes)))\n            self._check_buffer()\n\n    def out(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style\n        ]=None, highlight: bool=None) ->None:\n        \"\"\"Output to the terminal. This is a low-level way of writing to the terminal which unlike\n        :meth:`~rich.console.Console.print` won't pretty print, wrap text, or apply markup, but will\n        optionally apply highlighting and a basic style.\n\n        Args:\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use\n                console default. Defaults to ``None``.\n        \"\"\"\n        raw_output: str = sep.join(str(_object) for _object in objects)\n        self.print(raw_output, style=style, highlight=highlight, emoji=\n            False, markup=False, no_wrap=True, overflow='ignore', crop=\n            False, end=end)\n\n    def print(self, *objects: Any, sep=' ', end='\\n', style: Union[str,\n        Style]=None, justify: JustifyMethod=None, overflow: OverflowMethod=\n        None, no_wrap: bool=None, emoji: bool=None, markup: bool=None,\n        highlight: bool=None, width: int=None, crop: bool=True, soft_wrap:\n        bool=None) ->None:\n        \"\"\"Print to the console.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): Justify method: \"default\", \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"ignore\", \"crop\", \"fold\", or \"ellipsis\". Defaults to None.\n            no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to ``None``.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to ``None``.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to ``None``.\n            width (Optional[int], optional): Width of output, or ``None`` to auto-detect. Defaults to ``None``.\n            crop (Optional[bool], optional): Crop output to width of terminal. Defaults to True.\n            soft_wrap (bool, optional): Enable soft wrap mode which disables word wrapping and cropping of text or None for\n                Console default. Defaults to ``None``.\n        \"\"\"\n        if not objects:\n            self.line()\n            return\n        if soft_wrap is None:\n            soft_wrap = self.soft_wrap\n        if soft_wrap:\n            if no_wrap is None:\n                no_wrap = True\n            if overflow is None:\n                overflow = 'ignore'\n            crop = False\n        with self:\n            renderables = self._collect_renderables(objects, sep, end,\n                justify=justify, emoji=emoji, markup=markup, highlight=\n                highlight)\n            for hook in self._render_hooks:\n                renderables = hook.process_renderables(renderables)\n            render_options = self.options.update(justify='default',\n                overflow=overflow, width=min(width, self.width) if width else\n                None, no_wrap=no_wrap)\n            new_segments: List[Segment] = []\n            extend = new_segments.extend\n            render = self.render\n            if style is None:\n                for renderable in renderables:\n                    extend(render(renderable, render_options))\n            else:\n                for renderable in renderables:\n                    extend(Segment.apply_style(render(renderable,\n                        render_options), self.get_style(style)))\n            if crop:\n                buffer_extend = self._buffer.extend\n                for line in Segment.split_and_crop_lines(new_segments, self\n                    .width, pad=False):\n                    buffer_extend(line)\n            else:\n                self._buffer.extend(new_segments)\n\n    def print_exception(self, *, width: Optional[int]=100, extra_lines: int\n        =3, theme: Optional[str]=None, word_wrap: bool=False, show_locals:\n        bool=False) ->None:\n        \"\"\"Prints a rich render of the last exception and traceback.\n\n        Args:\n            width (Optional[int], optional): Number of characters used to render code. Defaults to 88.\n            extra_lines (int, optional): Additional lines of code to render. Defaults to 3.\n            theme (str, optional): Override pygments theme used in traceback\n            word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.\n            show_locals (bool, optional): Enable display of local variables. Defaults to False.\n        \"\"\"\n        from .traceback import Traceback\n        traceback = Traceback(width=width, extra_lines=extra_lines, theme=\n            theme, word_wrap=word_wrap, show_locals=show_locals)\n        self.print(traceback)\n\n    def log(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style\n        ]=None, justify: JustifyMethod=None, emoji: bool=None, markup: bool\n        =None, highlight: bool=None, log_locals: bool=False, _stack_offset=1\n        ) ->None:\n        \"\"\"Log rich content to the terminal.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): One of \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", or \"ellipsis\". Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to None.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to None.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to None.\n            log_locals (bool, optional): Boolean to enable logging of locals where ``log()``\n                was called. Defaults to False.\n            _stack_offset (int, optional): Offset of caller from end of call stack. Defaults to 1.\n        \"\"\"\n        if not objects:\n            self.line()\n            return\n        with self:\n            renderables = self._collect_renderables(objects, sep, end,\n                justify=justify, emoji=emoji, markup=markup, highlight=\n                highlight)\n            if style is not None:\n                renderables = [Styled(renderable, style) for renderable in\n                    renderables]\n            caller = inspect.stack()[_stack_offset]\n            link_path = None if caller.filename.startswith('<'\n                ) else os.path.abspath(caller.filename)\n            path = caller.filename.rpartition(os.sep)[-1]\n            line_no = caller.lineno\n            if log_locals:\n                locals_map = {key: value for key, value in caller.frame.\n                    f_locals.items() if not key.startswith('__')}\n                renderables.append(render_scope(locals_map, title='[i]locals'))\n            renderables = [self._log_render(self, renderables, log_time=\n                self.get_datetime(), path=path, line_no=line_no, link_path=\n                link_path)]\n            for hook in self._render_hooks:\n                renderables = hook.process_renderables(renderables)\n            new_segments: List[Segment] = []\n            extend = new_segments.extend\n            render = self.render\n            render_options = self.options\n            for renderable in renderables:\n                extend(render(renderable, render_options))\n            buffer_extend = self._buffer.extend\n            for line in Segment.split_and_crop_lines(new_segments, self.\n                width, pad=False):\n                buffer_extend(line)\n\n    def _check_buffer(self) ->None:\n        \"\"\"Check if the buffer may be rendered.\"\"\"\n        with self._lock:\n            if self._buffer_index == 0:\n                if self.is_jupyter:\n                    from .jupyter import display\n                    display(self._buffer)\n                    del self._buffer[:]\n                else:\n                    text = self._render_buffer(self._buffer[:])\n                    del self._buffer[:]\n                    if text:\n                        try:\n                            if WINDOWS:\n                                write = self.file.write\n                                for line in text.splitlines(True):\n                                    write(line)\n                            else:\n                                self.file.write(text)\n                            self.file.flush()\n                        except UnicodeEncodeError as error:\n                            error.reason = f\"\"\"{error.reason}\n*** You may need to add PYTHONIOENCODING=utf-8 to your environment ***\"\"\"\n                            raise\n\n    def _render_buffer(self, buffer: Iterable[Segment]) ->str:\n        \"\"\"Render buffered output, and clear buffer.\"\"\"\n        output: List[str] = []\n        append = output.append\n        color_system = self._color_system\n        legacy_windows = self.legacy_windows\n        if self.record:\n            with self._record_buffer_lock:\n                self._record_buffer.extend(buffer)\n        not_terminal = not self.is_terminal\n        if self.no_color and color_system:\n            buffer = Segment.remove_color(buffer)\n        for text, style, is_control in buffer:\n            if style:\n                append(style.render(text, color_system=color_system,\n                    legacy_windows=legacy_windows))\n            elif not (not_terminal and is_control):\n                append(text)\n        rendered = ''.join(output)\n        return rendered\n\n    def input(self, prompt: TextType='', *, markup: bool=True, emoji: bool=\n        True, password: bool=False, stream: TextIO=None) ->str:\n        \"\"\"Displays a prompt and waits for input from the user. The prompt may contain color / style.\n\n        Args:\n            prompt (Union[str, Text]): Text to render in the prompt.\n            markup (bool, optional): Enable console markup (requires a str prompt). Defaults to True.\n            emoji (bool, optional): Enable emoji (requires a str prompt). Defaults to True.\n            password: (bool, optional): Hide typed text. Defaults to False.\n            stream: (TextIO, optional): Optional file to read input from (rather than stdin). Defaults to None.\n\n        Returns:\n            str: Text read from stdin.\n        \"\"\"\n        prompt_str = ''\n        if prompt:\n            with self.capture() as capture:\n                self.print(prompt, markup=markup, emoji=emoji, end='')\n            prompt_str = capture.get()\n        if self.legacy_windows:\n            self.file.write(prompt_str)\n            prompt_str = ''\n        if password:\n            result = getpass(prompt_str, stream=stream)\n        elif stream:\n            self.file.write(prompt_str)\n            result = stream.readline()\n        else:\n            result = input(prompt_str)\n        return result\n\n    def export_text(self, *, clear: bool=True, styles: bool=False) ->str:\n        \"\"\"Generate text from console contents (requires record=True argument in constructor).\n\n        Args:\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            styles (bool, optional): If ``True``, ansi escape codes will be included. ``False`` for plain text.\n                Defaults to ``False``.\n\n        Returns:\n            str: String containing console contents.\n\n        \"\"\"\n        assert self.record, 'To export console contents set record=True in the constructor or instance'\n        with self._record_buffer_lock:\n            if styles:\n                text = ''.join(style.render(text) if style else text for \n                    text, style, _ in self._record_buffer)\n            else:\n                text = ''.join(segment.text for segment in self.\n                    _record_buffer if not segment.is_control)\n            if clear:\n                del self._record_buffer[:]\n        return text\n\n    def save_text(self, path: str, *, clear: bool=True, styles: bool=False\n        ) ->None:\n        \"\"\"Generate text from console and save to a given location (requires record=True argument in constructor).\n\n        Args:\n            path (str): Path to write text files.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            styles (bool, optional): If ``True``, ansi style codes will be included. ``False`` for plain text.\n                Defaults to ``False``.\n\n        \"\"\"\n        text = self.export_text(clear=clear, styles=styles)\n        with open(path, 'wt', encoding='utf-8') as write_file:\n            write_file.write(text)\n\n    def export_html(self, *, theme: TerminalTheme=None, clear: bool=True,\n        code_format: str=None, inline_styles: bool=False) ->str:\n        \"\"\"Generate HTML from console contents (requires record=True argument in constructor).\n\n        Args:\n            theme (TerminalTheme, optional): TerminalTheme object containing console colors.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            code_format (str, optional): Format string to render HTML, should contain {foreground}\n                {background} and {code}.\n            inline_styles (bool, optional): If ``True`` styles will be inlined in to spans, which makes files\n                larger but easier to cut and paste markup. If ``False``, styles will be embedded in a style tag.\n                Defaults to False.\n\n        Returns:\n            str: String containing console contents as HTML.\n        \"\"\"\n        assert self.record, 'To export console contents set record=True in the constructor or instance'\n        fragments: List[str] = []\n        append = fragments.append\n        _theme = theme or DEFAULT_TERMINAL_THEME\n        stylesheet = ''\n\n        def escape(text: str) ->str:\n            \"\"\"Escape html.\"\"\"\n            return text.replace('&', '&amp;').replace('<', '&lt;').replace('>',\n                '&gt;')\n        render_code_format = (CONSOLE_HTML_FORMAT if code_format is None else\n            code_format)\n        with self._record_buffer_lock:\n            if inline_styles:\n                for text, style, _ in Segment.filter_control(Segment.\n                    simplify(self._record_buffer)):\n                    text = escape(text)\n                    if style:\n                        rule = style.get_html_style(_theme)\n                        text = (f'<span style=\"{rule}\">{text}</span>' if\n                            rule else text)\n                        if style.link:\n                            text = f'<a href=\"{style.link}\">{text}</a>'\n                    append(text)\n            else:\n                styles: Dict[str, int] = {}\n                for text, style, _ in Segment.filter_control(Segment.\n                    simplify(self._record_buffer)):\n                    text = escape(text)\n                    if style:\n                        rule = style.get_html_style(_theme)\n                        if rule:\n                            style_number = styles.setdefault(rule, len(\n                                styles) + 1)\n                            text = (\n                                f'<span class=\"r{style_number}\">{text}</span>')\n                        if style.link:\n                            text = f'<a href=\"{style.link}\">{text}</a>'\n                    append(text)\n                stylesheet_rules: List[str] = []\n                stylesheet_append = stylesheet_rules.append\n                for style_rule, style_number in styles.items():\n                    if style_rule:\n                        stylesheet_append(f'.r{style_number} {{{style_rule}}}')\n                stylesheet = '\\n'.join(stylesheet_rules)\n            rendered_code = render_code_format.format(code=''.join(\n                fragments), stylesheet=stylesheet, foreground=_theme.\n                foreground_color.hex, background=_theme.background_color.hex)\n            if clear:\n                del self._record_buffer[:]\n        return rendered_code\n\n    def save_html(self, path: str, *, theme: TerminalTheme=None, clear:\n        bool=True, code_format=CONSOLE_HTML_FORMAT, inline_styles: bool=False\n        ) ->None:\n        \"\"\"Generate HTML from console contents and write to a file (requires record=True argument in constructor).\n\n        Args:\n            path (str): Path to write html file.\n            theme (TerminalTheme, optional): TerminalTheme object containing console colors.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            code_format (str, optional): Format string to render HTML, should contain {foreground}\n                {background} and {code}.\n            inline_styles (bool, optional): If ``True`` styles will be inlined in to spans, which makes files\n                larger but easier to cut and paste markup. If ``False``, styles will be embedded in a style tag.\n                Defaults to False.\n\n        \"\"\"\n        html = self.export_html(theme=theme, clear=clear, code_format=\n            code_format, inline_styles=inline_styles)\n        with open(path, 'wt', encoding='utf-8') as write_file:\n            write_file.write(html)\n",
                        "belong_class_name": "Console",
                        "belong_class_init": "def __init__(self, *, color_system: Optional[Literal['auto', 'standard',\n    '256', 'truecolor', 'windows']]='auto', force_terminal: bool=None,\n    force_jupyter: bool=None, soft_wrap: bool=False, theme: Theme=None,\n    stderr: bool=False, file: IO[str]=None, width: int=None, height: int=\n    None, style: StyleType=None, no_color: bool=None, tab_size: int=8,\n    record: bool=False, markup: bool=True, emoji: bool=True, highlight:\n    bool=True, log_time: bool=True, log_path: bool=True, log_time_format:\n    str='[%X]', highlighter: Optional['HighlighterType']=ReprHighlighter(),\n    legacy_windows: bool=None, safe_box: bool=True, get_datetime: Callable[\n    [], datetime]=None, get_time: Callable[[], float]=None, _environ: Dict[\n    str, str]=None):\n    self._environ = os.environ if _environ is None else _environ\n    self.is_jupyter = _is_jupyter() if force_jupyter is None else force_jupyter\n    if self.is_jupyter:\n        width = width or 93\n        height = height or 100\n    self.soft_wrap = soft_wrap\n    self._width = width\n    self._height = height\n    self.tab_size = tab_size\n    self.record = record\n    self._markup = markup\n    self._emoji = emoji\n    self._highlight = highlight\n    self.legacy_windows: bool = detect_legacy_windows(\n        ) and not self.is_jupyter if legacy_windows is None else legacy_windows\n    self._color_system: Optional[ColorSystem]\n    self._force_terminal = force_terminal\n    self._file = file\n    self.stderr = stderr\n    if color_system is None:\n        self._color_system = None\n    elif color_system == 'auto':\n        self._color_system = self._detect_color_system()\n    else:\n        self._color_system = COLOR_SYSTEMS[color_system]\n    self._lock = threading.RLock()\n    self._log_render = LogRender(show_time=log_time, show_path=log_path,\n        time_format=log_time_format)\n    self.highlighter: HighlighterType = highlighter or _null_highlighter\n    self.safe_box = safe_box\n    self.get_datetime = get_datetime or datetime.now\n    self.get_time = get_time or monotonic\n    self.style = style\n    self.no_color = (no_color if no_color is not None else 'NO_COLOR' in\n        self._environ)\n    self._record_buffer_lock = threading.RLock()\n    self._thread_locals = ConsoleThreadLocals(theme_stack=ThemeStack(themes\n        .DEFAULT if theme is None else theme))\n    self._record_buffer: List[Segment] = []\n    self._render_hooks: List[RenderHook] = []\n",
                        "called_function_name": "_collect_renderables",
                        "called_function_content": "def print(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style]=\n    None, justify: JustifyMethod=None, overflow: OverflowMethod=None,\n    no_wrap: bool=None, emoji: bool=None, markup: bool=None, highlight:\n    bool=None, width: int=None, crop: bool=True, soft_wrap: bool=None) ->None:\n    \"\"\"Print to the console.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): Justify method: \"default\", \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"ignore\", \"crop\", \"fold\", or \"ellipsis\". Defaults to None.\n            no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to ``None``.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to ``None``.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to ``None``.\n            width (Optional[int], optional): Width of output, or ``None`` to auto-detect. Defaults to ``None``.\n            crop (Optional[bool], optional): Crop output to width of terminal. Defaults to True.\n            soft_wrap (bool, optional): Enable soft wrap mode which disables word wrapping and cropping of text or None for\n                Console default. Defaults to ``None``.\n        \"\"\"\n    if not objects:\n        self.line()\n        return\n    if soft_wrap is None:\n        soft_wrap = self.soft_wrap\n    if soft_wrap:\n        if no_wrap is None:\n            no_wrap = True\n        if overflow is None:\n            overflow = 'ignore'\n        crop = False\n    with self:\n        renderables = self._collect_renderables(objects, sep, end, justify=\n            justify, emoji=emoji, markup=markup, highlight=highlight)\n",
                        "called_arguments": "(objects, sep, end, justify=\n            justify, emoji=emoji, markup=markup, highlight=highlight)",
                        "called_function_parameter": "(self, objects: Iterable[Any], sep: str, end: str,\n    *, justify: JustifyMethod=None, emoji: bool=None, markup: bool=None,\n    highlight: bool=None)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_collect_renderables",
                        "function_content": "def _collect_renderables(self, objects: Iterable[Any], sep: str, end: str,\n    *, justify: JustifyMethod=None, emoji: bool=None, markup: bool=None,\n    highlight: bool=None) ->List[ConsoleRenderable]:\n    \"\"\"Combined a number of renderables and text in to one renderable.\n\n        Args:\n            objects (Iterable[Any]): Anything that Rich can render.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            justify (str, optional): One of \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default.\n\n        Returns:\n            List[ConsoleRenderable]: A list oxf things to render.\n        \"\"\"\n    renderables: List[ConsoleRenderable] = []\n    _append = renderables.append\n    text: List[Text] = []\n    append_text = text.append\n    append = _append\n    if justify in ('left', 'center', 'right'):\n\n        def align_append(renderable: RenderableType) ->None:\n            _append(Align(renderable, cast(AlignMethod, justify)))\n        append = align_append\n    _highlighter: HighlighterType = _null_highlighter\n    if highlight or highlight is None and self._highlight:\n        _highlighter = self.highlighter\n\n    def check_text() ->None:\n        if text:\n            sep_text = Text(sep, justify=justify, end=end)\n            append(sep_text.join(text))\n            del text[:]\n    for renderable in objects:\n        if hasattr(renderable, 'jwevpw_eors4dfo6mwo345ermk7kdnfnwerwer'):\n            renderable = repr(renderable)\n        rich_cast = getattr(renderable, '__rich__', None)\n        if rich_cast:\n            renderable = rich_cast()\n        if isinstance(renderable, str):\n            append_text(self.render_str(renderable, emoji=emoji, markup=\n                markup, highlighter=_highlighter))\n        elif isinstance(renderable, ConsoleRenderable):\n            check_text()\n            append(renderable)\n        elif isinstance(renderable, (abc.Mapping, abc.Sequence, abc.Set)):\n            check_text()\n            append(Pretty(renderable, highlighter=_highlighter))\n        else:\n            append_text(_highlighter(str(renderable)))\n    check_text()\n    if self.style is not None:\n        style = self.get_style(self.style)\n        renderables = [Styled(renderable, style) for renderable in renderables]\n    return renderables\n",
                        "function_parameter": "(self, objects: Iterable[Any], sep: str, end: str,\n    *, justify: JustifyMethod=None, emoji: bool=None, markup: bool=None,\n    highlight: bool=None)",
                        "belong_class_content": "class Console:\n    \"\"\"A high level console interface.\n\n    Args:\n        color_system (str, optional): The color system supported by your terminal,\n            either ``\"standard\"``, ``\"256\"`` or ``\"truecolor\"``. Leave as ``\"auto\"`` to autodetect.\n        force_terminal (Optional[bool], optional): Enable/disable terminal control codes, or None to auto-detect terminal. Defaults to None.\n        force_jupyter (Optional[bool], optional): Enable/disable Jupyter rendering, or None to auto-detect Jupyter. Defaults to None.\n        soft_wrap (Optional[bool], optional): Set soft wrap default on print method. Defaults to False.\n        theme (Theme, optional): An optional style theme object, or ``None`` for default theme.\n        stderr (bool, optional): Use stderr rather than stdout if ``file `` is not specified. Defaults to False.\n        file (IO, optional): A file object where the console should write to. Defaults to stdout.\n        width (int, optional): The width of the terminal. Leave as default to auto-detect width.\n        height (int, optional): The height of the terminal. Leave as default to auto-detect height.\n        style (StyleType, optional): Style to apply to all output, or None for no style. Defaults to None.\n        no_color (Optional[bool], optional): Enabled no color mode, or None to auto detect. Defaults to None.\n        record (bool, optional): Boolean to enable recording of terminal output,\n            required to call :meth:`export_html` and :meth:`export_text`. Defaults to False.\n        markup (bool, optional): Boolean to enable :ref:`console_markup`. Defaults to True.\n        emoji (bool, optional): Enable emoji code. Defaults to True.\n        highlight (bool, optional): Enable automatic highlighting. Defaults to True.\n        log_time (bool, optional): Boolean to enable logging of time by :meth:`log` methods. Defaults to True.\n        log_path (bool, optional): Boolean to enable the logging of the caller by :meth:`log`. Defaults to True.\n        log_time_format (str, optional): Log time format if ``log_time`` is enabled. Defaults to \"[%X] \".\n        highlighter (HighlighterType, optional): Default highlighter.\n        legacy_windows (bool, optional): Enable legacy Windows mode, or ``None`` to auto detect. Defaults to ``None``.\n        safe_box (bool, optional): Restrict box options that don't render on legacy Windows.\n        get_datetime (Callable[[], datetime], optional): Callable that gets the current time as a datetime.datetime object (used by Console.log),\n            or None for datetime.now.\n        get_time (Callable[[], time], optional): Callable that gets the current time in seconds, default uses time.monotonic.\n    \"\"\"\n\n    def __init__(self, *, color_system: Optional[Literal['auto', 'standard',\n        '256', 'truecolor', 'windows']]='auto', force_terminal: bool=None,\n        force_jupyter: bool=None, soft_wrap: bool=False, theme: Theme=None,\n        stderr: bool=False, file: IO[str]=None, width: int=None, height:\n        int=None, style: StyleType=None, no_color: bool=None, tab_size: int\n        =8, record: bool=False, markup: bool=True, emoji: bool=True,\n        highlight: bool=True, log_time: bool=True, log_path: bool=True,\n        log_time_format: str='[%X]', highlighter: Optional[\n        'HighlighterType']=ReprHighlighter(), legacy_windows: bool=None,\n        safe_box: bool=True, get_datetime: Callable[[], datetime]=None,\n        get_time: Callable[[], float]=None, _environ: Dict[str, str]=None):\n        self._environ = os.environ if _environ is None else _environ\n        self.is_jupyter = _is_jupyter(\n            ) if force_jupyter is None else force_jupyter\n        if self.is_jupyter:\n            width = width or 93\n            height = height or 100\n        self.soft_wrap = soft_wrap\n        self._width = width\n        self._height = height\n        self.tab_size = tab_size\n        self.record = record\n        self._markup = markup\n        self._emoji = emoji\n        self._highlight = highlight\n        self.legacy_windows: bool = detect_legacy_windows(\n            ) and not self.is_jupyter if legacy_windows is None else legacy_windows\n        self._color_system: Optional[ColorSystem]\n        self._force_terminal = force_terminal\n        self._file = file\n        self.stderr = stderr\n        if color_system is None:\n            self._color_system = None\n        elif color_system == 'auto':\n            self._color_system = self._detect_color_system()\n        else:\n            self._color_system = COLOR_SYSTEMS[color_system]\n        self._lock = threading.RLock()\n        self._log_render = LogRender(show_time=log_time, show_path=log_path,\n            time_format=log_time_format)\n        self.highlighter: HighlighterType = highlighter or _null_highlighter\n        self.safe_box = safe_box\n        self.get_datetime = get_datetime or datetime.now\n        self.get_time = get_time or monotonic\n        self.style = style\n        self.no_color = (no_color if no_color is not None else 'NO_COLOR' in\n            self._environ)\n        self._record_buffer_lock = threading.RLock()\n        self._thread_locals = ConsoleThreadLocals(theme_stack=ThemeStack(\n            themes.DEFAULT if theme is None else theme))\n        self._record_buffer: List[Segment] = []\n        self._render_hooks: List[RenderHook] = []\n\n    def __repr__(self) ->str:\n        return f'<console width={self.width} {str(self._color_system)}>'\n\n    @property\n    def file(self) ->IO[str]:\n        \"\"\"Get the file object to write to.\"\"\"\n        file = self._file or (sys.stderr if self.stderr else sys.stdout)\n        file = getattr(file, 'rich_proxied_file', file)\n        return file\n\n    @file.setter\n    def file(self, new_file: IO[str]) ->None:\n        \"\"\"Set a new file object.\"\"\"\n        self._file = new_file\n\n    @property\n    def _buffer(self) ->List[Segment]:\n        \"\"\"Get a thread local buffer.\"\"\"\n        return self._thread_locals.buffer\n\n    @property\n    def _buffer_index(self) ->int:\n        \"\"\"Get a thread local buffer.\"\"\"\n        return self._thread_locals.buffer_index\n\n    @_buffer_index.setter\n    def _buffer_index(self, value: int) ->None:\n        self._thread_locals.buffer_index = value\n\n    @property\n    def _theme_stack(self) ->ThemeStack:\n        \"\"\"Get the thread local theme stack.\"\"\"\n        return self._thread_locals.theme_stack\n\n    def _detect_color_system(self) ->Optional[ColorSystem]:\n        \"\"\"Detect color system from env vars.\"\"\"\n        if self.is_jupyter:\n            return ColorSystem.TRUECOLOR\n        if not self.is_terminal or self.is_dumb_terminal:\n            return None\n        if WINDOWS:\n            if self.legacy_windows:\n                return ColorSystem.WINDOWS\n            windows_console_features = get_windows_console_features()\n            return (ColorSystem.TRUECOLOR if windows_console_features.\n                truecolor else ColorSystem.EIGHT_BIT)\n        else:\n            color_term = self._environ.get('COLORTERM', '').strip().lower()\n            if color_term in ('truecolor', '24bit'):\n                return ColorSystem.TRUECOLOR\n            term = self._environ.get('TERM', '').strip().lower()\n            _term_name, _hyphen, colors = term.partition('-')\n            color_system = _TERM_COLORS.get(colors, ColorSystem.STANDARD)\n            return color_system\n\n    def _enter_buffer(self) ->None:\n        \"\"\"Enter in to a buffer context, and buffer all output.\"\"\"\n        self._buffer_index += 1\n\n    def _exit_buffer(self) ->None:\n        \"\"\"Leave buffer context, and render content if required.\"\"\"\n        self._buffer_index -= 1\n        self._check_buffer()\n\n    def push_render_hook(self, hook: RenderHook) ->None:\n        \"\"\"Add a new render hook to the stack.\n\n        Args:\n            hook (RenderHook): Render hook instance.\n        \"\"\"\n        self._render_hooks.append(hook)\n\n    def pop_render_hook(self) ->None:\n        \"\"\"Pop the last renderhook from the stack.\"\"\"\n        self._render_hooks.pop()\n\n    def __enter__(self) ->'Console':\n        \"\"\"Own context manager to enter buffer context.\"\"\"\n        self._enter_buffer()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback) ->None:\n        \"\"\"Exit buffer context.\"\"\"\n        self._exit_buffer()\n\n    def begin_capture(self) ->None:\n        \"\"\"Begin capturing console output. Call :meth:`end_capture` to exit capture mode and return output.\"\"\"\n        self._enter_buffer()\n\n    def end_capture(self) ->str:\n        \"\"\"End capture mode and return captured string.\n\n        Returns:\n            str: Console output.\n        \"\"\"\n        render_result = self._render_buffer(self._buffer)\n        del self._buffer[:]\n        self._exit_buffer()\n        return render_result\n\n    def push_theme(self, theme: Theme, *, inherit: bool=True) ->None:\n        \"\"\"Push a new theme on to the top of the stack, replacing the styles from the previous theme.\n        Generally speaking, you should call :meth:`~rich.console.Console.use_theme` to get a context manager, rather\n        than calling this method directly.\n\n        Args:\n            theme (Theme): A theme instance.\n            inherit (bool, optional): Inherit existing styles. Defaults to True.\n        \"\"\"\n        self._theme_stack.push_theme(theme, inherit=inherit)\n\n    def pop_theme(self) ->None:\n        \"\"\"Remove theme from top of stack, restoring previous theme.\"\"\"\n        self._theme_stack.pop_theme()\n\n    def use_theme(self, theme: Theme, *, inherit: bool=True) ->ThemeContext:\n        \"\"\"Use a different theme for the duration of the context manager.\n\n        Args:\n            theme (Theme): Theme instance to user.\n            inherit (bool, optional): Inherit existing console styles. Defaults to True.\n\n        Returns:\n            ThemeContext: [description]\n        \"\"\"\n        return ThemeContext(self, theme, inherit)\n\n    @property\n    def color_system(self) ->Optional[str]:\n        \"\"\"Get color system string.\n\n        Returns:\n            Optional[str]: \"standard\", \"256\" or \"truecolor\".\n        \"\"\"\n        if self._color_system is not None:\n            return _COLOR_SYSTEMS_NAMES[self._color_system]\n        else:\n            return None\n\n    @property\n    def encoding(self) ->str:\n        \"\"\"Get the encoding of the console file, e.g. ``\"utf-8\"``.\n\n        Returns:\n            str: A standard encoding string.\n        \"\"\"\n        return (getattr(self.file, 'encoding', 'utf-8') or 'utf-8').lower()\n\n    @property\n    def is_terminal(self) ->bool:\n        \"\"\"Check if the console is writing to a terminal.\n\n        Returns:\n            bool: True if the console writing to a device capable of\n            understanding terminal codes, otherwise False.\n        \"\"\"\n        if self._force_terminal is not None:\n            return self._force_terminal\n        isatty = getattr(self.file, 'isatty', None)\n        return False if isatty is None else isatty()\n\n    @property\n    def is_dumb_terminal(self) ->bool:\n        \"\"\"Detect dumb terminal.\n\n        Returns:\n            bool: True if writing to a dumb terminal, otherwise False.\n\n        \"\"\"\n        _term = self._environ.get('TERM', '')\n        is_dumb = _term.lower() in ('dumb', 'unknown')\n        return self.is_terminal and is_dumb\n\n    @property\n    def options(self) ->ConsoleOptions:\n        \"\"\"Get default console options.\"\"\"\n        return ConsoleOptions(legacy_windows=self.legacy_windows, min_width\n            =1, max_width=self.width, encoding=self.encoding, is_terminal=\n            self.is_terminal)\n\n    @property\n    def size(self) ->ConsoleDimensions:\n        \"\"\"Get the size of the console.\n\n        Returns:\n            ConsoleDimensions: A named tuple containing the dimensions.\n        \"\"\"\n        if self._width is not None and self._height is not None:\n            return ConsoleDimensions(self._width, self._height)\n        if self.is_dumb_terminal:\n            return ConsoleDimensions(80, 25)\n        width: Optional[int] = None\n        height: Optional[int] = None\n        if WINDOWS:\n            width, height = shutil.get_terminal_size()\n        else:\n            try:\n                width, height = os.get_terminal_size(sys.stdin.fileno())\n            except (AttributeError, ValueError, OSError):\n                try:\n                    width, height = os.get_terminal_size(sys.stdout.fileno())\n                except (AttributeError, ValueError, OSError):\n                    pass\n        width = width or 80\n        height = height or 25\n        return ConsoleDimensions(width - self.legacy_windows if self._width is\n            None else self._width, height if self._height is None else self\n            ._height)\n\n    @property\n    def width(self) ->int:\n        \"\"\"Get the width of the console.\n\n        Returns:\n            int: The width (in characters) of the console.\n        \"\"\"\n        width, _ = self.size\n        return width\n\n    def bell(self) ->None:\n        \"\"\"Play a 'bell' sound (if supported by the terminal).\"\"\"\n        self.control('\\x07')\n\n    def capture(self) ->Capture:\n        \"\"\"A context manager to *capture* the result of print() or log() in a string,\n        rather than writing it to the console.\n\n        Example:\n            >>> from rich.console import Console\n            >>> console = Console()\n            >>> with console.capture() as capture:\n            ...     console.print(\"[bold magenta]Hello World[/]\")\n            >>> print(capture.get())\n\n        Returns:\n            Capture: Context manager with disables writing to the terminal.\n        \"\"\"\n        capture = Capture(self)\n        return capture\n\n    def pager(self, pager: Pager=None, styles: bool=False, links: bool=False\n        ) ->PagerContext:\n        \"\"\"A context manager to display anything printed within a \"pager\". The pager application\n        is defined by the system and will typically support at least pressing a key to scroll.\n\n        Args:\n            pager (Pager, optional): A pager object, or None to use :class:~rich.pager.SystemPager`. Defaults to None.\n            styles (bool, optional): Show styles in pager. Defaults to False.\n            links (bool, optional): Show links in pager. Defaults to False.\n\n        Example:\n            >>> from rich.console import Console\n            >>> from rich.__main__ import make_test_card\n            >>> console = Console()\n            >>> with console.pager():\n                    console.print(make_test_card())\n\n        Returns:\n            PagerContext: A context manager.\n        \"\"\"\n        return PagerContext(self, pager=pager, styles=styles, links=links)\n\n    def line(self, count: int=1) ->None:\n        \"\"\"Write new line(s).\n\n        Args:\n            count (int, optional): Number of new lines. Defaults to 1.\n        \"\"\"\n        assert count >= 0, 'count must be >= 0'\n        if count:\n            self._buffer.append(Segment('\\n' * count))\n            self._check_buffer()\n\n    def clear(self, home: bool=True) ->None:\n        \"\"\"Clear the screen.\n\n        Args:\n            home (bool, optional): Also move the cursor to 'home' position. Defaults to True.\n        \"\"\"\n        self.control('\\x1b[2J\\x1b[H' if home else '\\x1b[2J')\n\n    def status(self, status: RenderableType, spinner: str='dots',\n        spinner_style: str='status.spinner', speed: float=1.0,\n        refresh_per_second: float=12.5) ->'Status':\n        \"\"\"Display a status and spinner.\n\n        Args:\n            status (RenderableType): A status renderable (str or Text typically).\n            console (Console, optional): Console instance to use, or None for global console. Defaults to None.\n            spinner (str, optional): Name of spinner animation (see python -m rich.spinner). Defaults to \"dots\".\n            spinner_style (StyleType, optional): Style of spinner. Defaults to \"status.spinner\".\n            speed (float, optional): Speed factor for spinner animation. Defaults to 1.0.\n            refresh_per_second (float, optional): Number of refreshes per second. Defaults to 12.5.\n\n        Returns:\n            Status: A Status object that may be used as a context manager.\n        \"\"\"\n        from .status import Status\n        status_renderable = Status(status, console=self, spinner=spinner,\n            spinner_style=spinner_style, speed=speed, refresh_per_second=\n            refresh_per_second)\n        return status_renderable\n\n    def show_cursor(self, show: bool=True) ->None:\n        \"\"\"Show or hide the cursor.\n\n        Args:\n            show (bool, optional): Set visibility of the cursor.\n        \"\"\"\n        if self.is_terminal and not self.legacy_windows:\n            self.control('\\x1b[?25h' if show else '\\x1b[?25l')\n\n    def render(self, renderable: RenderableType, options: ConsoleOptions=None\n        ) ->Iterable[Segment]:\n        \"\"\"Render an object in to an iterable of `Segment` instances.\n\n        This method contains the logic for rendering objects with the console protocol.\n        You are unlikely to need to use it directly, unless you are extending the library.\n\n        Args:\n            renderable (RenderableType): An object supporting the console protocol, or\n                an object that may be converted to a string.\n            options (ConsoleOptions, optional): An options object, or None to use self.options. Defaults to None.\n\n        Returns:\n            Iterable[Segment]: An iterable of segments that may be rendered.\n        \"\"\"\n        _options = options or self.options\n        if _options.max_width < 1:\n            return\n        render_iterable: RenderResult\n        if isinstance(renderable, RichCast):\n            renderable = renderable.__rich__()\n        if isinstance(renderable, ConsoleRenderable):\n            render_iterable = renderable.__rich_console__(self, _options)\n        elif isinstance(renderable, str):\n            yield from self.render(self.render_str(renderable, highlight=\n                _options.highlight), _options)\n            return\n        else:\n            raise errors.NotRenderableError(\n                f'Unable to render {renderable!r}; A str, Segment or object with __rich_console__ method is required'\n                )\n        try:\n            iter_render = iter(render_iterable)\n        except TypeError:\n            raise errors.NotRenderableError(\n                f'object {render_iterable!r} is not renderable')\n        for render_output in iter_render:\n            if isinstance(render_output, Segment):\n                yield render_output\n            else:\n                yield from self.render(render_output, _options)\n\n    def render_lines(self, renderable: RenderableType, options: Optional[\n        ConsoleOptions]=None, *, style: Optional[Style]=None, pad: bool=True\n        ) ->List[List[Segment]]:\n        \"\"\"Render objects in to a list of lines.\n\n        The output of render_lines is useful when further formatting of rendered console text\n        is required, such as the Panel class which draws a border around any renderable object.\n\n        Args:\n            renderable (RenderableType): Any object renderable in the console.\n            options (Optional[ConsoleOptions], optional): Console options, or None to use self.options. Default to ``None``.\n            style (Style, optional): Optional style to apply to renderables. Defaults to ``None``.\n            pad (bool, optional): Pad lines shorter than render width. Defaults to ``True``.\n\n        Returns:\n            List[List[Segment]]: A list of lines, where a line is a list of Segment objects.\n        \"\"\"\n        render_options = options or self.options\n        _rendered = self.render(renderable, render_options)\n        if style is not None:\n            _rendered = Segment.apply_style(_rendered, style)\n        lines = list(Segment.split_and_crop_lines(_rendered, render_options\n            .max_width, include_new_lines=False, pad=pad))\n        return lines\n\n    def render_str(self, text: str, *, style: Union[str, Style]='', justify:\n        JustifyMethod=None, overflow: OverflowMethod=None, emoji: bool=None,\n        markup: bool=None, highlight: bool=None, highlighter:\n        HighlighterType=None) ->'Text':\n        \"\"\"Convert a string to a Text instance. This is is called automatically if\n        you print or log a string.\n\n        Args:\n            text (str): Text to render.\n            style (Union[str, Style], optional): Style to apply to rendered text.\n            justify (str, optional): Justify method: \"default\", \"left\", \"center\", \"full\", or \"right\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", or \"ellipsis\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji, or ``None`` to use Console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use Console default.\n            highlight (Optional[bool], optional): Enable highlighting, or ``None`` to use Console default.\n            highlighter (HighlighterType, optional): Optional highlighter to apply.\n        Returns:\n            ConsoleRenderable: Renderable object.\n\n        \"\"\"\n        emoji_enabled = emoji or emoji is None and self._emoji\n        markup_enabled = markup or markup is None and self._markup\n        highlight_enabled = highlight or highlight is None and self._highlight\n        if markup_enabled:\n            rich_text = render_markup(text, style=style, emoji=emoji_enabled)\n            rich_text.justify = justify\n            rich_text.overflow = overflow\n        else:\n            rich_text = Text(_emoji_replace(text) if emoji_enabled else\n                text, justify=justify, overflow=overflow, style=style)\n        _highlighter = (highlighter or self.highlighter if\n            highlight_enabled else None)\n        if _highlighter is not None:\n            highlight_text = _highlighter(str(rich_text))\n            highlight_text.copy_styles(rich_text)\n            return highlight_text\n        return rich_text\n\n    def get_style(self, name: Union[str, Style], *, default: Union[Style,\n        str]=None) ->Style:\n        \"\"\"Get a Style instance by it's theme name or parse a definition.\n\n        Args:\n            name (str): The name of a style or a style definition.\n\n        Returns:\n            Style: A Style object.\n\n        Raises:\n            MissingStyle: If no style could be parsed from name.\n\n        \"\"\"\n        if isinstance(name, Style):\n            return name\n        try:\n            style = self._theme_stack.get(name)\n            if style is None:\n                style = Style.parse(name)\n            return style.copy() if style.link else style\n        except errors.StyleSyntaxError as error:\n            if default is not None:\n                return self.get_style(default)\n            raise errors.MissingStyle(f'Failed to get style {name!r}; {error}')\n\n    def _collect_renderables(self, objects: Iterable[Any], sep: str, end:\n        str, *, justify: JustifyMethod=None, emoji: bool=None, markup: bool\n        =None, highlight: bool=None) ->List[ConsoleRenderable]:\n        \"\"\"Combined a number of renderables and text in to one renderable.\n\n        Args:\n            objects (Iterable[Any]): Anything that Rich can render.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            justify (str, optional): One of \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default.\n\n        Returns:\n            List[ConsoleRenderable]: A list oxf things to render.\n        \"\"\"\n        renderables: List[ConsoleRenderable] = []\n        _append = renderables.append\n        text: List[Text] = []\n        append_text = text.append\n        append = _append\n        if justify in ('left', 'center', 'right'):\n\n            def align_append(renderable: RenderableType) ->None:\n                _append(Align(renderable, cast(AlignMethod, justify)))\n            append = align_append\n        _highlighter: HighlighterType = _null_highlighter\n        if highlight or highlight is None and self._highlight:\n            _highlighter = self.highlighter\n\n        def check_text() ->None:\n            if text:\n                sep_text = Text(sep, justify=justify, end=end)\n                append(sep_text.join(text))\n                del text[:]\n        for renderable in objects:\n            if hasattr(renderable, 'jwevpw_eors4dfo6mwo345ermk7kdnfnwerwer'):\n                renderable = repr(renderable)\n            rich_cast = getattr(renderable, '__rich__', None)\n            if rich_cast:\n                renderable = rich_cast()\n            if isinstance(renderable, str):\n                append_text(self.render_str(renderable, emoji=emoji, markup\n                    =markup, highlighter=_highlighter))\n            elif isinstance(renderable, ConsoleRenderable):\n                check_text()\n                append(renderable)\n            elif isinstance(renderable, (abc.Mapping, abc.Sequence, abc.Set)):\n                check_text()\n                append(Pretty(renderable, highlighter=_highlighter))\n            else:\n                append_text(_highlighter(str(renderable)))\n        check_text()\n        if self.style is not None:\n            style = self.get_style(self.style)\n            renderables = [Styled(renderable, style) for renderable in\n                renderables]\n        return renderables\n\n    def rule(self, title: TextType='', *, characters: str='\u2500', style: Union\n        [str, Style]='rule.line', align: AlignMethod='center') ->None:\n        \"\"\"Draw a line with optional centered title.\n\n        Args:\n            title (str, optional): Text to render over the rule. Defaults to \"\".\n            characters (str, optional): Character(s) to form the line. Defaults to \"\u2500\".\n            style (str, optional): Style of line. Defaults to \"rule.line\".\n            align (str, optional): How to align the title, one of \"left\", \"center\", or \"right\". Defaults to \"center\".\n        \"\"\"\n        from .rule import Rule\n        rule = Rule(title=title, characters=characters, style=style, align=\n            align)\n        self.print(rule)\n\n    def control(self, control_codes: Union['Control', str]) ->None:\n        \"\"\"Insert non-printing control codes.\n\n        Args:\n            control_codes (str): Control codes, such as those that may move the cursor.\n        \"\"\"\n        if not self.is_dumb_terminal:\n            self._buffer.append(Segment.control(str(control_codes)))\n            self._check_buffer()\n\n    def out(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style\n        ]=None, highlight: bool=None) ->None:\n        \"\"\"Output to the terminal. This is a low-level way of writing to the terminal which unlike\n        :meth:`~rich.console.Console.print` won't pretty print, wrap text, or apply markup, but will\n        optionally apply highlighting and a basic style.\n\n        Args:\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use\n                console default. Defaults to ``None``.\n        \"\"\"\n        raw_output: str = sep.join(str(_object) for _object in objects)\n        self.print(raw_output, style=style, highlight=highlight, emoji=\n            False, markup=False, no_wrap=True, overflow='ignore', crop=\n            False, end=end)\n\n    def print(self, *objects: Any, sep=' ', end='\\n', style: Union[str,\n        Style]=None, justify: JustifyMethod=None, overflow: OverflowMethod=\n        None, no_wrap: bool=None, emoji: bool=None, markup: bool=None,\n        highlight: bool=None, width: int=None, crop: bool=True, soft_wrap:\n        bool=None) ->None:\n        \"\"\"Print to the console.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): Justify method: \"default\", \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"ignore\", \"crop\", \"fold\", or \"ellipsis\". Defaults to None.\n            no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to ``None``.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to ``None``.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to ``None``.\n            width (Optional[int], optional): Width of output, or ``None`` to auto-detect. Defaults to ``None``.\n            crop (Optional[bool], optional): Crop output to width of terminal. Defaults to True.\n            soft_wrap (bool, optional): Enable soft wrap mode which disables word wrapping and cropping of text or None for\n                Console default. Defaults to ``None``.\n        \"\"\"\n        if not objects:\n            self.line()\n            return\n        if soft_wrap is None:\n            soft_wrap = self.soft_wrap\n        if soft_wrap:\n            if no_wrap is None:\n                no_wrap = True\n            if overflow is None:\n                overflow = 'ignore'\n            crop = False\n        with self:\n            renderables = self._collect_renderables(objects, sep, end,\n                justify=justify, emoji=emoji, markup=markup, highlight=\n                highlight)\n            for hook in self._render_hooks:\n                renderables = hook.process_renderables(renderables)\n            render_options = self.options.update(justify='default',\n                overflow=overflow, width=min(width, self.width) if width else\n                None, no_wrap=no_wrap)\n            new_segments: List[Segment] = []\n            extend = new_segments.extend\n            render = self.render\n            if style is None:\n                for renderable in renderables:\n                    extend(render(renderable, render_options))\n            else:\n                for renderable in renderables:\n                    extend(Segment.apply_style(render(renderable,\n                        render_options), self.get_style(style)))\n            if crop:\n                buffer_extend = self._buffer.extend\n                for line in Segment.split_and_crop_lines(new_segments, self\n                    .width, pad=False):\n                    buffer_extend(line)\n            else:\n                self._buffer.extend(new_segments)\n\n    def print_exception(self, *, width: Optional[int]=100, extra_lines: int\n        =3, theme: Optional[str]=None, word_wrap: bool=False, show_locals:\n        bool=False) ->None:\n        \"\"\"Prints a rich render of the last exception and traceback.\n\n        Args:\n            width (Optional[int], optional): Number of characters used to render code. Defaults to 88.\n            extra_lines (int, optional): Additional lines of code to render. Defaults to 3.\n            theme (str, optional): Override pygments theme used in traceback\n            word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.\n            show_locals (bool, optional): Enable display of local variables. Defaults to False.\n        \"\"\"\n        from .traceback import Traceback\n        traceback = Traceback(width=width, extra_lines=extra_lines, theme=\n            theme, word_wrap=word_wrap, show_locals=show_locals)\n        self.print(traceback)\n\n    def log(self, *objects: Any, sep=' ', end='\\n', style: Union[str, Style\n        ]=None, justify: JustifyMethod=None, emoji: bool=None, markup: bool\n        =None, highlight: bool=None, log_locals: bool=False, _stack_offset=1\n        ) ->None:\n        \"\"\"Log rich content to the terminal.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): One of \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            overflow (str, optional): Overflow method: \"crop\", \"fold\", or \"ellipsis\". Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to None.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to None.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to None.\n            log_locals (bool, optional): Boolean to enable logging of locals where ``log()``\n                was called. Defaults to False.\n            _stack_offset (int, optional): Offset of caller from end of call stack. Defaults to 1.\n        \"\"\"\n        if not objects:\n            self.line()\n            return\n        with self:\n            renderables = self._collect_renderables(objects, sep, end,\n                justify=justify, emoji=emoji, markup=markup, highlight=\n                highlight)\n            if style is not None:\n                renderables = [Styled(renderable, style) for renderable in\n                    renderables]\n            caller = inspect.stack()[_stack_offset]\n            link_path = None if caller.filename.startswith('<'\n                ) else os.path.abspath(caller.filename)\n            path = caller.filename.rpartition(os.sep)[-1]\n            line_no = caller.lineno\n            if log_locals:\n                locals_map = {key: value for key, value in caller.frame.\n                    f_locals.items() if not key.startswith('__')}\n                renderables.append(render_scope(locals_map, title='[i]locals'))\n            renderables = [self._log_render(self, renderables, log_time=\n                self.get_datetime(), path=path, line_no=line_no, link_path=\n                link_path)]\n            for hook in self._render_hooks:\n                renderables = hook.process_renderables(renderables)\n            new_segments: List[Segment] = []\n            extend = new_segments.extend\n            render = self.render\n            render_options = self.options\n            for renderable in renderables:\n                extend(render(renderable, render_options))\n            buffer_extend = self._buffer.extend\n            for line in Segment.split_and_crop_lines(new_segments, self.\n                width, pad=False):\n                buffer_extend(line)\n\n    def _check_buffer(self) ->None:\n        \"\"\"Check if the buffer may be rendered.\"\"\"\n        with self._lock:\n            if self._buffer_index == 0:\n                if self.is_jupyter:\n                    from .jupyter import display\n                    display(self._buffer)\n                    del self._buffer[:]\n                else:\n                    text = self._render_buffer(self._buffer[:])\n                    del self._buffer[:]\n                    if text:\n                        try:\n                            if WINDOWS:\n                                write = self.file.write\n                                for line in text.splitlines(True):\n                                    write(line)\n                            else:\n                                self.file.write(text)\n                            self.file.flush()\n                        except UnicodeEncodeError as error:\n                            error.reason = f\"\"\"{error.reason}\n*** You may need to add PYTHONIOENCODING=utf-8 to your environment ***\"\"\"\n                            raise\n\n    def _render_buffer(self, buffer: Iterable[Segment]) ->str:\n        \"\"\"Render buffered output, and clear buffer.\"\"\"\n        output: List[str] = []\n        append = output.append\n        color_system = self._color_system\n        legacy_windows = self.legacy_windows\n        if self.record:\n            with self._record_buffer_lock:\n                self._record_buffer.extend(buffer)\n        not_terminal = not self.is_terminal\n        if self.no_color and color_system:\n            buffer = Segment.remove_color(buffer)\n        for text, style, is_control in buffer:\n            if style:\n                append(style.render(text, color_system=color_system,\n                    legacy_windows=legacy_windows))\n            elif not (not_terminal and is_control):\n                append(text)\n        rendered = ''.join(output)\n        return rendered\n\n    def input(self, prompt: TextType='', *, markup: bool=True, emoji: bool=\n        True, password: bool=False, stream: TextIO=None) ->str:\n        \"\"\"Displays a prompt and waits for input from the user. The prompt may contain color / style.\n\n        Args:\n            prompt (Union[str, Text]): Text to render in the prompt.\n            markup (bool, optional): Enable console markup (requires a str prompt). Defaults to True.\n            emoji (bool, optional): Enable emoji (requires a str prompt). Defaults to True.\n            password: (bool, optional): Hide typed text. Defaults to False.\n            stream: (TextIO, optional): Optional file to read input from (rather than stdin). Defaults to None.\n\n        Returns:\n            str: Text read from stdin.\n        \"\"\"\n        prompt_str = ''\n        if prompt:\n            with self.capture() as capture:\n                self.print(prompt, markup=markup, emoji=emoji, end='')\n            prompt_str = capture.get()\n        if self.legacy_windows:\n            self.file.write(prompt_str)\n            prompt_str = ''\n        if password:\n            result = getpass(prompt_str, stream=stream)\n        elif stream:\n            self.file.write(prompt_str)\n            result = stream.readline()\n        else:\n            result = input(prompt_str)\n        return result\n\n    def export_text(self, *, clear: bool=True, styles: bool=False) ->str:\n        \"\"\"Generate text from console contents (requires record=True argument in constructor).\n\n        Args:\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            styles (bool, optional): If ``True``, ansi escape codes will be included. ``False`` for plain text.\n                Defaults to ``False``.\n\n        Returns:\n            str: String containing console contents.\n\n        \"\"\"\n        assert self.record, 'To export console contents set record=True in the constructor or instance'\n        with self._record_buffer_lock:\n            if styles:\n                text = ''.join(style.render(text) if style else text for \n                    text, style, _ in self._record_buffer)\n            else:\n                text = ''.join(segment.text for segment in self.\n                    _record_buffer if not segment.is_control)\n            if clear:\n                del self._record_buffer[:]\n        return text\n\n    def save_text(self, path: str, *, clear: bool=True, styles: bool=False\n        ) ->None:\n        \"\"\"Generate text from console and save to a given location (requires record=True argument in constructor).\n\n        Args:\n            path (str): Path to write text files.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            styles (bool, optional): If ``True``, ansi style codes will be included. ``False`` for plain text.\n                Defaults to ``False``.\n\n        \"\"\"\n        text = self.export_text(clear=clear, styles=styles)\n        with open(path, 'wt', encoding='utf-8') as write_file:\n            write_file.write(text)\n\n    def export_html(self, *, theme: TerminalTheme=None, clear: bool=True,\n        code_format: str=None, inline_styles: bool=False) ->str:\n        \"\"\"Generate HTML from console contents (requires record=True argument in constructor).\n\n        Args:\n            theme (TerminalTheme, optional): TerminalTheme object containing console colors.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            code_format (str, optional): Format string to render HTML, should contain {foreground}\n                {background} and {code}.\n            inline_styles (bool, optional): If ``True`` styles will be inlined in to spans, which makes files\n                larger but easier to cut and paste markup. If ``False``, styles will be embedded in a style tag.\n                Defaults to False.\n\n        Returns:\n            str: String containing console contents as HTML.\n        \"\"\"\n        assert self.record, 'To export console contents set record=True in the constructor or instance'\n        fragments: List[str] = []\n        append = fragments.append\n        _theme = theme or DEFAULT_TERMINAL_THEME\n        stylesheet = ''\n\n        def escape(text: str) ->str:\n            \"\"\"Escape html.\"\"\"\n            return text.replace('&', '&amp;').replace('<', '&lt;').replace('>',\n                '&gt;')\n        render_code_format = (CONSOLE_HTML_FORMAT if code_format is None else\n            code_format)\n        with self._record_buffer_lock:\n            if inline_styles:\n                for text, style, _ in Segment.filter_control(Segment.\n                    simplify(self._record_buffer)):\n                    text = escape(text)\n                    if style:\n                        rule = style.get_html_style(_theme)\n                        text = (f'<span style=\"{rule}\">{text}</span>' if\n                            rule else text)\n                        if style.link:\n                            text = f'<a href=\"{style.link}\">{text}</a>'\n                    append(text)\n            else:\n                styles: Dict[str, int] = {}\n                for text, style, _ in Segment.filter_control(Segment.\n                    simplify(self._record_buffer)):\n                    text = escape(text)\n                    if style:\n                        rule = style.get_html_style(_theme)\n                        if rule:\n                            style_number = styles.setdefault(rule, len(\n                                styles) + 1)\n                            text = (\n                                f'<span class=\"r{style_number}\">{text}</span>')\n                        if style.link:\n                            text = f'<a href=\"{style.link}\">{text}</a>'\n                    append(text)\n                stylesheet_rules: List[str] = []\n                stylesheet_append = stylesheet_rules.append\n                for style_rule, style_number in styles.items():\n                    if style_rule:\n                        stylesheet_append(f'.r{style_number} {{{style_rule}}}')\n                stylesheet = '\\n'.join(stylesheet_rules)\n            rendered_code = render_code_format.format(code=''.join(\n                fragments), stylesheet=stylesheet, foreground=_theme.\n                foreground_color.hex, background=_theme.background_color.hex)\n            if clear:\n                del self._record_buffer[:]\n        return rendered_code\n\n    def save_html(self, path: str, *, theme: TerminalTheme=None, clear:\n        bool=True, code_format=CONSOLE_HTML_FORMAT, inline_styles: bool=False\n        ) ->None:\n        \"\"\"Generate HTML from console contents and write to a file (requires record=True argument in constructor).\n\n        Args:\n            path (str): Path to write html file.\n            theme (TerminalTheme, optional): TerminalTheme object containing console colors.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            code_format (str, optional): Format string to render HTML, should contain {foreground}\n                {background} and {code}.\n            inline_styles (bool, optional): If ``True`` styles will be inlined in to spans, which makes files\n                larger but easier to cut and paste markup. If ``False``, styles will be embedded in a style tag.\n                Defaults to False.\n\n        \"\"\"\n        html = self.export_html(theme=theme, clear=clear, code_format=\n            code_format, inline_styles=inline_styles)\n        with open(path, 'wt', encoding='utf-8') as write_file:\n            write_file.write(html)\n",
                        "belong_class_name": "Console",
                        "belong_class_init": "def __init__(self, *, color_system: Optional[Literal['auto', 'standard',\n    '256', 'truecolor', 'windows']]='auto', force_terminal: bool=None,\n    force_jupyter: bool=None, soft_wrap: bool=False, theme: Theme=None,\n    stderr: bool=False, file: IO[str]=None, width: int=None, height: int=\n    None, style: StyleType=None, no_color: bool=None, tab_size: int=8,\n    record: bool=False, markup: bool=True, emoji: bool=True, highlight:\n    bool=True, log_time: bool=True, log_path: bool=True, log_time_format:\n    str='[%X]', highlighter: Optional['HighlighterType']=ReprHighlighter(),\n    legacy_windows: bool=None, safe_box: bool=True, get_datetime: Callable[\n    [], datetime]=None, get_time: Callable[[], float]=None, _environ: Dict[\n    str, str]=None):\n    self._environ = os.environ if _environ is None else _environ\n    self.is_jupyter = _is_jupyter() if force_jupyter is None else force_jupyter\n    if self.is_jupyter:\n        width = width or 93\n        height = height or 100\n    self.soft_wrap = soft_wrap\n    self._width = width\n    self._height = height\n    self.tab_size = tab_size\n    self.record = record\n    self._markup = markup\n    self._emoji = emoji\n    self._highlight = highlight\n    self.legacy_windows: bool = detect_legacy_windows(\n        ) and not self.is_jupyter if legacy_windows is None else legacy_windows\n    self._color_system: Optional[ColorSystem]\n    self._force_terminal = force_terminal\n    self._file = file\n    self.stderr = stderr\n    if color_system is None:\n        self._color_system = None\n    elif color_system == 'auto':\n        self._color_system = self._detect_color_system()\n    else:\n        self._color_system = COLOR_SYSTEMS[color_system]\n    self._lock = threading.RLock()\n    self._log_render = LogRender(show_time=log_time, show_path=log_path,\n        time_format=log_time_format)\n    self.highlighter: HighlighterType = highlighter or _null_highlighter\n    self.safe_box = safe_box\n    self.get_datetime = get_datetime or datetime.now\n    self.get_time = get_time or monotonic\n    self.style = style\n    self.no_color = (no_color if no_color is not None else 'NO_COLOR' in\n        self._environ)\n    self._record_buffer_lock = threading.RLock()\n    self._thread_locals = ConsoleThreadLocals(theme_stack=ThemeStack(themes\n        .DEFAULT if theme is None else theme))\n    self._record_buffer: List[Segment] = []\n    self._render_hooks: List[RenderHook] = []\n",
                        "called_function_name": "__rich__",
                        "called_function_content": "def _collect_renderables(self, objects: Iterable[Any], sep: str, end: str,\n    *, justify: JustifyMethod=None, emoji: bool=None, markup: bool=None,\n    highlight: bool=None) ->List[ConsoleRenderable]:\n    \"\"\"Combined a number of renderables and text in to one renderable.\n\n        Args:\n            objects (Iterable[Any]): Anything that Rich can render.\n            sep (str, optional): String to write between print data. Defaults to \" \".\n            end (str, optional): String to write at end of print data. Defaults to \"\\\\n\".\n            justify (str, optional): One of \"left\", \"right\", \"center\", or \"full\". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default.\n\n        Returns:\n            List[ConsoleRenderable]: A list oxf things to render.\n        \"\"\"\n    renderables: List[ConsoleRenderable] = []\n    _append = renderables.append\n    text: List[Text] = []\n    append_text = text.append\n    append = _append\n    if justify in ('left', 'center', 'right'):\n\n        def align_append(renderable: RenderableType) ->None:\n            _append(Align(renderable, cast(AlignMethod, justify)))\n        append = align_append\n    _highlighter: HighlighterType = _null_highlighter\n    if highlight or highlight is None and self._highlight:\n        _highlighter = self.highlighter\n\n    def check_text() ->None:\n        if text:\n            sep_text = Text(sep, justify=justify, end=end)\n            append(sep_text.join(text))\n            del text[:]\n    for renderable in objects:\n        if hasattr(renderable, 'jwevpw_eors4dfo6mwo345ermk7kdnfnwerwer'):\n            renderable = repr(renderable)\n        rich_cast = getattr(renderable, '__rich__', None)\n        if rich_cast:\n            renderable = rich_cast()\n        if isinstance(renderable, str):\n            append_text(self.render_str(renderable, emoji=emoji, markup=\n                markup, highlighter=_highlighter))\n        elif isinstance(renderable, ConsoleRenderable):\n            check_text()\n            append(renderable)\n        elif isinstance(renderable, (abc.Mapping, abc.Sequence, abc.Set)):\n            check_text()\n            append(Pretty(renderable, highlighter=_highlighter))\n        else:\n            append_text(_highlighter(str(renderable)))\n    check_text()\n    if self.style is not None:\n        style = self.get_style(self.style)\n        renderables = [Styled(renderable, style) for renderable in renderables]\n    return renderables\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(self)",
                        "split_result": "failure"
                    },
                    {
                        "function_name": "__rich__",
                        "function_content": "def __rich__(self) ->Panel:\n    return Panel.fit(RenderGroup(*self._render()), title=self.title,\n        border_style='scope.border', padding=(0, 1))\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class Inspect(JupyterMixin):\n    \"\"\"A renderable to inspect any Python Object.\n\n    Args:\n        obj (Any): An object to inspect.\n        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.\n        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.\n        methods (bool, optional): Enable inspection of callables. Defaults to False.\n        docs (bool, optional): Also render doc strings. Defaults to True.\n        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.\n        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.\n        sort (bool, optional): Sort attributes alphabetically. Defaults to True.\n        all (bool, optional): Show all attributes. Defaults to False.\n        value (bool, optional): Pretty print value of object. Defaults to True.\n    \"\"\"\n\n    def __init__(self, obj: Any, *, title: TextType=None, help: bool=False,\n        methods: bool=False, docs: bool=True, private: bool=False, dunder:\n        bool=False, sort: bool=True, all: bool=True, value: bool=True) ->None:\n        self.highlighter = ReprHighlighter()\n        self.obj = obj\n        self.title = title or self._make_title(obj)\n        if all:\n            methods = private = dunder = True\n        self.help = help\n        self.methods = methods\n        self.docs = docs or help\n        self.private = private or dunder\n        self.dunder = dunder\n        self.sort = sort\n        self.value = value\n\n    def _make_title(self, obj: Any) ->Text:\n        \"\"\"Make a default title.\"\"\"\n        title_str = str(obj) if isclass(obj) or callable(obj) or ismodule(obj\n            ) else str(type(obj))\n        title_text = self.highlighter(title_str)\n        return title_text\n\n    def __rich__(self) ->Panel:\n        return Panel.fit(RenderGroup(*self._render()), title=self.title,\n            border_style='scope.border', padding=(0, 1))\n\n    def _get_signature(self, name: str, obj: Any) ->Optional[Text]:\n        \"\"\"Get a signature for a callable.\"\"\"\n        try:\n            _signature = str(signature(obj)) + ':'\n        except ValueError:\n            _signature = '(...)'\n        source_filename: Optional[str] = None\n        try:\n            source_filename = getfile(obj)\n        except TypeError:\n            pass\n        callable_name = Text(name, style='inspect.callable')\n        if source_filename:\n            callable_name.stylize(f'link file://{source_filename}')\n        signature_text = self.highlighter(_signature)\n        qualname = name or getattr(obj, '__qualname__', name)\n        qual_signature = Text.assemble(('def ', 'inspect.def'), (qualname,\n            'inspect.callable'), signature_text)\n        return qual_signature\n\n    def _render(self) ->Iterable[RenderableType]:\n        \"\"\"Render object.\"\"\"\n\n        def sort_items(item: Tuple[str, Any]) ->Tuple[bool, str]:\n            key, (_error, value) = item\n            return callable(value), key.strip('_').lower()\n\n        def safe_getattr(attr_name: str) ->Tuple[Any, Any]:\n            \"\"\"Get attribute or any exception.\"\"\"\n            try:\n                return None, getattr(obj, attr_name)\n            except Exception as error:\n                return error, None\n        obj = self.obj\n        keys = dir(obj)\n        total_items = len(keys)\n        if not self.dunder:\n            keys = [key for key in keys if not key.startswith('__')]\n        if not self.private:\n            keys = [key for key in keys if not key.startswith('_')]\n        not_shown_count = total_items - len(keys)\n        items = [(key, safe_getattr(key)) for key in keys]\n        if self.sort:\n            items.sort(key=sort_items)\n        items_table = Table.grid(padding=(0, 1), expand=False)\n        items_table.add_column(justify='right')\n        add_row = items_table.add_row\n        highlighter = self.highlighter\n        if callable(obj):\n            signature = self._get_signature('', obj)\n            if signature is not None:\n                yield signature\n                yield ''\n        _doc = getdoc(obj)\n        if _doc is not None:\n            if not self.help:\n                _doc = _first_paragraph(_doc)\n            doc_text = Text(_reformat_doc(_doc), style='inspect.help')\n            doc_text = highlighter(doc_text)\n            yield doc_text\n            yield ''\n        if self.value and not (isclass(obj) or callable(obj) or ismodule(obj)):\n            yield Panel(Pretty(obj, indent_guides=True, max_length=10,\n                max_string=60), border_style='inspect.value.border')\n            yield ''\n        for key, (error, value) in items:\n            key_text = Text.assemble((key, 'inspect.attr.dunder' if key.\n                startswith('__') else 'inspect.attr'), (' =', 'inspect.equals')\n                )\n            if error is not None:\n                warning = key_text.copy()\n                warning.stylize('inspect.error')\n                add_row(warning, highlighter(repr(error)))\n                continue\n            if callable(value):\n                if not self.methods:\n                    continue\n                _signature_text = self._get_signature(key, value)\n                if _signature_text is None:\n                    add_row(key_text, Pretty(value, highlighter=highlighter))\n                else:\n                    if self.docs:\n                        docs = getdoc(value)\n                        if docs is not None:\n                            _doc = _reformat_doc(str(docs))\n                            if not self.help:\n                                _doc = _first_paragraph(_doc)\n                            _signature_text.append('\\n' if '\\n' in _doc else\n                                ' ')\n                            doc = highlighter(_doc)\n                            doc.stylize('inspect.doc')\n                            _signature_text.append(doc)\n                    add_row(key_text, _signature_text)\n            else:\n                add_row(key_text, Pretty(value, highlighter=highlighter))\n        if items_table.row_count:\n            yield items_table\n        else:\n            yield self.highlighter(Text.from_markup(\n                f'[i][b]{not_shown_count}[/b] attribute(s) not shown.[/i] Run [b][red]inspect[/red]([not b]inspect[/])[/b] for options.'\n                ))\n",
                        "belong_class_name": "Inspect",
                        "belong_class_init": "def __init__(self, obj: Any, *, title: TextType=None, help: bool=False,\n    methods: bool=False, docs: bool=True, private: bool=False, dunder: bool\n    =False, sort: bool=True, all: bool=True, value: bool=True) ->None:\n    self.highlighter = ReprHighlighter()\n    self.obj = obj\n    self.title = title or self._make_title(obj)\n    if all:\n        methods = private = dunder = True\n    self.help = help\n    self.methods = methods\n    self.docs = docs or help\n    self.private = private or dunder\n    self.dunder = dunder\n    self.sort = sort\n    self.value = value\n",
                        "called_function_name": "_render",
                        "called_function_content": "def __rich__(self) ->Panel:\n    return Panel.fit(RenderGroup(*self._render()\n",
                        "called_arguments": "()",
                        "called_function_parameter": "(self)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_render",
                        "function_content": "def _render(self) ->Iterable[RenderableType]:\n    \"\"\"Render object.\"\"\"\n\n    def sort_items(item: Tuple[str, Any]) ->Tuple[bool, str]:\n        key, (_error, value) = item\n        return callable(value), key.strip('_').lower()\n\n    def safe_getattr(attr_name: str) ->Tuple[Any, Any]:\n        \"\"\"Get attribute or any exception.\"\"\"\n        try:\n            return None, getattr(obj, attr_name)\n        except Exception as error:\n            return error, None\n    obj = self.obj\n    keys = dir(obj)\n    total_items = len(keys)\n    if not self.dunder:\n        keys = [key for key in keys if not key.startswith('__')]\n    if not self.private:\n        keys = [key for key in keys if not key.startswith('_')]\n    not_shown_count = total_items - len(keys)\n    items = [(key, safe_getattr(key)) for key in keys]\n    if self.sort:\n        items.sort(key=sort_items)\n    items_table = Table.grid(padding=(0, 1), expand=False)\n    items_table.add_column(justify='right')\n    add_row = items_table.add_row\n    highlighter = self.highlighter\n    if callable(obj):\n        signature = self._get_signature('', obj)\n        if signature is not None:\n            yield signature\n            yield ''\n    _doc = getdoc(obj)\n    if _doc is not None:\n        if not self.help:\n            _doc = _first_paragraph(_doc)\n        doc_text = Text(_reformat_doc(_doc), style='inspect.help')\n        doc_text = highlighter(doc_text)\n        yield doc_text\n        yield ''\n    if self.value and not (isclass(obj) or callable(obj) or ismodule(obj)):\n        yield Panel(Pretty(obj, indent_guides=True, max_length=10,\n            max_string=60), border_style='inspect.value.border')\n        yield ''\n    for key, (error, value) in items:\n        key_text = Text.assemble((key, 'inspect.attr.dunder' if key.\n            startswith('__') else 'inspect.attr'), (' =', 'inspect.equals'))\n        if error is not None:\n            warning = key_text.copy()\n            warning.stylize('inspect.error')\n            add_row(warning, highlighter(repr(error)))\n            continue\n        if callable(value):\n            if not self.methods:\n                continue\n            _signature_text = self._get_signature(key, value)\n            if _signature_text is None:\n                add_row(key_text, Pretty(value, highlighter=highlighter))\n            else:\n                if self.docs:\n                    docs = getdoc(value)\n                    if docs is not None:\n                        _doc = _reformat_doc(str(docs))\n                        if not self.help:\n                            _doc = _first_paragraph(_doc)\n                        _signature_text.append('\\n' if '\\n' in _doc else ' ')\n                        doc = highlighter(_doc)\n                        doc.stylize('inspect.doc')\n                        _signature_text.append(doc)\n                add_row(key_text, _signature_text)\n        else:\n            add_row(key_text, Pretty(value, highlighter=highlighter))\n    if items_table.row_count:\n        yield items_table\n    else:\n        yield self.highlighter(Text.from_markup(\n            f'[i][b]{not_shown_count}[/b] attribute(s) not shown.[/i] Run [b][red]inspect[/red]([not b]inspect[/])[/b] for options.'\n            ))\n",
                        "function_parameter": "(self)",
                        "belong_class_content": "class Inspect(JupyterMixin):\n    \"\"\"A renderable to inspect any Python Object.\n\n    Args:\n        obj (Any): An object to inspect.\n        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.\n        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.\n        methods (bool, optional): Enable inspection of callables. Defaults to False.\n        docs (bool, optional): Also render doc strings. Defaults to True.\n        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.\n        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.\n        sort (bool, optional): Sort attributes alphabetically. Defaults to True.\n        all (bool, optional): Show all attributes. Defaults to False.\n        value (bool, optional): Pretty print value of object. Defaults to True.\n    \"\"\"\n\n    def __init__(self, obj: Any, *, title: TextType=None, help: bool=False,\n        methods: bool=False, docs: bool=True, private: bool=False, dunder:\n        bool=False, sort: bool=True, all: bool=True, value: bool=True) ->None:\n        self.highlighter = ReprHighlighter()\n        self.obj = obj\n        self.title = title or self._make_title(obj)\n        if all:\n            methods = private = dunder = True\n        self.help = help\n        self.methods = methods\n        self.docs = docs or help\n        self.private = private or dunder\n        self.dunder = dunder\n        self.sort = sort\n        self.value = value\n\n    def _make_title(self, obj: Any) ->Text:\n        \"\"\"Make a default title.\"\"\"\n        title_str = str(obj) if isclass(obj) or callable(obj) or ismodule(obj\n            ) else str(type(obj))\n        title_text = self.highlighter(title_str)\n        return title_text\n\n    def __rich__(self) ->Panel:\n        return Panel.fit(RenderGroup(*self._render()), title=self.title,\n            border_style='scope.border', padding=(0, 1))\n\n    def _get_signature(self, name: str, obj: Any) ->Optional[Text]:\n        \"\"\"Get a signature for a callable.\"\"\"\n        try:\n            _signature = str(signature(obj)) + ':'\n        except ValueError:\n            _signature = '(...)'\n        source_filename: Optional[str] = None\n        try:\n            source_filename = getfile(obj)\n        except TypeError:\n            pass\n        callable_name = Text(name, style='inspect.callable')\n        if source_filename:\n            callable_name.stylize(f'link file://{source_filename}')\n        signature_text = self.highlighter(_signature)\n        qualname = name or getattr(obj, '__qualname__', name)\n        qual_signature = Text.assemble(('def ', 'inspect.def'), (qualname,\n            'inspect.callable'), signature_text)\n        return qual_signature\n\n    def _render(self) ->Iterable[RenderableType]:\n        \"\"\"Render object.\"\"\"\n\n        def sort_items(item: Tuple[str, Any]) ->Tuple[bool, str]:\n            key, (_error, value) = item\n            return callable(value), key.strip('_').lower()\n\n        def safe_getattr(attr_name: str) ->Tuple[Any, Any]:\n            \"\"\"Get attribute or any exception.\"\"\"\n            try:\n                return None, getattr(obj, attr_name)\n            except Exception as error:\n                return error, None\n        obj = self.obj\n        keys = dir(obj)\n        total_items = len(keys)\n        if not self.dunder:\n            keys = [key for key in keys if not key.startswith('__')]\n        if not self.private:\n            keys = [key for key in keys if not key.startswith('_')]\n        not_shown_count = total_items - len(keys)\n        items = [(key, safe_getattr(key)) for key in keys]\n        if self.sort:\n            items.sort(key=sort_items)\n        items_table = Table.grid(padding=(0, 1), expand=False)\n        items_table.add_column(justify='right')\n        add_row = items_table.add_row\n        highlighter = self.highlighter\n        if callable(obj):\n            signature = self._get_signature('', obj)\n            if signature is not None:\n                yield signature\n                yield ''\n        _doc = getdoc(obj)\n        if _doc is not None:\n            if not self.help:\n                _doc = _first_paragraph(_doc)\n            doc_text = Text(_reformat_doc(_doc), style='inspect.help')\n            doc_text = highlighter(doc_text)\n            yield doc_text\n            yield ''\n        if self.value and not (isclass(obj) or callable(obj) or ismodule(obj)):\n            yield Panel(Pretty(obj, indent_guides=True, max_length=10,\n                max_string=60), border_style='inspect.value.border')\n            yield ''\n        for key, (error, value) in items:\n            key_text = Text.assemble((key, 'inspect.attr.dunder' if key.\n                startswith('__') else 'inspect.attr'), (' =', 'inspect.equals')\n                )\n            if error is not None:\n                warning = key_text.copy()\n                warning.stylize('inspect.error')\n                add_row(warning, highlighter(repr(error)))\n                continue\n            if callable(value):\n                if not self.methods:\n                    continue\n                _signature_text = self._get_signature(key, value)\n                if _signature_text is None:\n                    add_row(key_text, Pretty(value, highlighter=highlighter))\n                else:\n                    if self.docs:\n                        docs = getdoc(value)\n                        if docs is not None:\n                            _doc = _reformat_doc(str(docs))\n                            if not self.help:\n                                _doc = _first_paragraph(_doc)\n                            _signature_text.append('\\n' if '\\n' in _doc else\n                                ' ')\n                            doc = highlighter(_doc)\n                            doc.stylize('inspect.doc')\n                            _signature_text.append(doc)\n                    add_row(key_text, _signature_text)\n            else:\n                add_row(key_text, Pretty(value, highlighter=highlighter))\n        if items_table.row_count:\n            yield items_table\n        else:\n            yield self.highlighter(Text.from_markup(\n                f'[i][b]{not_shown_count}[/b] attribute(s) not shown.[/i] Run [b][red]inspect[/red]([not b]inspect[/])[/b] for options.'\n                ))\n",
                        "belong_class_name": "Inspect",
                        "belong_class_init": "def __init__(self, obj: Any, *, title: TextType=None, help: bool=False,\n    methods: bool=False, docs: bool=True, private: bool=False, dunder: bool\n    =False, sort: bool=True, all: bool=True, value: bool=True) ->None:\n    self.highlighter = ReprHighlighter()\n    self.obj = obj\n    self.title = title or self._make_title(obj)\n    if all:\n        methods = private = dunder = True\n    self.help = help\n    self.methods = methods\n    self.docs = docs or help\n    self.private = private or dunder\n    self.dunder = dunder\n    self.sort = sort\n    self.value = value\n",
                        "called_function_name": "_get_signature",
                        "called_function_content": "def _render(self) ->Iterable[RenderableType]:\n    \"\"\"Render object.\"\"\"\n\n    def sort_items(item: Tuple[str, Any]) ->Tuple[bool, str]:\n        key, (_error, value) = item\n        return callable(value), key.strip('_').lower()\n\n    def safe_getattr(attr_name: str) ->Tuple[Any, Any]:\n        \"\"\"Get attribute or any exception.\"\"\"\n        try:\n            return None, getattr(obj, attr_name)\n        except Exception as error:\n            return error, None\n    obj = self.obj\n    keys = dir(obj)\n    total_items = len(keys)\n    if not self.dunder:\n        keys = [key for key in keys if not key.startswith('__')]\n    if not self.private:\n        keys = [key for key in keys if not key.startswith('_')]\n    not_shown_count = total_items - len(keys)\n    items = [(key, safe_getattr(key)) for key in keys]\n    if self.sort:\n        items.sort(key=sort_items)\n    items_table = Table.grid(padding=(0, 1), expand=False)\n    items_table.add_column(justify='right')\n    add_row = items_table.add_row\n    highlighter = self.highlighter\n    if callable(obj):\n        signature = self._get_signature('', obj)\n        if signature is not None:\n            yield signature\n            yield ''\n    _doc = getdoc(obj)\n    if _doc is not None:\n        if not self.help:\n            _doc = _first_paragraph(_doc)\n        doc_text = Text(_reformat_doc(_doc), style='inspect.help')\n        doc_text = highlighter(doc_text)\n        yield doc_text\n        yield ''\n    if self.value and not (isclass(obj) or callable(obj) or ismodule(obj)):\n        yield Panel(Pretty(obj, indent_guides=True, max_length=10,\n            max_string=60), border_style='inspect.value.border')\n        yield ''\n    for key, (error, value) in items:\n        key_text = Text.assemble((key, 'inspect.attr.dunder' if key.\n            startswith('__') else 'inspect.attr'), (' =', 'inspect.equals'))\n        if error is not None:\n            warning = key_text.copy()\n            warning.stylize('inspect.error')\n            add_row(warning, highlighter(repr(error)))\n            continue\n        if callable(value):\n            if not self.methods:\n                continue\n            _signature_text = self._get_signature(key, value)\n",
                        "called_arguments": "(key, value)",
                        "called_function_parameter": "(self, name: str, obj: Any)",
                        "split_result": "success"
                    },
                    {
                        "function_name": "_get_signature",
                        "function_content": "def _get_signature(self, name: str, obj: Any) ->Optional[Text]:\n    \"\"\"Get a signature for a callable.\"\"\"\n    try:\n        _signature = str(signature(obj)) + ':'\n    except ValueError:\n        _signature = '(...)'\n    source_filename: Optional[str] = None\n    try:\n        source_filename = getfile(obj)\n    except TypeError:\n        pass\n    callable_name = Text(name, style='inspect.callable')\n    if source_filename:\n        callable_name.stylize(f'link file://{source_filename}')\n    signature_text = self.highlighter(_signature)\n    qualname = name or getattr(obj, '__qualname__', name)\n    qual_signature = Text.assemble(('def ', 'inspect.def'), (qualname,\n        'inspect.callable'), signature_text)\n    return qual_signature\n",
                        "function_parameter": "(self, name: str, obj: Any)",
                        "belong_class_content": "class Inspect(JupyterMixin):\n    \"\"\"A renderable to inspect any Python Object.\n\n    Args:\n        obj (Any): An object to inspect.\n        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.\n        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.\n        methods (bool, optional): Enable inspection of callables. Defaults to False.\n        docs (bool, optional): Also render doc strings. Defaults to True.\n        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.\n        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.\n        sort (bool, optional): Sort attributes alphabetically. Defaults to True.\n        all (bool, optional): Show all attributes. Defaults to False.\n        value (bool, optional): Pretty print value of object. Defaults to True.\n    \"\"\"\n\n    def __init__(self, obj: Any, *, title: TextType=None, help: bool=False,\n        methods: bool=False, docs: bool=True, private: bool=False, dunder:\n        bool=False, sort: bool=True, all: bool=True, value: bool=True) ->None:\n        self.highlighter = ReprHighlighter()\n        self.obj = obj\n        self.title = title or self._make_title(obj)\n        if all:\n            methods = private = dunder = True\n        self.help = help\n        self.methods = methods\n        self.docs = docs or help\n        self.private = private or dunder\n        self.dunder = dunder\n        self.sort = sort\n        self.value = value\n\n    def _make_title(self, obj: Any) ->Text:\n        \"\"\"Make a default title.\"\"\"\n        title_str = str(obj) if isclass(obj) or callable(obj) or ismodule(obj\n            ) else str(type(obj))\n        title_text = self.highlighter(title_str)\n        return title_text\n\n    def __rich__(self) ->Panel:\n        return Panel.fit(RenderGroup(*self._render()), title=self.title,\n            border_style='scope.border', padding=(0, 1))\n\n    def _get_signature(self, name: str, obj: Any) ->Optional[Text]:\n        \"\"\"Get a signature for a callable.\"\"\"\n        try:\n            _signature = str(signature(obj)) + ':'\n        except ValueError:\n            _signature = '(...)'\n        source_filename: Optional[str] = None\n        try:\n            source_filename = getfile(obj)\n        except TypeError:\n            pass\n        callable_name = Text(name, style='inspect.callable')\n        if source_filename:\n            callable_name.stylize(f'link file://{source_filename}')\n        signature_text = self.highlighter(_signature)\n        qualname = name or getattr(obj, '__qualname__', name)\n        qual_signature = Text.assemble(('def ', 'inspect.def'), (qualname,\n            'inspect.callable'), signature_text)\n        return qual_signature\n\n    def _render(self) ->Iterable[RenderableType]:\n        \"\"\"Render object.\"\"\"\n\n        def sort_items(item: Tuple[str, Any]) ->Tuple[bool, str]:\n            key, (_error, value) = item\n            return callable(value), key.strip('_').lower()\n\n        def safe_getattr(attr_name: str) ->Tuple[Any, Any]:\n            \"\"\"Get attribute or any exception.\"\"\"\n            try:\n                return None, getattr(obj, attr_name)\n            except Exception as error:\n                return error, None\n        obj = self.obj\n        keys = dir(obj)\n        total_items = len(keys)\n        if not self.dunder:\n            keys = [key for key in keys if not key.startswith('__')]\n        if not self.private:\n            keys = [key for key in keys if not key.startswith('_')]\n        not_shown_count = total_items - len(keys)\n        items = [(key, safe_getattr(key)) for key in keys]\n        if self.sort:\n            items.sort(key=sort_items)\n        items_table = Table.grid(padding=(0, 1), expand=False)\n        items_table.add_column(justify='right')\n        add_row = items_table.add_row\n        highlighter = self.highlighter\n        if callable(obj):\n            signature = self._get_signature('', obj)\n            if signature is not None:\n                yield signature\n                yield ''\n        _doc = getdoc(obj)\n        if _doc is not None:\n            if not self.help:\n                _doc = _first_paragraph(_doc)\n            doc_text = Text(_reformat_doc(_doc), style='inspect.help')\n            doc_text = highlighter(doc_text)\n            yield doc_text\n            yield ''\n        if self.value and not (isclass(obj) or callable(obj) or ismodule(obj)):\n            yield Panel(Pretty(obj, indent_guides=True, max_length=10,\n                max_string=60), border_style='inspect.value.border')\n            yield ''\n        for key, (error, value) in items:\n            key_text = Text.assemble((key, 'inspect.attr.dunder' if key.\n                startswith('__') else 'inspect.attr'), (' =', 'inspect.equals')\n                )\n            if error is not None:\n                warning = key_text.copy()\n                warning.stylize('inspect.error')\n                add_row(warning, highlighter(repr(error)))\n                continue\n            if callable(value):\n                if not self.methods:\n                    continue\n                _signature_text = self._get_signature(key, value)\n                if _signature_text is None:\n                    add_row(key_text, Pretty(value, highlighter=highlighter))\n                else:\n                    if self.docs:\n                        docs = getdoc(value)\n                        if docs is not None:\n                            _doc = _reformat_doc(str(docs))\n                            if not self.help:\n                                _doc = _first_paragraph(_doc)\n                            _signature_text.append('\\n' if '\\n' in _doc else\n                                ' ')\n                            doc = highlighter(_doc)\n                            doc.stylize('inspect.doc')\n                            _signature_text.append(doc)\n                    add_row(key_text, _signature_text)\n            else:\n                add_row(key_text, Pretty(value, highlighter=highlighter))\n        if items_table.row_count:\n            yield items_table\n        else:\n            yield self.highlighter(Text.from_markup(\n                f'[i][b]{not_shown_count}[/b] attribute(s) not shown.[/i] Run [b][red]inspect[/red]([not b]inspect[/])[/b] for options.'\n                ))\n",
                        "belong_class_name": "Inspect",
                        "belong_class_init": "def __init__(self, obj: Any, *, title: TextType=None, help: bool=False,\n    methods: bool=False, docs: bool=True, private: bool=False, dunder: bool\n    =False, sort: bool=True, all: bool=True, value: bool=True) ->None:\n    self.highlighter = ReprHighlighter()\n    self.obj = obj\n    self.title = title or self._make_title(obj)\n    if all:\n        methods = private = dunder = True\n    self.help = help\n    self.methods = methods\n    self.docs = docs or help\n    self.private = private or dunder\n    self.dunder = dunder\n    self.sort = sort\n    self.value = value\n"
                    }
                ]
            ]
        },
        "rich-919__inspect-183": {
            "poetry run pytest tests/test_inspect.py::test_broken_call_attr": [
                [
                    {
                        "function_name": "test_broken_call_attr",
                        "function_content": "@skip_py36\n@skip_py37\ndef test_broken_call_attr():\n\n\n    class NotCallable:\n        __call__ = 5\n\n        def __repr__(self):\n            return 'NotCallable()'\n\n\n    class Foo:\n        foo = NotCallable()\n    foo = Foo()\n    assert callable(foo.foo)\n    expected = \"\"\"\u256d\u2500 <class 'tests.test_inspect.test_broken_call_attr.<locals>.Foo'> \u2500\u256e\n\u2502 foo = NotCallable()                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\"\"\"\n    result = render(foo, methods=True, width=100)\n    print(repr(result))\n    assert expected == result\n",
                        "function_parameter": "()",
                        "belong_class_content": null,
                        "belong_class_name": null,
                        "belong_class_init": null
                    }
                ]
            ]
        }
    },
    "salt": {},
    "sanic": {},
    "scikit-learn": {},
    "tornado": {}
}